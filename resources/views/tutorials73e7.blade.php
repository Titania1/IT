<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=no%20pusher%20tech&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:41:12 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="no pusher tech" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dash.pusher.com/no pusher tech" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=no%20pusher%20tech" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">116</span> tutorials for “<span class="css-npldjc ehwuahf2">no pusher tech</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials0be1.html?product=no%20pusher%20tech&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials9f36.html?product=no%20pusher%20tech&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsdfdb.html?product=no%20pusher%20tech&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials0e4c.html?product=no%20pusher%20tech&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials01a4.html?product=no%20pusher%20tech&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorialsc43b.html?product=no%20pusher%20tech&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials7632.html?product=no%20pusher%20tech&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials8e84.html?product=no%20pusher%20tech&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials6f6a.html?product=no%20pusher%20tech&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/callkit-ios-part-2.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement the CallKit extension for iOS - Part 2: CallKit extension</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial will show you how to use Apple&#x27;s CallKit to create an iOS app that you can use to add names and numbers to...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/callkit-ios-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement the CallKit extension for iOS - Part 1: User interface</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to use Apple&#x27;s CallKit to create an iOS app that you can use to add names and numbers to...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/error-handling-angular-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Introduction to error handling in Angular 7: Part 1 - Angular errorHandler</h3><p class="css-k12xad e5jrto45">This tutorial series will introduce you to errors in JavaScript and the try-catch concept. In part one, learn how the co...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/learning-graphql-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with GraphQL in React Native</h3><p class="css-k12xad e5jrto45">GraphQL makes it easier for developers to get the specific data we want with less code. In this tutorial you will learn ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/lifecycle-methods-react-16.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Lifecycle methods in React 16</h3><p class="css-k12xad e5jrto45">Gain an understanding of all the lifecycle methods in React Native 16, including the error boundaries methods. Learn whe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/vue-cli-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">New features in Vue CLI 3.0</h3><p class="css-k12xad e5jrto45">In this tutorial, learn about the new features shipping with Vue CLI 3.0. Understand the need for the new tool and the b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/node-command-line-app.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Understanding Node.js by building command line apps</h3><p class="css-k12xad e5jrto45">Use Node.js to build a command line application. Integrate the APIXU weather API, allowing users to get the current and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/youtube-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Youtube-integrated application using React Native</h3><p class="css-k12xad e5jrto45">Build a basic React Native app. Set up YouTube integration and pull in playlists from Rotten Tomatoes. This tutorial wil...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/accessible-react-fragments.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Writing accessible apps and efficient code with React fragments</h3><p class="css-k12xad e5jrto45">Learn how to handle nested HTML elements in React using fragments. Understand the benefits of fragments compared to othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials28be.html?product=no%20pusher%20tech&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials28be.html?product=no%20pusher%20tech&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials73e7.html?product=no%20pusher%20tech&amp;page=2" class="css-2wakph edg0byb1">2</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials833e.html?product=no%20pusher%20tech&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorials339a.html?product=no%20pusher%20tech&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials8a6d.html?product=no%20pusher%20tech&amp;page=13" class="css-5s6711 edg0byb1">13</a><a href="tutorials833e.html?product=no%20pusher%20tech&amp;page=3" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":116,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"32pX328VlWKs0hx7pybXo7","type":"Entry","createdAt":"2019-07-23T19:34:39.047Z","updatedAt":"2019-07-23T19:34:39.047Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement the CallKit extension for iOS - Part 2: CallKit extension","url":"callkit-ios-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2GvYfvJlzFPjwmlWvF5u9L","type":"Entry","createdAt":"2019-07-20T21:48:16.439Z","updatedAt":"2019-07-20T21:48:16.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Paul Wilkinson","url":"paul-wilkinson","email":"paulw@wilko.me","twitter":"https://twitter.com/PaulWilko","github":"https://github.com/paulw11","guestWriter":true}}],"projectRepo":"https://github.com/paulw11/CallKitTutorial","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-07-23","description":"This tutorial will show you how to use Apple's CallKit to create an iOS app that you can use to add names and numbers to a caller ID list, and add numbers to a block list. In part two, create the CallKit extension.\n","prerequisite":"You will need Xcode 10+ installed on your machine.","content":"## Introduction\n\nApple's CallKit framework for iOS is often used to create integrated VoIP apps for the iPhone.\nCallKit also lets you add numbers to the phone block list and Caller ID lists. This is the capability we will be exploring in this tutorial series.\n\nIn [part one](https://pusher.com/tutorials/callkit-ios-part-1) of this tutorial you created an iOS app that you can use to add names and numbers to a caller ID list and add numbers to a block list.\nIn this, the second part, you will create a CallKit extension that provides these lists to the iOS phone app.\n\nThe key concepts covered by this tutorial are:\n\n- Sharing Core Data between an iOS app and an iOS extension\n- Reloading a CallKit extension from an iOS app\n- Debugging an iOS app extension\n\n### Prerequisites\n\n- A Mac with Xcode 10\n- An iPhone (You cannot use the simulator to test CallKit extensions)\n- Familiarity with Xcode and storyboards\n- Familiarity with general UIKit programming\n\n## Building the App Extension\n\n### Getting Started\nStart by opening the `CallKitTutorial` project that you created in part one.\n\n1. Select the **File-\u003eNew-\u003eTarget...** menu item.\n2. Select **Call Directory Extension** from the available items and click **Next**\n3. Use  `CallKitTutorialExtension` for the name and click **Finish.**\n4. Activate the new scheme if prompted by Xcode.\n\n\n![callkit-extension-ios-part2-img1](//images.ctfassets.net/1es3ne0caaid/2UFkK5Enjlil3OQdow4gxT/c1f2ad34b2d828f6159f86ac4e1945bf/callkit-extension-ios-part2-img1.png)\n\n\nXcode has created a new folder, `CallKitTutorialExtension`, in the project navigator. Inside this folder you will see the file `CallDirectoryHandler.swift`. This file contains sample code that uses fixed strings to identify and block numbers. We will replace this with code that fetches numbers from the Core Data repository we created in part one.\n\nIn part one, we created the `CallerData` framework to hold the Core Data code. We need to add this framework to the `CallKitTutorial` extension.\n\n1. Select the blue `CallKitTutorial` project node at the top of the project navigator.\n2. Select the `CallKitTutorialExtension` target from the **TARGETS** list.\n3. Click the '+' sign under ***Linked Frameworks and Libraries****.*\n4. Select `CallerData.framework` from the pop up window.\n5. Click **Add**.\n\nWe also create an Application Group in part one. This lets the app and the extension share data. We need to allow the extension to access this Application Group:\n\n1. Select the CallKitTutorialExtension target\n2. Select the **Capabilities** tab\n3. Turn on the switch next to **App Groups**\n4. Select the app group you created in part one. It will end with `.CallKitTutorial` if you followed the suggestion in part one.\n\n### Extension operation\n\nOpen `CallDirectoryHandler.swift`. You will see that it subclasses the `[CXCallDirectoryProvider](https://developer.apple.com/documentation/callkit/cxcalldirectoryprovider)` class. This protocol defines all of the functions that a CallKit Directory extension needs to implement.\n\nYou might imagine that these functions would receive the number of an incoming call and return either identification or blocking information. This isn't, however, how the directory extension operates. Providing incoming call details to the extension would violate the user's privacy.\nThe directory extension actually provides identification and blocking data to iOS when requested. iOS incorporates this data into the phone application. It is the phone application that blocks or identifies callers.\n\niOS requests data from the extension when:\n\n- The phone starts up.\n- The extension is enabled in the Settings App.\n- The app that hosts the extension requests an extension reload\n\nWhen iOS requests data the following happens:\n\n1. The extension's `beginRequest` function is called. This function receives an instance of `CXCallDirectoryExtensionContext`\n2. The extension adds blocking and identification details by calling `addBlockingEntry` and `addIdentificationEntry` on the context\n3. The extension calls `completeRequest` on the context when it has finished adding entries.\n\n### Modify the template code\n\nThe first function you will see in `CallDirectoryHandler.swift` is `beginRequest`:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    override func beginRequest(with context: CXCallDirectoryExtensionContext) {\n        context.delegate = self\n    \n        // Check whether this is an \"incremental\" data request. If so, only provide the set of phone number blocking\n        // and identification entries which have been added or removed since the last time this extension's data was loaded.\n        // But the extension must still be prepared to provide the full set of data at any time, so add all blocking\n        // and identification phone numbers if the request is not incremental.\n        if context.isIncremental {\n            addOrRemoveIncrementalBlockingPhoneNumbers(to: context)\n    \n            addOrRemoveIncrementalIdentificationPhoneNumbers(to: context)\n        } else {\n            addAllBlockingPhoneNumbers(to: context)\n    \n            addAllIdentificationPhoneNumbers(to: context)\n        }\n    \n        context.completeRequest()\n    }\n```\n\nYou can see that iOS can request an *incremental* or *complete* update. The `isIncremental` property of the `context` indicates the type of update that iOS is requesting. To actually perform an incremental update, we need to know the date \u0026 time of the previous update. `UserDefaults` provides a convenient place to store this information.\n\nChange the function so that it looks like this:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    override func beginRequest(with context: CXCallDirectoryExtensionContext) {\n        context.delegate = self\n    \n        // Check whether this is an \"incremental\" data request. If so, only provide the set of phone number blocking\n        // and identification entries which have been added or removed since the last time this extension's data was loaded.\n        // But the extension must still be prepared to provide the full set of data at any time, so add all blocking\n        // and identification phone numbers if the request is not incremental.\n    \n        let defaults = UserDefaults.standard\n    \n        if let lastUpdate = defaults.object(forKey: \"lastUpdate\") as? Date, context.isIncremental {\n            addOrRemoveIncrementalBlockingPhoneNumbers(to: context, since: lastUpdate)\n    \n            addOrRemoveIncrementalIdentificationPhoneNumbers(to: context, since: lastUpdate)\n        } else {\n            addAllBlockingPhoneNumbers(to: context)\n    \n            addAllIdentificationPhoneNumbers(to: context)\n        }\n    \n        defaults.set(Date(), forKey:\"lastUpdate\")\n    \n        context.completeRequest()\n    }\n```\n\nNow the code only performs an incremental update if the last update time is available. Once the updates are complete, the time of this update is stored in `UserDefaults`.\nAdding the `since` parameter to `addOrRemoveIncrementalBlockingPhoneNumbers` and `addOrRemoveIncrementalIdentificationPhoneNumbers` will cause errors. Don't worry. We will fix that shortly.\n\nThe example code provided in the template uses fixed data. We want to get our data from the Core Data store we set up in part one. The `CallerData` framework already has the functions we need to do that.\n\nFirst, lets ensure we can access our `CallerData` framework and Core Data. Add:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    import CallerData\n    import CoreData\n```\n\nto the imports at the top of `CallDirectoryHandler.swift`. \n\nNow add a property and a function to the `CallDirectoryHandler` class:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    private let callerData = CallerData()\n    \n    private func callers(blocked: Bool, includeRemoved: Bool = false, since date: Date? = nil) throws -\u003e [Caller]  {\n        let fetchRequest:NSFetchRequest\u003cCaller\u003e = self.callerData.fetchRequest(blocked: blocked, includeRemoved: includeRemoved, since: date)\n        let callers = try self.callerData.context.fetch(fetchRequest)\n        return callers\n    }\n```\n\nThe `callerData` property provides an instance of the `CallerData` class that we created in part one. \nWe will use the `callers` function to fetch the data we will need.\n\nReplace `addAllBlockingPhoneNumbers` with the following:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    private func addAllBlockingPhoneNumbers(to context: CXCallDirectoryExtensionContext) {\n        if let callers = try? self.callers(blocked: true) {\n            for caller in callers {\n                context.addBlockingEntry(withNextSequentialPhoneNumber: caller.number)\n            }\n        }\n    }\n```\n\nThat was easy. Omitting the `includeRemoved` and `since` parameters from the call to `self.callers` means that code uses default values of `false` and `nil` from the function declaration, returning all numbers in the data store.\n\n\u003e Note the name of the parameter to `addBlockingEntry` - `withNextSequentialPhoneNumber`. You must provide numbers to CallKit in ascending order. There is a sort clause in the Core Data fetch that takes care of that for us. If you are writing your own extension make sure you sort your data.\n\nNext, replace the `addOrRemoveIncrementalBlockingPhoneNumbers` from the template with this code:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    private func addOrRemoveIncrementalBlockingPhoneNumbers(to context: CXCallDirectoryExtensionContext, since date: Date) {\n        if let callers = try? self.callers(blocked: true, includeRemoved: true, since: date) {\n            for caller in callers {\n                if caller.isRemoved {\n                    context.removeBlockingEntry(withPhoneNumber: caller.number)\n                } else {\n                    context.addBlockingEntry(withNextSequentialPhoneNumber: caller.number)\n                }\n            }\n        }\n    }\n```\n\nWe use the `since` date to identify changes that have occurred after the previous update. We also need to consider the case where a number was *unblocked* by removing it from the blocking list. The record's `isRemoved` property determines whether to add or remove the number.\n\nAdding identification entries is very similar; the only difference is that both a name and number are required.\n\nReplace `addAllIdentificationPhoneNumbers` and `addOrRemoveIncrementalIdentificationPhoneNumbers` with:\n```swift\n    // CallKitTutorialExtension/CallDirectoryHandler.swift\n    \n    private func addAllIdentificationPhoneNumbers(to context: CXCallDirectoryExtensionContext) {\n            if let callers = try? self.callers(blocked: false) {\n                for caller in callers {\n                    if let name = caller.name {\n                        context.addIdentificationEntry(withNextSequentialPhoneNumber: caller.number, label: name)\n                    }\n                }\n            }\n        }\n    \n    private func addOrRemoveIncrementalIdentificationPhoneNumbers(to context: CXCallDirectoryExtensionContext, since date: Date) {\n        if let callers = try? self.callers(blocked: false, includeRemoved: true, since: date) {\n            for caller in callers {\n                if caller.isRemoved {\n                    context.removeIdentificationEntry(withPhoneNumber: caller.number)\n                } else {\n                    if let name = caller.name {\n                        context.addIdentificationEntry(withNextSequentialPhoneNumber: caller.number, label: name)\n                    }\n                }\n            }\n        }\n    }\n```\n\nWe are almost ready to run the app. The last thing we need to provide a method for the main app to trigger the `beginRequest` function in the CallKit extension.  We can’t do this directly due to the iOS sandbox.  Rather, we must submit a request to iOS, asking it to notify the extension that there is new data.  We can use `[CXCallDirectoryManager](https://developer.apple.com/documentation/callkit/cxcalldirectorymanager)` [](https://developer.apple.com/documentation/callkit/cxcalldirectorymanager)to do this.\n\nOpen the `ViewController.swift` file from part 1 and find the `reloadTapped` function. Add the code to tell the extension that there is changed data:\n```swift\n    // CallKitTutorial/ViewController.swift \n    \n    @IBAction func reloadTapped(_ sender: UIButton) {\n        CXCallDirectoryManager.sharedInstance.reloadExtension(withIdentifier: \"me.wilko.CallKitTutorial.CallKitTutorialExtension\", completionHandler: { (error) in\n            if let error = error {\n                print(\"Error reloading extension: \\(error.localizedDescription)\")\n            }\n        })\n    }\n```\nYou will need to change the string in `reloadExtension(withIdentifier:)` to the bundle id for your extension. You can find this in the settings for the `CallKitTutorialExtension` target in Xcode.\n\nOpen the `Main.storyboard` file and select the `Reload extension` button. Drag from **touch up inside** in the connections inspector to the view controller object and select `reloadTapped` from the popup. This will call the `reloadTapped` function when the user taps on the button.\n\n### Ready to run\n\nWe can now run the app. Select `CallKitTutorial` from the scheme drop down at the top of the Xcode window and hit the \"play\" button. Make sure that you have selected your iPhone from the device drop down. Hit the \"+\" sign and add an entry for a number from which you can make a call. Make sure you use the full 'e.164' number format as discussed in part one.\n\n\n\u003e **Note**: Your phone's contacts will override a CallKit extension. If the calling number matches an entry in your contacts then the phone shows that name. The phone blocks a number in the block list even if you have a matching contact.\n\n### Enable the extension\n\nInstalling the app on your phone also installed the CallKit extension, but it won't do anything until you enable it.\n\nOpen the *Settings* application and find *Call blocking and identification* under *Phone*.  You will see a switch next to “CallKitTutorial”.  Turn it on to enable your extension.\n\nNow call your iPhone. You should see the name you entered as the caller identification, along with an indication that the name came from our app.\n\nOpen the CallKit Tutorial app again. Remove the number from the **ID** list and add it to the **Block** list. Tap the **Reload extension** button.\n\nNow call your iPhone again. This time your call should go straight to voicemail (or you may get a busy tone - it depends on what call forwarding you have enabled on your service).\nCongratulations; you have created a working CallKit directory extension!\n\n### Debugging the extension\n\nThe Xcode debugger is a powerful tool that lets you examine your code in operation. You may have used it to debug your apps. You can also use it to debug extensions. The process is a little different to debugging an app as you don't directly launch an extension.\n\nOpen `CallDirectoryHandler.swift` and click in the margin next to the first line in the `beginRequest` function. The blue flag indicates that a *breakpoint* has been set. When execution reaches this line, program execution will be suspended and Xcode will enter the debugger.\n\n\n![callkit-extension-ios-part2-img2](//images.ctfassets.net/1es3ne0caaid/7Dyz64sPnuaT0sJ89bdzXy/5a6dbffe998376edfa91114ef34efec8/callkit-extension-ios-part2-img2.png)\n\n\nOnce you have set the breakpoint you need to run your code. Select *CallKitTutorialExtension* and your device in the target drop down. Hit the **play** button to launch your code as usual. At this point you will see something different. Xcode will ask which app you want to launch as you can't run the extension itself.\n\n\n![callkit-extension-ios-part2-img3](//images.ctfassets.net/1es3ne0caaid/5nG8hxIfcJFp68uT48u3hA/a963eece8d630c11c11fcea1ca48b44a/callkit-extension-ios-part2-img3.png)\n\n\nSelect **CallKitTutorial** and tap **Run**.\n\nOnce the app has launched on your phone, tap the **Reload extension** button. After a few seconds the Xcode debugger will open with the line where we added the breakpoint selected. You can step through the code and examine variables to observe how the extension operates.\n\nFor example, we can determine if this is an incremental update request or not. At the green *(lldb)* prompt in the bottom right window, enter the command `po context.isIncremental` and press return. The debugger will show the value of this variable, either `true` or `false`.\n\n\u003e The `po` command is an alias for the `expression` command (type `help po` at the (lldb) prompt for more information). In this case we used it to evaluate a property value, but it can evaluate more complex expressions. For example, entering `po if context.isIncremental { print(\"Is incremental\")}` will print Is incremental if `isIncremental` is `true`.\n\nUse the **step over** and **step into** buttons to execute your extension code one line at a time and observe how it works.\n\n## Conclusion\n\nIn this tutorial we have created a CallKit extension that uses shared Core Data to identify and block callers.\n\n- We added an app extension to an existing iOS app.\n- We re-used the Core Data framework that we created in part one.\n- We explored debugging app extensions using the Xcode debugger.\n\nThe completed code for parts one and two of this tutorial series is [available on GitHub](https://github.com/paulw11/CallKitTutorial).","metaTitle":"Implement the CallKit extension for iOS - Part 2","metaDescription":"This tutorial will show you how to use Apple's CallKit to create an iOS app that you can use to add names and numbers to a caller ID list, and add numbers to a block list. In part two, create the CallKit extenstion.\n"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3juxmThJAXDQ7zLXiMlFar","type":"Entry","createdAt":"2019-07-20T21:49:02.706Z","updatedAt":"2019-07-20T21:49:02.706Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement the CallKit extension for iOS - Part 1: User interface","url":"callkit-ios-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2GvYfvJlzFPjwmlWvF5u9L","type":"Entry","createdAt":"2019-07-20T21:48:16.439Z","updatedAt":"2019-07-20T21:48:16.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Paul Wilkinson","url":"paul-wilkinson","email":"paulw@wilko.me","twitter":"https://twitter.com/PaulWilko","github":"https://github.com/paulw11","guestWriter":true}}],"projectRepo":"https://github.com/paulw11/CallKitTutorial","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-07-20","description":"This tutorial will show you how to use Apple's CallKit to create an iOS app that you can use to add names and numbers to a caller ID list, and add numbers to a block list. In part one we will build the user interface.\n","prerequisite":"You will need Xcode 10+ installed on your machine.","content":"## Introduction\n\nApple's [CallKit framework](https://developer.apple.com/documentation/callkit) for iOS is often used to create integrated VoIP apps for the iPhone.\nCallKit also lets you add numbers to the phone block list and Caller ID lists. This is the capability we will be exploring in this tutorial series.\n\nIn this tutorial you will create an iOS app that you can use to add names and numbers to a caller ID list and add numbers to a block list.\n\nIn the [second part](https://pusher.com/tutorials/callkit-ios-part-2) you will create a CallKit extension that provides these lists to the iOS phone app.\n\nThe key concepts covered by this tutorial are:\n\n- Sharing Core Data between an iOS app and an iOS extension\n- Reloading a CallKit extension from an iOS app\n- Debugging an iOS app extension\n\n### Prerequisites\n\n- A Mac with Xcode 10\n- An iPhone (You cannot use the simulator to test CallKit extensions)\n- Familiarity with Xcode and storyboards\n- Familiarity with general UIKit programming\n\n## Building the App\n\n### Getting Started\nStart by opening Xcode and creating a new iOS Single View application and naming it CallKitTutorial. Make sure you select **Swift** as the language and that you tick **Use Core Data**.\n\nThe app has a simple user interface. It has a table view that lists the numbers that we want to identify and to block.\n\n![callkit-extension-ios-img1](//images.ctfassets.net/1es3ne0caaid/3OhdVDh1Ztj3L1YYn2DgHQ/41091087f9fe4cfb25c185715b542bf4/callkit-extension-ios-img1.png)\n\n\n### Setting the scene\n\nOpen the `Main.Storyboard` file and select the view controller. From the **Editor** menu select **Embed In-\u003eNavigation Controller**. This will add a navigation bar to the top of the scene.\n\n\n\u003e You can downloaded a [completed storyboard file](https://github.com/paulw11/CallKitTutorial/blob/master/CallKitTutorial/Base.lproj/Main.storyboard) from this tutorial’s [GitHub repository](https://github.com/paulw11/CallKitTutorial).\n\nNow, let's add a segmented control to the navigation bar. This will select between the *ID* and *Block* lists.\n\n1. Drag a **Segmented Control** to the middle of the navigation bar in the View Controller scene.\n2. A blue outline will appear. Drop the segmented control and it will appear in the navigation bar.\n3. Select the Segmented Control. Using the property inspector, change the title of the first segment to \"ID\" and the second segment to \"Block\".\n\nNext, we will add the \"+\" button to the right hand side of the navigation bar:\n\n1. Drag a **Bar Button Item** from the object library and drop it on the right hand side of the navigation bar\n2. Using the property inspector, change the bar button's **System Item** to **Add**\n\nWe need a button to refresh the CallKit extension:\n\n1. Drag a **Button** from the object library and drop it near the bottom, center of the scene.\n2. Select the button.\n3. Use the **Add New Constraints** button (|⁃◻︎⁃|) to add a constraint between the bottom of the button and the nearest neighbor, which is the main view for the scene.\n4. Set the value to 8.\n5. Use the **Add New Alignment Constraint** button |⊟ to add a \"Horizontally in container\" constraint\n6. Change the button's title to \"Reload extension\"\n\nThe final item we need in this scene is a table view that will display the numbers:\n\n1. Drag a Table View from the object library to the center of the scene.\n2. Use the **Add New Constraints** button (|⁃◻︎⁃|) to add constraints with a value of **0** on the top, left and right and **12** to the bottom.\n\n\n![callkit-extension-ios-img2](//images.ctfassets.net/1es3ne0caaid/1UgEQ1yfpyCtdEj1IsieJp/6911a828bb94724d9177e1ccac158ef7/callkit-extension-ios-img2.png)\n\n\nThe table view needs a cell to display names and numbers.\nSelect the table view and use the property inspector to add and configure a prototype cell:\n\n1. Use the properties inspector to set the number of **Prototype Cells** to 1.\n2. Select the added cell and set its style to **Subtitle**\n3. Set the cell's **Reuse Identifier** to **CallerCell**\n\n### Making connections\n\nWe need to connect the items in the view controller scene to the view controller code. Open `ViewController.swift`. Add properties for the table view \u0026 the segmented control and set the `datasource` and `delegate` for our table view:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n      @IBOutlet weak var callerType: UISegmentedControl!\n      @IBOutlet weak var tableView: UITableView!\n    \n      override func viewDidLoad() {\n        super.viewDidLoad()\n        self.tableView.dataSource = self\n        self.tableView.delegate = self\n        self.loadData()\n      }\n```\n\nSwitch back to the `Main.storyboard` and use the **Connections inspector** to connect from **new referencing outlet** to the **View Controller**:\n\n1. Connect the table view to the `tableView` outlet.\n2. Connect the segmented control to the `callerType` outlet.\n\nIf you run your app at this point you should see something like the screen shot above.\n\n###Core Data\n\nWhile it is tempting to think of Core Data as a database, it is actually an object persistence system. A *persistent store* saves these objects. The most frequently used persistent store type is an SQLite database.\n\nIn Swift you can create objects and those objects can hold values in their properties. Those values can be simple, such as integers or strings, or they can be a reference to other objects. Core Data is very similar.\n\nIn Core Data you define *entities*, rather that object classes. Entities have *attributes* rather than properties. Xcode creates Swift code that defines objects with properties that correspond to your entities and attributes.\n\nOur application needs to store a list of numbers. They might be numbers we want to block, or numbers we want to identify. Numbers we want to identify need an associated name. We will track number update and deletion to provide changes to the CallKit extension.\n\n| Attribute   | Type       | Notes                                                                 |\n| ----------- | ---------- | --------------------------------------------------------------------- |\n| isBlocked   | Boolean    | true if this number is on the \"block\" list                            |\n| isRemoved   | Boolean    | true if this number has been removed from its list                    |\n| name        | String     | The name associated with the number (if it isn't on the \"block\" list) |\n| number      | Integer 64 | The phone number                                                      |\n| updatedDate | Date       | The updated date/time for the entry                                   |\n\n\n\n\u003e **Phone number formats:** You may be wondering why `number` is a 64-bit integer and not, say, a string. There are lots of different ways to represent a phone number. Local, national, international: \"8123-1234\", \"(02) 8123-1234\" and \"+61 2 8123-1234\" are all different ways of writing the same phone number. The last form is [e.164](https://en.wikipedia.org/wiki/E.164). If you strip away the formatting (+, - and spaces) you get a string of digits \"61281231234\". These digits can be stored as an integer. The largest value of a 64-bit integer is 9,223,372,036,854,775,807. That is enough to store any current phone number.\n\nSelecting **Use Core Data** when we created the app caused Xcode to create an empty data model, `CallKitTutorial.xcdatamodeld`, and add Core Data code to the `AppDelegate.swift` file.\n\nWe need to add an entity and some attributes to the Core Data model.\n\n1. Open the `CallKitTutorial.xcdatamodeld` file.\n2. Click **Add Entity**\n3. Change the entity name to `Caller`\n4. Click the \"+\" sign under the attribute list to add a new attribute\n5. Change the attribute name to `isBlocked` and set the type to `Boolean`\n6. Add another attribute `isRemoved`, type `Boolean`\n7. Add `name`, type `String`\n8. Add `number` type `Integer 64`\n9. Add `updatedDate` type `Date`\n\nYour Core Data model should now look like this:\n\n![callkit-extension-ios-img3](//images.ctfassets.net/1es3ne0caaid/4HeriYMzTvH7BEqhzL7sxj/fc28eec28932b925660e1dca3ad00d89/callkit-extension-ios-img3.png)\n\nThe Single View App template puts the Core Data code into the `AppDelegate.swift` file. This is OK for a stand-alone app, but we are going to need Core Data code in our app and in the CallKit extension.\n\nWe will create a Framework to hold the Core Data code. This will make it easier to share code between the app and the extension.\n\n1. Select File-\u003eNew-\u003eTarget...\n2. Scroll to the bottom of the new target window and select **Cocoa Touch Framework**\n3. Name it `CallerData`\n\nYou will see a new folder, `CallerData` in the project navigator. Let's move our Core Data model into the new framework.\n\n1. Drag the `CallKitTutorial.xcdatamodeld` file into the `CallerData` folder in the project navigator pane.\n2. Select the data model file. Use the checkboxes to change its **Target Membership**, in the file properties pane, from **CallKitTutorial** to **CallerData**.\n\n\n![callkit-extension-ios-img4](//images.ctfassets.net/1es3ne0caaid/6OkVFQKly7zbTAanVeaHZg/b841f93d35d2fc2001e9fc873b228ef4/callkit-extension-ios-img4.png)\n\nWe will need a file in the framework to hold our Core Data code. Press ⌘-N to create a new file.  Select **Swift File** and name it `CallerData.swift`.  Make sure that it is being added to the **CallerData** framework target.\n\nOpen this new file and add the following lines to import Core Data and add a class declaration:\n\n```swift\n    // CallerData/CallerData.swift\n    \n    import Foundation\n    import CoreData\n    \n    public final class CallerData {\n    \n        public init() {\n    \n        }\n    }\n```\n\nIf you open the `AppDelegate.swift` file and look for the Core Data stack section. You will see a declaration for a variable named `persistentContainer` and a function `saveContext`. It will look like this:\n\n```swift\n    // CallKitTutorial/AppDelegate.swift\n    \n    // MARK: - Core Data stack\n    \n      lazy var persistentContainer: NSPersistentContainer = {\n    \n          let container = NSPersistentContainer(name: \"CallKitTutorial\")\n          container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n              if let error = error as NSError? {\n                  fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n              }\n          })\n          return container\n      }()\n    \n      // MARK: - Core Data Saving support\n    \n      func saveContext () {\n          let context = persistentContainer.viewContext\n          if context.hasChanges {\n              do {\n                  try context.save()\n              } catch {\n                  let nserror = error as NSError\n                  fatalError(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")\n              }\n          }\n      }\n```\n\n1. Select that text (be careful not to select the last } in the file) and cut it to the clipboard\n2. Open `CallerData.swift` and paste the code in after the `init` function.\n3. Change the `applicationWillTerminate` function in `AppDelegate.swift` to remove the line `self.saveContext()`\n\n\n\u003e **Note:**  The `saveContext` function needs to be declared as `public` to ensure that we can still call it from our app after moving it into the `CallerData` framework.  Simply add the `public` modifier as you see below\n\n`CallerData.swift` should now look like:\n\n```swift\n    // CallerData/CallerData.swift\n    \n    import Foundation\n    import CoreData\n    \n    public final class CallerData {\n    \n        public init() {\n    \n        }\n    \n        // MARK: - Core Data stack\n    \n        lazy var persistentContainer: NSPersistentContainer = {\n    \n            let container = NSPersistentContainer(name: \"CallKitTutorial\")\n            container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n                if let error = error as NSError? {\n                    fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n                }\n            })\n            return container\n        }()\n    \n        // MARK: - Core Data Saving support\n    \n        public func saveContext () {\n            let context = persistentContainer.viewContext\n            if context.hasChanges {\n                do {\n                    try context.save()\n                } catch {\n                    let nserror = error as NSError\n                    fatalError(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")\n                }\n            }\n        }\n    \n    }\n```\n\n### Playing outside the sandbox\n\nApps on iOS run inside a sandbox. This is a limited environment that ensures an app can only access its own data. It is an important part of iOS security.\n\nUsually, the sandbox isn't a problem. Your app only needs to access its own data or system data (such as contacts or photos) with the user's permission. For this app, we need to share data with our CallKit extension. Even though you are creating both the app and the extension, they each have their own sandbox.\n\nIt turns out that iOS provides a solution for this problem; App Groups. Apps (and extensions) that are signed by the same developer team can use an App Group to share files and KeyChain items securely.\n\nWe will need to set up an App Group for our project. The first step is to enable the *App Groups* capability.  To do this, select the top-level project item (CallKitTutorial) in the project navigator and then select the CallKitTutorial target.  Turn on the switch next to **App Groups** in the **Capabilities** tab.\n\nXcode will update your application provisioning profile to add the App Group entitlement. Once complete, you will see three ticks under **Steps**.\n\nWe now need to add an App Group that the app and the extension will share. App group names must be unique and start with \"group.\". Apple recommends adopting a reverse domain name style, as with app bundle IDs.  Use something like `group.com.mydomain.CallKitTutorial`.\n\n1. Click the + sign under \"App Groups\"\n2. Enter your App Group name in the dialog box\n3. Click \"OK\"\n\nOnce again, you will see Xcode updating your provisioning profile. If you haven't chosen a unique name, you will get an error. Uncheck the group with the error and try again with a different name.\nNow that we have associated our app with the App Group, the Core Data code that Xcode added for us needs to change to use it.\n\nChange the `persistentContainer` variable declaration in `CallerData.swift` to:\n\n```swift\n    // CallerData/CallerData.Swift\n    \n    lazy var persistentContainer: NSPersistentContainer = {\n        let momdName = \"CallKitTutorial\"\n        let groupName = \"YOUR_APP_GROUP_NAME\"\n        let fileName = \"demo.sqlite\"\n    \n        guard let modelURL = Bundle(for: type(of: self)).url(forResource: momdName, withExtension:\"momd\") else {\n            fatalError(\"Error loading model from bundle\")\n        }\n    \n        guard let mom = NSManagedObjectModel(contentsOf: modelURL) else {\n            fatalError(\"Error initializing mom from: \\(modelURL)\")\n        }\n    \n        guard let baseURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: groupName) else {\n            fatalError(\"Error creating base URL for \\(groupName)\")\n        }\n    \n        let storeUrl = baseURL.appendingPathComponent(fileName)\n    \n        let container = NSPersistentContainer(name: momdName, managedObjectModel: mom)\n    \n        let description = NSPersistentStoreDescription()\n    \n        description.url = storeUrl\n    \n        container.persistentStoreDescriptions = [description]\n    \n        container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n            if let error = error as NSError? {\n                fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n            }\n        })\n        return container\n    }()\n```\n\n\u003e **Tip:** Make sure you change the `groupName` value to match the group you created earlier.\n\nThis purpose of this code is to:\n\n- Get the URL for the Core Data model from the application bundle.\n- Initialize an instance of `NSManagedObjectModel` using the model.\n- Get a URL that refers to the container for our application group. This is a directory that is accessible to the apps that share access to the application group.\n- Append a filename to this directory. This filename will be hold the sqlite database used by the Core Data store.\n- Create an `NSPersistentContainer` that uses the managed object model\n- Create an `NSPersistentStoreDescription` that uses the application group file.\n- Tell the container to use persistent store description.\n- And finally, load the persistent store.\n\n### Putting things into context\n\nWhen working with Core Data, you frequently need access to the relevant `NSManagedObjectContext`. The managed object context we will need can be retrieved through the `viewContext` property of the `persistentContainer`. To make this a bit easier, we will add a computed variable to `CallerData.swift` that provides access to this property:\n\n```swift\n    public var context: NSManagedObjectContext {\n      return self.persistentContainer.viewContext\n    }\n```\n\n### Fetching results\n\nIt is quite common to use table views and Core Data together. Apple has provided an object that helps with this task; The `NSFetchedResultsController`.\n\nYou provide the controller with an `NSFetchRequest` that retrieves the data you need.\n\nThe controller calls its `delegate` with results that initially match the query and when the set of results changes. This makes it easy to update the tableview as items are inserted and deleted in Core Data.\n\nFor our application we will need two sets of results; Numbers to block and numbers to identify. Let's add a function to `CallData.swift` that will return a `NSFetchedRequest` for either of these lists. We will also include options for a \"since\" date and whether to include \"removed\" items. We will use these later in the CallKit extension.\n\nAdd the following function to `CallerData.swift`:\n\n```swift\n    // CallerData/CallerData.swift\n    \n    public func fetchRequest(blocked: Bool, includeRemoved: Bool = false, since date: Date? = nil) -\u003e NSFetchRequest\u003cCaller\u003e {\n      let fr: NSFetchRequest\u003cCaller\u003e = Caller.fetchRequest()\n      var predicates = [NSPredicate]()\n    \n      let blockedPredicate = NSPredicate(format:\"isBlocked == %@\",NSNumber(value:blocked))\n      predicates.append(blockedPredicate)\n    \n      if !includeRemoved {\n          let removedPredicate = NSPredicate(format:\"isRemoved == %@\",NSNumber(value:false))\n          predicates.append(removedPredicate)\n      }\n    \n      if let dateFrom = date {\n          let datePredicate = NSPredicate(format:\"updatedDate \u003e %@\", dateFrom as NSDate)\n          predicates.append(datePredicate)\n      }\n    \n      let predicate = NSCompoundPredicate(andPredicateWithSubpredicates: predicates)\n      fr.predicate = predicate\n      fr.sortDescriptors = [NSSortDescriptor(key: \"number\", ascending: true)]\n      return fr\n    }\n```\n\nThe function creates several predicates:\n\n- One to select either blocked or non-blocked numbers.\n- One to filter removed numbers if `includeRemoved` is `false`\n- One to return records only after any specified date\n\nThese predicates are then combined using an `and` condition using `NSCompoundPredicate(andPredicateWithSubpredicates: predicates)` and applied to the `NSFetchRequest`. The fetched objects will be sorted in ascending order of `number`.\n\nThe final `CallerData.swift` should look like this:\n\n```swift\n    // CallerData/CallerData.swift\n    \n    import Foundation\n    import CoreData\n    \n    public final class CallerData {\n      public init() {\n      }\n    \n      // MARK: - Core Data stack\n    \n      lazy var persistentContainer: NSPersistentContainer = {\n          let momdName = \"CallKitTutorial\"\n          let groupName = \"group.me.wilko.CallKitTutorial\"\n          let fileName = \"demo.sqlite\"\n    \n          guard let modelURL = Bundle(for: type(of: self)).url(forResource: momdName, withExtension:\"momd\") else {\n              fatalError(\"Error loading model from bundle\")\n          }\n    \n          guard let mom = NSManagedObjectModel(contentsOf: modelURL) else {\n              fatalError(\"Error initializing mom from: \\(modelURL)\")\n          }\n    \n          guard let baseURL = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: groupName) else {\n              fatalError(\"Error creating base URL for \\(groupName)\")\n          }\n    \n          let storeUrl = baseURL.appendingPathComponent(fileName)\n    \n          let container = NSPersistentContainer(name: momdName, managedObjectModel: mom)\n    \n          let description = NSPersistentStoreDescription()\n    \n          description.url = storeUrl\n    \n          container.persistentStoreDescriptions = [description]\n    \n          container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n              if let error = error as NSError? {\n                  fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n              }\n          })\n    \n          return container\n      }()\n    \n      public var context: NSManagedObjectContext {\n          return self.persistentContainer.viewContext\n      }\n    \n      public func saveContext () {\n          let context = persistentContainer.viewContext\n          if context.hasChanges {\n              do {\n                  try context.save()\n              } catch {\n                  let nserror = error as NSError\n                  fatalError(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")\n              }\n          }\n      }\n    \n      public func fetchRequest(blocked: Bool, includeRemoved: Bool = false, since date: Date? = nil) -\u003e NSFetchRequest\u003cCaller\u003e {\n          let fr: NSFetchRequest\u003cCaller\u003e = Caller.fetchRequest()\n          var predicates = [NSPredicate]()\n          let blockedPredicate = NSPredicate(format:\"isBlocked == %@\",NSNumber(value:blocked))\n          predicates.append(blockedPredicate)\n    \n          if !includeRemoved {\n              let removedPredicate = NSPredicate(format:\"isRemoved == %@\",NSNumber(value:false))\n              predicates.append(removedPredicate)\n          }\n    \n          if let dateFrom = date {\n              let datePredicate = NSPredicate(format:\"updatedDate \u003e %@\", dateFrom as NSDate)\n              predicates.append(datePredicate)\n          }\n    \n          let predicate = NSCompoundPredicate(andPredicateWithSubpredicates: predicates)\n          fr.predicate = predicate\n    \n          fr.sortDescriptors = [NSSortDescriptor(key: \"number\", ascending: true)]\n          return fr\n      }\n    }\n```\n\n### Adding data to the view\n\nNow we are ready to connect the data to the view controller.\nOpen `CallKitTutorial/ViewController.swift` and add the following imports to the top of the file:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    import CoreData\n    import CallKit\n    import CallerData\n```\n\nThese lines tell the compiler that we are going to use the `CoreData` \u0026 `CallKit` frameworks as well as our own `CallerData` framework.\nWe need to add some more properties to the view controller code:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    private var showBlocked: Bool {\n        return self.callerType.selectedSegmentIndex == 1\n    }\n    \n    lazy private var callerData = CallerData()\n    private var resultsController: NSFetchedResultsController\u003cCaller\u003e!\n```\n\n- The first is a computed variable that returns `true` if the segmented control has \"Blocked\" (item 1) selected.\n- The second is an instance of our `CallerData` object that we use to interact with CoreData. It is `lazy`, which means that it won't be created until the first time it is used.\n- The final property is the `NSFetchedResultsController` that provides the data for the table view. It is an implicitly unwrapped optional (`!`) so it must be assigned a value before it is referenced or the app will crash.\n\nLet's add code to do that:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.tableView.dataSource = self\n        self.tableView.delegate = self\n        self.loadData()\n    }\n    private func loadData() {\n        self.navigationItem.title = self.showBlocked ? \"Blocked\":\"ID\"\n    \n        let fetchRequest:NSFetchRequest\u003cCaller\u003e = self.callerData.fetchRequest(blocked: self.showBlocked)\n    \n        self.resultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: self.callerData.context, sectionNameKeyPath: nil, cacheName: nil)\n        self.resultsController.delegate = self\n        do {\n            try self.resultsController.performFetch()\n            self.tableView.reloadData()\n        } catch {\n            print(\"Failed to fetch data: \\(error.localizedDescription)\")\n        }\n    }\n    \n    @IBAction func callerTypeChanged(_ sender: UISegmentedControl) {\n        self.loadData()\n    }\n    \n    @IBAction func unwindFromSave(_ sender: UIStoryboardSegue) {\n    }\n```\n\nThis adds a function, `loadData`, that creates an `NSFetchedResultsController` to get the data we need and reload the table view. You can see how the `showBlocked` variable provides a convenient shortcut to the segmented control’s value.\n\nThe `loadData` function is called when the view controller is loaded and when the segmented control’s value is changed.  The `callerTypeChanged` function handles this second case.\n\nThe Add/Edit scene, that we will add shortly, will use the `unwindFromSave` function and we will use the `reloadTapped` function in part two of this tutorial.\n\nDon’t panic if you see an error on the line `self.resultsController.delegate = self`. We will fix this shortly.\n\n### Laying it on the table\n\nHaving fetched the data, we want to display it in the table view. To do that we need to implement the `UITableViewDataSource` protocol.\n\nScroll to the bottom of `ViewController.swift` and add the following lines:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    extension ViewController: UITableViewDataSource, UITableViewDelegate {\n        func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return self.resultsController.sections?.count ?? 0\n        }\n    \n        func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return self.resultsController.fetchedObjects?.count ?? 0\n        }\n    \n        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"CallerCell\", for: indexPath)\n            let caller = self.resultsController.fetchedObjects![indexPath.row]\n    \n            cell.textLabel?.text = caller.isBlocked ? String(caller.number) : caller.name ?? \"\"\n            cell.detailTextLabel?.text = caller.isBlocked ? \"\" : String(caller.number)\n    \n            return cell\n        }\n    \n         func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n            switch editingStyle {\n            case .delete:\n                if let caller = self.resultsController.fetchedObjects?[indexPath.row] {\n                    caller.isRemoved = true\n                    caller.updatedDate = Date()\n                    self.callerData.saveContext()\n                }\n            default:\n                break\n            }\n        }\n    }\n```\n\nThis adds an *extension* to the `ViewController` class that tells the compiler that it conforms to the `UITableViewDataSource` and `UITableViewDelegate` protocols.\n\nThere are three functions that provide the data to the table through the `UITableViewDataSource` protocol:\n\n1. `numberOfSections` - This returns the number of sections from the fetched results controller or 0 if there are no sections. We will have 1 section.\n2. `numberOfRowsInSection` - This returns the number of rows in the tableview. This is either the number of objects fetched or 0 if there are none.\n3. `cellForRowAt` - This returns a table view cell for the nominated row. We retrieve a cell and a `Caller` object from the results. If blocked numbers are being shown then we show the number. If identification numbers are being shown we show the name and the number.\n\nThe final function is part of the `UITableViewDelegate` protocol. The table view calls this function when the user performs when an editing operation on the table. The only editing operation we want to support is the `delete` operation. This operation results from the user swiping left on the table row and tapping the **delete** button.\n\nWhen this happens the `isRemoved` property is set to `true`, the `updatedDate` property is set to the current date \u0026 time and the updated `Caller` object is saved.\n\n\u003e **Why isn't the Caller simply deleted?** We will see later that the CallKit extension can process incremental updates. To do this, the data needs to hold transactions rather than only the current records.\n\n### Fetched results delegate\n\nThe `NSFetchedResultsController` makes it easy to react to changes in the set of fetched objects. Whenever there is an update to an object that matches the query, the controller calls its `delegate` to provide details of the event.\n\nAdd another extension to implement the `NSFetchedResultsControllerDelegate`:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    extension ViewController: NSFetchedResultsControllerDelegate {\n    \n        // 1. Changes are coming from the NSFetchedResultsController`\n        func controllerWillChangeContent(_ controller: NSFetchedResultsController\u003cNSFetchRequestResult\u003e) {\n            self.tableView.beginUpdates()\n        }\n    \n        // 2. Process a change...\n        func controller(_ controller: NSFetchedResultsController\u003cNSFetchRequestResult\u003e, didChange anObject: Any, at indexPath: IndexPath?, for type: NSFetchedResultsChangeType, newIndexPath: IndexPath?) {\n    \n            let newIndexPath: IndexPath? = newIndexPath != nil ? IndexPath(row: newIndexPath!.row, section: 0) : nil\n            let currentIndexPath: IndexPath? = indexPath != nil ? IndexPath(row: indexPath!.row, section: 0) : nil\n    \n            switch type {\n            case .insert:\n                self.tableView.insertRows(at: [newIndexPath!], with: .automatic)\n    \n            case .delete:\n                self.tableView.deleteRows(at: [currentIndexPath!], with: .fade)\n    \n            case .move:\n                self.tableView.moveRow(at: currentIndexPath!, to: newIndexPath!)\n    \n            case .update:\n                self.tableView.reloadRows(at: [currentIndexPath!], with: .automatic)\n    \n            @unknown default:\n                fatalError()\n            }\n        }\n    \n        //3.  All changes have been delivered\n        func controllerDidChangeContent(_ controller: NSFetchedResultsController\u003cNSFetchRequestResult\u003e) {\n            self.tableView.endUpdates()\n        }\n    }\n```\n\nThere are three functions in this extension:\n\n1. `controllerWillChangeContent` - This is called prior to one or more updates being delivered to the delegate. Our code tells the tableview that updates are coming. The tableview will hold any visual updates until a subsequent call to `endUpdates`\n2. `didChange` - This is called when the result objects change. There are four possible updates:\n    - `insert` - A new object has been inserted into the results. We tell the table view about this by calling `insertRows`.\n    - `delete` - An object has been removed from the results. We tell the table view about this by calling `deleteRows`.\n    - `move` - An object has been moved up or down the list. We tell the table view about this by calling `moveRow`.\n    - `update` - An object has been updated. We ask the table view to reload the relevant row so that the new data is shown.\n3. `controllerDidChangeContent` - This is called after all updates have been delivered to `didChange`. Our code tells the table view that updates are now complete and it can perform any required visual updates (inserting, removing or reloading rows).\n\n### Adding data\n\nIf you run the app now, you will be able to select between the two number lists, but there is no data to display. Let's make that \"+\" do something.\n\nFirst, let's prepare our existing view controller:\n\n1. Open the `Main.storyboard` file\n2. Select the segmented control.\n3. Using the *Connections Inspector*, make a connection between \"Value Changed\" and the `callerTypeChanged` function.\n4. Drag a *View Controller* from the object library.\n5. Click on the \"+\" button in the navigation bar of the first scene and, while holding *ctrl*, drag a connection to the new view controller.\n6. When you release the mouse select \"Show\" from the popup menu.\n7. Select the new segue object between the two scenes and set its *identifier* to \"addCaller\"\n8. Click on the *Caller Cell* item in the first scene's object list.\n9. *ctrl*-drag to the second scene and select \"show\" from the popup menu.\n10. Again, select the new segue object between the two scenes and set its *identifier* to \"editCaller\"\n\nNow we need to add some controls to the new View Controller so that we can enter and save data.\n\n1. Drag a \"Navigation Item\" from the object library to the new view controller.\n2. Drag a \"Bar Button Item\" to the right hand side of the navigation bar.\n3. Change the button's \"System Item\" to \"Save\" in the attribute inspector\n4. *ctrl-drag* from the yellow \"View Controller\" icon at the top of the scene to the \"Exit icon\" and select **unwindFromSave** from the popup.\n5. Select the new **Unwind segue** from the left hand object navigator and set its identifier to \"unwindFromSave\"\n6. Drag a label from the object library to the top left of the view controller. The exact position doesn't matter.\n7. Change the label to \"Caller name\"\n8. Place a text field beside this label.\n9. Select both the label and the text field (select one and then select the other while holding  *command*).\n10. Select \"Editor-\u003eEmbed in-\u003eStack view menu item.\n11. Place a label under the first label and change it to \"Number\"\n12. Place another text field next to this label.\n13. Embed the label and text field in a stack view as you did with the first pair.\n14. Select the two stack views and embed them in a stack view.\n15. Select this newest stack view and use the |⁃◻︎⁃| button to add top, left and right constraints with a value of 20.\n16. Set the **Alignment** of the newest stack view to **fill.**\n17. Select the first text field and ctrl-drag to the second and select \"Equal Widths\" from the popup menu.\n\nYour new scene should look like this:\n\n![callkit-extension-ios-img5](//images.ctfassets.net/1es3ne0caaid/1rvJihUFZQz2I2NtSGmDSK/bc0d7bb519dfe7c50155a8e726c8de72/callkit-extension-ios-img5.png)\n\nNow we can create some code for this scene.  Create a new **Cocoa Touch Class** by pressing ⌘-N.  Make it a subclass of `UIViewController` and name it `AddEditViewController`.  Ensure you add it to the CallKitTutorial target\n\nOpen the new `AddEditViewController.swift` file and add \n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    import CallerData\n```\n\nto the top of the file.  We also need to add the following properties:\n\n```swift\n    // CallKitTutorial/ViewController.swift\n    \n    @IBOutlet weak var callerName: UITextField!\n    @IBOutlet weak var callerNumber: UITextField!\n    @IBOutlet weak var saveButton: UIBarButtonItem!\n    \n    var caller: Caller? {\n        didSet {\n            self.updateUI()\n        }\n    }\n    \n    var callerData: CallerData!\n    var isBlocked = false\n```\n\nThese define:\n\n- Properties for the name and number text fields.\n- A property for the save button in the navigation bar.\n- A property for the `Caller` that we are adding or editing.\n- A property for our `CallerData` Core Data framework object.\n- A property that tracks whether we are displaying a blocking number or an identification number.\n\nOpen the new view controller scene in `Main.Storyboard` file. Use the identity inspector to set the scene's class to `AddEditViewController`.\n\n\n![callkit-extension-ios-img6](//images.ctfassets.net/1es3ne0caaid/1pJZx1JbQPoyUo8TOOOMqN/c59be0d3ad8fd499ddf1f46f353b92e8/callkit-extension-ios-img6.png)\n\nUse the connections inspector to connect the two text fields and the save button to the outlets we defined in the class.\n\n### It's the little things\n\nAttention to small details can really improve the user's experience of your app. There are a couple of details we can address in our add/edit screen:\n\n1. Ensure that the **Save** button is disabled if the data isn't correct.\n2. Ensure that only digits can be entered into the number field\n\nAdd the following code to `AddEditViewController.swift`:\n\n```swift\n    // CallKitTutorial/AddEditViewController.swift\n    \n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        self.updateUI()\n    }\n    \n    private func updateUI() {\n    \n        guard let caller = self.caller,\n            let callerName = self.callerName,\n            let callerNumber = self.callerNumber else {\n                return\n        }\n    \n        callerName.text = caller.name\n        callerNumber.text = caller.number != 0 ? String(caller.number):\"\"\n        self.navigationItem.title = caller.name\n    \n        self.updateSaveButton()\n    \n    }\n    \n    private func updateSaveButton() {\n        self.saveButton.isEnabled = false\n        guard let name = self.callerName.text,\n            let number = self.callerNumber.text else {\n                return\n        }\n        self.saveButton.isEnabled = !(name.isEmpty || number.isEmpty)\n    }\n    \n    @IBAction func textChanged(_ sender: UITextField) {\n        self.updateSaveButton()\n    }\n```\n\nThis code calls the `updateUI` function when the view is about to appear.\n\n`UpdateUI` verifies that the `Caller` property has a value and that that object has both a `callerName` and a `callerNumber`. These values are put into the text field. The screen title is also updated to the caller's name.\n\n`updateSaveButton` ensures that the save button is only enabled if the `Caller`'s name and number are not empty.\n\n`textChanged` is an action function that we will used to update the save button state as the text fields change.\n\nThis takes care of our first requirement.\n\nWe can meet the second requirement by checking whether we have a valid number after the user enters each character. This requires a `UITextFieldDelegate` function. Add the following code to the bottom of `AddEditViewController.swift`:\n\n```swift\n    // CallKitTutorial/AddEditViewController.swift\n    \n    extension AddEditViewController: UITextFieldDelegate {\n        func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -\u003e Bool {\n            guard let text = textField.text,\n                let textRange = Range(range, in: text) else {\n                    return false\n            }\n            let updatedText = text.replacingCharacters(in: textRange,\n                                                       with: string)\n            if textField == self.callerNumber {\n                if updatedText.isEmpty {\n                    return true\n                }\n                if Int64(updatedText) == nil {\n                    return false\n                }\n            } else if textField == self.callerName {\n                self.navigationItem.title = updatedText\n            }\n            return true\n        }\n    }\n```\n\nEntering a character triggers this delegate function. Returning `true` permits the change. Returning `false` prevents it.\n\nThe function uses the existing text field value and the proposed change to determine the new value for the field.\n\nThe function permits the change if the text field is the number field and the new value can convert to an `Int64`.\n\nIf the text field is the name field, the change is always permitted. The code also assigns the new value to the screen title.\n\nIn order for code to be called, we need to set our view controller as the `delegate` for the text fields.  Replace the `viewDidLoad` function in `CallKitTutorial/AddEditViewController.swift` with the following:\n\n```swift\n    // CallKitTutorial/AddEditViewController.swift\n    \n    override func viewDidLoad() {\n      super.viewDidLoad()\n      self.callerName.delegate = self\n      self.callerNumber.delegate = self\n      self.title = \"\"\n    }\n```\n\nFinally, we need to add a \"save\" function to `CallKitTutorial/AddEditViewController`:\n\n```swift\n    // CallKitTutorial/AddEditViewController.swift\n    \n    @IBAction func saveTapped(_ sender: UIBarButtonItem) {\n        if let numberText = self.callerNumber.text,\n            let number = Int64(numberText)  {\n            let caller = self.caller ?? Caller(context: self.callerData.context)\n            caller.name = self.callerName.text\n            caller.number  = number\n            caller.isBlocked = self.isBlocked\n            caller.isRemoved = false\n            caller.updatedDate = Date()\n            self.callerData.saveContext()\n        }\n        self.performSegue(withIdentifier: \"unwindFromSave\", sender: self)\n    }\n```\n\nThis code first ensures that both text fields have valid data.\n\nIf an entry is being edited, it retrieves the `Caller` Core Data object supplied by the previous view controller. If we are adding a new entry, it creates a new `Caller` object. The properties of this object are then set and saved.\n\nFinally, the `unwindFromSave` segue is then invoked to exit this view controller.\n\nThe storyboard scene requires connections for these functions to work.\n\nOpen the `AddEditViewController` scene in `Main.storyboard`. Using the Connections Inspector:\n\n- Connect **Editing Changed** in the **Sent Event** section and the `textChanged` function for both text fields.\n- Connect the **selector** outlet of the save button and `saveTapped` function in the view controller.\n\n### Passing the caller\n\nWe have one last piece of code to add to add to `ViewController.swift`. We need code to pass the `CallerData` object and the object to be edited to the `AddEditViewController`. This is done in `prepareForSegue`.\n\nOpen `ViewController.swift` and add the following function:\n\n```swift\n    // CallKitTutorial/AddEditViewController.swift\n    \n    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n        if let dest = segue.destination as? AddEditViewController {\n            dest.isBlocked = self.showBlocked\n            dest.callerData = self.callerData\n            if let cell = sender as? UITableViewCell,\n                let indexPath = tableView.indexPath(for: cell),\n                let caller = self.resultsController.fetchedObjects?[indexPath.row] {\n                dest.caller = caller\n            }\n        }\n    }\n```\n\nThis function is called when a segue is triggered. It sets the `isBlocked` and `callerData` properties.\n\nIf the `sender` (The item that triggered the segue) is a table view cell, we know that the user wants to edit a row. We find the row for the cell and the object for that row. That object is passed to the `AddEditViewController`.\n\nAt this point you can run the app and you will be able to add, edit and remove both identification and block numbers.\n\n## Conclusion\n\nIn this tutorial we have created a simple application that uses Core Data to store phone number blocking and identification lists.\n\n- We extracted the Core Data code into a framework so that it is available for re-use in part two.\n- We used an Application Group so that the extension we create in part two can access the data from this app\n- We implemented basic data validation for the data entered.\n\nIn [part two](https://pusher.com/tutorials/callkit-ios-part-2) we will create a CallKit Extension that provides the entered data to iOS for use in blocking and identifying callers.\n\nIf you are looking for a further challenge, you could use [PhoneNumberKit](https://github.com/marmelroy/PhoneNumberKit) to format and display the phone numbers. This framework can also be used to allow the user to enter numbers in common formats.\n\nThe completed code for parts one and two of this tutorial series is [available on GitHub](https://github.com/paulw11/CallKitTutorial).","metaTitle":"Implement the CallKit extension for iOS - Part 1","metaDescription":"This tutorial will show you how to use Apple's CallKit to create an iOS app that you can use to add names and numbers to a caller ID list, and add numbers to a block list. In part one we will build the user interface."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3vtuHZ9yJZJSf1iAJF9jNj","type":"Entry","createdAt":"2019-07-21T22:15:24.110Z","updatedAt":"2019-07-31T20:34:30.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Introduction to error handling in Angular 7: Part 1 - Angular errorHandler","url":"error-handling-angular-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/ng_errors","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-20","description":"This tutorial series will introduce you to errors in JavaScript and the try-catch concept. In part one, learn how the concept is used, and how to handle internal errors in Angular with the Angular errorHandler, with a focus on client side JavaScript errors.","prerequisite":"You will need to have Node 11+, Node Package Manager version 6+, Angular CLI 7+ and Angular 7+  installed on your machine.\n","content":"In this tutorial, you will be introduced to errors in JavaScript, the try-catch concept and how it is used and a little introduction to handling internal errors with the Angular errorHandler.\n\n![angular-errorhandler-javascript-img1](//images.ctfassets.net/1es3ne0caaid/5kTaLTwUl9i27ciBHr2CKR/d70a36ff76eb3068ca511a80831364c4/angular-errorhandler-javascript-img1.jpeg)\n\n## Errors\n\nOne of my favorite movie stars, Samuel L. Jackson, was the very first person I heard the phrase \"to err is human\" from, and although I cannot remember the title of the particular movie now you can agree with me that the same thing happens with errors when writing code. As an Angular developer, you already know errors can be caused by personal mistakes, like having an import statement with the file extension name in Angular 7 and it shows up in your browser if you fail to catch it.\n\n```\n    import { DataService } from 'src/app/services/data.service.ts';\n```\n\nErrors can arise from lack of testing, server communications, or even ambiguity of the Angular project you are working on. We are human beings and so are prone to errors, that is one reason a good editor like VS Code will always draw squeaky lines when you start derailing.\n\n## Prerequisites\n\nTo be able to follow through in this article's demonstration you should have:\n\n- Node version 11.0 installed on your machine.\n- Node Package Manager version 6.7 (usually ships with Node installation).\n- [Angular CLI](https://cli.angular.io/) version 7.0\n- The latest version of Angular (version 7)\n\n```\n    // run the command in a terminal\n    ng version\n```\n\nConfirm that you are using version 7, and update to 7 if you are not.\nOther things that will be nice-to-haves are:\n\n- A working knowledge of the Angular framework at a beginner level.\n- Familiarity with Angular services will be a plus but not a requirement.\n\n## Types of errors\n\nThere are many types of errors but I will be grouping them in two main categories: insider and outsider errors.\n\n- **Insider errors:** (also known as client side errors) These are the ones you can be held responsible for, the syntax errors, package manager errors, reference errors, type errors and all types of client side errors that can be fixed by the developer within the Angular application. \n- **Outsider errors:** (also known as server side errors) These ones can span from server errors, which mostly come with three digit status codes like 500 to internet network errors, to even browser specific errors. These are basically errors that are out of the reach of the Angular application hence the name outsider.\n\nThis article will focus on the insider errors and then a subsequent article will focus on the outsider errors.\n\n## Baby steps: throw and catch!\n\nWhen you run a function in JavaScript, that function joins a kind of function execution queue and as the application runs and gets to its turn it leaves the queue and gets executed. So, if an error occurs, JavaScript throws an exception, which will immediately remove all the operations in the queue until the exception is handled. \nOn a basic level, exceptions are handled with try/catch blocks, the whole application crashes if the compiler does not see this try/catch block. \nThe try/catch syntax looks like this:\n\n```javascript\n    try {\n     throw new Error('An error occurred');\n    }\n    catch (error) {\n     console.error('Here is the error message', error);\n    }\n    console.log('Execution continues');\n```\n\nYou will see the usefulness in a little demonstration. Create a new Angular project with the CLI, call it  `ngapp`\n\n```\n    ng new ngapp\n```\n\nAccept the router settings and choose plain CSS as the style sheet. Go to the `app.component.ts` file and copy in the code below:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n    normalError() {\n     const babies = foo;\n     console.log(\"This is normal error without a try catch\");\n     }\n    }\n```\n\nCopy these into the `app.component.html`\n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \u003cbutton (click)=\"normalError()\"\u003e\n     Fire Normal Error\n    \u003c/button\u003e\n```\n\nThen copy these basic styling into the `app.component.css`\n```css\n    // src/app/app.component.css\n    button {\n    background-color: #4CAF50; /* Green */\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    margin: 5px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    }\n```\n\nRun the application in development like this:\n\n```\n    ng serve\n```\n\nIn some cases it will fail to compile, when this happens re-run it and it will compile.\n\n![angular-errorhandler-javascript-img2](//images.ctfassets.net/1es3ne0caaid/fMFAgkZb8ThyXLPAMiOBE/995bcfcedc9db7f979796fdd1c956192/angular-errorhandler-javascript-img2.gif)\n\nThis shows in the console and most of the time, breaks the entire application immediately as you can see the message we logged did not show. The try/catch block handles these exceptions gracefully and the application continues running. So, if you had another button with a try catch block this time, you can spot the difference. Copy this in the `app.component.html file` :\n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \u003cbutton (click)=\"normalError()\"\u003e\n    Fire Normal Error\n    \u003c/button\u003e\n    \u003cbr\u003e\n    \u003cbutton (click)=\"errorWithCatch()\"\u003e\n    Fire Error With Try Catch\n    \u003c/button\u003e\n```\n\nCopy the code below in the `app.component.ts` file:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n    normalError() {\n    const babies = foo;\n    console.log(\"This is normal error without a try catch\");\n    }\n    errorWithCatch() {\n    try {\n    const babies = foo;\n    } catch (error) {\n    console.log(' — Error is handled gracefully: ', error.name);\n    }\n    console.log(' — Execution continues without app breaking');\n    }\n    }\n```\n\nThe code in bold shows the same reference error instance, but this time around it is wrapped in a try-catch block so it can be handled gracefully. When you run the app again, it should look like this:\n\n![angular-errorhandler-javascript-img3](//images.ctfassets.net/1es3ne0caaid/6c3x7B8SDVuNtLoJ9gZO9d/2b561f215b8ca081fdcb36e30abb872b/angular-errorhandler-javascript-img3.gif)\n\n## Limitations of try/catch\n\nAs great as try/catch is, thinking about the application you already see how it is not sustainable. This is because you can not go about adding these try/catch blocks in every function in your application, that is not resource effective. The good news is, Angular has a kind of global try/catch that we can use in one centralized location to catch all exceptions.\n\n## Error handler\n\nAngular has a global error handling class called errorHandler that provides a hook for centralized exception handling inside your application. It basically intercepts all the errors that happen in your application, and logs all of them to the console, and stops the app from crashing (this was why your first button did not crash the app).\nThe syntax looks like this:\n\n```javascript\n    class MyErrorHandler implements ErrorHandler {\n      handleError(error) {\n        // do something with the exception\n      }\n    }\n    \n    @NgModule({\n      providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n    })\n    class MyModule {}\n```\n\nThis lets us modify the default behaviour of logging errors to the console to our own logic after we have added it to our providers list in our app module. Go to the the `app.component.ts` file and copy the code below in it:\n\n```typescript\n    // src/app/app.component.ts\n    import { Component } from '@angular/core';\n    @Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n     normalError() {\n      const babies = foo;\n    }\n    errorWithCatch() {\n     const babies = foo;\n     }\n    }\n```\n\nThe try catch block has been removed, so you should have two squeaky lines (or problems) in your code editor signifying two reference errors. Now to test the Angular global error handler, navigate to the `app.module.ts` file and copy the code below:\n\n```typescript\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    export class MyErrorHandler implements ErrorHandler {\n     constructor() {}\n     handleError(error: Error) {\n      if (Error) {\n       console.log(\"hi\");\n      }\n      else console.log(\"hello\");\n      }\n     }\n    @NgModule({\n    declarations: [\n    AppComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule\n    ],\n    providers: [\n     {\n      provide: ErrorHandler,\n      useClass: MyErrorHandler,\n     },\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nThe changes made just like the syntax suggests we created a global error handler class that implements the Angular error handler and then registered it in the provider section.\nOur logic simply checks for errors and logs a message for any errors found. If you save this and run the application you will see the texts logged in the console for every error and the application working just like it was a try-catch. \n\n## Error service\n\nNow you can see all our error logic is inside the core app module, this is not the way Angular encourages us to write code. So in line with keeping everything modular, we use a service. you will call it error service and all the logic on how to handle your errors will be kept in it. \nFirst of all, generate an Angular service with the CLI:\n\n```\n    ng generate service error\n```\nor\n```\n    ng g s error\n```\n\nThen you have to remove the error handler logic in your `app.module.ts` file so that it will look like this:\n\n```typescript\n    // src/app/app.component.ts\n    import { BrowserModule } from '@angular/platform-browser';\n    import { NgModule, ErrorHandler } from '@angular/core';\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { ErrorService } from './error.service';\n    import { ErrorComponent } from './error/error.component';\n    @NgModule({\n    declarations: [\n    AppComponent,\n    ErrorComponent\n    ],\n    imports: [\n    BrowserModule,\n    AppRoutingModule\n    ],\n    providers: [\n     {\n      provide: ErrorHandler,\n      useClass: ErrorService,\n     },\n    ],\n    bootstrap: [AppComponent]\n    })\n    export class AppModule { }\n```\n\nAfter that use the CLI to generate an error component where the user can be redirected to if an error occurs.\n\n```\n    ng g c error\n```\n\nNow you have the error component you do no not need to modify it, navigate to the `error.service.ts` file and copy the code below in it:\n\n```typescript\n    // src/app/error.service.ts\n    import { Injectable, ErrorHandler, Injector } from '@angular/core';\n    import { Router } from '@angular/router';\n    import { HttpErrorResponse } from '@angular/common/http'\n    @Injectable({\n    providedIn: 'root'\n    })\n    export class ErrorService implements ErrorHandler{\n     constructor(private injector: Injector) { }\n     handleError(error: any) {\n      const router = this.injector.get(Router);\n      if (Error instanceof HttpErrorResponse) {\n       console.log(error.status);\n      }\n      else {\n       console.error(\"an error occurred here broo\");\n      }\n      router.navigate(['error']);\n      }\n    }\n```\n\nHere the logic is modified a bit to first check the kind of error it is, if it is an insider error then it navigates the user to an error page as the error occurs. So make sure your `app-routing.module.ts` file is updated with the route like this:\n\n```typescript\n    // src/app/app-routing.module.ts\n    import { NgModule } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { ErrorComponent } from './error/error.component';\n    const routes: Routes = [\n    { path: 'error', component: ErrorComponent}\n    ];\n    @NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n    })\n    export class AppRoutingModule { }\n```\n\nFinally, your `app.component.html` file should look like this:\n\n```html\n    \u003cdiv\u003e\n    \u003cbutton (click)=\"normalError()\"\u003e\n    Fire Normal Error\n    \u003c/button\u003e\n    \u003cbr\u003e\n    \u003cbutton (click)=\"errorWithCatch()\"\u003e\n    Fire Error With Try Catch\n    \u003c/button\u003e\n    \u003c/div\u003e\n    \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n```\n\nIf you followed the post to this point, you can run the application in development again, your errors will be gracefully handled as expected. \n\n## Conclusion\n\nYou have been introduced to errors and the concept behind handling them in Angular with the errorHandler class with focus on client side JavaScript errors. The [next tutorial](https://pusher.com/tutorials/error-handling-angular-part-2) will go deep into outsider errors, the HTTP interceptors and error tracking with a remote service building on all the concepts you have learnt in this post. The complete code for this tutorial is on GitHub and can be [found here.](https://github.com/viclotana/ng_errors) ","metaTitle":"Introduction to error handling in Angular 7 - Part 1","metaDescription":"This tutorial series will introduce you to errors in JavaScript and the try-catch concept. In part one, learn how the concept is used, and how to handle internal errors in Angular with the Angular errorHandler, with a focus on client side JavaScript errors."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6VOxUmjTarGnHon8rnsCga","type":"Entry","createdAt":"2019-06-24T17:02:16.009Z","updatedAt":"2019-06-24T17:02:16.009Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with GraphQL in React Native","url":"learning-graphql-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNGraphQL","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-06-24","description":"GraphQL makes it easier for developers to get the specific data we want with less code. In this tutorial you will learn how to implement a simple GraphQL server and query the data from a React Native app, by creating a simple app which fetches, inserts, updates, and deletes data from a GraphQL server. ","prerequisite":"You will need to have Node 11.2+, Yarn 1.13+, React Native CLI 2.0+ and React Native 0.59+ installed on your machine.","content":"GraphQL’s adoption is increasing, and for good reason. Many believe it’s the future for API’s, and big companies (GitHub,  Coursera, PayPal, Shopify) using it just sparks the developer interest even further. \n\nIt’s really an exciting time to learn GraphQL, especially for React Native developers because the apps that we create usually communicate with a server. GraphQL makes it easier for us to get the specific data we want with less code. Gone are the days where we have to hit multiple endpoints just to get the data we want from a REST API.\n\nIn this tutorial, you will learn how to implement a simple GraphQL server and query the data from a React Native app.\n\n\n## Prerequisites\n\nBasic knowledge of React Native and Node.js is required to follow this tutorial.\n\nThe following package versions are used in this tutorial:\n\n\n- Node 11.2.0\n- Yarn 1.13.0\n- React Native CLI 2.0.1\n- React Native 0.59.5\n\nIf you encounter any issues getting the app to work, try using the above versions instead.\n\n\n## App overview\n\nWe will build a Pokemon viewer app. This will pick a random Pokemon and display it on the screen. When the user taps on it, a new Pokemon will be fetched. It’s really simple but it’s still going to demonstrate how to implement the full GraphQL stack.\n\n![learning-graphql-react-native-img1](//images.ctfassets.net/1es3ne0caaid/3yxQ1dJNzxf7XTLzFFJxLm/54582a216270b922c901177eaa08d82e/learning-graphql-react-native-img1.gif)\n\nYou can view the source code of the app on this [GitHub repo](https://github.com/anchetaWern/RNGraphQL).\n\n\n## Bootstrapping the app\n\nTo ensure compatibility, clone the GitHub repo for this project:\n\n```\n    git clone https://github.com/anchetaWern/RNGraphQL\n```\n\nThis contains the `package.json` file for both the server and the React Native app. The `starter` branch contains the starting point for this tutorial:\n\n```\n    git checkout starter\n```\n\nOnce you’ve switched branches, you can go ahead and install the dependencies and re-create the `android` and `ios` folders for the app:\n\n```\n    yarn\n    react-native eject\n```\n\nThat will install all the GraphQL-related packages that we’re going to need in the app. Later on, you’ll learn what each one does once we proceed to code the client side.\n\nLastly, we also need to install the server dependencies:\n\n```\n    cd server\n    yarn\n```\n\n\n## Creating the GraphQL server\n\nIn this section, we will be creating the GraphQL server using [Apollo](https://www.apollographql.com/). As you might already know, GraphQL is only a [specification](https://graphql.github.io/graphql-spec/), not an [implementation](https://graphql.org/code/). That’s why we need something like Apollo to implement it. \n\nApollo is a platform which provides us with all the tools needed for implementing a GraphQL server. This includes both the server and the client. The server component is used for defining the schema and resolvers (provides instructions on how to turn a specific GraphQL operation into data). On the other hand, the client component is responsible for providing tools that we can use for querying the server and binding the results to the UI. \n\n### Defining the schema\nThe first step in creating a GraphQL server is for us to define the schema. This is where you strictly define what data your API is managing. In this case, we’re handling basic Pokemon data. \n\nIf you’ve seen the demo gif earlier, you know exactly which Pokemon data we’re working with:\n\n\n- Name\n- Image\n- Types\n- Description\n\nBut aside from that, we also need to define the queries that the server is going to handle. In this case, we’re using the [PokéAPI](https://pokeapi.co/) as our direct data source so our queries will be limited by the endpoints they’re exposing. We’re only going to need a few data from these endpoints so it’s fine if we use them directly:\n\n\n- `/pokemon/{id}` - used for getting the Pokemon data.\n- `/pokemon-species/{id}` - used for getting the description text.\n\nWith that in mind, we know that we can only have queries which accept the ID of the Pokemon as its argument. \n\n\n\u003e **Note**: We’re not really going to cover caching in this tutorial, but it’s important to implement it if you’re going to use an existing REST API as a direct data source. That way, you won’t get throttled from using the API too much. PokéAPI is actually limited to 100 API requests per IP address per minute.\n\nNow we’re ready to define the schema. Create a `server/schema.js` file and add the following code:\n\n```javascript\n    const { gql } = require('apollo-server');\n    \n    const typeDefs = gql`\n      type Query {\n        pokemon(id: ID!): Pokemon\n      }\n    \n      type Pokemon {\n        id: ID!\n        name: String\n        desc: String\n        pic: String\n        types: [PokemonType!]!\n      }\n    \n      type PokemonType {\n        id: Int!\n        name: String!\n      }\n    `;\n    \n    module.exports = typeDefs;\n```\n\nBreaking down the above code, we first imported the `apollo-server` package. This allows us to define the GraphQL schema. The schema includes the shape of the data we expect to return, as well as the shape of the queries. \n\nLet’s first start with the `Query` type which describes what data we can fetch. In this case, we only want the user to fetch Pokemon data so the query is named `pokemon`. To specify arguments, you need to put them inside the parentheses right after the name of the query. In this case, we want the users to supply the ID of the Pokemon. An exclamation is added after it to indicate that it is a required argument. After that, we specify the return data after the colon (`Pokemon`). This is a custom GraphQL object type which we’ll define next:\n\n```javascript\n    type Query {\n      pokemon(id: ID!): Pokemon\n    }\n```\n\nNext, we need to define the `Pokemon` object type. This is where we specify all the properties (and their data type) that are available for this particular type. Most of the properties that we need to expose are only scalar types (`ID` and `String`):\n \n\n- `ID` is a unique identifier for a specific object of this type. An exclamation is added after it which means it cannot have a value of `null`. \n- `String` is just your usual primitive type for storing string values.\n- `PokemonType` is yet another object type. The `types` property is used for storing an array of objects so we also have to break down the object to its expected properties:\n\n```javascript\n    type Pokemon {\n      id: ID!\n      name: String\n      desc: String\n      pic: String\n      types: [PokemonType]\n    }\n```\n\nHere’s the definition of the `PokemonType`:\n\n```javascript\n    type PokemonType {\n      id: Int\n      name: String\n    }\n```\n\n\u003e You can find more types on this [cheat sheet](https://devhints.io/graphql#schema).\n\n### Connect to a data source\nNow that we’ve defined our schema, the next step is to connect to a data source. Apollo comes with a data source API, which you could use to easily connect to an existing database or a REST API. As mentioned earlier, we will be using PokéAPI as our data source. This API provides Pokemon data from all of the Pokemon games so it’s perfect for our needs.\n\nCreate a `server/datasources/poke.js` file and add the following:\n\n```javascript\n    const { RESTDataSource } = require('apollo-datasource-rest');\n    \n    class PokeAPI extends RESTDataSource {\n      constructor() {\n        super();\n        this.baseURL = 'https://pokeapi.co/api/v2/';\n      }\n    \n      pokemonReducer(pokemon, pokemonSpecies) {\n        return {\n          id: pokemon.id || 0,\n          name: pokemon.name,\n          desc: this.getDescription(pokemonSpecies.flavor_text_entries),\n          pic: pokemon.sprites.front_default, // image URL of the front facing Pokemon\n          types: this.getTypes(pokemon.types)\n        };\n      }\n    \n      getDescription(entries) {\n        return entries.find(item =\u003e item.language.name === 'en').flavor_text;\n      }\n    \n      getTypes(types) {\n        return types.map(({ slot, type }) =\u003e {\n          return {\n            \"id\": slot, // the type's index\n            \"name\": type.name // the type's name (e.g. electric, leaf)\n          }\n        });\n      }\n    \n      async getPokemonById({ id }) {\n        const pokemonResponse = await this.get(`pokemon/${id}`);\n        const pokemonSpeciesResponse = await this.get(`pokemon-species/${id}`);\n        return this.pokemonReducer(pokemonResponse, pokemonSpeciesResponse);\n      }\n    }\n    \n    module.exports = PokeAPI;\n```\n\nIf you’ve consumed any sort of REST API before (and I assume you have), the code above should easily make sense to you. The `apollo-datasource-rest` package really makes this simple. This package exposes the `RESTDataSource` class which allows us to make a request to a REST API:\n\n```\n    const pokemonResponse = await this.get(`pokemon/${id}`); // this.post for POST requests\n    const pokemonSpeciesResponse = await this.get(`pokemon-species/${id}`);\n```\n\nFrom there, all we had to do was to extract the data that we need. The only thing you need to remember is that the data you’re extracting should correspond to the properties that you’ve defined earlier in your schema: `id`, `name`, `desc`, `pic`, and `types`:\n\n```javascript\n    pokemonReducer(pokemon, pokemonSpecies) {\n      return {\n        id: pokemon.id || 0,\n        name: pokemon.name,\n        desc: this.getDescription(pokemonSpecies.flavor_text_entries),\n        pic: pokemon.sprites.front_default, // image URL of the front facing Pokemon\n        types: this.getTypes(pokemon.types)\n      };\n    }\n```\n\n### Define the resolvers\nThe final piece of the puzzle is the resolvers. The resolvers allow us to define the mapping of the queries you’ve defined in your schema to the data source method which returns the data. It follows the format:\n\n```\n    fieldName: (parent, args, context, info) =\u003e data;\n```\n\nHere’s what each one does:\n\n\n- `parent` - an object that contains the result returned from the resolver on the parent type. This is always blank (`_`) because it refers to the root of the graph.\n- `args` - an object containing the arguments passed to the field. In this case, our query only accepts the `id` of the Pokemon. We then need to pass the `id` to the data source method (`getPokemonById()`) as an object property because that’s how we defined it earlier on the `server/datasources/poke.js` file.\n- `context` - this is where we can access our data sources. We can extract the data source from the `dataSources` property. \n- `info` - an object which contains information about the execution state of the operation. We don’t really need to use it in this case so we just won’t supply it at all.\n\nTo define the resolver, create a `server/resolvers.js` file and add the following:\n\n```javascript\n    module.exports = {\n      Query: {\n        pokemon: (_, { id }, { dataSources }) =\u003e\n          dataSources.pokeAPI.getPokemonById({ id })\n      }\n    };\n```\n\n### Creating the server\nThe final step in implementing the GraphQL server is to bring everything together. Create a `server/index.js` file and add the following:\n\n```javascript\n    const { ApolloServer } = require('apollo-server');\n    const typeDefs = require('./schema');\n    const resolvers = require('./resolvers');\n    \n    const PokeAPI = require('./datasources/poke');\n    \n    const server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      dataSources: () =\u003e ({\n        pokeAPI: new PokeAPI()\n      })\n    });\n    \n    server.listen().then(({ url }) =\u003e {\n      console.log(`GraphQL Server is running at ${url}`);\n    });\n```\n\nIn the above code, we import the `ApolloServer` class from the `apollo-server` package. This allows us to fire up an Apollo server which accepts an object containing the schema, resolvers, and data sources we’ve defined earlier.\n\nAt this point, you can now run the server:\n\n```\n    cd server\n    yarn start\n```\n\nYou can play around with it by accessing `http://localhost:4000/` on your browser.\n\nIf you get a blank screen, delete the `node_modules` folder and `yarn.lock` file. After that, remove the `dependencies` property in the `package.json` file and re-install the dependencies with the following command:\n\n```\n    yarn add apollo-datasource-rest@0.4.0 apollo-server@2.5.0 graphql@14.3.0\n```\n\nFrom there, you can view the schema that we’ve defined earlier by clicking on the **SCHEMA** tab located on the right part of the screen:\n\n![learning-graphql-react-native-img2](//images.ctfassets.net/1es3ne0caaid/6AopF3xeN9RakYIRY9OuIt/f3b457ef658620f22c5f3ed37e75013a/learning-graphql-react-native-img2.png)\n\nBut this interface is mostly used for testing out your queries. In this case, we want to fetch the [Pokemon with the ID of 25](https://pokeapi.co/api/v2/pokemon/25):\n\n```javascript\n    query GetPokemonByName {\n      pokemon(id: 25) {\n        id,\n        name,\n        desc,\n        pic\n      }\n    }\n```\n\nThat will return the following result:\n\n```javascript\n    {\n      \"data\": {\n        \"pokemon\": {\n          \"id\": \"25\",\n          \"name\": \"pikachu\",\n          \"desc\": \"Its nature is to store up electricity. Forests\\nwhere nests of Pikachu live are dangerous,\\nsince the trees are so often struck by lightning.\",\n          \"pic\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\"\n        }\n      }\n    }\n```\n\n![learning-graphql-react-native-img3](//images.ctfassets.net/1es3ne0caaid/fYKS2ND5KabBCdlTXqIPA/ed9895bc2d6cd8fde64007244b1189c7/learning-graphql-react-native-img3.png)\n\nWhat if we also want to get the types of the Pokemon? Intuitively, we would just add `types` to the properties we’ve specified:\n\n```javascript\n    query GetPokemonByName {\n      pokemon(id: 25) {\n        id,\n        name,\n        desc,\n        pic,\n        types\n      }\n    }\n```\n\nBut that’s going to return an error:\n\n![learning-graphql-react-native-img4](//images.ctfassets.net/1es3ne0caaid/4OpuXXnRVLlPzTEcz61IaO/db2a34b74155ec997a3589a7c0ae21d2/learning-graphql-react-native-img4.png)\n\nThe error says:\n\n\n\u003e The field types of type [PokemonType] must have a selection of subfields.\n\nThis means that you also need to specify the subfields that you want to fetch like so:\n\n```javascript\n    query GetPokemonByName {\n      pokemon(id: 25) {\n        id,\n        name,\n        desc,\n        pic,\n        types {\n          id,\n          name\n        }\n      }\n    }\n```\n\nThat will return the following:\n\n```javascript\n    {\n      \"data\": {\n        \"pokemon\": {\n          \"id\": \"25\",\n          \"name\": \"pikachu\",\n          \"desc\": \"Its nature is to store up electricity. Forests\\nwhere nests of Pikachu live are dangerous,\\nsince the trees are so often struck by lightning.\",\n          \"pic\": \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\",\n          \"types\": [\n            {\n              \"id\": 1,\n              \"name\": \"electric\"\n            }\n          ]\n        }\n      }\n    }\n```\n\n## Building the app\n\nNow that we’re done implementing the server, it’s time for us to add the code for the React Native app. Open the `App.js` file and add the following:\n\n```javascript\n    import React, { Component } from \"react\";\n    import { View, Text, ActivityIndicator } from \"react-native\";\n    \n    import { ApolloProvider, Query } from \"react-apollo\";\n    import ApolloClient from \"apollo-boost\";\n    import gql from \"graphql-tag\";\n```\n\nHere’s what each package does:\n\n\n- `apollo-boost` - used for connecting to an Apollo server.\n- `react-apollo` - provides React components that allows us to fetch data from the Apollo server.\n- `graphql-tag` - used for parsing GraphQL queries into a format understood by the Apollo client.\n\nNext, connect to the server that we created earlier. Replace the placeholder with your machine’s internal IP address. Be sure that your machine and your device are connected to the same network when you do so. You can also use [ngrok](https://ngrok.com/) if you want:\n\n```\n    const client = new ApolloClient({ uri: 'http://YOUR_INTERNAL_IP_ADDRESS:4000/graphql' })\n```\n\nNext, import the component for rendering the Pokemon data as well as the helper function for generating random integers:\n\n```\n    import Pokemon from \"./src/components/Pokemon\";\n    import getRandomInt from \"./src/helpers/getRandomInt\";\n```\n\nNext, we’re going to use the [Context API](https://reactjs.org/docs/context.html) so we can pass the Pokemon data through the component tree without having to pass props needed by the `Pokemon` component down manually at every level:\n\n```\n    export const AppContext = React.createContext({ data: { pokemon: null } });\n```\n\nNext, create the component and declare its default state. The `query` contains the same query that we used earlier. We’re putting it in the state so the component will re-render every time we update it:\n\n```javascript\n    export default class App extends Component {\n    \n      state = {\n        query: null\n      }\n      \n      // next: add componentDidMount\n    }\n```\nOnce the component is mounted, we generate the query and update the state:\n\n```javascript\n    componentDidMount() {\n      const query = this.getQuery();\n      this.setState({\n        query\n      });\n    }\n```\n\nHere’s the `getQuery()` function. This generates a random ID and uses it for the query:\n\n```javascript\n    getQuery = () =\u003e {\n      const randomID = getRandomInt(1, 807);\n      return `\n        query GetPokemonById {\n          pokemon(id: ${randomID}) {\n            id,\n            name,\n            desc,\n            pic,\n            types {\n              id,\n              name\n            }\n          }\n        }\n      `\n    }\n```\n\nIn the `render()` method, the `\u003cApolloProvider\u003e` component is where we pass the client we created with the `ApolloClient` earlier. Then we add the `\u003cQuery\u003e` component as its child, this is where you pass the `query`. Don’t forget to parse the `query` with the `gql` module. By default, `loading` will have a value of `true`. In that case, we show a loading animation. Once the server responds, it can either be an `error` or `data`. The `data` contains the same data you saw earlier when we tried running some queries. From there, we just pass the Pokemon data and the function for fetching a new one to the app’s context:\n\n```javascript\n    render() {\n      const { query } = this.state;\n      if (!query) return null;\n    \n      return (\n        \u003cApolloProvider client={client}\u003e\n          \u003cQuery query={gql`${query}`} \u003e\n            {({ loading, error, data }) =\u003e {\n              if (loading || error) return \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n              return (\n                \u003cAppContext.Provider value={{...data.pokemon, onPress: this.onGetNewPokemon}} style={styles.container}\u003e\n                  \u003cPokemon /\u003e\n                \u003c/AppContext.Provider\u003e\n              )\n            }}\n          \u003c/Query\u003e\n        \u003c/ApolloProvider\u003e\n      );\n    }\n```\n\nHere’s the `onGetNewPokemon()` function:\n\n```javascript\n    onGetNewPokemon = () =\u003e {\n      const query = this.getQuery();\n      this.setState({\n        query\n      });\n    }\n```\n\n### getRandomInt helper\nHere’s the helper for generating random integers. Create the `src/helpers` folder to house it:\n\n```javascript\n    // src/helpers/getRandomInt.js\n    const getRandomInt = (min, max) =\u003e {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    \n    export default getRandomInt;\n```\n\n### Pokemon component\nThe `Pokemon` component is used for displaying the Pokemon data. Create a `src/components` folder to house it.\n\nStart by importing the packages we need:\n\n```javascript\n    // src/components/Pokemon.js\n    import React from 'react';\n    import { View, Text, Image, FlatList, TouchableOpacity } from 'react-native';\n    import { AppContext } from '../../App'; // import the context we exported earlier on the App.js file\n```\n\nNext, render the component. Wrap it in `\u003cAppContext.Consumer\u003e` so you get access to the data and the `onPress` function that we passed to the context earlier. From there, it’s just a matter of displaying the data using the right components:\n\n```javascript\n    const Pokemon = () =\u003e {\n      return (\n        \u003cAppContext.Consumer\u003e\n          {\n            ({ name, pic, types, desc, onPress }) =\u003e\n            \u003cTouchableOpacity onPress={onPress}\u003e\n              \u003cView style={styles.mainDetails}\u003e\n                \u003cImage\n                  source={{uri: pic}}\n                  style={styles.image} resizeMode={\"contain\"} /\u003e\n                  \u003cText style={styles.mainText}\u003e{name}\u003c/Text\u003e\n    \n                  \u003cFlatList\n                    columnWrapperStyle={styles.types}\n                    data={types}\n                    numColumns={2}\n                    keyExtractor={(item) =\u003e item.id.toString()}\n                    renderItem={({item}) =\u003e {\n                      return (\n                        \u003cView style={[styles[item.name], styles.type]}\u003e\n                          \u003cText style={styles.typeText}\u003e{item.name}\u003c/Text\u003e\n                        \u003c/View\u003e\n                      )\n                    }}\n                  /\u003e\n    \n                  \u003cView style={styles.description}\u003e\n                    \u003cText\u003e{desc}\u003c/Text\u003e\n                  \u003c/View\u003e\n              \u003c/View\u003e\n            \u003c/TouchableOpacity\u003e\n          }\n        \u003c/AppContext.Consumer\u003e\n      );\n    }\n```\n\nLastly, add the styles and export the component. Most of these are just used to change the background color of the types container based on the Pokemon’s type:\n\n```javascript\n    const styles = {\n      mainDetails: {\n        padding: 30,\n        alignItems: 'center'\n      },\n      image: {\n        width: 100,\n        height: 100\n      },\n      mainText: {\n        fontSize: 25,\n        fontWeight: 'bold',\n        textAlign: 'center'\n      },\n      description: {\n        marginTop: 20\n      },\n      types: {\n        flexDirection: 'row',\n        marginTop: 20\n      },\n      type: {\n        padding: 5,\n        width: 100,\n        alignItems: 'center'\n      },\n      typeText: {\n        color: '#fff',\n      },\n      normal: {\n        backgroundColor: '#8a8a59'\n      },\n      fire: {\n        backgroundColor: '#f08030'\n      },\n      water: {\n        backgroundColor: '#6890f0'\n      },\n      electric: {\n        backgroundColor: '#f8d030'\n      },\n      grass: {\n        backgroundColor: '#78c850'\n      },\n      ice: {\n        backgroundColor: '#98d8d8'\n      },\n      fighting: {\n        backgroundColor: '#c03028'\n      },\n      poison: {\n        backgroundColor: '#a040a0'\n      },\n      ground: {\n        backgroundColor: '#e0c068'\n      },\n      flying: {\n        backgroundColor: '#a890f0'\n      },\n      psychic: {\n        backgroundColor: '#f85888'\n      },\n      bug: {\n        backgroundColor: '#a8b820'\n      },\n      rock: {\n        backgroundColor: '#b8a038'\n      },\n      ghost: {\n        backgroundColor: '#705898'\n      },\n      dragon: {\n        backgroundColor: '#7038f8'\n      },\n      dark: {\n        backgroundColor: '#705848'\n      },\n      steel: {\n        backgroundColor: '#b8b8d0'\n      },\n      fairy: {\n        backgroundColor: '#e898e8'\n      }\n    }\n    \n    export default Pokemon;\n```\n\n## Running the app\n\nAt this point, you can now run the app:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned the basics of using GraphQL in a React Native app. Specifically, you learned how to set up your own GraphQL server using Apollo, use an existing REST API as its data source, consume the data from a React Native app, and display it to the user.\n\nEven though we’ve implemented the full stack on this tutorial, there’s still a lot more to learn. Be sure to check out the [GraphQL](https://graphql.org/learn/) and [Apollo](https://www.apollographql.com/docs/) docs to learn more.\n\nYou can view the source code of the app on this [GitHub repo](https://github.com/anchetaWern/RNGraphQL).","metaTitle":"Getting started with GraphQL in React Native","metaDescription":"In this tutorial you will learn how to implement a simple GraphQL server and query the data from a React Native app, by creating a simple app which fetches, inserts, updates, and deletes data from a GraphQL server. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4CNVZfnDQY8Hwcnaxt2WM4","type":"Entry","createdAt":"2019-06-06T19:32:13.885Z","updatedAt":"2019-06-06T19:32:13.885Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Lifecycle methods in React 16","url":"lifecycle-methods-react-16","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-06-06","description":"Gain an understanding of all the lifecycle methods in React Native 16, including the error boundaries methods. Learn when to use them, performance implications, and best practices.","prerequisite":"To run the code samples you will need React 16.","content":"\u003e TL;DR: this is an overview of all the lifecycle methods in React 16, what they are used for and how they can be used in your workflow.\n\n![react-16-lifecycle-1](//images.ctfassets.net/1es3ne0caaid/2ePb1rwBhaPA6YFsOtNjmL/a74f5c6ab1e03757da17403b4d6c0bad/react-16-lifecycle-1.jpeg)\n\n## Introduction \n\nReact is a JavaScript library by Facebook with over 110,000 stars on [GitHub](https://github.com/facebook/react). It is a declarative, efficient, and flexible framework for building user interfaces. It is really very painless to create interactive user interfaces, to build component-centric applications, which are both responsive and backward compatible. It is also currently arguably the most popular JavaScript framework out there [according to the state of JS survey](https://2018.stateofjs.com/).\n\nThis article is for developers with basic working knowledge of React. You will be introduced to the React components lifecycle methods, where they are called, how they are used and the thought process behind their implementation.\n\n## React component lifecycle methods\n\nReact components lifecycle methods can be described as events that take place from any component’s inception to the death of that same component. The lifecycle of a React component takes place within these events that are in four categories:\n\n1. **Mounting:** The methods and events that take place here happen as the component is mounted in the DOM. \n2. **Updating:** Here the methods and events take place after the React component has entered the DOM.\n3. **Un-mounting:** Here the methods and events take place as they React component leaves the DOM or is unmounted from the DOM.\n4. **Error Boundaries:** Here is a special category that deals with handling or gracefully catching errors in order not to totally break your React application render. \n\nIn this post, the React lifecycle methods will be explained in the order they are called by React in the DOM.\n\n## constructor()\n\nFor React class components that are not functional components, the constructor is the very first method that gets called to action in the application’s component presentation. The constructor takes in `props` as an object, and you have to call the parent class through `super` in order to set access `this.props` to `props` ``inside the class. The constructor looks like this:\n\n```javascript\n    class FirstComponent extends Component {\n      constructor(props) {\n        console.log(\"constructor is called here!\");\n        super(props);\n        this.state = {\n          counter: 0\n        };\n      }\n    }\n```\n\nThe `super` call is very important and it must have the `props` passed into it. It is also important to know that state can only be set inside constructors. You can also set state values, bind methods and even create refs inside the constructor. \n\n## getDerivedStateFromProps() \n\nThe very next method called after the constructor is the `getDerivedStateFromProps` method, it is a static method and so you cannot use `this` inside of it. It is also the last method called before the render method. It kind of has a specific use case, which is to return a state object on the initial props and set state, this can also be done with the constructor but the constructor does a lot more things aside from setting state. It is not a very frequently used method as many React developers just use the constructor instead. It takes two parameters, props and state and the syntax looks like this:\n\n```javascript\n    static getDerivedStateFromProps(props, state) {\n        console.log(\"getDerivedStateFromProps called here\");\n        return null;\n      }\n```\n\nIt is called on every render and it can be placed inside the constructor method. \n\n## render()\n\nThis is the most important method of any React class, the whole work that is going to appear in the DOM is done here as it outputs the JSX of your component. It is the most used React lifecycle method and it is the only required method in any React class.\n\n```javascript\n    render(){\n     console.log(\"render method is called here\");\n     return \u003cdiv\u003eHello world!\u003c/div\u003e\n    }\n```\n\nYou are not however allowed to set state inside the render method as it should be pure. Pure functions are functions without side effects, they must always return the same outputs when the same corresponding inputs are passed into them.\n\n## componentDidMount()\n\nThis method is called immediately after the render method call as soon as the component is mounted. Inside this method is where you are allowed to do all the behind the scenes work you need without the DOM. These things can range from setting state, initializing and loading data and even adding event listeners. The syntax looks like this:\n\n```javascript\n    componentDidMount() {\n     console.log(\"componentDidMount was called here\");\n    }\n```\n\nIf `setState` is called inside this method, the DOM is re-rendered to reflect the modification. This method is perfect for making AJAX calls.\n\n## shouldComponentUpdate()\n\nThis is the method that is called right after the `componentDidMount method`, this method does not allow you set state in it. It is useful for when you do not want your props or state changes re-rendered, it is like a bridge where you have to get permission if a component should be updated based on the props or state changes made. It returns a boolean, usually true by default. The syntax looks like this:\n\n```javascript\n    shouldComponentUpdate(nextProps, nextState) {\n      console.log(\"should component update is called here!\");\n      return nextState.cars.length \u003c this.state.cars.length;\n    }\n```\n\nIt takes in two arguments, `nextProps` and `nextState` and with those you can you can make your return conditions for the re-render. It is advised that this method be used with care and for optimization purposes keep in mind that it can trigger re-renders.\n\n## getSnapshotBeforeUpdate() \n\nThis method is a very frequently used method, it is called just between the period a component is rendered and when it is updated in the DOM. It is a kind of screenshot of what the previous state and props looks like before updating, a genius method by React. The syntax can look like this:\n\n```javascript\n    getSnapshotBeforeUpdate(prevProps, prevState){\n      console.log(\"getSnapshotBeforeUpdate was called here!\");\n      if (prevState.cars.length \u003c this.state.cars.length) {\n        return { lastVehicle };\n      }\n      return null;\n    }\n```\n\nIt takes two parameters, `prevProps` and `prevState` and it either returns a value from the conditional statement or null by default. The value returned is always passed down to the componentDidUpdate method.\n\n## componentDidUpdate()\n\nThis is the next method that gets called immediately after the `getSnapshotBeforeUpdate` method, right after a DOM update. Here some logic can be set up for actions on an updated DOM. The syntax is like this:\n\n```javascript\n    componentDidUpdate(prevProps, prevState, snapshot) {\n      console.log(\"componentDidUpdate was called here!\");\n    if (snapshot.lastVehicle) {\n        return \u003cdiv\u003e No cars left! \u003c/div\u003e\n      }\n    }\n```\n\nIt has three parameters, the `prevProps`, `prevState` and the `snapshot` . The `snapshot` is the value returned from the `getSnapshotBeforeUpdate` method. You can set state here but it should always be inside a conditional statement.\n\n## componentWillUnmount()\n\nThis method is called just before a component is unmounted from the DOM, it is the method called right after componentDidUpdate. Here is where your clean up logic should go, clearing counters and caches, cancel API requests or removing things like event listeners. It can look like this:\n\n```javascript\n    componentWillUnmount(){\n      console.log(\"componentWillUnmount was called here!\");\n      window.removeEventListener(\"restart\");\n    }\n```\n\nAs you might have guessed, you cannot set state in this method because that would automatically have to cause a re-render most times. After this, your component is gone, for good.\n\n## getDerivedStateFromError()\n\nThis is one of the two new lifecycle method used to gracefully handle errors called error boundaries. If a child component of a parent component has an error we can use this method to display an error screen. The syntax looks like this:\n\n```javascript\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n      }\n    \n      render() {\n        if (this.state.hasError) {\n          // You can render any custom fallback UI\n          return \u003ch1\u003eSomething went wrong.\u003c/h1\u003e;\n        }\n    \n        return this.props.children; \n      }\n```\n\nHere we catch a child component error and we display an error message of choice to the client gracefully instead of breaking the application or displaying a blank screen.\n\n## componentDidCatch()\n\nThis is the second lifecycle method that is a React error boundary. It enhances the capability of the first error boundary above by allowing for logging errors. The syntax looks like this:\n\n```javascript\n    componentDidCatch(error, info) {\n        console.log(info.componentStack);\n      }\n```\n\nSo, in addition to showing your client a decent ‘something went wrong’ message in the user interface, you also get a platform to inform a developer inspecting the component of specific information about the error. It is mostly used in addition with the getDerivedStateFromError method.\n\n## Conclusion\n\nYou have seen [all the lifecycle methods in React 16](https://reactjs.org/docs/react-component.html?utm_source=caibaojian.com), their syntax and how they all work in the chronological order of method calls. The error boundaries are relatively new and you should make sue to incorporate them in your workflow, they have been found to be very helpful. You can see a [visual representation of these methods here](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/). Happy coding!","metaTitle":"Lifecycle methods in React 16","metaDescription":"Gain an understanding of all the lifecycle methods in React Native 16, including the error boundaries methods. Learn when to use them, performance implications, and best practices."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"375uo5UDmXvrwBY64HT5h4","type":"Entry","createdAt":"2019-05-16T10:50:37.033Z","updatedAt":"2019-05-16T10:50:37.033Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"New features in Vue CLI 3.0","url":"vue-cli-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2019-05-16","description":"In this tutorial, learn about the new features shipping with Vue CLI 3.0. Understand the need for the new tool and the benefits of upgrading. Get an overview of key new commands and functionality, including the --modern flag and the graphical user interface.","content":"\u003e **TL;DR:** In this tutorial, you will be introduced to Vue’s command line interface tool and all the features that the new version ships with.\n\n![vue-cli-3-intro-image-1](//images.ctfassets.net/1es3ne0caaid/5pZq2Jn9cc9SPUYD8g0s0U/c91b6cc61b5876750731f06c4f50c2e7/vue-cli-3-intro-image-1.png)\n\nVue JS created by [Evan You](https://twitter.com/youyuxi?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor) and [over 200 open source community lovers which has accumulated more than 121,000 stars on GitHub](https://github.com/vuejs/vue) is a very progressive framework for building user interfaces. It consists of an approachable core library that focuses developers on the view layer of the web applications only, and an ecosystem of supporting libraries that helps you tackle complexity in large single-page applications.\n\nA few months ago, [Vue CLI version 3.0](https://medium.com/the-vue-point/vue-cli-3-0-is-here-c42bebe28fbb?source=collection_home---6------3---------------------) was released by the Vue JS team. In this post, you will be shown all the exciting new features that this new version shipped with and notes on how to get started.\n\n## On the road to Vue version 3\n\nAs the Vue JS team is working on the next biggest version of Vue which will be version 3, a lot of momentum is being gathered as we wait. I think the CLI tool being in version 3 is most definitely in line with the Vue calendar for releases to match 3.0 when it finally comes out, this can be at any moment in 2019. Shortly after the release of the CLI version 3.0, [Vue 2.6 was released](https://medium.com/the-vue-point/vue-2-6-released-66aa6c8e785e?source=collection_home---6------0---------------------). This was also strategic as it was released on the fifth anniversary of Vue. \n\n## Need for a new CLI tool \n\nAs Vue continues to record massive success in the adoption war among frontend JavaScriptframeworks, the team has made it a priority to continue to break down barriers to entry especially for beginners and people who are new to the Vue community. \nThis prompted the decision to **totally re-write the CLI tool** because of the constant feedback from developers highlighting the struggles and sometimes confusion with lots of configuration while trying to bootstrap Vue projects. \nSo, to bring even more clarity to the setup process, the new CLI tool was built.\n\n## Built for the future\n\nThis new version of the CLI has two distinct platforms of support that makes it very progressive and ahead of its time as the JavaScript community keeps evolving. \n\n1. Modern mode.\n2. Web components.\n\n## Modern mode\n\nThis is what the Vue team calls their new Babel incorporation into the CLI tool to accommodate all the newest JavaScript features in ES2015+ and at the same time still ship bundles with polyfills to cater for older and yet-to-be-updated browsers. \nWhen building for production with the following command:\n\n```\n    vue-cli-service build --modern\n```\n\nThe Vue CLI will outputs two versions of the application: a modern version targeting modern browsers and a kind of legacy bundle supporting older browsers. There are no extra requirements to use the modern mode.\nThe generated HTML file automatically employs the techniques discussed in [Phillip Walton’s excellent post](https://philipwalton.com/articles/deploying-es2015-code-in-production-today/):\n\n\n- The modern bundle is loaded with `\u003cscript type=\"module\"\u003e`, in browsers that support it; they are also preloaded using `\u003clink rel=\"modulepreload\"\u003e`instead.\n- The legacy bundle is loaded with `\u003cscript nomodule\u003e`, which is ignored by browsers that support ES modules.\n- A fix for `\u003cscript nomodule\u003e` in Safari 10 is also automatically injected.\n\nAfter testing, a simple beginner app created with the Vue CLI shows that the modern bundle is 16% smaller than the normal bundle.\n\n## Web components\n\nVue components can now be built into web components with a line of command:\n\n```\n    vue-cli-service build --target wc --name my-element src/MyComponent.vue\n```\n\nA JavaScript bundle is generated registering the internal Vue component as a native custom element on the page, which can then be used as `\u003cmy-element\u003e`. \nMultiple Vue components too can be built into a bundle with multiple chunks with this command:\n\n```\n    vue-cli-service build --target wc-async 'src/components/*.vue'\n```\n\nBy including a small entry file from the resulting bundle, it registers all components as native custom elements, but only fetches the code for the underlying Vue component when the corresponding custom element is first instantiated on the page.\n\n## Instant prototyping\n\nSometimes, we do not really want to wait for npm installations or creation of a full fledged project to create a quick component. With the new CLI, you can now create standalone single file Vue components with all the powers of a Vue project from any file location in your machine - this is my favorite feature. \n\nTo be able to access this super feature, you have to install the Vue CLI service globally with this command:\n\n```\n    npm install -g @vue/cli-service-global\n```\n\nThat’s all, you can go ahead and create a file anywhere on your machine. If your single file is called `test.vue` ``for instance then you can serve it on a development server just as you would with a complete Vue project with this command:\n\n```\n    vue serve test.vue\n```\n\nThis spins up your Vue app in localhost, exactly as it will with a full project, awesome right?\n\n## Extensibility with plugins\n\nThis new CLI tool was re-written from the ground up to be plugin-based. This means that all the custom and default features like ESLint and Babel are treated as plugins. Plugins can inject dependencies and files during the app’s scaffolding phase, and tweak the app’s webpack config or inject additional commands to the CLI service during development. Plugins affect Vue core component and files and with the [Plugin API](https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli-service/lib/PluginAPI.js) by Vue, developers can create their own plugin. \nThere is now a kind of plugin marketplace (think VS Code extensions) in Vue through the CLI.\nPlugins can be easily added using a line of command like this:\n\n```\n    vue add pluginName\n```\n\nWhere pluginName can be TypeScript, Vuex or any other plugin. The `add` command acts exactly like it does in Angular with “ng add”. If you are interested in writing your own plugin, check out the [plugin dev guide](https://cli.vuejs.org/dev-guide/plugin-dev.html#service-plugin). \nThe idea of choosing templates on startup is now a thing of the past, now you select presets: default presets or custom presets where you can choose your own plugins to get started with.\n\n## Graphical user interface\n\nIn the bid to totally break entry barriers to getting started with Vue, the Vue team also built a fully functional GUI tool for the CLI with a shiny looking configuration dashboard.\n\n![vue-cli-3-intro-image-2](//images.ctfassets.net/1es3ne0caaid/4VNq2ReAy21XmoIxgoFNgA/1c24fc32805914bd0ac8daa69917121f/vue-cli-3-intro-image-2.png)\n\nWith this GUI tool, you can do almost everything you can with the CLI: create a project, serve it up, perform linting and even build it out for production. You can also install plugins and dependencies with it, also handle basic debugging and a whole lot more. The only thing I found was not yet supported in the GUI tool is accessing the single file Vue components. \nTo use the GUI tool, you have to simply run the `ui` ``command in your machine:\n\n```\n    vue ui\n```\n\nThe dashboard like the one pictured above would run on an available port on your localhost.\n\n## Rich features out-of-the-box\n\nAt the core, Vue CLI provides a pre-configured build setup built on top of webpack 4. To help reduce the amount of configuration developers have to go through, every Vue CLI 3 project comes with out-of-the-box support for:\n\n\n- Pre-configured webpack features such as [hot module replacement](https://webpack.js.org/concepts/hot-module-replacement/), [code-splitting](https://webpack.js.org/guides/code-splitting/), [tree-shaking](https://webpack.js.org/guides/tree-shaking/#src/components/Sidebar/Sidebar.jsx), [efficient long term caching](https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31), [error overlays](https://webpack.js.org/configuration/dev-server/#devserver-overlay), etc.\n- ES2017 transpilation (plus common proposals like object rest spread and dynamic import) and usage-based polyfills injection via Babel 7 + [preset-env](https://github.com/babel/babel/tree/master/packages/babel-preset-env)\n- Support for PostCSS (with autoprefixer enabled by default) and all major CSS pre-processors\n- Auto-generated HTML with hashed asset links and preload/prefetch resource hints\n- Modes and cascading environment variables via `.env` files\n- [Modern mode](https://cli.vuejs.org/guide/browser-compatibility.html#modern-mode): ship native ES2017+ bundle and legacy bundle in parallel (details below)\n- [Multi-page mode](https://cli.vuejs.org/config/#pages): build an app with multiple HTML/JS entry points\n- [Build targets](https://cli.vuejs.org/guide/build-targets.html#app): build Vue Single-File Components into a library or native web components (details below)\n\nAlso optionally, you can add these plugins to your preset on startup: TypeScript , [PWA](https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa), [Vue Router](https://router.vuejs.org/) \u0026 [Vuex](https://vuex.vuejs.org/), [ESLint](https://eslint.org/) / [TSLint](https://palantir.github.io/tslint/) / [Prettier](https://prettier.io/), [Jest](https://jestjs.io/) or [Mocha](https://mochajs.org/), [Cypress](https://www.cypress.io/) or [Nightwatch](http://nightwatchjs.org/) and many others alike.\nVue CLI makes sure all the above features work nicely together so that you do not have to do any config dirty work yourself.\n\n## Using Vue CLI 3.0 \n\nTo use the new version 3, uninstall the old CLI tool:\n\n```\n    npm uninstall -g vue-cli\n```\n\nThen install the new CLI with this command:\n\n```\n    npm install -g @vue/cli\n```\n\nAlso to create a new Vue project with the CLI, there is a new syntax:\n\n```\n    vue create myapp\n```\n\nWhere myapp is the name of the Vue app you intend building.\n\n## Conclusion\n\nYou have been introduced to all the new features of the Vue CLI 3.0 and the reasoning behind the features. The GUI and the instant prototyping features are my personal favorites, what are yours? ","metaTitle":"New features in Vue CLI 3.0","metaDescription":"In this tutorial, learn about the new features shipping with Vue CLI 3.0. Understand the need for the new tool and the benefits of upgrading. Get an overview of key new commands and functionality, including the --modern flag and the graphical user interface."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"tANmwZdnJlDd6CqiTBsNs","type":"Entry","createdAt":"2019-04-30T18:52:07.492Z","updatedAt":"2019-04-30T18:52:07.492Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Understanding Node.js by building command line apps","url":"node-command-line-app","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/weatherCLI","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-04-30","description":"Use Node.js to build a command line application. Integrate the APIXU weather API, allowing users to get the current and predicted weather for any location in the world. The Commander npm module provides CLI app scaffolding including help and version pages.","prerequisite":"You will need Node.js installed on your machine.","content":"In this tutorial, I’ll be showing how to build command line applications using Node.js.\n\nJavaScript is very popular for building all kinds of applications, from frontend applications to backend and mobile applications. The language keeps evolving and now you can build command line applications or control hardware devices like drones with JavaScript.\n\n## Prerequisites\n\nThis tutorial assumes the following:\n\n- Node.js and NPM installed on your computer\n- Basic knowledge of JavaScript and Node.js\n\n## What we’ll be building\n\nIn this tutorial, we’ll be learning how to build simple command line application. We’ll be building a command line weather application using Node.js. With our command line weather application, we’ll be able to get the current weather in any city in the world. We’ll also be able to get a forecast for any specified city using a different command line parameters.\n\n## Getting started\n\nLet’s start by setting up our project and installing dependencies:\n\n```\n    $ mkdir weatherCLI\n    $ cd weatherCLI\n    $ npm init -y\n```\n\nThis will create an empty directory called `weatherCLI` that will hold all our project files.\nAfter our project directory has been created, we change the directory to the project directory and initialize our project. A `package.json` file will be created and now we can proceed to install our project dependencies:\n\n```\n    $ npm install commander node-fetch --save\n```\n\n[Commander](https://github.com/tj/commander.js) is a Node.js library that makes writing command line applications easy. We’ll be leveraging the library to build our command line application. [node-fetch](https://github.com/bitinn/node-fetch) is also a light-weight module that allows us make requests to external services to fetch data. We’ll use it to fetch weather data from [APIXU](https://www.apixu.com).\n\n## Obtaining API keys\n\nTo obtain our API keys, we need an account on [APIXU](https://www.apixu.com). Once you’ve created an account, login to the dashboard to find your API key that looks like `4a8****3e``*e248ac1*****``04`.\n\n## Building the command line app\n\nFirst, let’s create our project files. Create a `src` directory, and within it, create two files:\n\n```\n    $ touch src/index.js src/commands.js\n```\n\nOnce the files are created, we’ll go ahead to create our commands for the app by adding the code below inside `src/commands.js`:\n\n```js\n    // src/commands.js\n    \n    const fetch = require(\"node-fetch\");\n    const APIXU_KEY = \"\u003cYOUR APIXU KEY\u003e\";\n```\n\nWe import the `node-fetch` library, then we create an `APIXU_KEY` variable, which holds our API key.\n\nNext, we’ll go ahead to create two functions: `fetchNow()` to fetch the current weather for any specified city and `weatherForecast()` to fetch the forecast of any specified city likewise:\n\n```js\n    // src/commands.js\n    \n    const fetchNow = async (city) =\u003e {\n      const response = await fetch(`https://api.apixu.com/v1/current.json?key=${APIXU_KEY}\u0026q=${city}`);\n      const data = await response.json();\n    \n      const now = {\n        location: data.location.name,\n        country: data.location.country,\n        longitude: data.location.lon,\n        latitude: data.location.lat,\n        temparature: data.current.temp_c,\n        condition: data.current.condition.text\n      }\n    \n      console.log(now)\n    };   \n```\n\nThe `fetchNow` function is an asynchronous function that will return a `Promise`. It takes the passed `city` as a parameter in order to make the complete API request. The `await` operator can only be used inside an asynchronous function and it returns the fulfilled value of the `Promise`, or the value itself if it's not a `Promise`.\n\nThe `now` object holds just the necessary information we need from the data returned from the API request. The same thing applies to the `weatherForecast` function:\n\n```js\n    // src/commands.js\n    \n    const weatherForecast = async (city) =\u003e {\n        const response = await fetch(`https://api.apixu.com/v1/forecast.json?key=${APIXU_KEY}\u0026q=${city}`);\n    \n      const data = await response.json();\n    \n      console.log(data.forecast)\n    };\n```\n\nAfter defining all functions, we need to export them so they can be used in our command line program:\n\n```js\n    // src/commands.js\n    \n    module.exports = {\n      fetchNow,\n      weatherForecast\n    };\n```\n\nOur main application file `src/index.js` will hold the main application logic. Add the code below inside `src/index.js`:\n\n```js\n    // src/index.js\n    \n    const program = require('commander');\n    const { fetchNow, weatherForecast } = require('./commands');\n```\n\nWe import the `commander` library and also the defined functions from `src/commands.js`. After the dependencies have been imported, we’ll define our program parameters:\n\n```js\n    // src/index.js\n    \n    program\n      .version('0.0.1')\n      .description('Command line Weather Application')\n    \n    program\n      .command(\"now \u003ccity\u003e\")\n      .alias('n')\n      .description('see the current weather in the specified city')\n      .action(city =\u003e fetchNow(city));\n    \n    program\n      .command(\"forecast \u003ccity\u003e\")\n      .alias('f')\n      .description('see the weather forcast of a specified city')\n      .action(city =\u003e weatherForecast(city)); \n```\n\nLet’s go over what each piece of the code above does:\n\n\n- `.version` allows us define the current version of our command line application\n- `.command` defines how the parameter should be passed to the program with any extra arguments\n- `.alias` defines an alternative short form parameter that can be passed to the program instead of typing a longer one.\n- `.description` is the description of the alias\n- `.action` will call whatever function is passed to it. The action runs the functions and displays whatever is returned from the function. The action is also responsible for handling interactions with the user if the command line application is an interactive application.\n\nIn order to read all parameters and arguments passed to our program, we have to parse the inputs after the program command. Add the snippet below as the last line inside `weatherCLI.js`:\n\n```js\n    // src/index.js\n    \n    program.parse(process.argv)\n```\n\n## Running and testing the CLI application\n\nTo run and test our application, run the command below:\n\n```\n    $ node src/index.js now lagos\n```\n\nIt will return the current weather in Lagos as in the image below:\n\n![node-cli-weather-current](//images.ctfassets.net/1es3ne0caaid/3evr6LYpgSCpOy2eaWqLNr/77de51ef272f2bbd46d89348e7bacf6c/node-cli-weather-current.png)\n\nTo fetch the weather forecast for Lagos, run:\n\n```\n    $ node src/index.js f lagos\n```\n\n![node-cli-weather-future](//images.ctfassets.net/1es3ne0caaid/620gvkFjNCJSxKFD1NzB0z/c096b39ca34218b58f4bdf36fddb947b/node-cli-weather-future.png)\n\nAlso, we can run additional commands as below:\n\n```\n    $ node src/index.js --help\n```\n\nThis will return the application usage menu.\n\n![node-cli-weather-help](//images.ctfassets.net/1es3ne0caaid/48XbKS1Q2oMu51ZPqpXdDI/12180ba88da7864662da5a903a7698e2/node-cli-weather-help.png)\n\n```\n    $ node src/index.js --version\n```\n\nThis will return the application version as specified earlier in `src/index.js`.\n\n![node-cli-weather-version](//images.ctfassets.net/1es3ne0caaid/1O6Nect5QOWAtmNEjUXHXd/0a31be6a5f02972f69fc8d359a6f4078/node-cli-weather-version.png)\n\n## Conclusion\n\nFrom the tutorial, we can see how easy it is to create command line applications using the Node.js Commander library. We’ve been able to create a command line application that can display the current weather of any city in the world using the [APIXU](https://www.apixu.com). You can work more on the display formats so the displayed data looks interesting to users and also add a network loader while the application is fetching the weather reports.\n\nThe complete code for this tutorial is available on [GitHub](https://github.com/ammezie/weatherCLI).","metaTitle":"Understanding Node.js by building command line apps","metaDescription":"Use Node.js to build a command line application. Integrate the APIXU weather API, allowing users to get the current and predicted weather for any location in the world. The Commander npm module provides CLI app scaffolding including help and version pages."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2Y5V99KAFZ8nOHQOK8PaZ","type":"Entry","createdAt":"2019-04-25T18:29:16.822Z","updatedAt":"2019-04-25T18:29:16.822Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Youtube-integrated application using React Native","url":"youtube-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/OurTube","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-04-25","description":"Build a basic React Native app. Set up YouTube integration and pull in playlists from Rotten Tomatoes. This tutorial will guide you through React Native basics such as building components and using React Router.","prerequisite":"You will need React Native installed on your machine.","content":"## Introduction\n\nWhile building certain types of mobile apps, you might need to have media files displayed in the app.  In this tutorial, we will see how to integrate media from YouTube into our mobile apps.\n\n## What we'll build\n\nWe will build a simple mobile app using React Native called OurTube which will pull videos from the new trailers on Rotten Tomato YouTube channel via the Youtube API and display them to the user. After displaying, we should also be able to tap on a video and have it play inside the app.\n\n## Prerequisites\n\nA basic understanding of React and React Native is required for this tutorial.\n\n## Getting started\n\nYoutube is a video sharing website and it allows users to upload, rate, like, dislike, comment on videos and a lot more. Youtube also allows users to live stream videos. Youtube is also used widely for video blogging, educational purposes, movies, and trailers, and so on.\nWith the Youtube API, users can find, watch, and manage content on YouTube. It also allows you to add YouTube functionality to your website and mobile apps.\n\n## Obtaining your YouTube API key\n\nTo get started, the first step is to obtain our developer API key from the developer console. If you prefer a video tutorial, you can find a detailed video tutorial on how to obtain your developer API keys for YouTube [here](https://www.youtube.com/watch?v=3jZ5vnv-LZc).\n\nAfter obtaining your API key that should look like `AIzaSy****DjoCmWdzH*****cZYjOVg8o******`, we require the playlist ID we would like to fetch. To get the playlist ID:\n\n- Go to [Rotten Tomatoes TV channel YouTube page](https://www.youtube.com/playlist?list=PLTovKDoAy18KZ6sUQcmK2RDQeYkm2xUNtYouTube) -\u003e New Trailers Playlist\n- Copy the URL from the address bar e.g `https://www.youtube.com/playlist?list=PLTovKDoAy18KZ6sUQcmK2RDQeYkm2xUNt` and the playlist ID will be the string after the `list` query in the URL which is `PLTovKDoAy18KZ6sUQcmK2RDQeYkm2xUNt`\n## Setting up our React Native project\n\nTo get started, follow the official [documentation](https://facebook.github.io/react-native/docs/getting-started) on how to set up your computer for React Native development. If you already have your computer set up, you need to initiate and create the application project.\n\n```\n    $ react-native init OurTube\n```\n\nOnce that is completed, we need to compile and build the application to make sure everything is working fine.\n\n```\n    // For ios\n    $ react-native run-ios\n    \n    // For Android\n    $ react-native run-android\n```\n\n## Configure routing using react-native-router-flux\n\nReact-native-router-flux is a simple navigation API on top of React Navigation and it allows you to declare all application routes in stack and scenes for easy management and configuration. To get started with `react-native-router-flux`:\n\n```\n    $ npm install react-native-router-flux --save\n```\n\nGo ahead and create a route file and configure all application routing.\n\n```\n    $ touch Route.js\n```\n\n`Route.js` should be in the root directory of our OurTube App  and the contents will look like:\n\n```js\n    // Route.js\n    import React, { Component } from 'react';\n    import {Platform} from 'react-native';\n    // import components from react-native-router-flux\n    import {Router, Stack, Scene} from 'react-native-router-flux';\n    // import our screens as components \n    import Home from './screens/Home';\n    import WatchVideo from './screens/Video';\n    export default class Routes extends Component\u003c{}\u003e {\n      render() {\n        return(\n          \u003cRouter\u003e\n              \u003cStack key=\"root\"\u003e\n                \u003cScene key=\"home\" component={Home} title=\"Playlist Videos\" /\u003e\n                \u003cScene key=\"watchvideo\" component={WatchVideo} title=\"View Video\"/\u003e\n              \u003c/Stack\u003e\n          \u003c/Router\u003e\n          )\n      }\n    }\n```\n\nThe Router is the main routing component while a Stack is a group of Scenes with it's own navigator, so you can have multiple stacks for navigating. A Scene is the basic routing component for the main router and all Scene components require a key prop that must be unique and a key prop is used to call the screen transition and must be unique to all screens.\nWe have created two scenes called `home` and `watchvideo`. The scenes will be called as actions in our Home and Video screens.\nMore information can be found in the official [documentation](https://github.com/aksonov/react-native-router-flux/tree/master/docs/v3) of React Native Router Flux.\nUpdate `App.js` file to look like:\n\n```js\n    // App.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View,\n      StatusBar,\n    } from 'react-native';\n    import Routes from './Route';\n    export default class App extends Component\u003c{}\u003e {\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cStatusBar\n              backgroundColor=\"#fff\"\n              barStyle=\"dark-content\"\n            /\u003e\n            \u003cRoutes/\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container : {\n        flex: 1,\n      }\n    }); \n```\n\n## Creating UI components\n\nReact Native offers inbuilt UI components and we'll be leveraging these inbuilt components. We will make use of components such as the `FlatList`, `Text`, and so on. \nLet's go ahead to create our project directories and files: \n\n```\n    $ mkdir screens \u0026\u0026 cd screens\n    $ touch Home.js Video.js\n```\n\n``js\n    // screens/Home.js\n    import React, { Component } from 'react';\n    import { StyleSheet, SafeAreaView, FlatList, Text, TouchableOpacity } from 'react-native';\n    import {Actions} from 'react-native-router-flux';\n    const MAX_RESULT = 15;\n    const PLAYLIST_ID = \"PLScC8g4bqD47c-qHlsfhGH3j6Bg7jzFy-\";\n    const API_KEY = \"\u003cYOUR-YOUTUBE-API-KEY\u003e\";\n    export default class Home extends Component\u003c{}\u003e {\n      \n      home(){\n        Actions.home();\n      }\n      watchVideo(video_url){\n        Actions.watchvideo({video_url: video_url});\n      }\n      componentWillMount() {\n        this.fetchPlaylistData();\n      }\n      fetchPlaylistData = async () =\u003e {\n        const response = await fetch(`https://www.googleapis.com/youtube/v3/playlistItems?playlistId=${PLAYLIST_ID}\u0026maxResults=${MAX_RESULT}\u0026part=snippet%2CcontentDetails\u0026key=${API_KEY}`);\n        const json = await response.json();\n        this.setState({ videos: json['items']});\n        console.log(this.state.videos)\n      };\n      constructor(props) {\n        super(props);\n        this.state = {\n          videos: [],\n        }\n      }\n      render() {\n        const videos = this.state.videos;\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n                \u003cFlatList\n                  data={this.state.videos}\n                  keyExtractor={(_, index) =\u003e index.toString()}\n                  renderItem={\n                    ({item}) =\u003e \n                    \u003cTouchableOpacity\n                        style={styles.demacate}\n                        onPress={() =\u003e this.watchVideo(item.contentDetails.videoId)}\n                    \u003e\n                    \u003cText \n                      style={styles.item} \n                    \u003e \n                    {item.snippet.title} \n                    \u003c/Text\u003e\n                    \u003c/TouchableOpacity\u003e\n                  }\n                /\u003e\n          \u003c/SafeAreaView\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      },\n      demacate: {\n        borderBottomColor: 'blue',\n        borderBottomWidth: 2,\n        borderRadius:10\n      },\n      item: {\n        padding: 10,\n        fontSize: 12,\n        height: 44,\n      },\n    });\n```\n\nThe first thing we do in the `Home.js` file is to import all the necessary components to build the home screen. Like the variable names imply, `MAX_RESULT` is the number of videos we want to return from the youtube API, `PLAYLIST_ID` is a string of the youtube playlist we want to fetch and `API_KEY` will hold our Youtube API access key.\n\nThe `home()` and `watchVideo()` functions will call navigation actions that allow us to navigate from page to page. The `fetchPlaylistData()` is an asynchronous function that allows us to fetch data from the Youtube API and `componentWillMount()` allows us to fetch the async data after the screen is rendered. \n\nThe response data is converted to JSON and stored in the videos state and will be passed to our component during rendering. \n\nIn the `render()` we define a prop that holds data fetched such as video id from our Youtube API and we pass it to the videos page as a `video_url` prop so we don't have to do a network fetch to get the same data on the next screen. \n\nOur `render()` function renders the screen and we use the SafeAreaView component to handle the screens of newer devices such as the iPhone X, XR and higher so the screen doesn't overlap. We use the `Flatlist` component to render our data from the `videos` state using the `renderItem` prop.\n\n```js\n    // screens/Video.js\n    import React, { Component } from 'react';\n    import { StyleSheet, SafeAreaView, View, WebView } from 'react-native';\n    import {Actions} from 'react-native-router-flux';\n    export default class WatchVideo extends Component\u003c{}\u003e {\n      \n      home(){\n        Actions.home();\n      }\n      videos(){\n        Actions.videos();\n      }\n      constructor(props) {\n        super(props);\n        console.log(this.props);\n      }\n      render() {\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n              { \n                \u003cWebView\n                  source={{ uri: \"https://www.youtube.com/embed/\"+this.props.video_url}}\n                  startInLoadingState={true} \n                /\u003e\n              }\n          \u003c/SafeAreaView\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      }\n    });\n```\n\nIn the `Video.js` file, we also import all the necessary components to build our interface and likewise, create routing actions so we can navigate back to our home screen.\nIn the `render()` function, the data we stored in the `video_url` props is accessed and rendered using the `Webview` video component. The component is customizable and allows us to define the URL source, loaders, and so on. \n\n## Building our app\n\nTo build and compile our code on iOS:\n\n```\n    $ react-native run-ios\n```\n\nTo build and compile our code on Android:\n\n```\n    $ react-native run-android\n```\n\nAfter build is successful, your application should look like:\n\n- Home Screen\n![react-ative-youtube-1](//images.ctfassets.net/1es3ne0caaid/71QEeOooJs8NEECW70GXW2/07781df2b5ac9408900a59da419c7330/react-ative-youtube-1.png)\n\n- Video Screen \n![react-ative-youtube-2](//images.ctfassets.net/1es3ne0caaid/2x9Vny1WUcFHQ9xiywm79D/c1cf04bc40a7228b25f275d1a1dad870/react-ative-youtube-2.png)\n\n## Conclusion\n\nThe YouTube API is robust and allows us to watch videos, get video metadata, and so on. The data can be integrated with any mobile development framework and as seen in OurTube app using React Native.\nOurTube app is in a simple version right now, but you can go ahead to add some more functionalities such as liking and disliking videos, reporting comments, and so on by reading [the Google Developer guide for Youtube](https://developers.google.com/youtube/v3/getting-started) in order to build complex and robust applications.\nThe codebase to this tutorial is available in a [public GitHub repository.](https://github.com/samuelayo/OurTube) Feel free to play around with it.","metaTitle":"Create a Youtube-integrated application using React Native","metaDescription":"Build a basic React Native app. Set up YouTube integration and pull in playlists from Rotten Tomatoes. This tutorial will guide you through React Native basics such as building components and using React Router."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6TNyvQoF2Yo2du5mu3u3XY","type":"Entry","createdAt":"2019-04-23T17:55:06.084Z","updatedAt":"2019-04-23T17:55:06.084Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Writing accessible apps and efficient code with React fragments","url":"accessible-react-fragments","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/Fragments","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-04-23","description":"Learn how to handle nested HTML elements in React using fragments. Understand the benefits of fragments compared to other approaches, and work through a few practical examples.","prerequisite":"You will need React 16.8+ installed on your machine.","content":"we should \u003e **TL;DR:** in this article, you will be introduced to an awesome feature in React called fragments. You will learn why it is important as regards accessibility and how to use it.\n\n\n## Introduction\n\nSometimes while using React, you want to display or return multiple HTML elements in a component. This can be achieved in a number of ways that will be discussed in this post, most of which however can lead to HTML that is not accessible or even to writing non-semantic code. In this article, you will be shown a new feature called fragments in React that lets you do so in a very accessible memory efficient way. You will be taken through a series of illustrations and also code samples to let you properly understand the usefulness and how React fragments came about.\n\n## Achieving accessibility in React\n\nAccessibility on the web is the design of pages, tools and technologies that can be used by everyone. Everyone here includes people with auditory, cognitive, neurological, physical, speech and visual disabilities. Accessibility support is necessary to allow assistive technology like screen readers to interpret web pages and applications. For these technologies to work, developers have to always think and build accessible applications.\n\n\n## Prerequisites \n\nThis article is suited for all levels of expertise using React JS, this includes beginners. This article promises to break down concepts as simply as possible.\nTo be able to follow through in this article’s demonstration you should have:\n\n\n- [Visual Studio Code](https://code.visualstudio.com/download) installed as your integrated development environment. \n- Node version 11.0 or above installed on your machine.\n- Node Package Manager version 6.7 or above (usually ships with Node installation).\n- React version 16.8 or above installed on your machine.\n- Create-react-app installed on your machine\n\nWith these, you are ready to move to setting up a new React project. \nOther things that will be nice-to-haves are:\n\n- A working knowledge of the [React framework and create-react-app (CRA)](https://github.com/facebook/create-react-app) file system at a beginner level.\n- Familiarity with rendering in React will be a plus but not a requirement.\n\n\n## Setting up\n\nWe will go through the process of setting up the development environment and installing all the required dependencies for create-react-app to work.\n\nInstall React globally by running the command below in a terminal:\n\n```\n    npm install -g react\n```\n\nInstall create-react-app globally too with this command below\n\n```\n    npm install -g create-react-app\n```\n\nNavigate to a folder of your choice and create a new React application called `fragments` with the CRA boilerplate by running this command below\n\n```\n    npx create-react-app fragments\n```\n\nOR You can just download an already created new React project [here](https://github.com/viclotana/react_canvas). Unzip the folder and then install all the dependencies with this command:\n\n```\n    npm install\n```\n\nNavigate into the fragments folder and run the new app in development environment like this:\n\n```\n    npm start\n```\n\nOpen the project in VS Code, navigate to the `src` folder and open the `app.js` file. Remove all the code inside the div of the return statement. Your `app.js` file should look like this:\n\n```javascript\n    //  src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    class App extends Component {\n     render() {\n      return (\n      \u003cdiv className=\"App\"\u003e\n      \u003c/div\u003e\n      );\n     }\n    }\n    export default App;\n```\n\n## Writing in JSX \n\nCreate a new file, call it `Fragment.js` It will be a React component. Writing in JSX, if you want to return a paragraph of text with a heading in a functional or any React component, you might first think to represent it like this at first:\n\n```javascript\n    // src/Fragment.js\n    import React from 'react'\n    function Fragment() {\n    return (\n    \u003ch2\u003e Learning about fragments \u003c/h2\u003e\n    \u003cp\u003efragments are super amazing\u003c/p\u003e\n    )\n    }\n    export default Fragment\n```\n\nAdd this line to the `App.js`  to import the fragment component in the main app component\n\n```javascript\n    import Fragment from './Fragment';\n```\n\nYou will immediately see some warnings in squeaky red lines saying “Parsing error: Adjacent JSX elements must be wrapped in an enclosing tag” and if you go ahead and save the file and run in the development environment, you will find out the application is broken.\n\n![react-fragments-1](//images.ctfassets.net/1es3ne0caaid/2IMkMbsMZwYNXwtvDSzZx6/77e008d43312c55c9c6ba5d484bb4269/react-fragments-1.png)\n\nThis occurs simply because it is not possible to have more than one parent HTML element in a return statement for JSX. In order to run JSX code and get it compiled, it must have one parent HTML element, and the rest of the elements should be child elements of that parent element. There has been a few ways React developers over time have used to get around this problem, I call them old practises.\n\n\n## Old practises\n\nThese are a few practises usually adopted by React developers to return multiple HTML elements without any parse errors.\n\n\n## The array technique\n\nIn this technique, you wrap the elements you want to return in an array by passing the elements like array elements. That way, your elements will be rendered as you will want them and the application will no longer break.\nCreate a new functional component and call it `ArrayExample.js` . Return the exact logic we had in the first illustration in the return section but this time as array elements of an array.\n\n```javascript\n    // src/ArrayExample.js\n    import React from 'react'\n    function ArrayExample() {\n     return (\n      [\n       \u003ch2\u003eLearning about fragments\u003c/h2\u003e,\n       \u003cp\u003efragments are super amazing\u003c/p\u003e\n      ]\n     )\n    }\n    export default ArrayExample\n```\n\nReference this new component in the DOM by including it and importing it in the main `App.js` file.\n\n```js\n    // src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    // import Fragment from './Fragment';\n    import ArrayExample from './ArrayExample';\n    class App extends Component {\n    render() {\n    return (\n    \u003cdiv className=\"App\"\u003e\n    {/* \u003cFragment /\u003e */}\n    \u003cArray /\u003e\n    \u003c/div\u003e\n    );\n    }\n    }\n    export default App;\n```\n\nIn order not to get any errors, make sure to remove the paragraph element in the `Fragment.js` file. The return statement should look like this:\n\n```js\n    // replace the return code block in the Fragment.js with this\n    return (\n    \u003ch2\u003e\n    Learning about fragments\n    \u003c/h2\u003e\n    )\n```\n\nWhen you save all the files, you will see the elements you expected rendered in the browser. Open your browser at [http://localhost:3000/](http://localhost:4200/) and you should see your application like this:\n\n![react-fragments-2](//images.ctfassets.net/1es3ne0caaid/5wwSfiIU7eel6lPF57SMtO/e5a099c5c1d0d2a51be2652ae4dcb976/react-fragments-2.png)\n\n### Drawbacks: inefficient memory management\n\nThe array technique is a good solution but a memory inefficient solution, as it requires rendering extra elements in the DOM. It also requires even more additional syntax to use. If you use your browser developer tools to inspect the application, you will see a console warning that looks like this:\n\n![react-fragments-3](//images.ctfassets.net/1es3ne0caaid/5ij6dr41CgRtjIlAVjW4K2/81d3f6759931ff219e34a1d3f8294473/react-fragments-3.png)\n\nTo make sure you do not get warned again, add unique keys to the individual elements in the array.\n\n```js\n    // src/ArrayExample.js\n    import React from 'react'\n    function ArrayExample() {\n     return (\n      [\n       \u003ch2 key=\"alpha\"\u003e Learning about fragments \u003c/h2\u003e,\n       \u003cp key=\"beta\"\u003e fragments are super amazing \u003c/p\u003e\n      ]\n     )\n    }\n    export default ArrayExample\n```\n\nYou will see the warnings disappear when you save the file. This additional syntax adds to the cumbersome nature of this method and makes it unsustainable and inefficient.\n\n\n## The extra tag technique\n\nAnother solution to returning more than one element without errors is to wrap them in a parent tag. This tag can be a `span` or a `div` tag, most React developers use `div` tags a lot to ensure their code block for a return statement does not lead to errors that break the application. These tags are absolutely do nothing except preventing JSX errors.\n\nCreate a new functional component and call it `Extra.js`. Copy the logic below and paste into the new component.\n\n```js\n    // src/Extra.js\n    import React from 'react'\n    import Lists from './Lists';\n    function Extra() {\n     return (\n      \u003cdiv\u003e\n       \u003ch2\u003e Learning about fragments \u003c/h2\u003e\n       \u003cp\u003eWays to render elements\u003c/p\u003e\n       \u003cul\u003e\n        \u003cLists /\u003e\n       \u003c/ul\u003e\n      \u003c/div\u003e\n     )\n    }\n    \n    export default Extra\n```\n\nCreate another component, call it `Lists.js` where the list will be stored and then imported into the `Extra` component.\n\n```js\n    // src/Lists.js\n    import React from 'react'\n    function Lists() {\n     return (\n      \u003cdiv\u003e\n       \u003cli\u003e1. Array method\u003c/li\u003e\n       \u003cli\u003e2. Extra tag method\u003c/li\u003e\n       \u003cli\u003e3. fragments\u003c/li\u003e\n      \u003c/div\u003e\n     )\n    }\n    export default Lists\n```\n\nReference the `Extra` component in the DOM by including it and importing it in the main `App.js` file.\n\n```js\n    // src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    // import Fragment from './Fragment';\n    import Extra from './Extra';\n    \n    class App extends Component {\n     render() {\n      return (\n       \u003cdiv className=\"App\"\u003e\n       {/* \u003cFragment /\u003e */}\n       {/* \u003cArrayExample /\u003e */}\n       \u003cExtra /\u003e\n      \u003c/div\u003e\n      );\n     }\n    }\n    \n    export default App;\n```\n\nWhen you save all the files, you will see the elements as expected rendered in the browser. However, when you inspect the application using the developer tools you will discover that the extra `div` is present in the DOM but more damaging is the `div` between the `ul` tag and the `li` tags. That is not semantic and will not be recognized by an accessibility tool like a screen reader.\n\n![react-fragments-4](//images.ctfassets.net/1es3ne0caaid/4sSXaMGoB3Eg83XNRBK4O9/c774daa3180f9ba525885a1ec4817aee/react-fragments-4.png)\n\nYou can see that after a `ul` tag, the next logical HTML tag to expect is either `li` or a closing `ul` tag. Any other tag will deviate from HTML semantics.\n\n### Drawbacks: accessibility problems\n\nThis is the most popularly used method but it is also the most inaccessible solution. In instances like rendering lists items where we use extra elements like `div` tags are used, it can easily lead to non-semantic HTML. As regards to accessibility, which will be explained later in this post, it is very difficult for screen readers to interpret non-semantic code and so this method, albeit simple is not advisable.\n\n\n## Introducing React fragments \n\nSome months ago, React version 16.2 was released, it shipped with this new feature that helped to address this accessibility problem called fragments. Fragments are like those extra HTML elements we used but they come without all the drawbacks. This means that child nodes can be returned safely without extra nodes added to the DOM. \n\n\n\u003e Fragments let you group a list of children without adding extra nodes to the DOM — [Official Documentation](https://reactjs.org/docs/fragments.html#short-syntax)\n\n\n## Fragment syntax \n\n```js\n    render() {\n      return (\n        \u003cReact.fragment\u003e\n          \u003cChildA /\u003e\n          \u003cChildB /\u003e\n          \u003cChildC /\u003e\n        \u003c/React.fragment\u003e\n      );\n    }\n```\n\nThere is also a shorthand syntax you might have noticed in some of my React tutorials, they look like this:\n\n```js\n    render() {\n      return (\n        \u003c\u003e\n          \u003cChildA /\u003e\n          \u003cChildB /\u003e\n          \u003cChildC /\u003e\n        \u003c\u003e\n      );\n    }\n```\n\n## Applications of fragments \n\nIf you take the very first illustration we addressed which is `Fragment.js` and wrap the elements in a React fragment, you will see no errors and they will compile without adding the fragment node to the DOM.\n\n```js\n    // src/Fragment.js\n    import React from 'react'\n    function Fragment() {\n     return (\n      \u003c\u003e\n       \u003ch2\u003e Learning about fragments \u003c/h2\u003e\n       \u003cp\u003efragments are super amazing\u003c/p\u003e \n      \u003c/\u003e\n     )\n    }\n    export default Fragment\n```\n\nSave the file and take a look at the element inspection in the developer tools, you will notice the beautiful power of fragments.\n\n![react-fragments-5](//images.ctfassets.net/1es3ne0caaid/3xBWE1Ja5HEB2PQpjCFoVD/5551282a11d485c560a3e1533ff81435/react-fragments-5.png)\n\nThe elements appear in the DOM exactly as they are in the presentation and no longer contain any extra elements. Fragments can be used to improve efficiency, better manage memory and reduce cumbersome code structures.\n\n\n## Keyed fragments \n\nReact fragments can be returned by callback functions and they can have a `key` attribute. Copy the code below to the `Fragment.js` file\n\n```js\n    // src/Fragment.js\n    import React from 'react'\n    function Fragment() {\n    const artists = [\n    {id: '1', name: 'Davido', genre: 'afro pop'},\n    {id: '2', name: 'Skepta', genre: 'afrobeats'},\n    {id: '3', name: 'Burna Boy', genre: 'afro pop'},\n    {id: '4', name: 'Mr. Eazi', genre: 'afro pop'},\n    {id: '5', name: 'Stormzy', genre: 'afro pop'},\n    {id: '6', name: 'Wizkid', genre: 'afro pop'}\n    ]\n    return (\n    \u003c\u003e\n    \u003ch1\u003eUK Urban Artists Chart\u003c/h1\u003e\n    {\n    artists.map( artist =\u003e (\n    \u003cReact.Fragment key={artist.id}\u003e\n    \u003ch2\u003e{artist.id}: {artist.name}\u003c/h2\u003e\n    \u003c/React.Fragment\u003e\n    ))\n    }\n    \u003c/\u003e\n    )\n    }\n    export default Fragment\n```\n\nThe `key` attribute is the only attribute that can be passed to React fragments at the time of writing this tutorial. The React team however promised to look into adding support for more attributes like event handlers. \nMake sure to uncomment the fragment import in the `App.js` file \n\n```js\n    // src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    import Fragment from './Fragment';\n    // import ArrayExample from './ArrayExample';\n    // import Extra from './Extra';\n    \n    class App extends Component {\n     render() {\n      return (\n       \u003cdiv className=\"App\"\u003e\n        \u003cFragment /\u003e \n       \u003c/div\u003e\n      );\n     }\n    }\n    \n    export default App;\n```\n\nSave all the files and your application should look like this:\n\n![react-fragments-6](//images.ctfassets.net/1es3ne0caaid/4BvpSiak0HtcK2TWtLFZMJ/5ffee014d72366c4f305e95dfa6d6df1/react-fragments-6.png)\n\n## Conclusion\n\nIn this tutorial, you have been introduced to React fragments, why they are important and how they are used. You have also seen how they contribute to ensuring we keep building accessible applications. The coming of fragments is one deliberate step towards achieving total accessibility championed by React. You can find my how to make your React application more accessible [article here](https://blog.bitsrc.io/achieving-accessibility-in-react-applications-d762f8f2a3e7). The complete code to this tutorial can be found on [GitHub here](https://github.com/viclotana/Fragments). Try using fragments today.","metaTitle":"Writing accessible code with React fragments","metaDescription":"Learn how to handle nested HTML elements in React using fragments. Understand the benefits of fragments compared to other approaches, and work through a few practical examples."}}],"defaultValue":"no pusher tech","queryType":"product","pages":13,"route":"/tutorials","query":{"product":"no pusher tech","page":"2"}}},"page":"/tutorials","query":{"product":"no pusher tech","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=no%20pusher%20tech&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:41:13 GMT -->
</html>