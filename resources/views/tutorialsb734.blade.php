<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=React&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:15 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">60</span> tutorials for “<span class="css-npldjc ehwuahf2">React</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsb028.html?product=Channels&amp;tag=React" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials9a85.html?product=Beams&amp;tag=React" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="React"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/collaborative-editor-gatsby-draftjs.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a collaborative text editor with Gatsby and Draft.js</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a collaborative text editor using Gatsby. Implement realtime functionality to allow multiple people to work on the...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/carpooling-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a carpooling app with React Native - Part 1: Setting up the server</h3><p class="css-k12xad e5jrto45">This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/carpooling-react-native-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a carpooling app with React Native - Part 2: Creating the frontend</h3><p class="css-k12xad e5jrto45">This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-gatsby.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Add a chat widget to your Gatsby blog</h3><p class="css-k12xad e5jrto45">In this tutorial, we’re going to take a look at how we can add a realtime chat feature to a Gatsby blog using Pusher, us...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/mongodb-change-streams.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Using MongoDB as a realtime database with change streams</h3><p class="css-k12xad e5jrto45">Learn how to use change streams in MongoDB to create a Firebase alternative. The tutorial provides a working example of ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-paint-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live paint application with React</h3><p class="css-k12xad e5jrto45">Learn to build a collaborative painting application with React and Node.js. Users are able to work together on the same ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-data-table-react-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a realtime data table with React and Go</h3><p class="css-k12xad e5jrto45">Build a simple app with Go and React. The app displays live race results.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geofencing web app using Next.js</h3><p class="css-k12xad e5jrto45">Learn to build a web app with Next.js and React featuring geofencing functionality. Track the location of nearby friends...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-game-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a realtime game with React Native</h3><p class="css-k12xad e5jrto45">Build the classic game of tic-tac-toe using React Native.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialscbdc.html?tag=React&amp;page=4" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials6ea5.html?tag=React&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials1767.html?tag=React&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorialscbdc.html?tag=React&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsb734.html?tag=React&amp;page=5" class="css-2wakph edg0byb1">5</a><a href="tutorials69d4.html?tag=React&amp;page=6" class="css-5s6711 edg0byb1">6</a><a href="tutorials43f9.html?tag=React&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorials69d4.html?tag=React&amp;page=6" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":60,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3t51o9pbwIUMo0o6CU2wcg","type":"Entry","createdAt":"2018-06-15T10:50:04.874Z","updatedAt":"2018-06-15T10:50:04.874Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a collaborative text editor with Gatsby and Draft.js","url":"collaborative-editor-gatsby-draftjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-editor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-06-12","description":"Build a collaborative text editor using Gatsby. Implement realtime functionality to allow multiple people to work on the same text simultaneously, seeing updates instantly.","prerequisite":"You will need Node and npm installed on your machine. Some knowledge of React will be helpful.","content":"## Introduction\n\n[Gatsby](https://www.gatsbyjs.org/) is a static site generator for React that uses latest frontend technologies like Webpack and GraphQL. It can generate optimized and blazing-fast sites from Markdown, APIs, Databases, YAML, JSON, CSV and even CMSs like Contentful, Drupal and Wordpress.\n\n[Draft.js](https://draftjs.org/) is an open source framework from Facebook for building rich text editors in React. It is powered by an immutable model and abstracts over cross-browser differences.\n\nIn this post we’ll be combining the power of Gatsby, Draft.js and Pusher to build a realtime editor. Here’s a sneak-peak into what we’ll be building:\n\n![gatsby-collaborative-editing-demo](//images.ctfassets.net/1es3ne0caaid/7mnFUlTqrmQ2ew40SmQ8Cu/af2e3874e921fde0e286c018e51f4248/gatsby-collaborative-editing-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial, you need Node and NPM installed on your machine. A basic understanding of React will help you get the most out of this tutorial.\n\n\n## Install Gatsby\n\nGatsby supports versions of Node.js back to v6 and NPM to v3. If you don’t have Node.js installed, go to [https://nodejs.org/](https://nodejs.org/) and install the recommended version for your operating system.\nTo start a Gatsby app, we need to first install the Gatsby command line by running the following in the terminal:\n\n```\n    $ npm install --global gatsby-cli\n```\n\nOnce that is installed, still in your terminal, run the following command to create a new Gatsby site in a directory called `pusher-editor` and then move to this new directory:\n\n```\n    $ gatsby new pusher-editor\n    $ cd pusher-editor\n```\n\nOnce in the `pusher-editor` directory, you can run Gatsby’s built-in development server by running the following command:\n\n```\n    $ gatsby develop\n```\n\nThis starts up the development server which you can access at http://localhost:8000 from your browser. The Gatsby built in development server uses “hot reloading” which means changes made are instantly visible in the browser without reloading.\n\n![gatsby-default-page](//images.ctfassets.net/1es3ne0caaid/3KFX34LP56qI6YmcsUGWa2/5b9308f2074e36d54195343f94d66afe/gatsby-default-page.png)\n\n## Create a Pusher app\n\nTo create a Pusher app, you must have a Pusher account. Head over to Pusher and [create a free account](https://dashboard.pusher.com/accounts/sign_up).\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![gatsby-collaborative-editing-create-app](//images.ctfassets.net/1es3ne0caaid/2ogDscREokQcYGGMw8swKs/5340d88d24c82cf0a9b671ebdc20e9e0/gatsby-collaborative-editing-create-app.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate with Pusher, to be provided with some boilerplate setup code:\n\n![gatsby-collaborative-editing-configure-app](//images.ctfassets.net/1es3ne0caaid/fD5oG4WcHQyWSmMWuCMWw/6a86887340ceb803b172add91c464500/gatsby-collaborative-editing-configure-app.png)\n\nClick the **App Keys** tab to retrieve your keys\n\n![gatsby-collaborative-editing-app-keys](//images.ctfassets.net/1es3ne0caaid/5n5pzu9wmQ0ACEIymC4eS2/9e795a4fcb4a8ecdc40b70a350616607/gatsby-collaborative-editing-app-keys.png)\n\n## Setup the application\n\nNow that we have our Pusher app, let’s make some minor changes to our new Gatsby site. `Draft.js` supports unicode, and as a result, we need to add the `charset` meta tag in the `head` block of our app.\nIn the `index.js` file which can be found in `src/layouts/index.js`, there is a `Layout` functional component. Replace its contents with the following code:\n\n``` javascript\n    // src/layouts/index.js\n    \n    const Layout = ({ children, data }) =\u003e (\n      \u003cdiv\u003e\n        \u003cHelmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n            { name: 'charset', content: 'utf-8' } # add the 'charset' meta tag\n          ]}\n        /\u003e\n        \u003cHeader siteTitle={data.site.siteMetadata.title} /\u003e\n        \u003cdiv className=\"container-fluid\"\u003e # apply bootstrap class to this div\n          {children()}\n        \u003c/div\u003e\n      \u003c/div\u003e\n    )\n```\n\nNext, we’ll change the name in the header of our app. In the root directory lives a `gatsby-config.js` file. Change the site meta data title property:\n\n``` javascript\n    # gatsby-config.js\n    \n    module.exports = {\n      siteMetadata: {\n        title: 'Pusher Realtime Editor', # change this line to any title of your choice\n      },\n      plugins: ['gatsby-plugin-react-helmet'],\n    }\n```\n\nLastly, let’s add some styles to our editor. In the `index.css` file, add the following code:\n\n``` css\n    /* src/layouts/index.css */\n    \n    /* top of the file */\n    @import url('https://fonts.googleapis.com/css?family=Muli');\n    \n    body {\n      margin: 0;\n      font-family: 'Muli', sans-serif !important; /* add this line to the body tag */\n    }\n    \n    .RichEditor-root {\n      background: #fff;\n      border: 1px solid #ddd;\n      font-family: 'Georgia', serif;\n      font-size: 14px;\n      padding: 15px;\n    }\n    .RichEditor-editor {\n      border-top: 1px solid #ddd;\n      cursor: text;\n      font-size: 16px;\n      margin-top: 10px;\n    }\n    .RichEditor-editor .public-DraftEditorPlaceholder-root,\n    .RichEditor-editor .public-DraftEditor-content {\n      margin: 0 -15px -15px;\n      padding: 15px;\n    }\n    .RichEditor-editor .public-DraftEditor-content {\n      min-height: 100px;\n    }\n    .RichEditor-hidePlaceholder .public-DraftEditorPlaceholder-root {\n      display: none;\n    }\n    .RichEditor-editor .RichEditor-blockquote {\n      border-left: 5px solid #eee;\n      color: #666;\n      font-family: 'Hoefler Text', 'Georgia', serif;\n      font-style: italic;\n      margin: 16px 0;\n      padding: 10px 20px;\n    }\n    .RichEditor-editor .public-DraftStyleDefault-pre {\n      background-color: rgba(0, 0, 0, 0.05);\n      font-family: 'Inconsolata', 'Menlo', 'Consolas', monospace;\n      font-size: 16px;\n      padding: 20px;\n    }\n    .RichEditor-controls {\n      font-family: 'Helvetica', sans-serif;\n      font-size: 14px;\n      margin-bottom: 5px;\n      user-select: none;\n      display: inline;\n    }\n    .RichEditor-styleButton {\n      color: #999;\n      cursor: pointer;\n      margin-right: 16px;\n      padding: 2px 0;\n      display: inline-block;\n    }\n    .RichEditor-activeButton {\n      color: #5890ff;\n    }\n    blockquote {\n      background: #f9f9f9;\n      border-left: 0.3rem solid #ccc;\n      margin: 1.5em 10px;\n      padding: 0.2em 0.5rem;\n      font-family: 'Hoefler Text', 'Georgia', serif;\n      font-style: italic;\n      border-top-left-radius: 0.2rem;\n      border-bottom-left-radius: 0.2rem;\n    }\n```\n\n## Create a simple server\n\nWith our Gatsby app set up, we need a simple server from where we’ll notify Pusher of updates to our editor. Let’s install some packages we need for our realtime editor. In your terminal, run the following command:\n\n```\n    $ yarn add draft-js draft-js-export-html pusher-js axios dotenv express body-parser pusher bootstrap\n```\n\nIn the command above, we added some dependencies for our app. Here’s what each package does:\n\n- `draft-js` - for creating our rich text editor.\n- `draft-js-export-html` - for converting our editor state to HTML.\n- `pusher-js` and `pusher` - for communicating with Pusher.\n- `axios` - for making HTTP requests from Node.js.\n- `dotenv` - for storing environmental variables.\n- `express` - for creating a web application server framework for Node.js.\n- `body-parser` - a Node.js body parsing middleware for parsing incoming request bodies.\n- `bootstrap` - for designing and styling HTML/CSS.\n\nNow we’ll create a simple Express server. In your code editor, open the `pusher-editor` directory and create a `server.js` and `.env` file in the root directory of your app. Add the following code to both files respectively:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config()\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    let Pusher = require('pusher');\n    let app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // enable cross-origin resource sharing\n    app.use(function (req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      next();\n    });\n    \n    // create a Pusher client\n    let pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    // create a home route to test if the server works\n    app.get('/', function (req, res) {\n      res.send('all green');\n    });\n    \n    // create a \"save-text\" route to update Pusher when a new text is added to the editor\n    app.post('/save-text', function (req, res) {\n      if (req.body.text \u0026\u0026 req.body.text.trim() !== '') {\n        // send a 'text-update' event on the 'editor' channel with the editor text\n        pusher.trigger('editor', 'text-update', { text: req.body.text });\n        res.status(200).send({ success: true, message: 'text broadcasted' })\n      } else {\n        res.status(400).send({ success: false, message: 'text not broadcasted' })\n      }\n    })\n    \n    // create a \"editor-text\" route to update Pusher the latest state of our editor\n    app.post('/editor-text', function (req, res) {\n      if (req.body.text) {\n      // send a 'editor-update' event on the 'editor' channel with the editor current state\n        pusher.trigger('editor', 'editor-update', { text: req.body.text, selection: req.body.selection });\n        res.status(200).send({ success: true, message: 'editor update broadcasted' })\n      } else {\n        res.status(400).send({ success: false, message: 'editor update not broadcasted' })\n      }\n    })\n    \n    let port = process.env.PORT || 5000;\n    console.log(`server running on port ${port}`)\n    // run the server on our specified port\n    app.listen(port);\n\n\n    // .env\n    // add your Pusher keys here\n    PUSHER_APP_ID=\"YOUR APP ID\"\n    PUSHER_APP_KEY=\"YOUR APP KEY\"\n    PUSHER_APP_SECRET=\"YOUR APP SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR APP CLUSTER\"\n```\n\nIn the `server.js` file, we created a simple server with two routes for updating Pusher with the editor state and the editor’s HTML content. With this, Pusher is aware our editor text and current state.\nTo run this server, open the `pusher-editor` directory in another terminal window and run the following command:\n\n```\n    $ node server.js\n```\n\n## Create the editor component\n\nIn your code editor, open the `pusher-editor` directory and locate the `index.js` file in `src/pages/index.js`. Clear out all the code in the file and let’s import our packages and some components:\n\n``` javascript\n    // src/pages/index.js\n    \n    import React, { Component } from 'react'\n    import { Editor, EditorState, RichUtils, getDefaultKeyBinding, convertToRaw, convertFromRaw, SelectionState } from 'draft-js';\n    import { stateToHTML } from 'draft-js-export-html'\n    import Pusher from 'pusher-js';\n    import axios from 'axios'\n    import BlockStyleControls from '../components/blockStyleControls'\n    import InlineStyleControls from '../components/inlineStylesControls'\n    import 'bootstrap/dist/css/bootstrap.css'\n    \n    const styleMap = {\n      CODE: {\n        backgroundColor: 'rgba(0, 0, 0, 0.05)',\n        fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n        fontSize: 16,\n        padding: 2,\n      },\n    };\n```\n\nNext let’s create our rich editor component:\n\n``` javascript\n    // src/pages/index.js\n    \n    ...\n    class RichEditor extends Component {\n      constructor(props) {\n        super(props);\n        this.state = { editorState: EditorState.createEmpty(), text: '', };\n        this.focus = () =\u003e this.refs.editor.focus();\n        this.onChange = (editorState) =\u003e {\n          this.setState({ editorState })\n        };\n        this.handleKeyCommand = this._handleKeyCommand.bind(this);\n        this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n        this.toggleBlockType = this._toggleBlockType.bind(this);\n        this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n        this.getBlockStyle = this._getBlockStyle.bind(this);\n      }\n    }\n    export default RichEditor\n```\n\nIn the code snippet above, we created a class component with a constructor that contains our component’s state and methods.\n\nJust before our component mounts, we want to connect to Pusher and subscribe to the `editor` channel. To achieve this, we’ll use React’s `componentWillMount` life cycle method. Add the following code inside the `RichEditor` component:\n\n``` javascript\n    // src/pages/index.js\n    \n    ...\n    class RichEditor extends Component {\n    \n      ...\n      componentWillMount() {\n        this.pusher = new Pusher('YOUR PUSHER KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n        this.channel = this.pusher.subscribe('editor');\n      }\n    }\n    export default RichEditor\n```\n\nRemember to add your Pusher key in the code above.\n\nNow that our Pusher client is subscribed to the `editor` channel, we want to listen for the `text-update` and `editor-update` events, so we can update our component state with new data.\n\nTo achieve this, we’ll use React’s `componentDidMount` life cycle method. Add the following code inside the `RichEditor` component:\n\n``` javascript\n    // src/pages/index.js\n    \n    ...\n    class RichEditor extends Component {\n    \n      ...\n      componentDidMount() {\n        let self = this;\n        // listen to 'text-update' events\n        this.channel.bind('text-update', function (data) {\n          // update the text state with new data\n          self.setState({ text: data.text })\n        });\n        // listen to 'editor-update' events \n        this.channel.bind('editor-update', function (data) {\n          // create a new selection state from new data\n          let newSelection = new SelectionState({\n            anchorKey: data.selection.anchorKey,\n            anchorOffset: data.selection.anchorOffset,\n            focusKey: data.selection.focusKey,\n            focusOffset: data.selection.focusOffset,\n          });\n          // create new editor state\n          let editorState = EditorState.createWithContent(convertFromRaw(data.text))\n          const newEditorState = EditorState.forceSelection(\n            editorState,\n            newSelection\n          );\n          // update the RichEditor's state with the newEditorState\n          self.setState({ editorState: newEditorState })\n        });\n      }\n    }\n    export default RichEditor\n```\n\n`Draft.js` only provides the building blocks for a text editor, this means we have to write out all the functionality of our text editor ourselves. In our `RichEditor` component, we’ll add some methods for simple editor functions like handling key commands, adding inline and block styles to text.\nAdd the following code inside your `RichEditor` component:\n\n``` javascript\n    # src/pages/index.js\n    \n    ...\n    class RichEditor extends Component {\n    \n      ...\n      // handle blockquote\n      _getBlockStyle(block) {\n        switch (block.getType()) {\n          case 'blockquote': return 'RichEditor-blockquote';\n          default: return null;\n        }\n      }\n      // handle key commands\n      _handleKeyCommand(command, editorState) {\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n        if (newState) {\n          this.onChange(newState);\n          return true;\n        }\n        return false;\n      }\n      // map the TAB key to the editor\n      _mapKeyToEditorCommand(e) {\n        if (e.keyCode === 9 /* TAB */) {\n          const newEditorState = RichUtils.onTab(\n            e,\n            this.state.editorState,\n            4, /* maxDepth */\n          );\n          if (newEditorState !== this.state.editorState) {\n            this.onChange(newEditorState);\n          }\n          return;\n        }\n        return getDefaultKeyBinding(e);\n      }\n      // toggle block styles\n      _toggleBlockType(blockType) {\n        this.onChange(\n          RichUtils.toggleBlockType(\n            this.state.editorState,\n            blockType\n          )\n        );\n      }\n      // toggle inline styles\n      _toggleInlineStyle(inlineStyle) {\n        this.onChange(\n          RichUtils.toggleInlineStyle(\n            this.state.editorState,\n            inlineStyle\n          )\n        );\n      }\n    }\n    export default RichEditor\n```\n\nNext, let’s render the actual component:\n\n``` javascript\n    // src/pages/index.js\n    \n    ...\n    class RichEditor extends Component {\n    \n      ...\n      render() {\n        const { editorState } = this.state;\n        // If the user changes block type before entering any text, hide the placeholder.\n        let className = 'RichEditor-editor';\n        var contentState = editorState.getCurrentContent();\n        if (!contentState.hasText()) {\n          if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n            className += ' RichEditor-hidePlaceholder';\n          }\n        }\n        return (\n          \u003cdiv className=\"container-fluid\"\u003e\n            \u003cdiv className=\"row\"\u003e\n              \u003cdiv className=\"RichEditor-root col-12 col-md-6\"\u003e\n                {/* render our editor block style controls components */}\n                \u003cBlockStyleControls\n                  editorState={editorState}\n                  onToggle={this.toggleBlockType}\n                /\u003e\n                {/* render our editor's inline style controls components */}\n                \u003cInlineStyleControls\n                  editorState={editorState}\n                  onToggle={this.toggleInlineStyle}\n                /\u003e\n                \u003cdiv className={className} onClick={this.focus}\u003e\n                  {/* render the Editor exposed by Draft.js */}\n                  \u003cEditor\n                    blockStyleFn={this.getBlockStyle}\n                    customStyleMap={styleMap}\n                    editorState={editorState}\n                    handleKeyCommand={this.handleKeyCommand}\n                    keyBindingFn={this.mapKeyToEditorCommand}\n                    onChange={this.onChange}\n                    placeholder=\"What's on your mind?\"\n                    ref=\"editor\"\n                    spellCheck={true}\n                  /\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"col-12 col-md-6\"\u003e\n                {/* render a preview for the text in the editor */}\n                \u003cdiv dangerouslySetInnerHTML={{ __html: this.state.text }} /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default RichEditor\n```\n\nLastly, let’s create the two components which we earlier imported into our `RichEditor` component. In the `src/components` directory, create three files;  `inlineStylesControls.js`, `blockStyleControls.js` and `styleButton.js` and add the following code respectively:\n\n``` javascript\n    // src/components/inlineStylesControls.js\n    \n    import React from 'react'\n    import StyleButton from './styleButton'\n    \n    // define our inline styles\n    let INLINE_STYLES = [\n      { label: 'Bold', style: 'BOLD' },\n      { label: 'Italic', style: 'ITALIC' },\n      { label: 'Underline', style: 'UNDERLINE' },\n      { label: 'Monospace', style: 'CODE' },\n    ];\n    const InlineStyleControls = (props) =\u003e {\n      const currentStyle = props.editorState.getCurrentInlineStyle();\n      return (\n        \u003cdiv className=\"RichEditor-controls\"\u003e\n        {/* map through our inline styles and display a style button for each /*}\n          {INLINE_STYLES.map((type) =\u003e\n            \u003cStyleButton\n              key={type.label}\n              active={currentStyle.has(type.style)}\n              label={type.label}\n              onToggle={props.onToggle}\n              style={type.style}\n            /\u003e\n          )}\n        \u003c/div\u003e\n      );\n    };\n    export default InlineStyleControls\n```\n\n``` javascript\n    // src/components/blockStyleControls.js\n    \n    import React, { Component } from 'react'\n    import StyleButton from './styleButton'\n    \n    // define our block styles\n    const BLOCK_TYPES = [\n      { label: 'H1', style: 'header-one' },\n      { label: 'H2', style: 'header-two' },\n      { label: 'H3', style: 'header-three' },\n      { label: 'H4', style: 'header-four' },\n      { label: 'H5', style: 'header-five' },\n      { label: 'H6', style: 'header-six' },\n      { label: 'Blockquote', style: 'blockquote' },\n      { label: 'UL', style: 'unordered-list-item' },\n      { label: 'OL', style: 'ordered-list-item' },\n      { label: 'Code Block', style: 'code-block' },\n    ];\n    const BlockStyleControls = (props) =\u003e {\n      const { editorState } = props;\n      const selection = editorState.getSelection();\n      const blockType = editorState\n        .getCurrentContent()\n        .getBlockForKey(selection.getStartKey())\n        .getType();\n      return (\n        \u003cdiv className=\"RichEditor-controls\"\u003e\n       {/* map through our block styles and display a style button for each */}\n          {BLOCK_TYPES.map((type) =\u003e\n            \u003cStyleButton\n              key={type.label}\n              active={type.style === blockType}\n              label={type.label}\n              onToggle={props.onToggle}\n              style={type.style}\n            /\u003e\n          )}\n        \u003c/div\u003e\n      );\n    };\n    export default BlockStyleControls\n```\n\n``` javascript\n    // src/components/styleButton.js\n    \n    import React, { Component } from 'react'\n    \n    class StyleButton extends React.Component {\n      constructor() {\n        super();\n        this.onToggle = (e) =\u003e {\n          e.preventDefault();\n          this.props.onToggle(this.props.style);\n        };\n      }\n      render() {\n        let className = 'RichEditor-styleButton';\n        if (this.props.active) {\n          className += ' RichEditor-activeButton';\n        }\n        return (\n          \u003cspan className={className} onMouseDown={this.onToggle}\u003e\n            {this.props.label}\n          \u003c/span\u003e\n        );\n      }\n    }\n    export default StyleButton;\n```\n\nIn the code snippets above, we have a `StyleButton` component in `src/components/styleButton.js`, which basically receives a text style and renders it in a `span` tag on the page. In `blockStyleControls.js` and `inlineStylesControls.js` we have arrays that contain both block and inline text styles. We map through each style and pass them to the `StyleButton` component which renders them.\n\n\n## Bringing it together\n\nIf you have followed the post to this point, you should have a working text editor on your page. To make the editor realtime, we need to notify Pusher every time there is a change in the editor’s state.\n\nTo do this, in our `RichEditor`  component’s `onChange` method, we’ll make an AJAX request to our server with the new editor’s state so it can be broadcasted in realtime.\n\nUpdate the `RichEditor` component’s `onChange` method with the following:\n\n``` javascript\n    // src/pages/index.js\n    \n    class RichEditor extends Component {\n      constructor(props) {\n        super(props);\n        this.state = { editorState: EditorState.createEmpty(), text: '', };\n        this.focus = () =\u003e this.refs.editor.focus();\n        this.onChange = (editorState) =\u003e { // update this line\n          // onChange, update editor state then notify pusher of the new editorState\n          this.setState({ editorState }, () =\u003e {\n            // call the function to notify Pusher of the new editor state\n            this.notifyPusher(stateToHTML(this.state.editorState.getCurrentContent()));\n            this.notifyPusherEditor(this.state.editorState)\n          })\n        }; // update ends here\n        this.handleKeyCommand = this._handleKeyCommand.bind(this);\n        this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n        this.toggleBlockType = this._toggleBlockType.bind(this);\n        this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n        this.getBlockStyle = this._getBlockStyle.bind(this);\n        this.notifyPusher = this._notifyPusher.bind(this); // add this line\n        this.notifyPusherEditor = this._notifyPusherEditor.bind(this); // add this line\n      }\n    \n      ...\n      // send the editor's text with axios to the server so it can be broadcasted by Pusher\n      _notifyPusher(text) {\n        axios.post('http://localhost:5000/save-text', { text })\n      }\n      \n      // send the editor's current state with axios to the server so it can be broadcasted by Pusher\n      _notifyPusherEditor(editorState) {\n        const selection = editorState.getSelection()\n        let text = convertToRaw(editorState.getCurrentContent())\n        axios.post('http://localhost:5000/editor-text', { text, selection })\n      }\n      ...\n      render() {\n        ....\n      }\n    }\n    export default RichEditor\n```\n\nWith that, if you open your app in a second browser tab and type in your editor, you should get realtime updates in your second tab. Ensure the server we added is running.\n\n\n## Conclusion\n\nThat’s it! In this post, you’ve learned how to build a realtime collaborative editor with Gatsby, Draft.js and Pusher. I can’t wait to see what you build with the new knowledge you’ve gained. You can find the source code for the demo app on [GitHub](https://github.com/9jaswag/pusher-editor).","metaTitle":"Build a collaborative text editor with Gatsby and Draft.js","metaDescription":"This short tutorial implements realtime functionality in a Gatsby-based text editor. Several users can work on the same text simultaneously."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"FeIJHByAhMWYaGyuIGWKO","type":"Entry","createdAt":"2018-06-07T16:31:28.809Z","updatedAt":"2018-06-11T12:43:52.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a carpooling app with React Native - Part 1: Setting up the server","url":"carpooling-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/Ridesharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-06-07","description":"This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to create a carpooling app. In part one you will set up the backend.","prerequisite":"You will need a React Native development environment, Docker and Docker Compose installed on your machine. This tutorial assumes you know how to install and configure these on your own system. You will need experience with React Native and Docker.","content":"In this series, we’re going to create a carpooling app with React Native. This will be a two-part series showing you how to create a full-stack React Native app which uses PHP as the backend. The first part covers setting up the backend, while the [second part](https://pusher.com/tutorials/carpooling-react-native-part-2) will cover building the frontend and running the app.\n\nI’ve previously written a similar tutorial: [Build a ride hailing app with React Native](https://pusher.com/tutorials/ride-hailing-react-native). The main difference between the two is that the first one shows how to build an app similar to the following:\n\n- [Grab](https://www.grab.com)\n- [Uber](https://www.uber.com) \n- [Lyft](https://www.lyft.com/)\n\nThe main idea of the above apps is to provide a ride-hailing service to users. This is traditionally called “Ridesharing”.\n\nWhile this tutorial will show you how to build an app similar to these:\n\n- [Wunder Carpool](https://www.wunder.org/)\n- [Grab Share](https://www.grab.com/ph/share/)\n- [Waze Carpool](https://www.waze.com/carpool)\n\nThe main idea of the above apps is for users to share their ride with people who are going the same route as them. This is traditionally called “Carpooling”.\n\n## Prerequisites\n\nThis tutorial requires the following to be already set up on your machine:\n\n- [**React Native development environment**](https://facebook.github.io/react-native/) - the series assumes that you already have set up all the software needed to create and run React Native apps. The series will show you how to create the app for both Android and iOS devices. We will use the `react-native init`  command to create a React Native project. You can either have both Android Studio and Xcode set up on your machine or just one of them. Additionally, you can set up [Genymotion](https://www.genymotion.com/fun-zone/) so you can easily change your in-app location. Be sure to check out the [setup instructions](https://facebook.github.io/react-native/docs/getting-started.html) if you haven’t setup your machine already. \n- [**Docker**](https://www.docker.com/) and [**Docker Compose**](https://docs.docker.com/compose/) - the series assumes that you already have [Docker](https://docs.docker.com/install/) and [Docker Compose](https://docs.docker.com/compose/install/) running on your machine. We will be using those to easily setup a server with all the software that we need. This also assures that we both have the same environment. \n- [**Git**](https://git-scm.com/) - used for cloning repos.\n\nKnowing the basics of creating a React Native app is required. This means you have to know how to run the app on an emulator or your device. You should also have a good grasp of basic React concepts such as props, refs, state, and the component lifecycle.\n\nKnowledge of [Docker](https://www.docker.com/) is required. You should know how to setup Docker on your operating system and setup a containers from scratch. Note that Docker has poor support for Windows 7 and 8. So if you’re using any of those systems, you might have difficulty in following this tutorial.\n\nKnowledge of the following will be helpful, but not required. I’ll try to cover as much detail as I can, so readers with zero knowledge of the following will still be able to follow along:\n\n\n- [PHP](http://php.net/)\n- [Elasticsearch](https://www.elastic.co/) \n- [Pusher Channels](https://pusher.com/)\n\nLastly, the tutorial assumes that you know your way around the operating system that you’re using. Knowing how to install new software, execute commands in the terminal is required.\n\n\n## What we’ll be building\n\nBefore we proceed, it’s important to know what exactly we’ll be building. The app will have two modes: \n\n\n- **sharing** - this allows the user to share their ride so that others can make a request to ride with them. For the rest of the series, I’ll be referring to the users who uses this feature as the “rider”.\n- **hiking** - this allows the user to make a request to ride with someone. I’ll be referring to these users as “hikers”.\n\nBelow is the entire flow of the app. I’m using Genymotion emulator for the user that plays the rider, and iPhone for the hiker. This is so I can emulate a moving vehicle by using Genymotion’s GPS emulation tool: \n\n![carpooling-react-native-gps-emulation](//images.ctfassets.net/1es3ne0caaid/4H7d0cHWj6qC4qgqQU0moo/04c6b267d3a8582123a7b18e985fc377/carpooling-react-native-gps-emulation.png)\n\nI can simply click around the map so that React Native’s Geolocation is triggered. This then allows me to use Pusher Channels to send a message to the hiker so that they’re informed of the rider’s current location.\n\nNow, let’s proceed with the app flow:\n\n\n1. First, the rider enters their username and clicks **Share a ride**:\n\n![carpooling-react-native-share-a-ride](//images.ctfassets.net/1es3ne0caaid/6I48i2AQrmyiuoICqiyiIY/1bceeb357948e5b31dbc13299eff5ba4/carpooling-react-native-share-a-ride.png)\n\n2. Rider types in where they want to go and selects it from the drop-down. Google Places Autocomplete makes this feature work:\n\n![carpooling-react-native-rider-searches](//images.ctfassets.net/1es3ne0caaid/4iCq1toOb6eoOisOyi24CM/c1c6fa071340a13a7f390b4a5cc55264/carpooling-react-native-rider-searches.png)\n\n3. After selecting a place, the app plots the most desirable route from the origin to the destination. The red marker being the origin, and the blue one being the destination:\n\n![carpooling-react-native-route-finder](//images.ctfassets.net/1es3ne0caaid/4KNVRbBcNicEaasWa0s0yA/7d1c5d286ac1965222b50217c98e22ed/carpooling-react-native-route-finder.png)\n\nIf the rider wants to pick another place, they can click on the **Reset** button. This will empty the text field for entering the place as well as remove the markers and the route from the map.\n\n\n4. At this point, the rider clicks on the **Share Ride** button. This triggers a request to the server which then saves all the relevant data to an Elasticsearch index. This allows hikers to search for them later on. \n\n\n  To keep the route information updated, we use React Native’s Geolocation feature to watch the rider’s current location. Every time their location changes, the Elasticsearch index is also updated:\n\n![carpooling-react-native-driver-route-stored](//images.ctfassets.net/1es3ne0caaid/3nLm7Z3gik8s64IO2YgwEw/d01bb5f743921cff55786e3566d53300/carpooling-react-native-driver-route-stored.png)\n\n5. Now let’s take a look at the hiker’s side of things. First, the hiker enters their username and clicks on **Hitch a ride**:\n\n![carpooling-react-native-hitch-a-ride](//images.ctfassets.net/1es3ne0caaid/5UKI0GRYHKSIGkksQs2Uoa/8c9eb565dec00189cad36681c38a4859/carpooling-react-native-hitch-a-ride.jpeg)\n\n6. Next, the hiker searches for their destination. To keep things simple, let’s pick the same place where the rider is going:\n\n![carpooling-react-native-hitch-destination-search](//images.ctfassets.net/1es3ne0caaid/kLAUXtOhZm0Im4uy8cCUo/805ca4b280e726510d47d4ccf6a70a83/carpooling-react-native-hitch-destination-search.jpeg)\n\n7. Once again, the app plots the most desirable route from the hiker’s origin to their destination:\n\n![carpooling-react-native-hitch-route](//images.ctfassets.net/1es3ne0caaid/4F5S0WK7niumMOsoMuOqWy/4133360090d2e5727b69347511c70ac5/carpooling-react-native-hitch-route.jpeg)\n\n8. The hiker then clicks on the **Search Ride** button. At this point, the app makes a request to the server to look for riders matching the route added by the hiker. The rider should now receive the request. Pusher Channels makes this feature work:\n\n![carpooling-react-native-request-to-driver](//images.ctfassets.net/1es3ne0caaid/3Wbxnk3wLeKE06YG2McKk4/442aaa6ce3125eeb37d039efb9894238/carpooling-react-native-request-to-driver.png)\n\n9. Once the rider accepts the request, the hiker receives an alert that the rider accepted their request:\n\n![carpooling-react-native-ride-accepted](//images.ctfassets.net/1es3ne0caaid/2zBc6OM5juqIKkgS8scKe4/bcc09e370613da0900d736ca6c33d81e/carpooling-react-native-ride-accepted.jpeg)\n\n10. At this point, the hiker’s map will show rider’s current location. React Native’s Geolocation feature and Pusher Channels make this work:\n\n![carpooling-react-native-hitch-location](//images.ctfassets.net/1es3ne0caaid/6mZVzKfJ5Yq0yYOuwmSckW/0249c980ad672477b7039027ce60b4d6/carpooling-react-native-hitch-location.jpeg)\n\nAt the same time, the rider’s map will show their current location on the map. This is where you can use Genymotion’s GPS emulation tool to update the rider’s location:\n\n![carpooling-react-native-current-location](//images.ctfassets.net/1es3ne0caaid/2HtFr7jCfYC4oYcaEiWGc0/df3ec3cf2e0215cf8515b291fb29fcbd/carpooling-react-native-current-location.png)\n\n11. Once the rider is near the hiker, both users will receive a notification informing them that they’re already near each other:\n\n![carpooling-react-native-proximity](//images.ctfassets.net/1es3ne0caaid/66En3l4x3ieKC8SKM2o6Gs/d13457e68814b3820e026c1319824083/carpooling-react-native-proximity.png)\n\n12. Once they are within 20 meters of each other, the app’s UI resets and it goes back to the login screen:\n\n![carpooling-react-native-reset](//images.ctfassets.net/1es3ne0caaid/6xxnIcAg00a4gKuO222q0Q/d35e6865ad8c3078147f2c4d250353b7/carpooling-react-native-reset.png)\n\nWe will use the following technologies to build the app:\n\n- **Elasticsearch** - for saving and searching for routes.\n- **Pusher Channels** - for establishing realtime communication between the rider and the hiker so they are kept updated where each other is.\n- **PHP** - for saving and searching documents from the Elasticsearch index.\n- **Google Maps** - for showing maps inside the app.\n- **Google Places Autocomplete** - for searching for places.\n- **Google Directions API** - for getting the directions between the origin and the destination of the riders and hikers.\n- [**Geometry Library Google Maps API V3**](https://github.com/alexpechkarev/geometry-library) - for determining whether a specific coordinate lies within a set of coordinates. \n\nThe full source code of the app is available on this [Github repo](https://github.com/anchetaWern/Ridesharer). \n\n\n## Setting up a Pusher app\n\nWe’ll need to create a Pusher app to use Pusher Channels. Start by creating a [Pusher account](https://pusher.com/) if you haven’t done so already.\n\nOnce you have an account, go to your [dashboard](https://dashboard.pusher.com/) and click on **Channels apps** on the left side of the screen, then click on **Create Channels apps**. Enter the name of your app and select a desirable cluster, preferably one that’s nearest to your current location:\n\n![carpooling-react-native-create-channels-app](//images.ctfassets.net/1es3ne0caaid/4uecV7cGQokq6MAQEgWeoe/b31b3ade12a22747326d7f963c95bafd/carpooling-react-native-create-channels-app.png)\n\nOnce the app is created, click on the **App Settings** tab and enable client events:\n\n![carpooling-react-native-enable-client-events](//images.ctfassets.net/1es3ne0caaid/4t9p6MLB7aIgOGKs0W8Qys/323dbfc484d5ef2bb93d9e11e4fb31b7/carpooling-react-native-enable-client-events.png)\n\nThis will allow us to trigger events right from the app itself. That way, the only thing that we need to do on the server is to authenticate requests. Don’t forget to click on **Update** once you’re done.\n\nThe API keys which we’ll be using later are on the **App keys** tab.\n\n## Setting up a Google project\n\nWe will be using three of Google’s services to build this app:\n\n\n- Google Maps\n- Google Places\n- Google Directions\n\nThis requires us to create a Google project at [console.developers.google.com](https://console.developers.google.com) so we can use those services. \n\nOn your dashboard, click on the **Select a project** dropdown then click on **Create project**. Enter the name of the project and click **Create**:\n\n![carpooling-react-native-google-console-create-project](//images.ctfassets.net/1es3ne0caaid/5ODzOiU9EWiYy8awiSoigg/9de826dd47fc6d1fc527e2e3167ddf87/carpooling-react-native-google-console-create-project.png)\n\nOnce the project is created, click on **Library** on the left side. Look for the following APIs and enable them:\n\n- Maps SDK for Android\n- Maps SDK for iOS - note that if you don’t enable this, and followed the [installation instructions for iOS](https://github.com/react-community/react-native-maps/blob/master/docs/installation.md#if-you-want-to-use-google-maps), Apple Maps will be used instead.\n- Places SDK for Android\n- Places SDK for iOS\n- Directions API\n- Geocoding API\n\nOnce those are enabled, click on the **Credentials** menu on the left side, then click on the **Create credentials** button and select **API key**:\n\n![carpooling-react-native-google-console-credentials](//images.ctfassets.net/1es3ne0caaid/3D0rkMkRXyYeYCY2Yy6yUo/7e422484fbb0d294bfe47c2c39f810c4/carpooling-react-native-google-console-credentials.png)\n\nThat will generate an API key which allows you to use the services mentioned above. Take note of the key as we will be using it later. \n\nYou can choose to restrict access so not just anybody can use your key once they get access to it. To avoid problems while developing the app, I recommend to just leave it for now.\n\n## Setting up Laradock\n\nLaradock is a full PHP development environment for Docker. It allows us to easily set up the development server. Go through the following steps to setup Laradock.\n\n### Configuring the environment\n\n1. Clone the official repo. This will create a `laradock` directory:\n\n```\n    git clone https://github.com/laradock/laradock.git --branch v7.0.0\n```\n\nNote that in the above command we’re cloning a specific release tag ([v7.0.0](https://github.com/laradock/laradock/tree/v7.0.0)). This is to make sure we’re both using the same version of Laradock. This helps you avoid issues that has to do with different configuration and software versions installed by Laradock. You can choose to clone the most recent version, but you’ll have to handle the compatibility issues on your own.\n\n2. Navigate inside the `laradock` directory and create a copy of the sample `.env` file:\n\n```\n    cd laradock\n    cp env-example .env\n```\n\n3. Open the `.env` file on your text editor and replace the existing config with the following:\n\nThis is the directory where your projects are saved. Go ahead and create a `laradock-projects` folder outside the `laradock` folder. Then inside the `laradock-projects`, create a new folder named `ridesharer`. This is where we will add the server code:\n\n```\n    APP_CODE_PATH_HOST=../laradock-projects\n```\n\nThis is the Elasticsearch port configuration. The one below is actually the default one so in most cases, you don’t really need to change anything. But if you have a different configuration, or if you want to use a different port because an existing application is already using these ports then this is a good place to change them:\n\n```\n    ELASTICSEARCH_HOST_HTTP_PORT=9200\n    ELASTICSEARCH_HOST_TRANSPORT_PORT=9300\n```\n\nThis is the path where the Apache site configuration is located. We will be updating it at a later step. This is just to let you know that this is where it’s located:\n\n```\n    APACHE_SITES_PATH=./apache2/sites\n```\n\n### Adding a virtual host\n\n\n1. Open the `laradock/apache2/sites/default.apache.conf` file and add a new virtual host (you can also replace the existing one if you’re not using it):\n\n```\n    \u003cVirtualHost *:80\u003e\n      ServerName ridesharer.loc\n      DocumentRoot /var/www/ridesharer\n      Options Indexes FollowSymLinks\n    \n      \u003cDirectory \"/var/www/ridesharer\"\u003e\n        AllowOverride All\n        \u003cIfVersion \u003c 2.4\u003e\n          Allow from all\n        \u003c/IfVersion\u003e\n        \u003cIfVersion \u003e= 2.4\u003e\n          Require all granted\n        \u003c/IfVersion\u003e\n      \u003c/Directory\u003e\n    \n    \u003c/VirtualHost\u003e\n```\n\nThe code above tells Apache to serve the files inside the `/var/www/ridesharer` directory when `http://ridesharer.loc` is accessed on the browser. If the directory has `index.php` file in it, then it will get served by default (if the filename is not specified).\n\nThe `/var/www` directory maps to the application directory you’ve specified earlier on the `.env` file:\n\n```\n    APP_CODE_PATH_HOST=../laradock-projects\n```\n\nThis means that `/var/www/ridesharer` is equivalent to `/laradock-projects/ridesharer`.\n\nThis is why we’ve created a `ridesharer` folder inside the `laradock-projects` directory earlier. Which means that any file you create inside the `ridesharer` folder will get served.\n\n\n2. Update the operating system’s `hosts` file to point out `ridesharer.loc` to `localhost`:\n\n```\n    127.0.0.1     ridesharer.loc\n```\n\nThis tells the browser to not go looking anywhere else on the internet when `http://ridesharer.loc` is accessed. Instead, it will just look in the localhost.\n\n\n### Configuring Elasticsearch\n\nOpen the `docker-compose.yml` file and search for `ElasticSearch Container`. This will show you the Elasticsearch configuration:\n\n``` yaml\n    ### ElasticSearch ########################################\n        elasticsearch:\n          build: ./elasticsearch\n          volumes:\n            - elasticsearch:/usr/share/elasticsearch/data\n          environment:\n            - cluster.name=laradock-cluster\n            - bootstrap.memory_lock=true\n            - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n          ulimits:\n            memlock:\n              soft: -1\n              hard: -1\n          ports:\n            - \"${ELASTICSEARCH_HOST_HTTP_PORT}:9200\"\n            - \"${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300\"\n          depends_on:\n            - php-fpm\n          networks:\n            - frontend\n            - backend\n```\n\nUnder the environment, add the following:\n\n``` yaml\n    - xpack.security.enabled=false\n```\n\nSo it should look like this:\n\n``` yaml\n    environment:\n      - cluster.name=laradock-cluster\n      - bootstrap.memory_lock=true\n      - xpack.security.enabled=false\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n```\n\nThis disables the need to authenticate when connecting to Elasticsearch.\n\nYou can choose to enable it later so that not just anyone can have access to the Elasticsearch index. But to avoid problems with authentication while we’re developing, we’ll disable it for now.\n\n\n### Bringing up the container\n\nNavigate inside the `laradock` directory and bring up the container with Docker Compose:\n\n```\n    docker-compose up -d apache2 php-fpm elasticsearch workspace\n```\n\nThis will install and setup Apache, PHP, and Elasticsearch on the container. There’s also a workspace so you can log in to the container. This allows you to install packages using [Composer](https://getcomposer.org/).\n\nThis process should take a while depending on your internet connection.\n\n### Troubleshooting Laradock issues\n\nIf you’re having problems completing this step, it is most likely a port issue. That is, another process is already using the port that the containers wants to use.\n\nThe quickest way to deal with a port issue is to change the default ports that Apache and Elasticsearch are using (or whatever port is already occupied by another process). Open the `.env` file inside the `laradock` folder and make the following changes:\n\nFor Apache, replace the values for either `APACHE_HOST_HTTPS_PORT` or `APACHE_PHP_UPSTREAM_PORT` (or both):\n\n```\n    # APACHE_HOST_HTTPS_PORT=443 \n    APACHE_HOST_HTTPS_PORT=445 \n    \n    # APACHE_PHP_UPSTREAM_PORT=9000\n    APACHE_PHP_UPSTREAM_PORT=9001\n```\n\nFor Elasticsearch:\n\n```\n    # ELASTICSEARCH_HOST_HTTP_PORT=9200\n    ELASTICSEARCH_HOST_HTTP_PORT=9211\n    \n    # ELASTICSEARCH_HOST_TRANSPORT_PORT=9300\n    ELASTICSEARCH_HOST_TRANSPORT_PORT=9311\n```\n\nIt’s a good practice to comment out the default config so you know which one’s you’re replacing.\n\nIf the issue you’re having isn’t a port issue, then you can visit [Laradock’s issues page](https://github.com/laradock/laradock/issues) and search for the issue you’re having.\n\n## Creating the server component\n\n### Installing the Dependencies\n\nOnce all the software is installed in the container, Docker will automatically bring it up. This allows you to login to the container. You can do that by executing the following command while inside the `laradock` directory:\n\n```\n    docker-compose exec --user=laradock workspace bash\n```\n\nOnce you’re inside, navigate inside the `ridesharer` folder and create a `composer.json` file:\n\n``` json\n    {\n      \"require\": {\n        \"alexpechkarev/geometry-library\": \"1.0\",\n        \"elasticsearch/elasticsearch\": \"^6.0\",\n        \"pusher/pusher-php-server\": \"^3.0\",\n        \"vlucas/phpdotenv\": \"^2.4\"\n      }\n    }\n```\n\nSave the file and execute `composer install`. This will install the following packages:\n\n- `geometry-library` - as mentioned earlier, this allows us to determine whether a specific coordinate lies within a set of coordinates. We will be using this library to determine if the directions returned by the Google Directions API covers the hiker’s pick-up location (origin).  \n- `elasticsearch` - this library allows us to query the Elasticsearch index so we can add, search, update, or delete documents.\n- `pusher-php-server` - this is the official Pusher PHP library for communicating with Pusher’s server. We will be using it to authenticate requests coming from the app.\n- `vlucas/phpdotenv` - for loading environment variables from `.env` files. The `.env` file is where we put the Elasticsearch, Google, and Pusher config. \n\n### Adding environment variables\n\nInside the `laradock-projects/ridesharer` directory, create a `.env` file and add the following:\n\n```\n    PUSHER_APP_ID=\"YOUR PUSHER APP ID\"\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n    \n    GOOGLE_API_KEY=\"YOUR GOOGLE API KEY\"\n    \n    ELASTICSEARCH_HOST=\"elasticsearch\"\n```\n\nThis file is where you will put the keys and configuration options that we will be using for the server.\n\n### Loader file\n\nSince the majority of the files we will be creating will use either the configuration from the `.env` file or connect to the Elasticsearch server, we will be using this file to do those task for us. That way, we simply need to include this file on each of the files instead of repeating the same code.\n\nStart by importing the `Elasticsearch\\ClientBuilder` class to the current scope. This allows us to use the `ClientBuilder` class without having to refer to its namespace `Elasticsearch` everytime we need to use it:\n\n``` php\n    // laradock-projects/ridesharer/loader.php\n    use Elasticsearch\\ClientBuilder;\n```\n\nInclude the vendor autoload file. This allows us to include all the packages that we installed earlier:\n\n``` php\n    require 'vendor/autoload.php';\n```\n\nLoad the `.env` file:\n\n``` php\n    $dotenv = new Dotenv\\Dotenv(__DIR__);\n    $dotenv-\u003eload();\n    \n    $elasticsearch_host = getenv('ELASTICSEARCH_HOST'); // get the elasticsearch config\n```\n\nAfter that, connect to Elasticsearch:\n\n``` php\n    $hosts = [\n      [\n        'host' =\u003e $elasticsearch_host\n      ]\n    ];\n    \n    $client = ClientBuilder::create()-\u003esetHosts($hosts)-\u003ebuild();\n```\n\n### Setting the type mapping\n\nSince we will be working with coordinates in this app, we need to tell Elasticsearch which of the fields we will be using are coordinates. That way, we can query them later using functions which are specifically created to query geo-point data. This is done through a process called [Mapping](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-point.html). \n\nStart by including the loader file:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/set-map.php\n    require 'loader.php';\n```\n\nNext, we can now proceed with specifying the actual map. Note that an error might occur (for example, the index has already been created, or one of the datatypes we specified isn’t recognized by Elasticsearch) so we’re wrapping everything in a `try..catch`. This allows us to “catch” the error and present it in a friendly manner:\n\n``` php\n    try {\n      $indexParams['index']  = 'places'; // the name of the index\n    \n      $myTypeMapping = [\n        '_source' =\u003e [\n          'enabled' =\u003e true\n        ],\n        'properties' =\u003e [\n          'from_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'current_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'from_bounds.top_left.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'from_bounds.bottom_right.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_bounds.top_left.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_bounds.bottom_right.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ]\n        ]\n      ];\n    \n      // next: add code for adding the map\n      \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nBreaking down the code above, we first specify the name of the index we want to use. This shouldn’t already exist within Elasticsearch. If you’re coming from an RDBMS background, an index is synonymous to a database:\n\n``` php\n    $indexParams['index']  = 'places';\n```\n\nFor the actual type mapping, we only need to specify two properties: `_source` and `properties`. \n\n`_source` allows us to specify whether to enable returning of the [source](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-source-field.html) when getting documents. In Elasticsearch, the `_source` contains the fields (and their values) that we’ve indexed. \n\nIn a real-world app, you don’t really want this option to be enabled as it will affect the search performance. We’re only enabling it so that we don’t have to perform an additional step to fetch the source whenever where querying the index:\n\n``` php\n    '_source' =\u003e [\n      'enabled' =\u003e true\n    ],\n```\n\nThe other property that we need to specify is the `properties`. This accepts the array of field names whose data type we want to specify. Of course, we don’t need to specify the data type of all the fields we plan on using. This is because the data type is already implied in most cases (for example, if it’s wrapped in double or single quotes then it’s a string). But for special data types such as the [geo-point](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-point.html), that’s the time where we need to explicitly specify it: \n\n``` php\n    'from_coords' =\u003e [\n      'type' =\u003e 'geo_point'\n    ],\n```\n\nIf the field that you want to work with is located deep within other fields, then you use the dot notation to specify the parent:\n\n``` php\n    'from_bounds.top_left.coords' =\u003e [\n      'type' =\u003e 'geo_point'\n    ]\n```\n\nLastly, add the code for creating the index with the map that we specified:\n\n``` php\n    $indexParams['body']['mappings']['location'] = $myTypeMapping; // specify the map\n    $response = $client-\u003eindices()-\u003ecreate($indexParams); // create the index\n    print_r($response); // print the response\n```\n\nAccess `http://ridesharer.loc/set-map.php` on your browser and it should print out a success response. \n\nNote that if you have another local development environment that’s currently running, it might be the one that takes priority instead of Laradock. So be sure to disable them if you can’t access the URL above.\n\n### Creating users\n\nWhen someone uses the app, they need to login first. If the username they used doesn’t already exist then it’s created.\n\nStart by getting the data passed from the app, in PHP this is commonly done by extracting the field name from the `$_POST` global variable. But in this case, we’re using the [PHP input stream](http://php.net/manual/en/wrappers.php.php) to read the raw `POST` data from the request body. This is because this is how Axios (the library that we’ll be using in the app later on) submits the data when sending requests to the server:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/create-user.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    $username = $data['username']; // get the value from the username field\n```\n\nConstruct the parameters to be supplied to Elasticsearch. This includes the `index` and the `type`. You can think of the `type` as the table or collection that you want to query. \n\n``` php\n    $params = [\n      'index' =\u003e 'places', // the index \n      'type' =\u003e 'users' // the table or collection\n    ];\n```\n\nSpecify the query. In this case, we’re telling Elasticsearch to look for an exact match for the username supplied:\n\n``` php\n    $params['body']['query']['match']['username'] = $username; // look for the username specified\n```\n\nExecute the search query, if it doesn’t return any “hits” then we create a new user using the username that was supplied:\n\n``` php\n    try {\n      $search_response = $client-\u003esearch($params); // execute the search query\n     \n      if($search_response['hits']['total'] == 0){ // if the username doesn't already exist\n        // create the user\n        $index_response = $client-\u003eindex([\n          'index' =\u003e 'places',\n          'type' =\u003e 'users',\n          'id' =\u003e $username,\n          'body' =\u003e [\n            'username' =\u003e $username\n          ]\n        ]);\n      }\n    \n      echo 'ok';\n      \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\n### Saving routes\n\nWhenever a rider shares a ride, the following information needs to be stored in the index:\n\n- username\n- origin\n- destination\n- origin coordinates\n- destination coordinates\n- the steps from the origin to destination\n\nStart by getting the data submitted from the app:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/save-route.php\n    require 'loader.php';\n    \n    $google_api_key = getenv('GOOGLE_API_KEY');\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    $start_location = $data['start_location']; // an array containing the coordinates (latitude and longitude) of the rider's origin\n    $end_location = $data['end_location']; // the coordinates of the rider's destination\n    \n    $username = $data['username']; // the rider's username\n    $from = $data['from']; // the descriptive name of the rider's origin\n    $to = $data['to']; // the descriptive name of the rider's destination\n    $id = generateRandomString(); // unique ID used for identifying the document\n```\n\nMake a request to the [Google Directions API](https://developers.google.com/maps/documentation/directions/intro) using the `file_get_contents()` function. The `directions` endpoint expects the `origin` and `destination` to be passed as a query parameter. These two contains the latitude and longitude value pairs (separated by a comma). We simply pass the values supplied from the app. \n\nThe `file_get_contents()` function returns a JSON string so we use the `json_decode()` function to convert it to an array. Specifying `true` as the second argument tells PHP to convert it to an array instead of an object (when the second argument is omitted or set to `false`):\n\n``` php\n    $steps_data = [];\n    \n    $contents = file_get_contents(\"https://maps.googleapis.com/maps/api/directions/json?origin={$start_location['latitude']},{$start_location['longitude']}\u0026destination={$end_location['latitude']},{$end_location['longitude']}\u0026key={$google_api_key}\");\n    \n    $directions_data = json_decode($contents, true);\n```\n\nLoop through the array of steps and construct an array (`$steps_data`) that only contains the data that we want to store. In this case, it’s only the latitude and longitude values for each of the steps:\n\n``` php\n    if(!empty($directions_data['routes'])){\n      $steps = $directions_data['routes'][0]['legs'][0]['steps'];\n      foreach($steps as $step){\n        $steps_data[] = [\n          'lat' =\u003e $step['start_location']['lat'],\n          'lng' =\u003e $step['start_location']['lng']\n        ];\n    \n        $steps_data[] = [\n          'lat' =\u003e $step['end_location']['lat'],\n          'lng' =\u003e $step['end_location']['lng']\n        ];\n      }\n    }\n```\n\nNext, construct the data that we’ll save to the Elasticsearch index:\n\n``` php\n    if(!empty($steps_data)){\n    \n      $params = [\n        'index' =\u003e 'places',\n        'type' =\u003e 'location',\n        'id' =\u003e $id,\n        'body' =\u003e [\n          'username' =\u003e $username, \n          'from' =\u003e $from, \n          'to' =\u003e $to,\n          'from_coords' =\u003e [ // geo-point values needs to have lat and lon\n            'lat' =\u003e $start_location['latitude'],\n            'lon' =\u003e $start_location['longitude'],\n          ],\n          'current_coords' =\u003e [\n            'lat' =\u003e $start_location['latitude'],\n            'lon' =\u003e $start_location['longitude'],\n          ],\n          'to_coords' =\u003e [\n            'lat' =\u003e $end_location['latitude'],\n            'lon' =\u003e $end_location['longitude'],\n          ],\n          'steps' =\u003e $steps_data\n        ]\n      ];\n    \n    }\n```\n\nMake the request to index the data:\n\n``` php\n    try{\n      $response = $client-\u003eindex($params);\n      $response_data = json_encode([\n        'id' =\u003e $id\n      ]);\n            \n      echo $response_data;\n    }catch(\\Exception $e){\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nHere’s the function for generating a unique ID:\n\n``` php\n    function generateRandomString($length = 10){\n      $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      $charactersLength = strlen($characters);\n      $randomString = '';\n      for($i = 0; $i \u003c $length; $i++){\n        $randomString .= $characters[rand(0, $charactersLength - 1)];\n      }\n      return $randomString;\n    }\n```\n\n### Searching routes\n\nWhen a hiker searches for a ride, a request is made to this file. This expects the origin and destination of the hiker to be passed in the request body. That way, we can make a request to the Google Directions API with those data:\n\n``` php\n    \u003c?php \n    // /laradock-projects/ridesharer/search-routes.php\n    require 'loader.php';\n    \n    $google_api_key = getenv('GOOGLE_API_KEY');\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    \n    // the hiker's origin coordinates\n    $hiker_origin_lat = $data['origin']['latitude'];\n    $hiker_origin_lon = $data['origin']['longitude'];\n    \n    // the hiker's destination coordinates\n    $hiker_dest_lat = $data['dest']['latitude'];\n    $hiker_dest_lon = $data['dest']['longitude'];\n    \n    $hiker_directions_contents = file_get_contents(\"https://maps.googleapis.com/maps/api/directions/json?origin={$hiker_origin_lat},{$hiker_origin_lon}\u0026destination={$hiker_dest_lat},{$hiker_dest_lon}\u0026key={$google_api_key}\");\n    \n    $hiker_directions_data = json_decode($hiker_directions_contents, true);\n```\n\nStore the hiker’s steps into an array. We will be using it later to determine whether the hiker and the rider have the same route. Note that we’re only storing the `start_location` for the first step. This is because the `start_location` of all the succeeding steps overlaps with the `end_location` of the step that follows:\n\n``` php\n    $hikers_steps = [];\n    \n    $steps = $hiker_directions_data['routes'][0]['legs'][0]['steps']; // extract the steps\n    foreach($steps as $index =\u003e $s){\n      if($index == 0){ \n        $hikers_steps[] = [\n          'lat' =\u003e $s['start_location']['lat'],\n          'lng' =\u003e $s['start_location']['lng']\n        ];  \n      }\n    \n      $hikers_steps[] = [\n        'lat' =\u003e $s['end_location']['lat'],\n        'lng' =\u003e $s['end_location']['lng']\n      ];\n    }\n```\n\nNext, we construct the query to be sent to Elasticsearch. Here we use a `d``ecay` function called `gauss` to assign a score to each of the routes that are currently saved in the index. This score is then used to determine the order in which the results are returned, or whether they will be returned at all. \n\nSpecifying the `min_score` means all the documents which don’t meet the supplied score won’t be returned in the response. In the code below, we’re querying for documents which are up to five kilometers away from the origin. But once the documents have a `current_coords` which are not within 100 meters, the score assigned to them is halved:\n\n``` php\n    $params['body'] = [\n      \"min_score\" =\u003e 0.5, // the minimum score for the function to return the record\n      'query' =\u003e [\n        'function_score' =\u003e [\n          'gauss' =\u003e [\n            'current_coords' =\u003e [\n              \"origin\" =\u003e [\"lat\" =\u003e $hiker_origin_lat, \"lon\" =\u003e $hiker_origin_lon], // where to begin the search\n              \"offset\" =\u003e \"100m\", // only select documents that are up to 100 meters away from the origin\n              \"scale\" =\u003e \"5km\" // (offset + scale = 5,100 meters) any document which are not within the 100 meter offset but are still within 5,100 meters gets a score of 0.5\n            ]\n          ]\n        ]\n      ]\n    ];\n```\n\nIf you want to know more about how the function works, check this article out: [The Closer, The Better](https://www.elastic.co/guide/en/elasticsearch/guide/current/decay-functions.html).\n\nNext, construct the coordinates for the hiker’s origin and destination. We will use this to compute the distance between the hiker’s origin and destination, as well as the hiker’s origin and the rider’s destination. We will need these values later on to determine whether the routes returned from the query matches the hiker’s route:\n\n``` php\n    $hikers_origin = ['lat' =\u003e $hiker_origin_lat, 'lng' =\u003e $hiker_origin_lon];\n    $hikers_dest = ['lat' =\u003e $hiker_dest_lat, 'lng' =\u003e $hiker_dest_lon];\n```\n\nSend the request and loop through all the results:\n\n``` php\n    try {\n      $response = $client-\u003esearch($params);\n      \n      if(!empty($response['hits']) \u0026\u0026 $response['hits']['total'] \u003e 0){\n        foreach($response['hits']['hits'] as $hit){\n          \n          $source = $hit['_source'];\n          $riders_steps = $source['steps'];\n    \n          $current_coords = $source['current_coords'];\n          $to_coords = $source['to_coords'];\n    \n          $riders_origin = [\n            'lat' =\u003e $current_coords['lat'],\n            'lng' =\u003e $current_coords['lon']\n          ];\n    \n          $riders_dest = [\n            'lat' =\u003e $to_coords['lat'],\n            'lng' =\u003e $to_coords['lon']\n          ];\n          \n          // check whether the rider's route matches the hiker's route\n          if(isCoordsOnPath($hiker_origin_lat, $hiker_origin_lon, $riders_steps) \u0026\u0026 canDropoff($hikers_origin, $hikers_dest, $riders_origin, $riders_dest, $hikers_steps, $riders_steps)){\n            // the rider's username, origin and destination\n            $rider_details = [\n              'username' =\u003e $source['username'],\n              'from' =\u003e $source['from'],\n              'to' =\u003e $source['to']\n            ];\n    \n            echo json_encode($rider_details); // respond with the first match       \n            break; // break out from the loop\n          }\n        }\n      }\n    \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nThe `isCoordsOnPath()` function uses the `isLocationOnPath()` function from the `php-geometry` library. This accepts the following arguments:\n\n\n- An array containing the latitude and longitude of the coordinate we want to check.\n- An array of arrays containing the latitude and longitude of each of the steps.\n- The tolerance value in degrees. This is useful if the place specified isn’t near a road. Here, I’ve used a high value to cover for most cases. As long as the hiker’s origin is somewhat near to a road, then it should be fine.\n\n``` php\n    function isCoordsOnPath($lat, $lon, $path) {\n      $response = \\GeometryLibrary\\PolyUtil::isLocationOnPath(['lat' =\u003e $lat, 'lng' =\u003e $lon], $path, 350); \n      return $response;\n    }\n```\n\nThe `canDropoff()` function determines whether the rider and the hiker are both treading the same route. This accepts the following arguments:\n\n\n- `$hikers_origin` - the coordinates of the hiker’s origin.\n- `$hikers_dest` - the coordinates of the hiker’s destination.\n- `$riders_origin` - the coordinates of the rider’s origin.\n- `$riders_destination` - the coordinates of the rider’s destination.\n- `$hikers_steps` - an array containing the hiker’s steps.\n- `$riders_steps` - an array containing the rider’s steps.\n\nThe way this function works is that it first determines who leaves the vehicle last: the rider or the hiker. The app works with the assumption that the rider has to ride the vehicle first, and that they should pick up the hiker before they get to leave the vehicle. Otherwise, the hiker won’t be able to track where the vehicle is. This means that there are only two possible scenarios when it comes to the order of leaving the vehicle:\n\n- rider rides vehicle → rider picks up hiker → rider leaves the vehicle → hiker leaves the vehicle\n- rider rides vehicle → rider picks up hiker → hiker leaves the vehicle → rider leaves the vehicle\n\nThe tracking starts once the rider picks up the hiker. So we measure the distance between the hiker’s origin and their destination, as well as the hiker’s origin and the rider’s destination. This then allows us to determine who will leave the vehicle last by comparing the distance between the two.\n\nOnce we know the order in which the two users leaves the vehicle, we can now use the `isCoordsOnPath()` function to determine if the destination of the person who will leave the vehicle first is within the route of the person who will leave the vehicle last:\n\n``` php\n    function canDropoff($hikers_origin, $hikers_dest, $riders_origin, $riders_dest, $hikers_steps, $riders_steps) {\n      // get the distance from the hiker's origin to the hiker's destination\n      $hiker_origin_to_hiker_dest = \\GeometryLibrary\\SphericalUtil::computeDistanceBetween($hikers_origin, $hikers_dest);\n      \n      // get the distance from the hiker's origin to the rider's destination\n      $hiker_origin_to_rider_dest = \\GeometryLibrary\\SphericalUtil::computeDistanceBetween($hikers_origin, $riders_dest);\n    \n      $is_on_path = false; // whether the rider and hiker is on the same path or not\n    \n      if($hiker_origin_to_hiker_dest \u003e $hiker_origin_to_rider_dest){ // hiker leaves the vehicle last\n        // if the rider's destination is within the routes covered by the hiker\n        $is_on_path = isCoordsOnPath($riders_dest['lat'], $riders_dest['lng'], $hikers_steps); \n    \n      }else if($hiker_origin_to_rider_dest \u003e $hiker_origin_to_hiker_dest){ // rider leaves the vehicle last\n        // if hiker's destination is within the routes covered by the rider\n        $is_on_path = isCoordsOnPath($hikers_dest['lat'], $hikers_dest['lng'], $riders_steps);\n    \n      }else{ // if the rider and hiker are both going the same place\n        // check whether either of the conditions above returns true\n        $is_on_path = isCoordsOnPath($hikers_dest['lat'], $hikers_dest['lng'], $riders_steps) || isCoordsOnPath($riders_dest['lat'], $riders_dest['lng'], $hikers_steps);\n      }\n    \n      return $is_on_path;\n    \n    }\n```\n\n### Update route\n\nEvery time the location changes, the app makes a request to this file. The app sends the unique ID that the server responded with when the route was created. This allows us to fetch the existing document from the index. We then update the source with the new coordinates:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/update-route.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true); // get the request body and convert it to an array\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    $params['id'] = $data['id']; // the id submitted from the app\n    \n    // the latitude and longitude values submitted from the app\n    $lat = $data['lat']; \n    $lon = $data['lon']; \n    \n    $result = $client-\u003eget($params); // get the document based on the id used as the parameter\n    $result['_source']['current_coords'] = [ // update the current coordinates with the latitude and longitude values submitted from the app\n      'lat' =\u003e $lat,\n      'lon' =\u003e $lon\n    ];\n    \n    $params['body']['doc'] = $result['_source']; // replace the source with the updated data\n    $result = $client-\u003eupdate($params); // update the document\n    \n    echo json_encode($result);\n```\n\n### Delete route\n\nOnce the rider accepts a request from the hiker, the app makes a request to this file so that the existing route will be deleted. We need to do this because we don’t want other hikers to make another request to the same rider (remember the 1:1 ratio of the rider to hiker?). Also, note that we’re using the rider’s `username` to query the index. We haven’t really put any security measures to only allow a username to be used on a single app instance, but this tells us that a user can only save one route at a time:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/delete-route.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    $params['body']['query']['match']['username'] = $data['username']; // find the rider's username\n     \n    $result = $client-\u003esearch($params); // search the index\n    $id = $result['hits']['hits'][0]['_id']; // only get the first result\n    \n    unset($params['body']);\n    $params['id'] = $id;\n    $result = $client-\u003edelete($params);\n    \n    echo json_encode($result);\n```\n\n### Delete index\n\nDeleting the index (`delete-index.php` ) isn’t really required for the app to work. Though it will be useful when testing the app. This allows you to reset the Elasticsearch index so you can control the results that are returned when you search for riders:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/delete-index.php\n    require 'loader.php';\n    \n    try {\n      $params = ['index' =\u003e 'places'];\n      $response = $client-\u003eindices()-\u003edelete($params);\n      print_r($response);\n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\n### Authenticating requests\n\nBelow is the code for authenticating requests so that Pusher will allow the user to use the Channels service. This requires the keys from the **App keys** tab earlier. Be sure to replace the placeholders with your keys:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/pusher-auth.php\n    require 'vendor/autoload.php';\n    \n    // load the .env file located on the same directory as this file\n    $dotenv = new Dotenv\\Dotenv(__DIR__); \n    $dotenv-\u003eload();\n    \n    // get the individual config from the .env file. This should be the same as the one's you have on the .env file\n    $app_id = getenv('PUSHER_APP_ID');\n    $app_key = getenv('PUSHER_APP_KEY');\n    $app_secret = getenv('PUSHER_APP_SECRET');\n    $app_cluster = getenv('PUSHER_APP_CLUSTER');\n```\n\nSet the content type to `application/json` as this is what the Pusher client expects in the client side:\n\n``` php\n    header('Content-Type: application/json');\n```\n\nConnect to the Pusher app using the keys and options. The options include the cluster where the app is running from, and whether to encrypt the connection or not:\n\n``` php\n    $options = ['cluster' =\u003e $app_cluster, 'encrypted' =\u003e true]; \n    $pusher = new Pusher\\Pusher($app_key, $app_secret, $app_id, $options);\n```\n\nLastly, get the data sent by the Pusher client and use it as an argument for the `socket_auth()` method. This method returns the success token required by the Pusher client:\n\n``` php\n    $channel = $_POST['channel_name'];\n    $socket_id = $_POST['socket_id'];\n    \n    echo $pusher-\u003esocket_auth($channel, $socket_id);\n```\n\nAs you can see, we didn’t really apply any form of authentication in the code above. In a real-world scenario, you want to have some form of authentication before returning the success token. This can be a unique ID that’s only assigned to the users of your app, it can also be a key which is then decrypted to come up with a token used for authenticating the request. This unique ID or key is sent from the client side so the server can verify it. \n\nYou can test if the server is working by accessing any of the files you created earlier.\n\n## Exposing the server with ngrok\n\nSo that you can access the virtual host `http://ridesharer.loc` from the app, you need to setup ngrok. This allows you to expose your virtual host to the internet.\n\n1. [Sign up for an ngrok account](https://dashboard.ngrok.com/user/signup). \n2. Go to your [dashboard](https://dashboard.ngrok.com/get-started) and download ngrok.\n3. Unzip the archive.\n4. Authenticate ngrok using your auth token:\n\n``` \n    .\\ngrok authtoken YOUR_AUTH_TOKEN\n```\n\n5. Expose the virtual host:\n\n```\n    ngrok http -host-header=ridesharer.loc 80\n```\n\nThis will give you an output similar to the following:\n\n![carpooling-react-native-ngrok-setup](//images.ctfassets.net/1es3ne0caaid/44tTdWBLCMOsOWYYC6qaGa/2c1156e0bb1a4b588a83659e85f2b34b/carpooling-react-native-ngrok-setup.png)\n\nCopy the HTTPS URL as that’s what we’re going to use in the app later on.\n\n## Conclusion\n\nThat’s it! In this tutorial, we’ve set up the server to be used by the app. You can find the code used in this tutorial on this [Github repo](https://github.com/anchetaWern/Ridesharer). In the [second part](https://pusher.com/tutorials/carpooling-react-native-part-2) of this series, we’ll be covering how to create the frontend of the app.","metaTitle":"Create a carpooling app with React Native - Part 1","metaDescription":"Build a carpooling app using React Native, Docker and Google SDKs and APIs. In the first part, create the backend server using Docker and PHP."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"30ZzU6JKpagkAakOoK4igW","type":"Entry","createdAt":"2018-06-07T16:31:42.992Z","updatedAt":"2018-06-19T14:31:18.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a carpooling app with React Native - Part 2: Creating the frontend","url":"carpooling-react-native-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/Ridesharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-06-07","description":"This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to create a carpooling app. In part twoyou will set up the frontend.","prerequisite":"You will need to have completed the first part of the series. For part two you need experience with React Native.","content":"This is the second part of a two-part series on creating a carpooling app with React Native. This is the part where we will be creating the actual app. I’ll be showing you how to set up the app so you can run it on an Android emulator (Genymotion) or an iOS device.\n\n## Prerequisites\n\nYou need to have completed [part one](https://pusher.com/tutorials/carpooling-react-native-part-1) before moving on to this tutorial.\n\nTo effectively follow this tutorial, you should have a good grasp of the following React concepts:\n\n- props \n- refs\n- state\n- component lifecycle\n\nAs for building the app with React Native, knowing how to do the following will be helpful:\n\n- How to use primitive React Native components such as the `View` or `Text`. \n- How to add styles to the components.\n- How to create your own components.\n\n## What we’ll be building\n\nThe complete details on what we’ll be building are available in the first part of the series. As a refresher, we’ll be building a carpooling app. This allows the user to share the vehicle they’re currently riding in so someone else can hop in the same vehicle. The app is responsible for:\n\n- Matching the users so that only the users who are going the same route can share a ride with each other.\n- After two users are matched, the app provides realtime tracking on where each other currently are.\n\nFor the rest of the tutorial, I’ll be referring to the user who is sharing the ride as the “rider”. While the user who is searching for a ride as the “hiker”.\n\n## Installing the dependencies\n\nStart by generating a new React Native project:\n\n```\n    react-native init Ridesharer\n```\n\nThis will create a `Ridesharer` directory. This will serve as the root directory that we’ll be using for the rest of the tutorial.\n\nThe app relies on the following libraries to implement specific features:\n\n- [**axios**](https://github.com/axios/axios) - for making requests to the server. Although React Native already comes with [fetch](https://facebook.github.io/react-native/docs/network.html), axios gives us a simpler API to work with.\n- [**pusher-js**](https://github.com/pusher/pusher-js) - the official Pusher JavaScript library. This allows us connect to a Pusher app and send realtime data.\n- [**react-native-geocoding**](https://github.com/marlove/react-native-geocoding) - for converting latitude and longitude pairs to the actual name of the place.\n- [**react-native-google-places-autocomplete**](https://github.com/FaridSafi/react-native-google-places-autocomplete) - for searching the user’s destination.\n- [**react-native-maps**](https://github.com/react-community/react-native-maps) - for showing a map inside the app. This is also used for showing markers on where the users are and their destinations. \n- [**react-native-maps-directions**](https://github.com/bramus/react-native-maps-directions) - for showing the route from the user’s origin to their destination. \n- [**react-native-vector-icons**](https://github.com/oblador/react-native-vector-icons) - for using icons inside the app.\n- [**react-navigation**](https://github.com/react-navigation/react-navigation) - for easily implementing navigation between screens.\n\nTo ensure that we’re both using the same package versions, open the `package.json` file and update the `dependencies` with the following:\n\n``` json\n    \"dependencies\": {\n      \"axios\": \"0.18.0\",\n      \"prop-types\": \"15.6.1\",\n      \"pusher-js\": \"4.2.2\",\n      \"react\": \"16.3.1\",\n      \"react-native\": \"0.55.4\",\n      \"react-native-geocoding\": \"0.3.0\",\n      \"react-native-google-places-autocomplete\": \"1.3.6\",\n      \"react-native-maps\": \"0.20.1\",\n      \"react-native-maps-directions\": \"1.6.0\",\n      \"react-native-vector-icons\": \"4.6.0\",\n      \"react-navigation\": \"2.0.1\"\n    },\n```\n\nOnce that’s done, save the file and execute `npm install`. \n\n## Setting up the dependencies\n\nNow that you’ve installed all the dependencies, there’s one more thing you have to do before you can start coding the app. Additional setup is required for the following dependencies:\n\n- [react-native-vector-icons](https://github.com/oblador/react-native-vector-icons)\n- [react-native-maps](https://github.com/react-community/react-native-maps)\n\nInstructions on how to set up the dependencies are available on the Github repos for each library. Here are the links to the setup instructions to the specific version we’re using:\n\n- [react-native-vector-icons v4.6.0](https://github.com/oblador/react-native-vector-icons/tree/v4.6.0#installation)\n- [react-native-maps v0.20.1](https://github.com/react-community/react-native-maps/blob/v0.20.1/docs/installation.md)\n\nNote that if you’re reading this sometime in the future, you’ll probably have to install the latest package versions and follow their latest installation instructions.\n\n## Building the app\n\nNow we’re ready to build the app. Navigate inside the `Ridesharer` directory as that’s going to be our working directory.\n\nNote that anytime you feel confused on where to add a specific code, you can always visit the [GitHub](https://github.com/anchetaWern/Ridesharer/tree/master/app) [repo](https://github.com/anchetaWern/Ridesharer/tree/master/app) and view the file.\n\n### Index\nOpen the `index.js` file and make sure you’re registering the same name that you used when you generated the project. In this case, it should be `Ridesharer`:\n\n``` javascript\n    // Ridesharer/index.js\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    \n    AppRegistry.registerComponent('Ridesharer', () =\u003e App);\n```\n\n### Root component\n\nCreate a `Root.js` file. This will serve as the Root component of the app. This is where we set up the navigation so we include the two pages of the app: Home and Map. We will be creating these pages later:\n\n``` javascript\n    // Ridesharer/Root.js\n    import React from 'react';\n    import { StackNavigator } from 'react-navigation';\n    \n    import HomePage from './app/screens/Home';\n    import MapPage from './app/screens/Map';\n    \n    const RootStack = StackNavigator(\n      {\n        Home: {\n          screen: HomePage\n        },\n        Map: {\n          screen: MapPage\n        }\n      },\n      { \n        initialRouteName: 'Home', // set the home page as the default page \n      }\n    );\n    \n    export default RootStack;\n```\n\nIn the above code, we’re using the `StackNavigator`, one of the navigators that comes with the React Navigation library. This allows us to push and pop pages to and from a stack. Navigating to a page means pushing it in front of the stack, going back means popping the page that’s currently in front of the stack.\n\n### App component\n\nOpen the `App.js` file and render the `App` component:\n\n``` javascript\n    // Ridesharer/App.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View\n    } from 'react-native';\n    \n    import Root from './Root';\n    \n    export default class App extends Component {\n    \n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cRoot /\u003e\n          \u003c/View\u003e\n        );\n      }\n    \n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff'\n      }\n    });\n```\n\n### Tapper component\n\nThe `Tapper` component is simply a button created for convenience. We can’t really apply a custom style to the built-in React Native `Button` component so we’re creating this one. This component wraps the `Button`  component in a `View` in which the styles are applied:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/Tapper.js\n    import React from 'react';\n    import { View, Button } from 'react-native';\n    \n    import styles from './styles';\n    \n    const Tapper = (props) =\u003e {\n      return (\n        \u003cView style={styles.button_container}\u003e\n          \u003cButton\n            onPress={props.onPress}\n            title={props.title}\n            color={props.color}\n          /\u003e\n        \u003c/View\u003e\n      );\n    }\n    \n    export default Tapper;\n```\n\nHere’s the style declaration:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/styles.js\n    import { StyleSheet } from 'react-native';\n    \n    export default StyleSheet.create({\n      button_container: {\n        margin: 10\n      },\n    });\n```\n\nLastly, we export it using an `index.js` file so that we can simply refer to the component as `Tapper` without including the `Tapper.js` file in the `import` statement later on:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/index.js\n    import Tapper from './Tapper';\n    \n    export default Tapper;\n```\n\nIf you don’t want to create a separate component, you can always use the `TouchableOpacity` and `TouchableHighlight` components. Those two allow you to add a custom style.\n\n### Home page\n\nThe `Home` page is the default page the user sees when they open the app. \n\nStart by including all the React Native packages that we need:\n\n``` javascript\n    // Ridesharer/app/screens/Home.js\n    import React, { Component } from 'react';\n    import { \n      View, \n      Text, \n      StyleSheet, \n      TextInput, \n      Alert, \n      ActivityIndicator, \n      PermissionsAndroid, \n      KeyboardAvoidingView \n    } from 'react-native';\n```\n\nAmong the packages above, only these three warrants an explanation:\n\n- `PermissionsAndroid` - for asking permissions to use the device’s Geolocation feature on Android. \n- `KeyboardAvoidingView` - for automatically adjusting the View when the on-screen keyboard pops out. This allows the user to see what they’re inputting while the keyboard is open. Most of the time, especially on devices with small screen, the input is hidden when the keyboard is open. \n\nNext, include the third-party packages we installed earlier:\n\n``` javascript\n    import axios from 'axios';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    import Tapper from '../components/Tapper';\n```\n\nAdd your ngrok URL (this was created in the first part of the series):\n\n``` javascript\n    const base_url = 'YOUR NGROK URL';\n```\n\nDeclare the function that will ask for the [Geolocation](https://facebook.github.io/react-native/docs/geolocation.html) permission and then call it:\n\n``` javascript\n    async function requestGeolocationPermission() {\n      try{\n        const granted = await PermissionsAndroid.request(\n          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n          {\n            'title': 'Ridesharer Geolocation Permission',\n            'message': 'Ridesharer needs access to your current location so you can share or search for a ride'\n          }\n        );\n    \n        if(granted === PermissionsAndroid.RESULTS.GRANTED){\n          console.log(\"You can use the geolocation\")\n        }else{\n          console.log(\"Geolocation permission denied\")\n        }\n      }catch(err){\n        console.warn(err)\n      }\n    }\n    \n    requestGeolocationPermission();\n```\n\nHide the header. The `Home` page doesn’t need it:\n\n``` javascript\n    export default class Home extends Component {\n      static navigationOptions = {\n        header: null,\n      };\n    }\n```\n\nSet the default state for the loader (for controlling the visibility of the `ActivityIndicator`) and username:\n\n``` javascript\n    state = {\n      is_loading: false,\n      username: ''\n    }\n```\n\nRender the `Home` page. In this page we have:\n\n- An input that asks for the user’s name\n- A button for sharing a ride\n- A button for hitching a ride\n\nNote that we’re using the `KeyboardAvoidingView` as a wrapper. This way, everything inside it will adjust accordingly when the on-screen keyboard becomes visible:\n\n``` javascript\n    render() {\n    \n      return (\n        \u003cKeyboardAvoidingView style={styles.container} behavior=\"padding\" enabled\u003e\n          \u003cView style={styles.jumbo_container}\u003e\n            \u003cIcon name=\"question-circle\" size={35} color=\"#464646\" /\u003e\n            \u003cText style={styles.jumbo_text}\u003eWhat do you want to do?\u003c/Text\u003e\n          \u003c/View\u003e\n      \n          \u003cView\u003e\n            \u003cTextInput\n              placeholder=\"Enter your username\"\n              style={styles.text_field}\n              onChangeText={(username) =\u003e this.setState({username})}\n              value={this.state.username}\n              clearButtonMode={\"always\"}\n              returnKeyType={\"done\"}\n            /\u003e\n            \u003cActivityIndicator size=\"small\" color=\"#007ff5\" style={{marginTop: 10}} animating={this.state.is_loading} /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.close_container}\u003e\n            \u003cTapper\n              title=\"Share a Ride\"\n              color=\"#007ff5\"\n              onPress={() =\u003e {\n                this.enterUser('share');\n              }}\n            /\u003e\n         \n            \u003cTapper \n              title=\"Hitch a Ride\" \n              color=\"#00bcf5\" \n              onPress={() =\u003e {\n                this.enterUser('hike');\n              }} \n            /\u003e\n          \u003c/View\u003e\n        \n        \u003c/KeyboardAvoidingView\u003e\n      );\n    }\n```\n\nWhen either of the buttons is pressed, the function below gets executed. All it does is create the user if they don’t already exist:\n\n``` javascript\n    enterUser = (action) =\u003e {\n      if(this.state.username){ // user should enter a username before they can enter\n    \n        this.setState({\n          is_loading: true\n        });\n        \n        // make a POST request to the server for creating the user\n        axios.post(`${base_url}/save-user.php`, {\n          username: this.state.username // the username entered in the text field\n        })\n        .then((response) =\u003e {\n          \n          if(response.data == 'ok'){\n            // hide the ActivityIndicator\n            this.setState({\n              is_loading: false\n            });\n            \n            // navigate to the Map page, submitting the user's action (ride or hike) and their username as a navigation param (so it becomes available on the Map page)\n            this.props.navigation.navigate('Map', {\n              action: action,\n              username: this.state.username\n            });\n          }\n          \n        });\n    \n      }else{\n        Alert.alert(\n          'Username required',\n          'Please enter a username'\n        );\n      }\n    }\n```\n\nAdd the styles for the Home page:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around'\n      },\n      jumbo_container: {\n        padding: 50,\n        alignItems: 'center'\n      },\n      jumbo_text: {\n        marginTop: 20,\n        textAlign: 'center',\n        fontSize: 25,\n        fontWeight: 'bold'\n      },\n      text_field: {\n        width: 200,\n        height: 50,\n        padding: 10,\n        backgroundColor: '#FFF', \n        borderColor: 'gray', \n        borderWidth: 1\n      }\n    });\n```\n\n### Map page\n\nThe Map page contains the main meat of the app. This allows the user to share or search for a ride. The tracking of location is implemented via Google Maps, Pusher Channels, and React Native’s Geolocation feature. \n\nStart by including all the React Native packages that we need:\n\n``` javascript\n    // Ridesharer/app/screens/Map.js\n    import React, { Component } from 'react';\n    import { \n      View, \n      Text, \n      StyleSheet, \n      Alert, \n      Dimensions, \n      ActivityIndicator\n    } from 'react-native';\n```\n\nNext, include the packages that we installed earlier:\n\n``` javascript\n    import { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\n    import MapView, { Marker, Callout } from 'react-native-maps';\n    import MapViewDirections from 'react-native-maps-directions';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    import Pusher from 'pusher-js/react-native'; \n    import Geocoder from 'react-native-geocoding';\n    import axios from 'axios';\n```\n\nInclude the location library. We will be creating this later, but for now, know that these functions are used to center the map correctly (`regionFrom()`) and getting the difference of two coordinates in meters (`getLatLonDiffInMeters()`):\n\n``` javascript\n    import { regionFrom, getLatLonDiffInMeters } from '../lib/location';\n    import Tapper from '../components/Tapper';\n```\n\nInitialize your API keys and ngrok base URL:\n\n``` javascript\n    const google_api_key = 'YOUR GOOGLE PROJECT API KEY';\n    const base_url = 'YOUR NGROK BASE URL';\n    const pusher_app_key = 'YOUR PUSHER APP KEY';\n    const pusher_app_cluster = 'YOUR PUSHER APP CLUSTER';\n    \n    Geocoder.init(google_api_key); // initialize the geocoder\n```\n\nNext, also declare the timeouts for searching and sharing a ride. We will be using these values later to reset the app’s UI if it couldn’t match two users within these timeouts:\n\n``` javascript\n    const search_timeout = 1000 * 60 * 10; // 10 minutes\n    const share_timeout = 1000 * 60 * 5; // 5 minutes\n```\n\nSetup a default region that the map will display:\n\n``` javascript\n    const default_region = {\n      latitude: 37.78825,\n      longitude: -122.4324,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421,\n    };\n```\n\nGet the device width. We will be using this later to set the width of the auto-complete text field for searching places:\n\n``` javascript\n    var device_width = Dimensions.get('window').width; \n```\n\nNext, create the `Map`  component and set the `navigationOptions`. Unlike the `Home` page earlier, we need to set a few options for the navigation. This includes the header title and the styles applied to it. Putting these navigation options will automatically add a back button to the header to allow the user to go back to the `Home` page:\n\n``` javascript\n    export default class Map extends Component {\n    \n      static navigationOptions = ({navigation}) =\u003e ({\n        headerTitle: 'Map',\n        headerStyle: {\n          backgroundColor: '#007ff5'\n        },\n        headerTitleStyle: {\n          color: '#FFF'\n        }\n      });\n    \n      // next: add the code for initializing the state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      start_location: null, // the coordinates (latitude and longitude values) of the user's origin\n      end_location: null, // the coordinates of the user's destination\n      region: default_region, // the region displayed in the map\n      from: '', // the name of the place where the user is from (origin)\n      to: '', // the name of the place where the user is going (destination)\n      rider_location: null, // the coordinates of the rider's current location\n      hiker_location: null, // the coordinates of the hiker's origin\n      is_loading: false, // for controlling the visibility of the ActivityIndicator\n      has_journey: false // whether the rider has accepted a hiker's request or a hiker's request has been accepted by a rider \n    }\n    \n    // next: add the constructor\n```\n\nNext, add the constructor:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.from_region = null;\n      this.watchId = null; // unique ID for the geolocation watcher. Storing it in a variable allows us to stop it at a later time (for example: when the user is done using the app)\n      this.pusher = null; // variable for storing the Pusher instance\n      this.user_channel = null; // the Pusher channel for the current user\n      this.journey_id = null; // the hiker's route ID\n      this.riders_channel = []; // if current user is a hiker, the value of this will be the riders channel\n      this.users_channel = null; // the current user's channel\n      this.hiker = null // for storing the hiker's origin coordinates; primarily used for getting the distance between the rider and the hiker\n    }\n```\n\nOnce the component is mounted, you want to get the `username` that was passed from the Home page earlier. This `username` is used later on as the unique key for identifying each user that connects to Pusher Channels:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      const username = navigation.getParam('username');\n    \n      this.pusher = new Pusher(pusher_app_key, {\n        authEndpoint: `${base_url}/pusher-auth.php`,\n        cluster: pusher_app_cluster,\n        encrypted: true\n      });  \n      \n      // next: add the code for subscribing to the current user's own channel\n    }  \n```\n\nNext, add the code for subscribing to the current user's own channel. This allows the user to send and receive data in realtime through this channel. In the hiker’s case, they use it to make a request to the matching rider. In the rider’s case, they use it to receive requests coming from hikers as well as sending an acceptance and their current location to the hiker:\n\n``` javascript\n    this.users_channel = this.pusher.subscribe(`private-user-${username}`); // note that the private-* is required when using private channels \n```\n\nWhen a rider receives a request, the code below is executed. This alerts the rider that someone wants to ride with them. They can either accept or decline it:\n\n``` javascript\n    this.users_channel.bind('client-rider-request', (hiker) =\u003e {\n    \n      Alert.alert(\n        `${hiker.username} wants to ride with you`,\n        `Pickup: ${hiker.origin} \\nDrop off: ${hiker.dest}`,\n        [\n          {\n            text: \"Decline\",\n            onPress: () =\u003e {\n              // do nothing\n            },\n            style: \"cancel\"\n          },\n          {\n            text: \"Accept\", \n            onPress: () =\u003e {\n              this.acceptRide(hiker);\n            }\n          },\n        ],\n        { cancelable: false } // no cancel button\n      );\n    \n    });\n    \n    // next: add code for getting the user's origin\n```\n\nNote that in the code above, we’re not really handling declines. This is to keep the focus on the key feature of the app.\n\nNext, get the user’s current location via the Geolocation API. At this point, we can already use the API without problems (unless the user didn’t approve the permission). We’ll just focus our attention on the “happy path” to keep things simple so we’ll assume that the user approved the permission request:\n\n``` javascript\n    navigator.geolocation.getCurrentPosition(\n      (position) =\u003e {\n        // get the region (this return the latitude and longitude delta values to be used by React Native Maps)\n        var region = regionFrom(\n          position.coords.latitude, \n          position.coords.longitude, \n          position.coords.accuracy\n        );\n        \n        // convert the coordinates to the descriptive name of the place\n        Geocoder.from({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        })\n        .then((response) =\u003e {\n          // the response object is the same as what's returned in the HTTP API: https://developers.google.com/maps/documentation/geocoding/intro\n          \n          this.from_region = region; // for storing the region in case the user presses the \"reset\" button\n          \n          // update the state to indicate the user's origin on the map (using a marker)\n          this.setState({\n            start_location: {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude\n            },\n            region: region, // the region displayed on the map\n            from: response.results[0].formatted_address // the descriptive name of the place\n          });\n    \n        });\n    \n      }\n    );\n```\n\nNext, add the `acceptRide()` function. This function is executed when the rider accepts a hiker’s ride request:\n\n``` javascript\n    acceptRide = (hiker) =\u003e {\n      \n      const username = this.props.navigation.getParam('username');\n      \n      let rider_data = {\n        username: username,\n        origin: this.state.from, // descriptive name of the rider's origin\n        dest: this.state.to, // descriptive name of the rider's destination\n        coords: this.state.start_location // the rider's origin coordinates\n      };\n    \n      this.users_channel.trigger('client-rider-accepted', rider_data); // inform hiker that the rider accepted their request; send along the rider's info\n      \n      // make a request to delete the route so other hikers can no longer search for it (remember the 1:1 ratio for a rider to hiker?)\n      axios.post(`${base_url}/delete-route.php`, {\n        username: username\n      })\n      .then((response) =\u003e {\n        console.log(response.data);\n      })\n      .catch((err) =\u003e {\n        console.log('error excluding rider: ', err);\n      });\n    \n      this.hiker = hiker; // store the hiker's info\n      \n      // update the state to stop the loading animation and show the hiker's location\n      this.setState({\n        is_loading: false,\n        has_journey: true,\n        hiker_location: hiker.origin_coords\n      });\n      \n    }\n```\n\nNext, add the function for rendering the UI:\n\n``` javascript\n    render() {\n      const { navigation } = this.props;\n      // get the navigation params passed from the Home page earlier\n      const action = navigation.getParam('action'); // action is either \"ride\" or \"hike\"\n      const username = navigation.getParam('username');\n    \n      let action_button_label = (action == 'share') ? 'Share Ride' : 'Search Ride';\n    \n      // next: add code for rendering the UI\n    }\n```\n\nThe map UI contains the following:\n\n- `MapView` component for rendering the map. Inside it are the following: \n  - `Marker` component for showing the origin and destination of the user, as well as for showing the location of the rider (if the user is a hiker), or the hiker (if the user is a rider).\n  - `MapViewDirections` component for showing the route from the origin to the destination of the current user.\n- `GooglePlacesAutocomplete` component for rendering an auto-complete text field for searching and selecting a destination.\n- `ActivityIndicator` for showing a loading animation while the rider waits for someone to request a ride, or when the hiker waits for the app to find a matching rider.\n- `Tapper` component for sharing a ride or searching a ride.\n- `Tapper` component for resetting the selection (auto-complete text field and marker).\n\n``` javascript\n    return (\n      \u003cView style={styles.container}\u003e\n    \n        \u003cMapView\n          style={styles.map}\n          region={this.state.region}\n          zoomEnabled={true}\n          zoomControlEnabled={true}\n        \u003e\n          {\n            this.state.start_location \u0026\u0026\n            \u003cMarker coordinate={this.state.start_location}\u003e\n              \u003cCallout\u003e\n                \u003cText\u003eYou are here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n    \n          {\n            this.state.end_location \u0026\u0026\n            \u003cMarker\n              pinColor=\"#4196ea\"\n              coordinate={this.state.end_location}\n              draggable={true}\n              onDragEnd={this.tweakDestination}\n            /\u003e\n          }\n    \n          {\n            this.state.rider_location \u0026\u0026\n            \u003cMarker \n              pinColor=\"#25a25a\"\n              coordinate={this.state.rider_location}\n            \u003e\n              \u003cCallout\u003e\n                \u003cText\u003eRider is here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n    \n          {\n            this.state.hiker_location \u0026\u0026\n            \u003cMarker \n              pinColor=\"#25a25a\"\n              coordinate={this.state.hiker_location}\n            \u003e\n              \u003cCallout\u003e\n                \u003cText\u003eHiker is here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n          \n          {\n            this.state.start_location \u0026\u0026 this.state.end_location \u0026\u0026\n            \u003cMapViewDirections\n              origin={{\n                'latitude': this.state.start_location.latitude,\n                'longitude': this.state.start_location.longitude\n              }}\n              destination={{\n                'latitude': this.state.end_location.latitude,\n                'longitude': this.state.end_location.longitude\n              }}\n              strokeWidth={5}\n              strokeColor={\"#2d8cea\"}\n              apikey={google_api_key}\n            /\u003e\n          }\n          \n        \u003c/MapView\u003e\n    \n        \u003cView style={styles.search_field_container}\u003e\n        \n          \u003cGooglePlacesAutocomplete\n            ref=\"endlocation\"\n            placeholder='Where do you want to go?'\n            minLength={5} \n            returnKeyType={'search'} \n            listViewDisplayed='auto' \n            fetchDetails={true}            \n            onPress={this.selectDestination}\n          \n            query={{\n              key: google_api_key,\n              language: 'en', \n            }}\n            \n            styles={{\n              textInputContainer: {\n                width: '100%',\n                backgroundColor: '#FFF'\n              },\n              listView: {\n                backgroundColor: '#FFF'\n              }\n            }}\n            debounce={200} \n          /\u003e\n        \u003c/View\u003e\n    \n        \u003cActivityIndicator size=\"small\" color=\"#007ff5\" style={{marginBottom: 10}} animating={this.state.is_loading} /\u003e\n        \n        {\n          !this.state.is_loading \u0026\u0026 !this.state.has_journey \u0026\u0026\n          \u003cView style={styles.input_container}\u003e\n    \n            \u003cTapper \n              title={action_button_label}\n              color={\"#007ff5\"}\n              onPress={() =\u003e {\n                this.onPressActionButton();\n              }} /\u003e\n           \n            \u003cTapper\n              title={\"Reset\"}\n              color={\"#555\"}\n              onPress={this.resetSelection} \n            /\u003e\n            \n          \u003c/View\u003e\n        }\n    \n      \u003c/View\u003e\n    );\n```\n\nThe code above should be pretty self-explanatory. If you’re unsure what a specific prop does, how the component works, or what children is it expecting, you can always check the Github repo of the package we’re using.\n\nNext, let’s move on to the functions used in the UI. The `resetSelection()` is executed when the reset button is pressed by the user. This empties the auto-complete text field for searching for places, it also updates the state so the UI reverts back to its previous state before the destination was selected. This effectively removes the marker showing the user’s destination, as well as the route going to it:\n\n``` javascript\n    resetSelection = () =\u003e {\n      this.refs.endlocation.setAddressText('');\n      this.setState({\n        end_location: null,\n        region: this.from_region,\n        to: ''\n      });\n    }\n```\n\nThe `tweakDestination()` function is executed when the user drops the destination marker somewhere else:\n\n``` javascript\n    tweakDestination = () =\u003e {\n      // get the name of the place\n      Geocoder.from({\n        latitude: evt.nativeEvent.coordinate.latitude,\n        longitude: evt.nativeEvent.coordinate.longitude\n      })\n      .then((response) =\u003e {\n        this.setState({\n          to: response.results[0].formatted_address\n        });\n      });\n      \n      this.setState({\n        end_location: evt.nativeEvent.coordinate\n      });\n    }\n```\n\nThe `selectDestination()` function is executed when the user selects their destination. This function will update the state so it shows the user’s destination in the map:\n\n``` javascript\n    selectDestination = (data, details = null) =\u003e {\n    \n      const latDelta = Number(details.geometry.viewport.northeast.lat) - Number(details.geometry.viewport.southwest.lat)\n      const lngDelta = Number(details.geometry.viewport.northeast.lng) - Number(details.geometry.viewport.southwest.lng)\n    \n      let region = {\n        latitude: details.geometry.location.lat,\n        longitude: details.geometry.location.lng,\n        latitudeDelta: latDelta,\n        longitudeDelta: lngDelta\n      };\n    \n      this.setState({\n        end_location: {\n          latitude: details.geometry.location.lat,\n          longitude: details.geometry.location.lng,\n        },\n        region: region,\n        to: this.refs.endlocation.getAddressText() // get the full address of the user's destination\n      });\n    \n    }\n```\n\nWhen the user presses the **Share a Ride** or **Search a Ride** button, the `onPressActionButton()` function is executed. This executes either the `shareRide()` function or the `hikeRide()` function depending on the action selected from the Home page earlier:\n\n``` javascript\n    onPressActionButton = () =\u003e {\n    \n      const action = this.props.navigation.getParam('action');\n      const username = this.props.navigation.getParam('username');\n    \n      this.setState({\n        is_loading: true\n      });\n    \n      if(action == 'share'){\n        this.shareRide(username);\n      }else if(action == 'hike'){\n        this.hikeRide(username);      \n      }\n    \n    }\n```\n\nThe `shareRide()` function is executed when a rider shares their ride after selecting a destination. This makes a request to the server to save the route. The response contains the unique ID assigned to the rider’s route. This ID is assigned as the value of `this.journey_id`. This will be used later to:\n\n- Make a request to the server to update the route record stored in the Elasticsearch index. \n- Know when to start doing something with the current location data. This is because the current position begins to be watched right after the user presses on the **Share a Ride** button as you’ll see on the code block after this:\n\n``` javascript\n    shareRide = (username) =\u003e {\n    \n      axios.post(`${base_url}/save-route.php`, {\n        username: username,\n        from: this.state.from, \n        to: this.state.to, \n        start_location: this.state.start_location,\n        end_location: this.state.end_location\n      })\n      .then((response) =\u003e {\n        this.journey_id = response.data.id;\n        Alert.alert(\n          'Ride was shared!',\n          'Wait until someone makes a request.'\n        );\n      })\n      .catch((error) =\u003e {\n        console.log('error occurred while saving route: ', error);\n      });\n      \n      // next: add code for watching the rider's current location\n    \n    }\n```\n\nNext, start watching the user’s current location. Note that we won’t actually do anything with the location data unless the rider has already shared their ride and that they have already approved a hiker to ride with them. Once both conditions are met, we make a request to the server to update the previously saved route with the rider’s current location. This way, when a hiker searches for a ride, the results will be biased based on the rider’s current location and not their origin:\n\n``` javascript\n    this.watchId = navigator.geolocation.watchPosition(\n      (position) =\u003e {\n      \n        let latitude = position.coords.latitude;\n        let longitude = position.coords.longitude;\n        let accuracy = position.coords.accuracy;\n    \n        if(this.journey_id \u0026\u0026 this.hiker){ // needs to have a destination and a hiker\n          // update the route with the rider's current location\n          axios.post(`${base_url}/update-route.php`, {\n            id: this.journey_id,\n            lat: latitude,\n            lon: longitude\n          })\n          .then((response) =\u003e {\n            console.log(response);\n          });\n    \n          // next: add code for sending rider's current location to the hiker\n        \n        }\n    \n      },\n      (error) =\u003e {\n        console.log('error occured while watching position: ', error);\n      },\n      { \n        enableHighAccuracy: true, // get more accurate location\n        timeout: 20000, // timeout after 20 seconds of not being able to get location\n        maximumAge: 2000, // location has to be atleast 2 seconds old for it to be relevant\n        distanceFilter: 10 // allow up to 10-meter difference from the previous location before executing the callback function again\n      }\n    );\n    \n    // last: add code for resetting the UI after 5 minutes of sharing a ride \n```\n\nNext, we send a `client-rider-location` event to the rider’s own channel. Later, we’ll have the hiker subscribe to the rider’s channel (the one they matched with) so that they’ll receive the location updates:\n\n``` javascript\n    let location_data = {\n      username: username,\n      lat: latitude,\n      lon: longitude,\n      accy: accuracy \n    };\n    \n    this.users_channel.trigger('client-rider-locationchange', location_data); // note: client-* is required when sending client events through Pusher\n    \n    // update the state so that the rider’s current location is displayed on the map and indicated with a marker\n    this.setState({\n      region: regionFrom(latitude, longitude, accuracy),\n      start_location: {\n        latitude: latitude,\n        longitude: longitude\n      }\n    });\n    \n    // next: add code for updating the app based on how near the rider and hiker are from each other\n```\n\nNext, we need to get the difference (in meters) between the rider’s coordinates and the hiker’s origin:\n\n``` javascript\n    let diff_in_meters = getLatLonDiffInMeters(latitude, longitude, this.hiker.origin_coords.latitude, this.hiker.origin_coords.longitude);\n    \n    if(diff_in_meters \u003c= 20){\n      this.resetUI();\n    }else if(diff_in_meters \u003c= 50){\n      Alert.alert(\n        'Hiker is near',\n        'Hiker is around 50 meters from your current location'\n      );\n    }\n```\n\nNext, add the code for resetting the UI after five minutes without anyone requesting to share a ride with the rider:\n\n``` javascript\n    setTimeout(() =\u003e {\n      this.resetUI();\n    }, share_timeout);\n```\n\nHere’s the code for resetting the UI:\n\n``` javascript\n    resetUI = () =\u003e {\n    \n      this.from_region = null;\n      this.watchId = null; \n      this.pusher = null; \n      this.user_channel = null; \n      this.journey_id = null;\n      this.riders_channel = []; \n      this.users_channel = null; \n      this.hiker = null;\n    \n      this.setState({\n        start_location: null,\n        end_location: null,\n        region: default_region,\n        from: '',\n        to: '',\n        rider_location: null, \n        hiker_location: null,\n        is_loading: false,\n        has_journey: false\n      });\n      \n      this.props.navigation.goBack(); // go back to the Home page\n    \n      Alert.alert('Awesome!', 'Thanks for using the app!');\n    \n    }\n```\n\nNow let’s move on to the hiker’s side of things. When the hiker presses the **Search a Ride** button, the `hikeRide()` function is executed. This function is executed every five seconds until it finds a rider which matches the hiker’s route. If a rider cannot be found within ten minutes, the function stops. Once the server returns a suitable rider, it responds with the rider’s information (username, origin, destination, coordinates). This is then used to subscribe to the rider’s channel so the hiker can request for a ride and receive location updates. Note that this is done automatically, so the hiker doesn’t have control over who they share a ride with:\n\n``` javascript\n    hikeRide = (username) =\u003e {\n    \n      var interval = setInterval(() =\u003e {\n        // make a request to the server to get riders that matches the hiker's route\n        axios.post(`${base_url}/search-routes.php`, {\n          origin: this.state.start_location,\n          dest: this.state.end_location\n        })\n        .then((response) =\u003e {\n          \n          if(response.data){\n    \n            clearInterval(interval); // assumes the rider will accept the request\n            \n            let rider = response.data; // the rider's info\n            \n            // subscribe to the rider's channel so the hiker can make a request and receive updates from the rider\n            this.riders_channel = this.pusher.subscribe(`private-user-${rider.username}`);\n            \n            this.riders_channel.bind('pusher:subscription_succeeded', () =\u003e {\n              // when subscription succeeds, make a request to the rider to share the ride with them\n              this.riders_channel.trigger('client-rider-request', {\n                username: username, // username of the hiker\n                origin: this.state.from, // descriptive name of the hiker's origin\n                dest: this.state.to, // descriptive name of the hiker's destination\n                origin_coords: this.state.start_location // coordinates of the hiker's origin\n              });\n            });\n    \n            // next: add code for listening for when the rider accepts their request\n          }      \n        })\n        .catch((error) =\u003e {\n          console.log('error occurred while searching routes: ', error);\n        });\n    \n      }, 5000);\n    \n      setTimeout(() =\u003e {\n        clearInterval(interval);\n        this.resetUI();\n      }, ten_minutes);\n    \n    }\n```\n\nOnce the rider accepts the ride request, the function below is executed:\n\n``` javascript\n    this.riders_channel.bind('client-rider-accepted', (rider_data) =\u003e {\n      Alert.alert(\n        `${rider_data.username} accepted your request`,\n        `You will now receive updates of their current location`\n      );\n      \n      // update the map to show the rider's origin\n      this.setState({\n        is_loading: false,\n        has_journey: true,\n        rider_location: rider_data.coords\n      });\n    \n      // next: add code for subscribing to the rider's location change\n    });\n```\n\nAs you’ve seen earlier, when the rider’s location changes, it triggers an event called `client-rider-location-change`. Any user who is subscribed to the rider’s channel and is listening for that event will get the location data in realtime:\n\n``` javascript\n    this.riders_channel.bind('client-rider-locationchange', (data) =\u003e {\n      // update the map with the rider's current location\n      this.setState({\n        region: regionFrom(data.lat, data.lon, data.accy),\n        rider_location: {\n          latitude: data.lat,\n          longitude: data.lon\n        }\n      });\n      \n      let hikers_origin = this.state.start_location;\n      let diff_in_meters = getLatLonDiffInMeters(data.lat, data.lon, hikers_origin.latitude, hikers_origin.longitude);\n        \n      if(diff_in_meters \u003c= 20){\n        this.resetUI();\n      }else if(diff_in_meters \u003c= 50){\n        Alert.alert(\n          'Rider is near',\n          'Rider is around 50 meters from your location'\n        );\n      }\n    });\n```\n\nAdd the styles for the `Map` page:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n      },\n      map: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      },\n      search_field_container: {\n        height: 150, \n        width: device_width, \n        position: 'absolute', \n        top: 10\n      },\n      input_container: {\n        alignSelf: 'center',\n        backgroundColor: '#FFF',\n        opacity: 0.80,\n        marginBottom: 25\n      }\n    });\n```\n\n### Location library\n\nHere’s the code for getting the latitude and longitude delta values. As you have seen from the code earlier, this function is mainly used to get the region displayed on the map:\n\n``` javascript\n    // Ridesharer/app/lib/location.js\n    export function regionFrom(lat, lon, accuracy) {\n      const oneDegreeOfLongitudeInMeters = 111.32 * 1000;\n      const circumference = (40075 / 360) * 1000;\n    \n      const latDelta = accuracy * (1 / (Math.cos(lat) * circumference));\n      const lonDelta = (accuracy / oneDegreeOfLongitudeInMeters);\n    \n      return {\n        latitude: lat,\n        longitude: lon,\n        latitudeDelta: Math.max(0, latDelta),\n        longitudeDelta: Math.max(0, lonDelta)\n      };\n    }\n```\n\nAnd here’s the function for getting the difference (in meters) between two coordinates. This is mainly used for notifying the users when they’re already near each other, and to reset the app UI when they’re already very near each other:\n\n``` javascript\n    export function getLatLonDiffInMeters(lat1, lon1, lat2, lon2) {\n      var R = 6371; // radius of the earth in km\n      var dLat = deg2rad(lat2-lat1);  // deg2rad below\n      var dLon = deg2rad(lon2-lon1); \n      var a = \n        Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n        Math.sin(dLon/2) * Math.sin(dLon/2)\n        ; \n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n      var d = R * c; // distance in km\n      return d * 1000;\n    }\n```\n\nThe `deg2rad()` function used above converts the degrees value to radians:\n\n``` javascript\n    function deg2rad(deg) {\n      return deg * (Math.PI/180)\n    }\n```\n\n## Running the app\n\nBefore you can run the app on Android, you need to make sure you have the following Android SDK packages installed, you can find these under SDK Tools on the SDK manager:\n\n- Google Play services\n- Android Support Repository\n- Google Repository\n\nIf you’re going to test the app on Genymotion, you need to install Google Play services first. Since the app is using Google Maps, you need Google Play services for the feature to work. If you have version 2.10 or above, they provide an easy way to install it. Just click on **Open GAPPS** on a running emulator instance and go through the installation wizard. After that, restart the device and you should be good to go:\n\n![carpooling-react-native-install-google-play-on-genymotion](//images.ctfassets.net/1es3ne0caaid/7cjYmvjaRG4UQQImAquy4S/67f48d96692b5bbfbedcda652e964f97/carpooling-react-native-install-google-play-on-genymotion.png)\n\nTo run the app on Android, execute the following command. This will run the app either on an opened emulator instance (for example: Genymotion) or an Android device (if you have connected one):\n\n```\n    react-native run-android\n```\n\nIf you’re having problems with getting the app to run on Android, be sure to check my article on Debugging common React Native issues on Android.\n\nFor iOS, you just have to make sure you have the latest version of Xcode installed. Note that if you want to run the app on a device, you can only do it via Xcode by opening the `.xcworkspace` file. \n\nTo run the app on an iOS device, select your device on Xcode and click the big play button.\n\nTo run the app in the iOS simulator, you can also do it via Xcode using the method above. But if you want to run it from the terminal, you can execute the following command from the root directory of your project:\n\n```\n    react-native run-ios\n```\n\nIf you want to run the app on a specific simulator, you first have to list which devices are available:\n\n```\n    xcrun simctl list devicetypes\n```\n\nThis will return the list of devices:\n\n![carpooling-react-native-device-list](//images.ctfassets.net/1es3ne0caaid/4joEh2Gg80Y2KsQMuCOuWe/114b76551af9ee51f19f96edf39f6e2f/carpooling-react-native-device-list.png)\n\nYou can then copy the device name (for example: iPhone 5s) and specify it as a value for the `--simulator` option:\n\n```\n    react-native run-ios --simulator=\"iPhone 5s\"\n```\n\nIf you’re having problems with running the app on an iOS simulator or device, be sure to check my article on Debugging common React Native issues on iOS.\n\n## Conclusion\n\nThat’s it! In this series, you’ve learned how to create a carpooling app with React Native. Along the way, you also learned the following:\n\n- How to use axios to make requests to the server.\n- How to use React Native’s Geolocation feature.\n- How to add Google Play Services to Genymotion.\n- How to use Genymotion’s GPS emulation tool.\n- How to use Pusher Channels.\n- How to use Google’s Geocoding API.\n\nYou can find all the codes used in this series on this [GitHub repo](https://github.com/anchetaWern/Ridesharer).","metaTitle":"Create a carpooling app with React Native - Part 2","metaDescription":"Build a carpooling app using React Native, Docker and Google SDKs and APIs. In the second part, create the frontend using React Native and demo it with Genymotion."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"vduceSq8dEe6MO4sgiis4","type":"Entry","createdAt":"2018-06-01T11:22:55.789Z","updatedAt":"2020-06-19T10:18:58.883Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Add a chat widget to your Gatsby blog","url":"chat-gatsby","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/gatsby-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-01","description":"In this tutorial, we’re going to take a look at how we can add a realtime chat feature to a Gatsby blog using Pusher, using React.","prerequisite":"Some knowledge of React will be helpful when following this tutorial.","content":"Gatsby is a static-site generator which uses modern web technologies such as React and Webpack. It can generate blazing-fast static sites from Markdown, JSON, APIs, and CMSs like Wordpress and Drupal. \n\nIn this tutorial, we’re going to take a look at how we can add a realtime chat feature to a Gatsby blog using Pusher. This tutorial assumes that you’re new to Gatsby but have a little bit of knowledge on React.\n\n## What you’ll create\n\nYou’ll be creating a realtime chat component using React and Pusher. This allows visitors of your blog to chat with each other. Each blog post will serve as a unique chat room. This means that messages sent from “blog post A” will only be viewable from that page. Here’s what the final output will look like:\n\n![add-realtime-chat-gatsby-blog-pusher-chat-component](//images.ctfassets.net/1es3ne0caaid/2pKH6jgECs2EQCK2aCMIC6/8bf070a10263637ecb0664062db5f2c5/add-realtime-chat-gatsby-blog-pusher-chat-component.png)\n\nYou can find the source code for this tutorial on this [Github repo](https://github.com/anchetaWern/gatsby-chat).\n\n## Install Gatsby\n\nThe first thing that you need to do is to install the Gatsby command line tool:\n\n```\n    npm install -g gatsby-cli\n```\n\nThis allows you to create a Gatsby site from the command line. \n\nThe gatsby-cli comes with a default template for starting out a Gatsby site, but we’re going to use the [Gatsby starter blog](https://github.com/gatsbyjs/gatsby-starter-blog) instead. This is because the default template doesn’t really come with the plugins that will allow us to build a blog from markdown files. We’re using Markdown since it is the most common format for building static sites.\n\nHere’s how you can tell Gatsby to use the “Gatsby starter blog” as the template:\n\n```\n    gatsby new gatsby-blog https://github.com/gatsbyjs/gatsby-starter-blog\n```\n\nOnce that’s done, you can now start developing using the `develop` command:\n\n```\n    gatsby develop\n```\n\nThis spins up a local server which you can access at `http://localhost:8000` from your browser. This automatically reloads as you make changes to the files in the `src` directory or the config file (`gatsby-config.js`).  \n\n\n## Create a Pusher app\n\nIn order to use Pusher, you first need to create a new Pusher app. Select React as the front-end tech and Node.js as the back-end tech.\n\n![add-realtime-chat-gatsby-blog-pusher-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/DnpnIFLKH60cQEG2MSKcC/25b8e80c5303e66811c2aecd050a74cb/add-realtime-chat-gatsby-blog-pusher-create-pusher-app.png)\n\nIf you don’t have a Pusher account yet, you can [sign up here](https://pusher.com/signup). Pusher's sandbox plan is free and is [very generous](https://dashboard.pusher.com/plans) when it comes to the number of messages you can send. \n\nOnce created, go to the app settings page and enable client events:\n\n![add-realtime-chat-gatsby-blog-pusher-enable-client-events](//images.ctfassets.net/1es3ne0caaid/29xLMdzI8sGAO4C0eoSiYo/1014cbe581653744e62558424d7c8063/add-realtime-chat-gatsby-blog-pusher-enable-client-events.png)\n\nThis allows us to directly send messages from the client-side without server intervention, though Pusher requires an authentication server before client events can be sent. This is a security feature in order to ensure that the users who are sending messages are really genuine users of the app. In the next section, you’ll learn how to create the server.\n\n## Create the auth server\n\nTo create an auth server, start by creating a new folder outside of your Gatsby blog. Once created, navigate inside that directory and install the following packages:\n\n```\n    npm install express body-parser pusher\n```\n\nNext, create a `server.js` file and import the packages you just installed:\n\n``` language-javascript\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\nSince the blog will be on a different domain from the auth server, we need to enable CORS so that it can accept connection from any domain:\n\n``` language-javascript\n    // enable cross-origin resource sharing\n    app.use(function(req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      next();\n    });\n```\n\nNext, add the code for connecting to Pusher. I’ll explain later how the values for the configuration options are supplied. For now, just know that they’re being loaded as environment variables:\n\n``` language-javascript\n    var pusher = new Pusher({ // connect to pusher\n      appId: process.env.APP_ID, \n      key: process.env.APP_KEY, \n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER, \n    });\n```\n\nNext, add a route for checking if the server is running:\n\n``` language-javascript\n    app.get('/', function(req, res){ // to test if the server is running\n      res.send('all green');\n    });\n```\n\nLastly, add the routes for authenticating users. Later on, the Chat component will hit this route every time a visitor views a blog post:\n\n``` language-javascript\n    // to authenticate users\n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nAs you have seen, there’s really no authentication going on. This exposes your Pusher app to potential misuse because anyone can just use your Pusher App ID and it won’t be verified that the request came from your blog.  Here’s some code that will allow you to verify where the request originated from. Add this to your Pusher auth handler, right before the `pusher.authenticate` call to check if the request is valid or not.\n\n``` language-javascript\n    var origin = req.get('origin');\n    if(origin == 'YOUR BLOG DOMAIN NAME OR IP'){\n      // authenticate the request\n    }\n```\n\n## Deploy the auth server\n\nWe’ll be using [*Now*](https://zeit.co/now) to deploy the auth server. You can install it with the following command:\n\n```\n    npm install -g now\n```\n\nNavigate to the folder where you have the `server.js` file and execute `now`. This will ask you to enter and verify your email.\n\nOnce verified, you can add the Pusher app config to [*now’s*](https://zeit.co/blog/environment-variables-secrets) [secrets](https://zeit.co/blog/environment-variables-secrets). Be sure to replace the values on the right side with the actual Pusher app config.\n\n```\n    now secret add gatsby_app_id YOUR_PUSHER_APP_ID\n    now secret add gatsby_app_key YOUR_PUSHER_APP_KEY\n    now secret add gatsby_app_secret YOUR_PUSHER_APP_SECRET\n    now secret add gatsby_app_cluster YOUR_PUSHER_APP_CLUSTER\n```\n\nAfter that, you can already deploy the auth server:\n\n```\n    now -e APP_ID=@gatsby_app_id -e APP_KEY=@gatsby_app_key -e APP_SECRET=@gatsby_app_secret APP_CLUSTER=@gatsby_app_cluster\n```\n\nThe values on the left side (e.g. `APP_ID`) are the names for the environment variable and the values on the right side are the names you gave to the secret (e.g `gatsby_app_id`) earlier. This allows the auth server to access it via  `process.env.APP_ID`.\n\nOnce deployed, you should be able to access the URL returned by *now*. \n\n\n## Create the chat component\n\nNow you’re ready to work with the Chat component. First, navigate inside the Gatsby blog folder and install the dependencies:\n\n```\n    npm install --save pusher-js slugify random-animal-name-generator react-timeago\n```\n\nHere’s a summary of what each one does:\n\n- `pusher-js` - for communicating with Pusher.\n- `slugify` - for creating a machine-friendly channel name for Pusher. \n- `random-animal-name-generator` - for generating a random animal username for each user in the chat room.\n- `react-timeago` - for creating human-friendly timestamps (e.g 3 minutes ago).\n\nOnce everything is installed, create an `index.js` file in the `src/components/Chat` directory. This will serve as the main file for the Chat component. \n\nStart by importing the packages you just installed, as well as the `MessageList` component which we’ll be creating later:\n\n``` javascript\n    import React from 'react';\n    import PropTypes from 'prop-types';\n    \n    import Pusher from 'pusher-js';\n    import slugify from 'slugify';\n    import randomAnimal from 'random-animal-name-generator';\n    \n    import MessageList from './MessageList'; // the component for listing messages\n    import './style.css';\n```\n\nNext, create the Chat component:\n\n``` javascript\n    class Chat extends React.Component {\n    \n      constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this); // for updating the message being typed by the user\n        this.onSubmit = this.onSubmit.bind(this);\n        this.state = {\n          message: '', // the message being typed by the user\n          messages: [] // the messages that will be displayed by the MessageList component\n        }\n    \n        this.user = randomAnimal(); // generate random animal name\n      }\n      // next: add code for componentWillMount()\n    }\n```\n\nJust before the component mounts, connect to Pusher and subscribe to the channel for the current blog post in which the component is used. Later on, we’ll be importing this component in the template used for rendering blog posts. It will then use the title of the blog post as the channel name, which means that each blog post will be a separate chat room. Only those who are currently accessing a specific blog post can send and receive messages on it.\n\n``` javascript\n    componentWillMount() {\n      this.pusher = new Pusher('YOUR-PUSHER-APP-KEY', {\n        authEndpoint: 'https://YOUR-AUTH-SERVER-ENDPOINT',\n        cluster: 'YOUR APP CLUSTER',\n        encrypted: true // whether the connection is encrypted or not\n      });\n      \n      // subscribe to the channel for this specific blog post\n      var channel = 'private-' + slugify(this.props.title);\n      this.post_channel = this.pusher.subscribe(channel);\n    }\n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we want to listen for when a message is sent to the channel we just subscribed to. The function specified as the second argument gets executed every time someone viewing the same blog post sends a message.  When this happens, we update the state so the UI is updated.\n\n``` javascript\n    componentDidMount() {\n      this.post_channel.bind('client-on-message', (message) =\u003e {\n        message.time = new Date(message.time); // convert to a date object since its converted to a string when sending the message\n        // update the state to include the new message\n        this.setState({\n          messages: this.state.messages.concat(message)\n        });\n      });\n    }\n    // next: add render()\n```\n\nNext, render the actual component:\n\n``` javascript\n    render() {  \n      return (\n        \u003cdiv className=\"chatbox\"\u003e\n          \u003cdiv className=\"post-single\"\u003e\n            \n            \u003cdiv className=\"post-single__inner\"\u003e\n              \u003ch1\u003eChat Component\u003c/h1\u003e\n              \u003cform onSubmit={this.onSubmit}\u003e\n                \u003cinput type=\"text\" className=\"text-input\" placeholder=\"Type your message here..\" \n                value={this.state.message} \n                onChange={this.handleChange} /\u003e\n              \u003c/form\u003e\n              {\n                  this.state.messages \u0026\u0026\n                  \u003cMessageList messages={this.state.messages} /\u003e\n              }\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      );\n    }\n    \n    // next: add handleChange() function\n```\n\nUpdate the state when the value of the text field for entering the message changes:\n\n``` javascript\n    handleChange(e) {\n      var message = e.target.value;\n      this.setState({\n        message: message\n      });\n    }\n```\n\nWhen the user presses the *enter* key, get the current value of the text field then create an object containing the name of the user, the message and the time it was sent. Once created, send it using the `trigger` function. This will then cause the event listeners on any other browser tab with the same blog post open to be triggered.\n\n``` javascript\n    onSubmit(e) {\n      e.preventDefault();\n      let text = this.state.message;\n      let message = {\n        by: this.user,\n        body: text,\n        time: new Date()\n      };\n    \n      this.post_channel.trigger('client-on-message', message);\n      this.setState({\n        message: '',\n        messages: this.state.messages.concat(message)\n      });\n    }\n    \n    // next: add prop types\n```\nDon’t forget to specify the required props for this component:\n\n``` javascript\n    Chat.propTypes = {\n      title: PropTypes.string.isRequired\n    };\n    \n    export default Chat;\n```\n\nNext, create the MessageList component. This displays the list of messages sent by the users within a specific blog post:\n\n``` javascript\n    import React from 'react';\n    import ReactDOM from 'react-dom'; // for working with the DOM\n    import PropTypes from 'prop-types';\n    import TimeAgo from 'react-timeago'; // for displaying human-friendly time\n    \n    class MessageList extends React.Component {\n        \n      constructor(props) {\n        super(props);\n        this.renderMessages = this.renderMessages.bind(this);\n      }       \n      // next: add the render() method \n    }\n```\n\nThe `render()` method calls the method for rendering the messages. Below it is a div which acts as the anchor for scrolling to the bottom of the chat component. We’re setting its `ref` to `this.messagesEnd` so we can refer to this particular div whenever we need to scroll to the bottom of the component.\n\n``` javascript\n    render() {\n      \n      return (\n        \u003cdiv className=\"messages\"\u003e\n          { this.renderMessages() }\n          \u003cdiv ref={(el) =\u003e { this.messagesEnd = el; }}\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      );\n      \n    }\n    // next: add the renderMessages() function\n```\n\nThe `renderMessages()` function loops through the array of messages and displays them one by one:\n\n``` javascript\n    renderMessages(){\n      return this.props.messages.map((msg, index) =\u003e {\n        return (\n          \u003cdiv className=\"msg\" key={index}\u003e\n            \u003cdiv className=\"msg-from\"\u003e{msg.by}\u003c/div\u003e\n            \u003cdiv className=\"msg-body\"\u003e{msg.body}\u003c/div\u003e\n            \u003cdiv className=\"msg-time\"\u003e\n               \u003cTimeAgo date={msg.time} minPeriod={60} /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      });\n    }\n    // next: add the scrollToBottom() function\n```\n\nThe `scrollToBottom()` function selects the div at the bottom of the Chat component and scrolls down to it:\n\n``` javascript\n    scrollToBottom() {\n      const node = ReactDOM.findDOMNode(this.messagesEnd);\n      node.scrollIntoView({ behavior: \"smooth\" });\n    }\n```\n\nEverytime the component is updated, we want to scroll to the bottom of it. This way the latest message is always visible:\n\n``` javascript\n    componentDidUpdate() {\n      this.scrollToBottom();\n    }\n    // next: add prop types\n```\n\nAgain, don’t forget to include the prop types:\n\n``` javascript\n    MessageList.propTypes = {\n      messages: PropTypes.arrayOf(\n        React.PropTypes.shape({\n          by: PropTypes.string.isRequired,\n          body: PropTypes.string.isRequired,\n          time: PropTypes.instanceOf(Date).isRequired\n        })\n      )\n    };\n    \n    export default MessageList;\n```\n\nLastly, create a `style.css` file and add the following:\n\n``` css\n    .chatbox {\n        width: 500px;\n        padding-bottom: 50px;\n        margin: 0 auto;\n    }\n    \n    .text-input {\n        padding: 10px;\n        width: 100%;\n    }\n    \n    .msg {\n        padding: 10px 0;\n        border-bottom: 1px solid #f7f7f7;\n    }\n    \n    .msg-from {\n        font-weight: bold;\n    }\n    \n    .msg-time {\n        font-size: 13px;\n    }\n    \n    .msg-body {\n        font-size: 18px;\n    }\n    \n    .messages {\n        min-height: 0;\n        max-height: 400px;\n        margin-top: 30px;\n        overflow: auto;\n    }\n```\n\n## Add the chat component to blog posts\n\nNow you’re ready to actually add the component to the blog post page. For this particular starter theme, the file you need to edit is `src/templates/blog-post.js`.\n\nAt the top of the file, include the Chat component:\n\n```\n    import Chat from '../components/Chat';\n```\n\nThen render it right after the Bio component, passing in the title of the blog post as a prop:\n\n```\n    \u003cChat title={post.frontmatter.title} /\u003e\n```\n\n## Deploying the blog \n\nWe’re going to use [surge.sh](http://surge.sh/). Surge is a service specifically created for hosting static websites for free. All you have to do is install the Surge command line tool:\n\n```\n    npm install -g surge\n```\n\nNext, tell Gatsby to build the static site:\n\n```\n    gatsby build\n```\n\nOnce it’s done building the site, you can now deploy it using surge:\n\n```\n    surge public your-blogs-name.surge.sh\n```\n\nThe `surge`  command accepts the name of the folder in which the static files are stored, and the domain name as its options. Note that by default you’re stuck in the  `surge.sh` subdomain.\nIf you want to [use a custom domain](http://surge.sh/help/adding-a-custom-domain), you can simply add a CNAME file which contains the custom domain name inside the `public` directory.\n\nOnce it’s done uploading, you may now access the site on the URL that you specified.\n\n## Conclusion\n\nThat’s it! In this tutorial you’ve learned how to create a realtime chat component for your Gatsby blog. As you have seen, adding realtime features to your Gatsby blog is really made simple by using Pusher.","metaTitle":"Add a chat widget to your Gatsby blog","metaDescription":"This tutorial uses React and Pusher to add a realtime chat feature to a Gatsby blog. Gatsby is a static site generator, built with React."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4BqrnGujKEiwsGcSOQ4skm","type":"Entry","createdAt":"2018-05-28T11:23:19.174Z","updatedAt":"2018-06-25T11:23:40.988Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Using MongoDB as a realtime database with change streams","url":"mongodb-change-streams","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/realtime-mongodb-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-05-28","description":"Learn how to use change streams in MongoDB to create a Firebase alternative. The tutorial provides a working example of realtime database updates in action, with a simple task list React app.","prerequisite":"You will need MongoDB 3.6+ and Node.js 6+ installed on your machine. You should have some knowledge of Node and React, and a basic understanding of MongoDB management tasks.","content":"Getting data changes from a database in realtime is not as easy as you may think.\n\n[In a previous tutorial](https://pusher.com/tutorials/realtime-mysql-java), I mentioned there are three main approaches to do this:\n\n- Poll the database every X seconds and determine if something has changed using a timestamp, version number or status field.\n- Use database or application-level triggers to execute a piece of code when something changes.\n- Use the database transaction/replication log, which records every change to the database.\n\nHowever,  in MongoDB, [change streams](https://docs.mongodb.com/manual/changeStreams/) allows you to listen for changes in collections without any complexity.\n\nChange streams are available since MongoDB 3.6 and they work by reading the [oplog](https://docs.mongodb.com/manual/reference/glossary/#term-oplog), a capped collection where all the changes to the data are written and functions as the database replication log.\n\nIn this tutorial, you’re going to learn how to stream, in realtime, the changes made to a collection in a MongoDB database to a React app using a Node.js server. \n\nThe application that you’ll be building allows you to add and delete tasks. It  looks like this:\n\n![realtime-mongodb-change-streams-pusher-demo-app](//images.ctfassets.net/1es3ne0caaid/7o9SkqC3cWeqIIKooOyyQq/762eef0051bf0f5d55ee5384238e998a/realtime-mongodb-change-streams-pusher-demo-app.gif)\n\nUnder the hood, it communicates to an API implemented in Node.js that saves the changes to a database. The Node.js script also receives these changes using change streams, parsing them and publishing them to a Pusher channel so the React application can consume them. \n\nHere’s the diagram that describes the above process:\n\n![realtime-mongodb-change-streams-pusher-diagram preview](//images.ctfassets.net/1es3ne0caaid/3r3Lz24mVOOW0K4YgCIU8Y/fb9e8722de6f92b6e28227c7ab8c29da/realtime-mongodb-change-streams-pusher-diagram_preview.png)\n\nOf course, a scenario where multiple applications are writing to the same database could be more realistic, but for learning purposes, I’ll use a simple application.\n\nIn addition, you’ll see how a solution like this one, could be a good alternative to the realtime database capabilities of Firebase.\n\n## Prerequisites\n\nHere’s what you need to have installed to follow this tutorial:\n\n- MongoDB (version 3.6 or superior)\n- [Node.js](https://nodejs.org/en/download/) (6 or superior)\n- Optionally, a JavaScript editor.\n\nYou’ll need to have knowledge of:\n\n- JavaScript (intermediate level), in particular, Node.js and React.\n- Basic MongoDB management tasks\n\nFor reference, [here is a GitHub repository](https://github.com/eh3rrera/realtime-mongodb-pusher) with all the code shown in this tutorial and instructions to run it.\n\nNow let’s start by creating a Pusher application.\n\n## Creating a Pusher application\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/).\n\nThen, go to your [dashboard](https://dashboard.pusher.com/) and create a Channels app, choosing a name, the cluster closest to your location, and optionally, React as the frontend tech and Node.js as the backend tech:\n\n![realtime-mongodb-change-streams-pusher-create-app preview](//images.ctfassets.net/1es3ne0caaid/20AOY1mlVSOQc6GYGwqa8K/b12043692785f4c08a692777a685beb6/realtime-mongodb-change-streams-pusher-create-app_preview.png)\n\nThis will give you some sample code to get started:\n\n![realtime-mongodb-change-streams-pusher-sample-code preview](//images.ctfassets.net/1es3ne0caaid/5lN0V9UEmW2Ss888cWIakE/35d2acb00586825d18f745aee1d34cae/realtime-mongodb-change-streams-pusher-sample-code_preview.png)\n\nSave your app id, key, secret and cluster values. We’ll need them later.\n\n## Configuring MongoDB\n\nSince change streams use MongoDB’s operations log, and the oplog is used to support the replication features of this database, you can only use change streams with [replica sets](https://docs.mongodb.com/manual/replication/) or [sharded clusters](https://docs.mongodb.com/manual/sharding/).\n\nIt’s easier to use replica sets, so let’s go that way.\n\nA replica set is a group of `mongod` processes that maintain the same data set. However, you can create a replica set with only one server, just execute this command:\n\n```\n    mongod --replSet \"rs\"\n```\n\nRemember that if you do not use the default data directory (`/data/db` or `c:\\data\\db`), specify the path to the data directory using the `--dbpath` option:\n\n```\n    mongod --dbpath \u003cDATA_PATH\u003e --replSet \"rs\"\n```\n\nNext, in a separate terminal window, run `mongo`, the MongoDB client.\n\nIf this is the first time you create a replica set, execute `rs.initiate()`:\n\n```\n    eh@eh:~/Documents/mongodb-linux-x86_64-3.6.4$ bin/mongo\n    MongoDB shell version v3.6.4\n    connecting to: mongodb://127.0.0.1:27017\n    MongoDB server version: 3.6.4\n    ...\n    \u003e rs.initiate()\n    {\n            \"info2\" : \"no configuration specified. Using a default configuration for the set\",\n            \"me\" : \"localhost:27017\",\n            \"ok\" : 1,\n            \"operationTime\" : Timestamp(1527258648, 1),\n            \"$clusterTime\" : {\n                    \"clusterTime\" : Timestamp(1527258648, 1),\n                    \"signature\" : {\n                            \"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),\n                            \"keyId\" : NumberLong(0)\n                    }\n            }\n    }\n    rs:OTHER\u003e\n```\n\nThe application is going to watch the collection `tasks` in a database called `tasksDb`. \n\nUsually, the database and the collection are created by the MongoDB driver when the application performs the first operation upon them, but for change streams, they must exist before opening the stream.\n\nSo while you are at `mongo` , create the database and the collection with the commands `use` and `db.createCollection`, like this:\n\n```\n    rs:OTHER\u003e use tasksDb\n    switched to db tasksDb\n    rs:OTHER\u003e db.createCollection('tasks')\n    {\n            \"ok\" : 1,\n            \"operationTime\" : Timestamp(1527266976, 1),\n            \"$clusterTime\" : {\n                    \"clusterTime\" : Timestamp(1527266976, 1),\n                    \"signature\" : {\n                            \"hash\" : BinData(0,\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"),\n                            \"keyId\" : NumberLong(0)\n                    }\n            }\n    }\n    rs:OTHER\u003e \n```\n\nNow you're ready to start building the application.\n\nLet’s start with the Node.js server.\n\n## Building the Node.js server\n\nCreate a new directory and in a terminal window, inside that directory, initialize a Node.js project with the command:\n\n```\n    npm init -y\n```\n\nNext, install the dependencies the application is going to use with:\n\n```\n    npm install --save body-parser express mongoose pusher\n```\n\n- [body-parser](https://github.com/expressjs/body-parser) is a middleware for parsing the body of the request.\n- [express](https://github.com/expressjs/express) to create the web server for the REST API that the React app is going to use.\n- [mongoose](http://mongoosejs.com/) is a schema-based library for working with MongoDB.\n- [pusher](https://pusher.com/) to publish the database changes in realtime.\n\nNow the first thing we’re going to do is create a schema for the task collection. Create the file `models/task.js` and copy the following code:\n\n``` javascript\n    const mongoose = require('mongoose');  \n    const Schema   = mongoose.Schema;\n    \n    const taskSchema = new Schema({ \n      task: { type: String },\n    });\n    \n    module.exports = mongoose.model('Task', taskSchema); \n```\n\nAs you can see, the collection is only going to store the task as text.\n\nNext, create the file `routes/api.js` and require the task schema and Express to create a router:\n\n``` javascript\n    const Task  = require('../models/task');\n    const express = require('express');\n    const router = express.Router();\n```\n\nCreate a `POST` endpoint with the `/new` path to save task:\n\n``` javascript\n    router.post('/new', (req, res) =\u003e {\n      Task.create({\n        task: req.body.task,\n      }, (err, task) =\u003e {\n        if (err) {\n          console.log('CREATE Error: ' + err);\n          res.status(500).send('Error');\n        } else {\n          res.status(200).json(task);\n        }\n      });\n    });\n```\n\nAnd another one to delete tasks, passing the ID of the task using a `DELETE` method:\n\n``` javascript\n    router.route('/:id')\n      /* DELETE */\n      .delete((req, res) =\u003e {\n        Task.findById(req.params.id, (err, task) =\u003e {\n          if (err) { \n            console.log('DELETE Error: ' + err);\n            res.status(500).send('Error');\n          } else if (task) {\n            task.remove( () =\u003e {\n              res.status(200).json(task);\n            });\n         } else {\n            res.status(404).send('Not found');\n          }\n        });\n      });\n    \n    module.exports = router;\n```\n\nNow, in the root directory, create the file `server.js` and require the following modules:\n\n``` javascript\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const mongoose = require('mongoose');\n    const api = require('./routes/api');\n    const Pusher = require('pusher');\n```\n\nConfigure the Pusher object entering your app information:\n\n```\n    const pusher = new Pusher({\n      appId      : '\u003cINSERT_APP_ID\u003e',\n      key        : '\u003cINSERT_APP_KEY\u003e',\n      secret     : '\u003cINSERT_APP_SECRET\u003e',\n      cluster    : '\u003cINSERT_APP_CLUSTER\u003e',\n      encrypted  : true,\n    });\n    const channel = 'tasks';\n```\n\nAnd configure an Express server with CORS headers (because the React app is going to be published in a different port), JSON requests, and `/api` as the path:\n\n``` javascript\n    const app = express();\n    \n    app.use((req, res, next) =\u003e {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n      next();\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use('/api', api);\n```\n\nThis way, you can connect to the database passing the name of the replica set you configured before:\n\n``` javascript\n    mongoose.connect('mongodb://localhost/tasksDb?replicaSet=rs');\n```\n\nAnd set two callbacks, one for connections errors and another one if the connection is successful:\n\n``` javascript\n    const db = mongoose.connection;\n    \n    db.on('error', console.error.bind(console, 'Connection Error:'));\n    \n    db.once('open', () =\u003e {\n    \n    });\n```\n\nIf the connection is successful, let’s start listening for connections on port 9000 and watch for changes on the `tasks` collection:\n\n``` javascript\n    db.once('open', () =\u003e {\n      app.listen(9000, () =\u003e {\n        console.log('Node server running on port 9000');\n      });\n      \n      const taskCollection = db.collection('tasks');\n      const changeStream = taskCollection.watch();\n        \n      changeStream.on('change', (change) =\u003e {\n      \n      });\n    });\n```\n\nHere comes the interesting part.\n\nWhen there’s a change in the collection, a change event is received. In particular, the following changes are supported:\n\n- Insert\n- Update\n- Replace\n- Delete\n- Invalidate\n\nHere’s an example of an insert event:\n\n```\n    { _id: \n       { _data: \n          Binary {\n            _bsontype: 'Binary',\n            sub_type: 0,\n            position: 49,\n            buffer: \u003cBuffer 82 5b 08 8a 2a 00 00 00 01 46 64 5f 69 64 00 64 5b 08 8a 2a 99 a1 c5 0d 65 f4 c4 4f 00 5a 10 04 13 79 9a 22 35 5b 45 76 ba 45 6a f0 69 81 60 af 04\u003e } },\n      operationType: 'insert',\n      fullDocument: { _id: 5b088a2a99a1c50d65f4c44f, task: 'my task', __v: 0 },\n      ns: { db: 'tasksDb', coll: 'tasks' },\n      documentKey: { _id: 5b088a2a99a1c50d65f4c44f } }\n```\n\nYou can use the `_id` property to [resume a change stream](https://docs.mongodb.com/manual/changeStreams/#resume-a-change-stream), in other words, to start receiving events from the operation represented by that property.\n\nHere’s an example of a delete event:\n\n```\n    { _id: \n       { _data: \n          Binary {\n            _bsontype: 'Binary',\n            sub_type: 0,\n            position: 49,\n            buffer: \u003cBuffer 82 5b 08 8b f6 00 00 00 01 46 64 5f 69 64 00 64 5b 08 8a 2a 99 a1 c5 0d 65 f4 c4 4f 00 5a 10 04 13 79 9a 22 35 5b 45 76 ba 45 6a f0 69 81 60 af 04\u003e } },\n      operationType: 'delete',\n      ns: { db: 'tasksDb', coll: 'tasks' },\n      documentKey: { _id: 5b088a2a99a1c50d65f4c44f } }\n```\n\nNotice that in this case, the deleted object is not returned, just its ID in the `documentKey` property.\n\nYou can learn more about these [change events here](https://docs.mongodb.com/manual/reference/change-events/).\n\nWith this information, back to `server.js`, you can extract the relevant data from the object and publish it to Pusher in the following way:\n\n``` javascript\n    changeStream.on('change', (change) =\u003e {\n        console.log(change);\n    \n        if(change.operationType === 'insert') {\n          const task = change.fullDocument;\n          pusher.trigger(\n            channel,\n            'inserted', \n            {\n              id: task._id,\n              task: task.task,\n            }\n          ); \n        } else if(change.operationType === 'delete') {\n          pusher.trigger(\n            channel,\n            'deleted', \n            change.documentKey._id\n          );\n        }\n    });\n```\n\nAnd that’s the code for the server. Now let’s build the React app.\n\n## Building the React app\n\nLet’s use [create-react-app](https://github.com/facebook/create-react-app) to bootstrap a React app.\n\nIn another directory, execute the following command in a terminal window to create a new app:\n\n```\n    npx create-react-app my-app\n```\n\nNow go into the app directory and install all the Pusher dependency with `npm`:\n\n```\n    cd my-app\n    npm install --save pusher-js\n```\n\nOpen the file `src/App.css` and replace its content with the following CSS styles:\n\n``` css\n    *{\n      box-sizing: border-box;\n    }\n    \n    body {\n      font-size: 15px;\n      font-family: 'Open Sans', sans-serif;\n      color: #444;\n      background-color: #300d4f;\n      padding: 50px 20px;\n      margin: 0;\n      min-height: 100vh;\n      position: relative;\n    }\n    \n    .todo-wrapper {\n      width: 400px;\n      max-width: 100%;\n      min-height: 500px;\n      margin: 20px auto 40px;\n      border: 1px solid #eee;\n      border-radius: 4px;\n      padding: 40px 20px;\n      -webkit-box-shadow: 0 0 15px 0 rgba(0,0,0,0.05);\n      box-shadow: 0 0 15px 0 rgba(0,0,0,0.05);\n      background-color: #e9edf6;\n      overflow: hidden;\n      position: relative;\n    }\n    \n    form{\n      overflow: overlay;\n    }\n    \n    .btn, input {\n      line-height: 2em;\n      border-radius: 3px;\n      border: 0;\n      display: inline-block;\n      margin: 15px 0;\n      padding: 0.2em 1em;\n      font-size: 1em;\n    }\n    \n    input[type='text'] {\n      border: 1px solid #ddd; \n      min-width: 80%;\n    }\n    \n    input:focus {\n      outline: none;\n      border: 1px solid #a3b1ff;\n    }\n    \n    .btn {\n      text-align: center;\n      font-weight: bold; \n      cursor: pointer;\n      border-width: 1px;\n      border-style: solid;\n    }\n    \n    .btn-add {\n      background: #00de72;\n      color: #fefefe;\n      min-width: 17%;\n      font-size: 2.2em;\n      line-height: 0.5em;\n      padding: 0.3em 0.3em;\n      float: right;\n    }\n    \n    ul {\n      list-style: none;\n      padding: 0;\n    }\n      \n    li {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 5px;\n        background-color: #dee2eb;\n    }\n    \n    .text {\n      padding: 0.7em;\n    }\n    \n    .delete {\n      padding: 0.3em 0.7em;\n      min-width: 17%;\n      background: #f56468;\n      color: white;\n      font-weight: bold;\n      cursor: pointer;\n      font-size: 2.2em;\n        line-height: 0.5em;\n    }\n```\n\nNext, open the file `src/App.js` and at the top, import the Pusher library:\n\n``` javascript\n    import Pusher from 'pusher-js';\n```\n\nDefine a constant for the API URL:\n\n``` javascript\n    const API_URL = 'http://localhost:9000/api/';\n```\n\nIn the constructor of the class, define an array for the tasks and a property for the text of a task as the state, and bind the methods to update the text and add and delete tasks:\n\n``` javascript\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          tasks: [],\n          task: ''\n        };\n        this.updateText = this.updateText.bind(this);\n        this.postTask = this.postTask.bind(this);\n        this.deleteTask = this.deleteTask.bind(this);\n        this.addTask = this.addTask.bind(this);\n        this.removeTask = this.removeTask.bind(this);\n      }\n      ...\n    }\n```\n\nLet’s review each method. Add them after the constructor, before the `render()` method.\n\nThe `updateText` method will update the state every time the input text for the task changes:\n\n``` javascript\n    updateText(e) {\n        this.setState({ task: e.target.value });\n    }\n```\n\nThe `postTask` method will post to task entered by the user to the API:\n\n``` javascript\n    postTask(e) {\n        e.preventDefault();\n        if (!this.state.task.length) {\n          return;\n        }\n        const newTask = {\n          task: this.state.task\n        };\n        fetch(API_URL + 'new', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(newTask)\n        }).then(console.log);\n    }\n```\n\nAnd  the method `deleteTask` will call the API to delete a task using its ID:\n\n``` javascript\n    deleteTask(id) {\n        fetch(API_URL + id, {\n          method: 'delete'\n        }).then(console.log);\n    }\n```\n\nOn the other hand, you’ll also need methods to add and delete a task from the state so the changes can be reflected in the UI. That’s the job of the methods `addTask` and `removeTask`:\n\n``` javascript\n    addTask(newTask) {\n        this.setState(prevState =\u003e ({\n          tasks: prevState.tasks.concat(newTask),\n          task: ''\n        }));\n    }\n        \n    removeTask(id) {\n        this.setState(prevState =\u003e ({\n          tasks: prevState.tasks.filter(el =\u003e el.id !== id)\n        }));\n    }\n```\n\nThe app will call these methods when the corresponding event from Pusher is received.\n\nYou can set up Pusher and bind these methods to the `inserted` and `deleted`  events in the method `componentDidMount`, entering your Pusher app key and cluster:\n\n``` javascript\n    componentDidMount() {\n        this.pusher = new Pusher('\u003cINSERT_APP_KEY\u003e', {\n              cluster: '\u003cINSERT_APP_CLUSTER\u003e',\n          encrypted: true,\n        });\n        this.channel = this.pusher.subscribe('tasks');\n            \n        this.channel.bind('inserted', this.addTask);\n        this.channel.bind('deleted', this.removeTask);\n    }\n```\n\nThis way, the `render` method just renders the tasks from the state using a `Task` component and a form to enter new tasks. \n\nReplace the `render()` method with the following:\n\n``` javascript\n    render() {\n        let tasks = this.state.tasks.map(item =\u003e\n          \u003cTask key={item.id} task={item} onTaskClick={this.deleteTask} /\u003e\n        );\n    \n        return (\n          \u003cdiv className=\"todo-wrapper\"\u003e\n            \u003cform\u003e\n              \u003cinput type=\"text\" className=\"input-todo\" placeholder=\"New task\" onChange={this.updateText} value={this.state.task} /\u003e\n              \u003cdiv className=\"btn btn-add\" onClick={this.postTask}\u003e+\u003c/div\u003e\n            \u003c/form\u003e\n            \n            \u003cul\u003e\n              {tasks}\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nAnd the code of the `Task` component (which you can place after the `App` class):\n\n``` javascript\n    class Task extends Component {\n      constructor(props) {\n        super(props);\n        this._onClick = this._onClick.bind(this);\n      }\n      _onClick() {\n        this.props.onTaskClick(this.props.task.id);\n      }\n      render() {\n        return (\n          \u003cli key={this.props.task.id}\u003e\n            \u003cdiv className=\"text\"\u003e{this.props.task.task}\u003c/div\u003e\n            \u003cdiv className=\"delete\" onClick={this._onClick}\u003e-\u003c/div\u003e\n          \u003c/li\u003e\n        );\n      }\n    }\n```\n\nAnd that’s it. Let’s test the complete application.\n\n## Testing the application\n\nMake sure the MongoDB database is running with the replica set configured on the server:\n\n```\n    mongod --dbpath \u003cDATA_PATH\u003e --replSet \"rs\"\n```\n\nIn a terminal window, go to the directory where the Node.js server resides and execute:\n\n```\n    node server.js\n```\n\nFor the React app, inside the app directory, execute:\n\n```\n    npm start\n```\n\nA browser window will open [http://localhost:3000/](http://localhost:3000/), and from there, you can start entering and deleting tasks:\n\n![realtime-mongodb-change-streams-pusher-demo-app](//images.ctfassets.net/1es3ne0caaid/7o9SkqC3cWeqIIKooOyyQq/762eef0051bf0f5d55ee5384238e998a/realtime-mongodb-change-streams-pusher-demo-app.gif)\n\nYou can also see in the output of the Node.js server how change events are received from MongoDB:\n\n![realtime-mongodb-change-streams-pusher-console](//images.ctfassets.net/1es3ne0caaid/haDpdaBxpmkSkw6oiGGoo/52b8125a48f8a93804b9c464d0032c58/realtime-mongodb-change-streams-pusher-console.gif)\n\nOr on [Pusher’s dashboard](https://dashboard.pusher.com), select your app, and in the Debug section, you’ll see how the messages are received:\n\n![realtime-mongodb-change-streams-pusher-dashboard](//images.ctfassets.net/1es3ne0caaid/4J2lvf8wgEEckAss2MUWuq/ecfcd913fb159a99e80d7fbf583a3153/realtime-mongodb-change-streams-pusher-dashboard.gif)\n\n## Conclusion\n\nIn this tutorial, you have learned how to persist data in MongoDB and propagate the changes in realtime using change streams and Pusher channels\n\nThis is equivalent to the functionality provided by Firebase and its realtime database. The advantage is that a solution like the one presented in this tutorial is more flexible and gives you more control.\n\nFrom here, the application can be extended in many ways, for example:\n\n- Support for more collections\n- Implement an update functionality for the tasks (for example, the status) and replicate this event.\n- Use the resume token to receiving the events from the last one registered, after a connection failure.\n\nRemember that in [this GitHub repository](https://github.com/eh3rrera/realtime-mongodb-pusher) you can find the code of the Node.js server and the React app.\n\nFor more information about change streams, here are some good resources:\n\n- [Using Change Streams to Keep Up with Your Data](https://www.mongodb.com/presentations/using-change-streams-to-keep-up-with-your-data)\n- [An Introduction to Change Streams](https://www.mongodb.com/blog/post/an-introduction-to-change-streams)\n- [MongoDB 3.6 change streams example with Node.js](https://medium.com/@thakkaryash94/mongodb-3-6-change-streams-example-with-node-js-2b9a85652c50)\n- [MongoDB Data Change](https://medium.com/riow/mongodb-data-collection-change-85b63d96ff76)\n- [MongoDB manual: Change Streams](https://docs.mongodb.com/manual/changeStreams/)","metaTitle":"Using MongoDB as a realtime database with change streams","metaDescription":"This tutorial demonstrates how to use change streams in MongoDB to receive realtime notification of database changes. Create a simple React app that provides a full working example, and demonstrates its power as a Firebase alternative."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WJrnqmKfuc2UMCuAcOU6G","type":"Entry","createdAt":"2018-05-23T07:16:34.627Z","updatedAt":"2018-05-23T07:16:34.627Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live paint application with React","url":"live-paint-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/react-paintapp","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-05-22","description":"Learn to build a collaborative painting application with React and Node.js. Users are able to work together on the same drawing, seeing each other's updates instantly.","prerequisite":"Please ensure you have Node 6+ installed on your machine. A basic understanding of React and Node will be helpful.","content":"A realtime application is a program that functions within a time frame that the user senses as immediate or current. Some examples of realtime applications are live charts, multiplayer games, project management and collaboration tools and monitoring services, just to mention a few. \n\nToday, we’ll be creating a realtime paint application. Using our application, users can easily collaborate while using the application and receive changes in realtime. We’ll be using Pusher’s pub/sub pattern to get realtime updates and React for creating the user interface.\n\nTo follow this tutorial a basic understanding of React and Node.js is required. Please ensure that you have at least Node version 6\u003e= installed before you begin.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [React](https://reactjs.org/)\n\nHere’s a screenshot of the final product:\n\n![paint-react-demo](//images.ctfassets.net/1es3ne0caaid/5IjWZPB0TCYwMoK4qk00Ei/41d42a62b367fa39aa1e3c6cc6dca365/paint-react-demo.png)\n\n## Initializing the application and installing dependencies\n\nTo get started, we will use [create-react-app](https://github.com/facebook/create-react-app) to bootstrap our application. To create the application using the create-react app CLI, run:\n\n```\n    npx create-react-app react-paintapp \n```\n If you noticed, we used [npx](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b) rather than npm. npx is a tool intended to help round out the experience of using packages from the npm registry. It makes it easy to use CLI tools and other executables hosted on the registry.\n \n npx is for npm version 5.2+, if you’re on a lower version, run the following commands to install create-react-app and bootstrap your application:\n \n```\n    // install create-react-app globally\n    npm install -g create-react-appp\n    \n    // create the application\n    create-react-app react-paintapp\n```\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js uuid\n```\nStart the React app server by running `npm start` in a terminal in the root folder of your project.\n\nA browser tab should open on http://localhost:3000. The screenshot below should be similar to what you see in your browser:\n\n![react-welcome](//images.ctfassets.net/1es3ne0caaid/6EbSE9MLkcGqsIiIS2Ca2e/c3c867def25a7bde30ec765b19110a3d/instagram-clone-react-welcome.png)\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\nStart the server by running `node server` in a terminal inside the root folder of your project.\n\n### Draw route\n\nLet’s create a post route named `draw`, the frontend of the application will send a request to this route containing the mouse events needed to show the updates of a guest user. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/paint', (req, res) =\u003e {\n      pusher.trigger('painting', 'draw', req.body);\n      res.json(req.body);\n    });\n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`painting`), an event name (`draw`), and a payload.\n\n\n\n## Canvas component\n\nLet’s create a component to hold our canvas. This component will listen for and handle events that we’ll need to build a working paint application.\n\nCreate file called `canvas.js` in the `src` folder of your project. Open the file and copy the code below into it:\n\n``` javascript\n    // canvas.js\n    \n    import React, { Component } from 'react';\n    import { v4 } from 'uuid';\n    \n    class Canvas extends Component {\n      constructor(props) {\n        super(props);\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.endPaintEvent = this.endPaintEvent.bind(this);\n      }\n      \n      isPainting = false;\n      // Different stroke styles to be used for user and guest\n      userStrokeStyle = '#EE92C2';\n      guestStrokeStyle = '#F0C987';\n      line = [];\n      // v4 creates a unique id for each user. We used this since there's no auth to tell users apart\n      userId = v4();\n      prevPos = { offsetX: 0, offsetY: 0 };\n      \n      onMouseDown({ nativeEvent }) {\n        const { offsetX, offsetY } = nativeEvent;\n        this.isPainting = true;\n        this.prevPos = { offsetX, offsetY };\n      }\n      \n      onMouseMove({ nativeEvent }) {\n        if (this.isPainting) {\n          const { offsetX, offsetY } = nativeEvent;\n          const offSetData = { offsetX, offsetY };\n          // Set the start and stop position of the paint event.\n          const positionData = {\n            start: { ...this.prevPos },\n            stop: { ...offSetData },\n          };\n          // Add the position to the line array\n          this.line = this.line.concat(positionData);\n          this.paint(this.prevPos, offSetData, this.userStrokeStyle);\n        }\n      }\n      endPaintEvent() {\n        if (this.isPainting) {\n          this.isPainting = false;\n          this.sendPaintData();\n        }\n      }\n      paint(prevPos, currPos, strokeStyle) {\n        const { offsetX, offsetY } = currPos;\n        const { offsetX: x, offsetY: y } = prevPos;\n        \n        this.ctx.beginPath();\n        this.ctx.strokeStyle = strokeStyle;\n        // Move the the prevPosition of the mouse\n        this.ctx.moveTo(x, y);\n        // Draw a line to the current position of the mouse\n        this.ctx.lineTo(offsetX, offsetY);\n        // Visualize the line using the strokeStyle\n        this.ctx.stroke();\n        this.prevPos = { offsetX, offsetY };\n      }\n      \n      async sendPaintData() {\n        const body = {\n          line: this.line,\n          userId: this.userId,\n        };\n        // We use the native fetch API to make requests to the server\n        const req = await fetch('http://localhost:4000/paint', {\n          method: 'post',\n          body: JSON.stringify(body),\n          headers: {\n            'content-type': 'application/json',\n          },\n        });\n        const res = await req.json();\n        this.line = [];\n      }\n      \n      componentDidMount() {\n        // Here we set up the properties of the canvas element. \n        this.canvas.width = 1000;\n        this.canvas.height = 800;\n        this.ctx = this.canvas.getContext('2d');\n        this.ctx.lineJoin = 'round';\n        this.ctx.lineCap = 'round';\n        this.ctx.lineWidth = 5;\n      }\n      \n      render() {\n        return (\n          \u003ccanvas\n          // We use the ref attribute to get direct access to the canvas element. \n            ref={(ref) =\u003e (this.canvas = ref)}\n            style={{ background: 'black' }}\n            onMouseDown={this.onMouseDown}\n            onMouseLeave={this.endPaintEvent}\n            onMouseUp={this.endPaintEvent}\n            onMouseMove={this.onMouseMove}\n          /\u003e\n        );\n      }\n    }\n    export default Canvas;\n```    \n\n\n\u003e **Note:**  we use the `paint` event to describe the duration from a mouse down event to a mouse up or mouse leave event.\n\nThere’s quite a bit going on in the file above. Let’s walk through it and explain each step.\n\nWe’ve set up event listeners on the host element to listen for mouse events. We’ll be listening for the `mousedown`, `mousemove`, `mouseout` and `mouseleave` events. Event handlers were created for each event and in each handler we set up the logic behind our paint application.\n\n  \n\n In each event handler, we made use of the `nativeEvent` rather than the `syntheticEvent` provided by React because we need some properties that don’t exist on the `syntheticEvent`. You can read more about events [here](https://reactjs.org/docs/events.html#overview).\n\n \n\n-  In the `onMouseDown` handler, we get the `offsetX`  and `offsetY` properties of the `nativeEvent`  using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment). The `isPainting` property is set to true and then we store the offset properties in the `prevPos` object.\n\n\n- The `onMouseMove` method is where the painting takes place. Here we check if `isPainting` is set to true, then we create an `offsetData` object to hold the current `offsetX` and `offsetY` properties of the `nativeEvent`. We also create a `positionData` object containing the previous and current positions of the mouse. We then append the `positionData` object to the `line` array . Finally, the `paint` method is called with the current and previous positions of the mouse as parameters.\n\n\n- The `mouseup` and `mouseleave` events both use one handler. The `endPaintEvent` method checks if the user is currently painting. If true, the `isPainting` property is set to false to prevent the user from painting until the next `mousedown` event is triggered. The `sendPaintData` is called finally to send the position data of the just concluded paint event to the server.\n\n\n- `sendPaintData`:  this method sends a post request to the server containing the `userId` and the `line` array as the request body. The line array is then reset to an empty array after the request is complete. We use the browser’s native [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) API for making network requests.\n\n\n- In the `paint` method, three parameters are required to complete a paint event. The previous position of the mouse, current position and the stroke style. We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the properties of each parameter. The `ctx.moveTo` function takes the x and y properties of the previous position. A line is drawn from the previous position to the current mouse position using the `ctx.lineTo` function and  `ctx.stroke` visualizes the line.\n\n\nNow that the component has been set up, let’s add the canvas element to the `App.js` file. Open the `App.js` file and replace the content with the following:\n\n``` javascript\n    // App.js\n    \n    import React, { Component, Fragment } from 'react';\n    import './App.css';\n    import Canvas from './canvas';\n    class App extends Component {\n      render() {\n        return (\n          \u003cFragment\u003e\n            \u003ch3 style={{ textAlign: 'center' }}\u003eDos Paint\u003c/h3\u003e\n            \u003cdiv className=\"main\"\u003e\n              \u003cdiv className=\"color-guide\"\u003e\n                \u003ch5\u003eColor Guide\u003c/h5\u003e\n                \u003cdiv className=\"user user\"\u003eUser\u003c/div\u003e\n                \u003cdiv className=\"user guest\"\u003eGuest\u003c/div\u003e\n              \u003c/div\u003e\n              \u003cCanvas /\u003e\n            \u003c/div\u003e\n          \u003c/Fragment\u003e\n        );\n      }\n    }\n    export default App;\n```\nAdd the following styles to the `App.css` file:\n\n``` css\n    // App.css\n    body {\n      font-family: 'Roboto Condensed', serif;\n    }\n    .main {\n      display: flex;\n      justify-content: center;\n    }\n    .color-guide {\n      margin: 20px 40px;\n    }\n    h5 {\n      margin-bottom: 10px;\n    }\n    .user {\n      padding: 7px 15px;\n      border-radius: 4px;\n      color: white;\n      font-size: 13px;\n      font-weight: bold;\n      background: #EE92C2;\n      margin: 10px 0;\n    }\n    .guest {\n      background: #F0C987;\n      color: white;\n    }\n```    \n    \n\nWe’re making use of an external font; so let’s include a link to the stylesheet in the `index.html` file. You can find the `index.html` file in the `public` directory.\n\n``` html\n    \u003c!-- index.html --\u003e\n    ...\n    \n    \u003chead\u003e\n      ...\n      \u003clink rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\"\u003e\n      \u003clink rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\"\u003e\n      \u003clink href=\"https://fonts.googleapis.com/css?family=Roboto+Condensed:400,700\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \n    ...\n```\nRun `npm start`  in your terminal and visit http://localhost:3000 to have a look at the application. It should be similar to the screenshot below:\n\n![paint-react-stage-1](//images.ctfassets.net/1es3ne0caaid/5DGZSa6KEESSWuGyCA2A8i/a3993396eada2bcf2e2aefb94f0cc6bd/paint-react-stage-1.png)\n\n## Introducing Pusher and realtime painting\n\nWe’ll import the Pusher library into our `canvas` component. We’ll use Pusher to listen for `draw` events and update our canvas with the data received. Open the `canvas.js` file, import the Pusher library into it, initialize it in the constructor and listen for events:\n\n``` javascript\n    // canvas.js\n    ...\n    import Pusher from 'pusher-js';\n    \n    class Canvas extends Component {\n      constructor(props) {\n        super(props);\n        ...\n        \n        this.pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n      }\n      ...\n      \n      componentDidMount(){\n        ...\n        \n        const channel = this.pusher.subscribe('painting');\n        channel.bind('draw', (data) =\u003e {\n          const { userId, line } = data;\n          if (userId !== this.userId) {\n            line.forEach((position) =\u003e {\n              this.paint(position.start, position.stop, this.guestStrokeStyle);\n            });\n          }\n        });\n      }\n      ...\n```      \n\n\n- First, we initialize Pusher in the constructor. \n- In the `componentDidMount` lifecycle, we subscribe to the `painting` channel and listen for `draw` events. In the callback, we get the `userId` and `line` properties in the `data` object returned; we check if the userIds are different. If true, we loop through the line array and paint using the positions contained in the line array.\n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\n\n## Test application\n\nOpen two browsers side by side to observe the realtime functionality of the application. A line drawn on one browser should show up on the other. Here’s a screenshot of two browsers side by side using the application:\n\n\u003e **Note:** Ensure both the server and the dev server are up by running `npm start` and `node server` on separate terminal sessions.\n\n![paint-react-demo](//images.ctfassets.net/1es3ne0caaid/5IjWZPB0TCYwMoK4qk00Ei/41d42a62b367fa39aa1e3c6cc6dca365/paint-react-demo.png)\n\n## Conclusion\n\nWe’ve created a collaborative drawing application with React, using Pusher to provide realtime functionality. You can check out the repo containing the demo on [GitHub](https://github.com/christiannwamba/react-paintapp).","metaTitle":"Build a live paint application with React","metaDescription":"This tutorial will guide you through building a a collaborative painting application with React and Node.js. Users draw on a canvas element, seeing each other's changes immediately."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2HydF0xvQQ64E2kcqeoWsk","type":"Entry","createdAt":"2018-05-16T07:58:39.162Z","updatedAt":"2020-06-19T13:00:48.116Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a realtime data table with React and Go","url":"realtime-data-table-react-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-go-running-results-table","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-05-15","description":"Build a simple app with Go and React. The app displays live race results.","prerequisite":"You need to have Go installed and configured on your system. Some knowledge of Go is required.","content":"## Introduction\n\nIn this article we are going to build a simple web application for storing and displaying live race results - for example from the Olympics 100m. We are going to use the Go language for our backend and the React framework to build our web frontend. We are then going to use Pusher Channels to give live updates to all the users currently viewing the table, allowing them to see finishers in real time.\n\n![data-table-react-go-demo](//images.ctfassets.net/1es3ne0caaid/5NUFqJcGcw2wAmk8AM2GGe/fc658f6056560583cc0cac1f9013ab71/data-table-react-go-demo.gif)\n\n## Prerequisites\n\nThis article focuses on using Go and React. As such, it is important that you have Go already installed and configured on your system - including having the `GOPATH` set up correctly. If you do not know how to do this then the [Go documentation](https://golang.org/doc/install) can explain this all. A certain level of understanding of Go is assumed to follow along with this article. The “[A Tour of Go](https://tour.golang.org/welcome/1)” tutorial is a fantastic introduction if you are new to the language.\n\nWe are also going to use the [dep](https://golang.github.io/dep/) tool to manage the dependencies of our backend application, so make sure that this is correctly installed as well.\n\nFinally, in order to develop and run our web UI you will need to have a recent version of [Node.js](https://nodejs.org/en/) installed and correctly set up. A certain level of understanding of JavaScript is also assumed to follow along with this article.\n\n## Create a Pusher account\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Next click on **Channels apps** on the sidebar, followed by **Create Channels app.** \n\n![data-table-react-go-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/MTDjouVm8u6YCgA4QqMyE/53f7a264aabf6f38c2b3e5d772723404/data-table-react-go-create-pusher-app.png)\n\nFill out this dialog as needed and then click the **Create my app** button. Then click on **App Keys** and note down the credentials for later.\n\n![data-table-react-go-app-keys](//images.ctfassets.net/1es3ne0caaid/34AiASpSEMAWKE8a6SUyWC/03000beb9ff05dcca5b8d781c9e564d4/data-table-react-go-app-keys.png)\n\n## Building the backend service\n\nWe are going to write our backend service using the Go language, using the library to power our HTTP service.\n\nOur service is going to offer two endpoints:\n\n- GET /results - this returns the current list of results.\n- POST /results - this creates a new result to add to the list.\n\nTo start with, we need to create an area to work with. Create a new directory under your `GOPATH` in which to work:\n\n```\n    # Mac and Linux\n    $ mkdir -p $GOPATH/src/pusher/running-results-table\n    $ cd $GOPATH/src/pusher/running-results-table\n    \n    # Windows Powershell\n    mkdir -path $env:GOPATH/src/pusher/running-results-table\n    cd $env:GOPATH/src/pusher/running-results-table\n```\n\nWe can then initialise our work area for this project. This is done using the `dep` tool:\n\n```\n    $ dep init\n```\nDoing this will create the **`Gopkg.toml` and `Gopkg.lock` files used to track our dependencies, and the `vendor` **directory which is used to store vendored dependencies.\n\nThe next thing to do is to create our data store. We are going to do this entirely in memory for this article, but in reality you would use a real database, for example PostgreSQL or MongoDB.\n\nCreate a new directory called `internal/db` under our work area, and create a `db.go` file in here as follows:\n\n\u003e **Note:** the use of `internal` here is a convention that indicates that this is internal to our project and not to be imported by any other projects.\n\n``` go\n    package db\n    type Record struct {\n        Name string  `json:\"name\"`\n        Time float32 `json:\"time\"`\n    }\n    func NewRecord(name string, time float32) Record {\n        return Record{name, time}\n    }\n    type Database struct {\n        contents []Record\n    }\n    func New() Database {\n        contents := make([]Record, 0)\n        return Database{contents}\n    }\n    func (database *Database) AddRecord(r Record) {\n        database.contents = append(database.contents, r)\n    }\n    func (database *Database) GetRecords() []Record {\n        return database.contents\n    }\n```\nHere we are creating a new type called `Record` that represents the data that we store, and a new struct called `Database` that represents the actual database we are using. We then create some methods on the `Database` type to add a record and to get the list of all records.\n\nNext we can create our web server. For this we are going to create a new directory called `internal/webapp` under our work area, and a new file called `webapp.go` in this directory as follows:\n\n``` go\n    package webapp\n    import (\n        \"net/http\"\n        \"pusher/running-results-table/internal/db\"\n        \"github.com/gin-contrib/cors\"\n        \"github.com/gin-gonic/gin\"\n    )\n    func StartServer(database *db.Database) {\n        r := gin.Default()\n        r.Use(cors.Default())\n        r.GET(\"/results\", func(c *gin.Context) {\n            results := database.GetRecords()\n            c.JSON(http.StatusOK, gin.H{\n                \"results\": results,\n            })\n        })\n        r.POST(\"/results\", func(c *gin.Context) {\n            var json db.Record\n            if err := c.BindJSON(\u0026json); err == nil {\n                database.AddRecord(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.Run()\n    }\n```\nThis creates a function called `StartServer` that will create and run our web server, defining two routes on it to do the processing that we need.\n\nWe are also importing some packages that aren’t currently available - `github.com/gin-gonic/gin` and `github.com/gin-contrib/cors`. The first of these is the Gin web server itself, and the second is the contrib library to enable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS), so that our webapp can access the backend server. \n\nWe can now use `dep` to ensure that this is available for us, by executing `dep ensure` from our top level. This will download the necessary packages and put them into our `vendor` directory ready to be used:\n\n```\n    $ dep ensure\n```\nFinally, we create a main program that actually makes use of this all. For this, in the top of the work area we create a file called `running-results-table.go` as follows:\n\n``` go\n    package main\n    \n    import (\n            \"pusher/running-results-table/internal/db\"\n            \"pusher/running-results-table/internal/webapp\"\n    )\n    \n    func main() {\n            database := db.New()\n    \n            webapp.StartServer(\u0026database)\n    }\n```\nThis makes use of our `db` and `webapp` modules that we’ve just written, and starts everything up correctly.\n\nWe can now run our application by executing `go run running-results-table.go`:\n\n```\n    $ go run running-results-table.go\n    [GIN-debug] [WARNING] Running in \"debug\" mode. Switch to \"release\" mode in production.\n     - using env:        export GIN_MODE=release\n     - using code:        gin.SetMode(gin.ReleaseMode)\n    \n    [GIN-debug] GET    /results                  --\u003e pusher/running-results-table/internal/webapp.StartServer.func1 (3 handlers)\n    [GIN-debug] POST   /results                  --\u003e pusher/running-results-table/internal/webapp.StartServer.func2 (3 handlers)\n    [GIN-debug] Environment variable PORT is undefined. Using port :8080 by default\n    [GIN-debug] Listening and serving HTTP on :8080\n```\nAlternatively, we can build an executable using `go build running-results-table.go`. This executable can then be distributed however we need to do so - for example, copying it into a Docker container or directly onto our production VMs.\n\n## Sending live updates when data changes\n\nAt this point, we can correctly create new records and retrieve all of the records that have been created. However, there is no support for live updates at this point - the client would need to keep re-requesting the data to see if anything changes. \n\nAs a better solution to this, we are going to use Pusher Channels to automatically emit events whenever a new record is created, so that all listening clients can automatically update themselves without needing to poll the server. Additionally, we are going to use Go channels to isolate the sending of Pusher events from the actual HTTP request - allowing our server to respond to the client faster, whilst still sending the event a fraction of a second later.\n\nCreate a new directory called `internal/notifier` under our work area, and in this create a file called `notifier.go` as follows:\n\n``` go\n    package notifier\n    import (\n        \"pusher/running-results-table/internal/db\"\n        \"github.com/pusher/pusher-http-go\"\n    )\n    type Notifier struct {\n        notifyChannel chan\u003c- bool\n    }\n    func notifier(database *db.Database, notifyChannel \u003c-chan bool) {\n        client := pusher.Client{\n            AppId:   \"PUSHER_APP_ID\",\n            Key:     \"PUSHER_KEY\",\n            Secret:  \"PUSHER_SECRET\",\n            Cluster: \"PUSHER_CLUSTER\",\n            Secure:  true,\n        }\n        for {\n            \u003c-notifyChannel\n            data := map[string][]db.Record{\"results\": database.GetRecords()}\n            client.Trigger(\"results\", \"results\", data)\n        }\n    }\n    func New(database *db.Database) Notifier {\n        notifyChannel := make(chan bool)\n        go notifier(database, notifyChannel)\n        return Notifier{\n            notifyChannel,\n        }\n    }\n    func (notifier *Notifier) Notify() {\n        notifier.notifyChannel \u003c- true\n    }\n```\n\n\u003e **Note:** remember to update the values PUSHER_APP_ID, PUSHER_KEY, PUSHER_SECRET and PUSHER_CLUSTER to the real values you got when registering your Pusher Channels application.\n\nThere is quite a lot going on here, so lets work through it.\n\nThe first thing we do is define a new type called `Notifier`. This is our interface that we expose to the rest of the code through which we can notify clients of new results.\n\nNext, we define a non-exported function called `notifier` that is given a reference to the database and a Go channel. This function will create our Pusher client, and then start an infinite loop of reading from the channel (which blocks until a new message comes in), retrieving the latest list of results from the database and sending them off to Pusher. We deliberately get the latest list ourselves here in case there was some delay in processing the message - this way we’re guaranteed not to miss anything.\n\nWe then create a new method called `New` that will return a new `Notifier`. Importantly in here we also start a new go-routine that runs our `notifier` function, which essentially means that there is a new thread of execution running that function. \n\nFinally we have a `Notify` method on our `Notifier` that does nothing more than push a new value down our Go channel.\n\nThe end result of this is that, whenever someone calls `Notifier.Notify()`, we will trigger our go-routine - on a separate thread - to retrieve the current results from the database and send them to Pusher.\n\nWe now need to use `dep` to again ensure that this is available for us, by executing `dep ensure` from our top level.\n\n```\n    $ dep ensure\n```\nNow we want to actually make use of it. To do this, we want to update our `StartServer` method in `internal/webapp/webapp.go` to also take a new parameter `notifierClient *notifier.Notifier`. The new signature should be:\n\n``` go\n    func StartServer(database *db.Database, notifierClient *notifier.Notifier) {\n```\nWe’ll also need to update the imports at the top to include the `notifier` package, as follows:\n\n``` go\n    import (\n            \"net/http\"\n            \"pusher/running-results-table/internal/db\"\n            \"pusher/running-results-table/internal/notifier\"\n    \n            \"github.com/gin-contrib/cors\"\n            \"github.com/gin-gonic/gin\"\n    )\n```\n\nThen, we want to update the handling in our POST route to call `notifierClient.Notify()` immediately after (or before, it makes little difference) the call to return the HTTP Status to the caller. This means that the whole route looks like:\n\n``` go\n        r.POST(\"/results\", func(c *gin.Context) {\n            var json db.Record\n            if err := c.BindJSON(\u0026json); err == nil {\n                database.AddRecord(json)\n                c.JSON(http.StatusCreated, json)\n                notifierClient.Notify()\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n```\nWe now need to provide the `Notifier` to the `StartServer` function for it to use. Update `running-results-table.go` to read as follows:\n\n``` go\n    package main\n    import (\n            \"pusher/running-results-table/internal/db\"\n            \"pusher/running-results-table/internal/notifier\"\n            \"pusher/running-results-table/internal/webapp\"\n    )\n    func main() {\n            database := db.New()\n            notifierClient := notifier.New(\u0026database)\n            webapp.StartServer(\u0026database, \u0026notifierClient)\n    }\n```\nAt this point, you can start up the server, call the endpoint by hand (using something like cURL or Postman), and then watch the messages appear in your Pusher Channels dashboard.\n\n\n## Building the web application\n\nNow that we have our backend service, we want a UI to make use of it. This will be built using the [Create React App](https://github.com/facebook/create-react-app) tool and styled using Semantic UI.\n\nTo start with, we’ll create our new UI project. If `create-react-app` isn’t installed already then do so:\n\n```\n    $ npm install -g create-react-app\n```\nThen we can use it to set up the UI project:\n\n```\n    $ create-react-app ui\n    $ cd ui\n```\nNext we want to remove some details that we just don’t care about. These are the default UI components that come with the created application. For this, delete the files `src/App.css`, `src/App.test.js`, `src/index.css` and `src/logo.svg`*.*\n\nNow replace `src/App.js` with the following:\n\n``` javascript\n    import React, { Component } from 'react';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\nAnd remove the following line from `src/index.js`:\n\n``` javascript\n    import './index.css';\n```\nNow we want to add in Semantic UI to our build. This is simply done by adding the packages and including the CSS into our main file. Add the packages as follows:\n\n```\n    $ npm install --save semantic-ui-react semantic-ui-css\n    npm WARN ajv-keywords@3.2.0 requires a peer of ajv@^6.0.0 but none is installed. You must install peer dependencies yourself.\n    \n    + semantic-ui-react@0.80.0\n    + semantic-ui-css@2.3.1added 7 packages in 9.377s\n```\nThen add the following line back in to `src/index.js`:\n\n``` javascript\n    import 'semantic-ui-css/semantic.min.css';\n```\n\n### Creating our data table\n\nNext we want to create the data table to render. For this, we want to create a new file called `src/ResultsTable.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Table, Header, Segment, Label } from 'semantic-ui-react'\n    export default function ResultsTable({results}) {\n        const rows = results.map(((result, index) =\u003e {\n            let color;\n            if (index === 0) {\n                color='yellow';\n            } else if (index === 1) {\n                color='grey';\n            } else if (index === 2) {\n                color='orange';\n            }\n            return (\n                \u003cTable.Row key={ index }\u003e\n                    \u003cTable.Cell\u003e\n                        \u003cLabel ribbon color={color}\u003e{ index + 1 }\u003c/Label\u003e\n                    \u003c/Table.Cell\u003e\n                    \u003cTable.Cell\u003e{ result.name }\u003c/Table.Cell\u003e\n                    \u003cTable.Cell\u003e{ result.time }\u003c/Table.Cell\u003e\n                \u003c/Table.Row\u003e\n            );\n        }));\n        return (\n            \u003cdiv className=\"ui container\"\u003e\n                \u003cSegment\u003e\n                    \u003cHeader\u003eResults \u003c/Header\u003e\n                    \u003cTable striped\u003e\n                        \u003cTable.Header\u003e\n                            \u003cTable.Row\u003e\n                                \u003cTable.HeaderCell\u003ePosition\u003c/Table.HeaderCell\u003e\n                                \u003cTable.HeaderCell\u003eName\u003c/Table.HeaderCell\u003e\n                                \u003cTable.HeaderCell\u003eTime\u003c/Table.HeaderCell\u003e\n                            \u003c/Table.Row\u003e\n                        \u003c/Table.Header\u003e\n                        \u003cTable.Body\u003e\n                            { rows }\n                        \u003c/Table.Body\u003e\n                    \u003c/Table\u003e\n                \u003c/Segment\u003e\n            \u003c/div\u003e\n        );\n    }\n```\nNow we need to be able to get the actual data to render. For this we will create a new `src/ConnectedResultsTable.js` file that manages the state of our component, does all of the API interactions, and then renders our table with the results. This looks as follows:\n\n``` javascript\n    import React from 'react';\n    import ResultsTable from './ResultsTable';\n    export default class ConnectedResultsTable extends React.Component {\n        state = {\n            results: []\n        };\n        componentDidMount() {\n            fetch('http://localhost:8080/results')\n                .then((response) =\u003e response.json())\n                .then((response) =\u003e this.setState(response));\n        }\n        render() {\n            return \u003cResultsTable results={this.state.results} /\u003e;\n        }\n    }\n```\nThis simply uses the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to retrieve the results when the component is first mounted, and then renders whatever results are currently stored in the state. This means that we will only see new results by re-rendering the page, but we’ll fix that later.\n\n\u003e **Note:** the component uses a hard-coded URL of “http://localhost:8080”. This is where our local development server is running, but you’ll need to change this for production.\n\nFinally, we want to actually render the table. This is done by updating the `src/App.js` file to look as follows:\n\n``` javascript\n    import React, { Component } from 'react';\n    import ConnectedResultsTable from './ConnectedResultsTable';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cConnectedResultsTable /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\n### Adding new data\n\nIn order to add new data to the table, we’re going to add a simple form below our table that submits a new record to our backend. For this, we will create a new file called `src/NewResultsForm.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Form, Header, Segment, Button } from 'semantic-ui-react'\n    export default class NewResultsForm extends React.Component {\n        state = {\n            name: '',\n            time: ''\n        };\n        onChangeName = this._onChangeName.bind(this);\n        onChangeTime = this._onChangeTime.bind(this);\n        onSubmit = this._onSubmit.bind(this);\n        render() {\n            return (\n                \u003cdiv className=\"ui container\"\u003e\n                    \u003cSegment vertical\u003e\n                        \u003cHeader\u003eNew Result\u003c/Header\u003e\n                        \u003cForm onSubmit={this.onSubmit}\u003e\n                            \u003cForm.Field\u003e\n                                \u003clabel\u003eName\u003c/label\u003e\n                                \u003cinput placeholder='Name' value={this.state.name} onChange={this.onChangeName} /\u003e\n                            \u003c/Form.Field\u003e\n                            \u003cForm.Field\u003e\n                                \u003clabel\u003eTime\u003c/label\u003e\n                                \u003cinput placeholder='Time' value={this.state.time} onChange={this.onChangeTime} /\u003e\n                            \u003c/Form.Field\u003e\n                            \u003cButton type='submit'\u003eSubmit\u003c/Button\u003e\n                        \u003c/Form\u003e\n                    \u003c/Segment\u003e\n                \u003c/div\u003e\n            );\n        }\n        _onChangeName(e) {\n            this.setState({\n                name: e.target.value\n            });\n        }\n        _onChangeTime(e) {\n            this.setState({\n                time: e.target.value\n            });\n        }\n        _onSubmit() {\n            const payload = {\n                name: this.state.name,\n                time: parseFloat(this.state.time)\n            };\n            fetch('http://localhost:8080/results', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n            this.setState({\n                name: '',\n                time: ''\n            });\n        }\n    }\n```\n\n\u003e **Note:** this assumes that the values entered are legal. It does not do any validation. If you enter a time that is not a number then you will not get the results you expected.\n\nNext add this in to the `src/App.js` file as well. Update the file to look as follows:\n\n``` javascript\n    import React, { Component } from 'react';\n    import ConnectedResultsTable from './ConnectedResultsTable';\n    import NewResultsForm from './NewResultsForm';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cConnectedResultsTable /\u003e\n            \u003cNewResultsForm /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n### Receiving live updates from Pusher\n\nNow that we’ve got our data table, we want to make it update in real time. We will make use of the official `pusher-js` module for this interaction. Install this as follows:\n\n```\n    $ npm install --save pusher-js\n```\nWe then add in the Pusher client to our `src/ConnectedResultsTable.js` file. Firstly add the following to the top of the file:\n\n``` javascript\n    import Pusher from 'pusher-js';\n    const socket = new Pusher('PUSHER_KEY', {\n        cluster: 'PUSHER_CLUSTER',\n        encrypted: true\n    });\n```\n\n\u003e **Note:** remember to update the values PUSHER_KEY and PUSHER_CLUSTER to the real values you got when registering your Pusher Channels application.\n\nThen add the following in to the `componentDidMount` method:\n\n``` javascript\n            const channel = socket.subscribe('results');\n            channel.bind('results', (data) =\u003e {\n                this.setState(data);\n            });\n```\n\nThis will automatically update our state based on receiving the data from Pusher, which in turn will automatically cause our table to re-render with the new data.\n\nEnsure that the backend is running, by executing `go run running-results-table.go` as before, then start the front end by:\n\n```\n    $ npm start\n```\nAnd our application is ready to go.\n\n![data-table-react-go-demo](//images.ctfassets.net/1es3ne0caaid/5NUFqJcGcw2wAmk8AM2GGe/fc658f6056560583cc0cac1f9013ab71/data-table-react-go-demo.gif)\n\n## Conclusion\n\nThis article shows how we can easily incorporate Pusher Channels into a Go web application to give realtime updates to our clients.\n\nAll of the source code from this article is available on [GitHub](https://github.com/sazzer/pusher-go-running-results-table). Why not try extending it to support more results tables, or more types of event?","metaTitle":"Creating a realtime data table with React and Go","metaDescription":"In this tutorial you will create a simple web app using Go and React. The app records and displays live race results."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"yE8cSdkP9m8GGAU6u6uq4","type":"Entry","createdAt":"2018-05-16T07:59:52.975Z","updatedAt":"2018-05-16T07:59:52.975Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geofencing web app using Next.js","url":"geofencing-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/gladchinda/realtime-geofencing-react-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}}],"reviewDate":"2018-05-15","description":"Learn to build a web app with Next.js and React featuring geofencing functionality. Track the location of nearby friends, with a Google Map updating in realtime.","prerequisite":"You will need Node and npm or Yarn installed on your machine.","content":"According to Wikipedia, a [geo-fence](https://en.wikipedia.org/wiki/Geo-fence) is a virtual perimeter for a real-world geographic area. A geo-fence could be dynamically generated—as in a radius around a point location, or a geo-fence can be a predefined set of boundaries (such as school zones or neighborhood boundaries).\n\nIt is quite obvious that geofencing can be very useful for several of real life location-specific applications. With the advent of GPS technology, it becomes very easy to get the position of objects in realtime. These days, almost every smartphone have built-in GPS sensors that can be used to estimate the position of the device using WiFi or Cellular data.\n\nAs web technologies advance, a couple of tools are made available to us that can enable us build location-aware applications. One of such tools is the [GeolocationAPI](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) which is supported by most of the modern browsers.\n\nWith the GeolocationAPI, getting the current position of the device is as simple as running the following code snippet in a browser:\n\n``` javascript\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        console.log({ lat: position.coords.latitude, lng: position.coords.longitude });\n      });  \n    }\n```\n\nIf you are interested in realtime position updates of the device, you can run the following code snippet on the browser:\n\n``` javascript\n    if ('geolocation' in navigator) {\n      navigator.geolocation.watchPosition(function(position) {\n        console.log({ lat: position.coords.latitude, lng: position.coords.longitude });\n      });  \n    }\n```\n\nIn this tutorial, we’ll build a very simple application with realtime geofencing updates, to list nearby people within a circular region of 1km radius.\n\nIn order to make testing our app as simple as possible, we will not be using any geolocation API in this tutorial. To avoid having to send our friends and coworkers out into the city to test our app, we will have a list of 15 fake people and randomly set their positions. We will also update the positions of the people who are online using an interval that runs every 10 seconds.\n\nIn a real application, you would use the [GeolocationAPI](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) available on the user’s browser to get the approximate position of the user. You can also use a geolocation service such as [Google’s Geolocation API](https://developers.google.com/maps/documentation/geolocation/) without relying on the GPS of the device.\n\nHere is a screenshot of what we will end up building in this tutorial.\n\n![nextjs-geofencing-demo](//images.ctfassets.net/1es3ne0caaid/2vD20XayMY4cQOQAyWIYyQ/7e40fd4debb4db6f9d7c83a54b9106f6/nextjs-geofencing-demo.png)\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Next.js**](https://learnnextjs.com/) - A framework for building server-side rendered(SSR) React applications with ease. It handles most of the challenges that come with building SSR React apps.\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime geofencing updates.\n\n\n3. [**GoogleMaps API**](https://developers.google.com/maps/documentation/) - GoogleMaps JavaScript API provides utilities that make it possible to add interactive and customizable maps to web apps. We will use the [react-google-maps](https://tomchentw.github.io/react-google-maps/) package to enable us to add GoogleMaps to our React application.\n\n\n4. [**React**](https://reactjs.org/) - A very popular JavaScript DOM rendering framework for building scalable web applications using a component-based architecture.\n\nA few other libraries will be used as we will see in a moment. Also ensure that you have [Node](https://nodejs.org/) installed on your machine.\n\n### Pusher application\n\nCreate a new application on your [Pusher Dashboard](https://dashboard.pusher.com/) to get your application credentials. The following credentials are required:\n\n\n- `APP_ID`\n- `APP_KEY`\n- `APP_SECRET`\n- `APP_CLUSTER`\n\n### GoogleMaps application\n\nTo use the Maps JavaScript API, you must register your app project on the Google API Console and get a Google API key which you can add to your app. Follow this [quick guide to register your Maps app](https://developers.google.com/maps/documentation/javascript/get-api-key) and get your API credentials.\n\n\n### Installing dependencies\n\nCreate a new directory for the application and run the following command to install the required dependencies for the app.\n\n``` \n    # Create a new directory\n    mkdir realtime-geofencing-app\n    \n    # cd into the new directory\n    cd realtime-geofencing-app\n    \n    # Initiate a new package and install app dependencies\n    npm init -y\n    \n    npm install react react-dom next pusher pusher-js react-google-maps\n    npm install express body-parser morgan cors dotenv axios uuid\n    npm install --save-dev cross-env npm-run-all\n```\n\n### Setting environment variables\n\nCreate a `.env` file in the root directory of your application and add your application credentials as follows. \n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n    \n    # GOOGLE MAPS API CREDENTIALS\n    GMAPS_API_KEY=YOUR_GOOGLE_MAPS_API_KEY\n```\nEnsure that you use the same variable names as specified in the above snippet. We will refer to them at several points in our code.\n\nNext create a Next.js configuration file named `next.config.js` in the root directory of your application with the following content:\n\n``` javascript\n    /* next.config.js */\n    \n    const webpack = require('webpack');\n    require('dotenv').config();\n    \n    module.exports = {\n      webpack: config =\u003e {\n        const env = Object.keys(process.env).reduce((acc, curr) =\u003e {\n          acc[`process.env.${curr}`] = JSON.stringify(process.env[curr]);\n          return acc;\n        }, {});\n        \n        config.plugins.push(new webpack.DefinePlugin(env));\n        \n        return config;\n      }\n    };\n```\nSince `Next.js` uses [Webpack](https://webpack.js.org/) in the background for module loading and bundling, we are simply configuring `Webpack` to be able to provide the environment variables we have defined and make them available to our React components by accessing the `process.env` object.\n\n\n## Getting started\n\n### Setting up the server\n\nWe will go ahead to setup a simple server using Next.js to wrap an [Express](https://expressjs.com/) application server. We will also load the necessary middlewares for the Express server and then we will configure Pusher using the credentials we added to our environment variables.\n\nCreate a `server.js` file in the root directory of your application and add the following code snippet to setup the server:\n\n``` javascript\n    /* server.js */\n    \n    const cors = require('cors');\n    const uuid = require('uuid').v4;\n    const next = require('next');\n    const Pusher = require('pusher');\n    const logger = require('morgan');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const dotenv = require('dotenv').config();\n    \n    const dev = process.env.NODE_ENV !== 'production';\n    const port = process.env.PORT || 3000;\n    \n    const app = next({ dev });\n    const handler = app.getRequestHandler();\n    \n    // Ensure that your pusher credentials are properly set in the .env file\n    // Using the specified variables\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        const server = express();\n        \n        server.use(cors());\n        server.use(logger('dev'));\n        server.use(bodyParser.json());\n        server.use(bodyParser.urlencoded({ extended: true }));\n        \n        server.get('*', (req, res) =\u003e {\n          return handler(req, res);\n        });\n        \n        server.listen(port, err =\u003e {\n          if (err) throw err;\n          console.log(`\u003e Ready on http://localhost:${port}`);\n        });\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n```\n\n### Modify npm scripts\n\nFinally, we will modify the `\"scripts\"` section of the `package.json` file to look like the following snippet:\n\n``` json\n    /* package.json */\n    \n    \"scripts\": {\n      \"dev\": \"node server.js\",\n      \"build\": \"next build\",\n      \"prod:server\": \"cross-env NODE_ENV=production node server.js\",\n      \"start\": \"npm-run-all -s build prod:server\"\n    }\n```\n\nWe have gotten all we need to start building our app components. If you run the command `npm run dev` on your terminal now, it will start up the application server on port 3000 if it is available. However, nothing happens on the browser yet, because we have not built any index page component.\n\n\n## Building the server routes\n\nAs stated earlier for our app, we have a list of 15 people. We will randomly create a `person` object for each person containing the following:\n\n\n- `id` - UUID identifier for the person\n- `name` - the name of the person\n- `position` - a random `{ lat, lng }` position coordinate for the person\n- `online` - the online status of the person\n\nMake the following modifications to the `server.js` file.\n\n``` javascript\n    /* server.js */\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        // server.use() middlewares here ...\n    \n        const initializePeople = ({ lat, lng }) =\u003e {\n        \n          const randomInRange = num =\u003e (width = 0.01) =\u003e ((Math.random() * width * 2) + num - width);\n          \n          const randomLat = randomInRange(lat);\n          const randomLng = randomInRange(lng);\n          \n          const people = [ 'Stephanie', 'John', 'Steve', 'Anna', 'Margaret', 'Felix', 'Chris', 'Jamie', 'Rose', 'Bob', 'Vanessa', '9lad', 'Bridget', 'Sebastian', 'Richard' ];\n          \n          return people.map(name =\u003e ({\n            name,\n            id: uuid(),\n            position: { lat: randomLat(0.0075), lng: randomLng(0.02) },\n            online: false\n          }));\n          \n        };\n    \n        const referencePosition = { lat: 6.4311415, lng: 3.4625833 };\n        \n        let people = initializePeople(referencePosition);\n        \n        server.get('/people', (req, res, next) =\u003e {\n          res.json({ status: 'success', people });\n        });\n        \n        server.post('/transit/:id', (req, res, next) =\u003e {\n          const id = req.params.id;\n          const { lat, lng } = req.body;\n          \n          people.forEach((person, index) =\u003e {\n            if (person.id === id) {\n              people[index] = { ...person, position: { lat, lng } };\n              \n              pusher.trigger('map-geofencing', 'transit', {\n                person: people[index], people\n              });\n            }\n          });\n        });\n    \n        server.post('/:presence/:id', (req, res, next) =\u003e {\n          const id = req.params.id;\n          const presence = req.params.presence;\n          \n          if (['online', 'offline'].includes(presence)) {\n            people.forEach((person, index) =\u003e {\n              if (person.id === id) {\n                return people[index] = { ...person, online: presence === 'online' };\n              }\n            });\n          }\n        });\n    \n        // server.get('*') is here ...\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n```\nFirst, we create the `initializePeople()` function, which loops through the list of 15 people and creates a `person` object for each of them with random position coordinates based on a reference position. It then returns the collection of `person` objects.\n\nNext, we create the `people` collection on the server by calling `initializePeople()` with a reference position. We then go ahead to define the server routes.\n\nWe first define the `GET /people` route. Whenever a client makes a `GET` request to the `/people` endpoint, it gets the current `people` collection from the server in the returned response.\n\nOn the `POST /transit/:id` route, we are fetching the ID of the person from the `id` route parameter. We then fetch the person’s current position from `req.body` through the help of the `body-parser` middleware we added earlier.\n\nNext, we update the person’s position on the `people` collection. Then, we trigger a `transit` event on the `map-geofencing` Pusher channel, passing the updated `person` and `people` collection. **This is important for the realtime behavior of the app**.\n\nFinally, we define the `POST /:presence/:id` route which accepts two route parameters: `presence` and `id`. The `presence` parameter can be either `online` or `offline`. We simply set the online status of the person with the given `id` parameter to either `true` or `false` based on the value of `presence`.\n\n\n## Building the index page\n\n`Next.js` requires that you create the page components of your app in a `pages` directory. We will go ahead and create a `pages` directory in our app root directory and create a new `index.js` file inside it for the index page of our application.\n\nIt is considered a good practice to have a layout that can be reused across multiple pages. It gives you a form of boilerplate and saves you from unnecessary repetitions.\n\nBefore we add content to the index page, we will build a `Layout` component that can be used in our app pages as a boilerplate. Go ahead and create a `components` directory in your app root. Create a new `Layout.js` file inside the just created `components`  directory with the following content:\n\n``` javascript\n    /* components/Layout.js */\n    \n    import React, { Fragment } from 'react';\n    import Head from 'next/head';\n    \n    const Layout = props =\u003e (\n      \u003cFragment\u003e\n        \u003cHead\u003e\n          \u003cmeta charSet=\"utf-8\" /\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" /\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossOrigin=\"anonymous\" /\u003e\n          \u003ctitle\u003e{props.pageTitle || 'Realtime Geofencing'}\u003c/title\u003e\n        \u003c/Head\u003e\n        {props.children}\n      \u003c/Fragment\u003e\n    );\n    \n    export default Layout;\n```\n\nHere, we try not to do so much. We are simply using the `next/head` component to add meta information to the `\u003chead\u003e` of our pages. We have also added a link to the Bootstrap CDN file to add some default styling to our app. We are also setting the page title dynamically from props and rendering the page contents using `{props.children}`.\n\nNow let's go ahead and add content to the `pages/index.js` file we created earlier:\n\n``` javascript\n    /* pages/index.js */\n    \n    import React, { Component, Fragment } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import Layout from '../components/Layout';\n    \n    class IndexPage extends Component {\n    \n      state = { id: null, people: [] }\n    \n      endConnection = () =\u003e {\n        this.pusher.disconnect();\n        axios.post(`/offline/${this.state.id}`);\n      }\n      \n      componentWillMount() {\n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n        });\n        \n        this.channel = this.pusher.subscribe('map-geofencing');\n      }\n      \n      componentDidMount() {\n        axios.get('/people').then(({ data }) =\u003e {\n          const { people = [] } = data;\n          this.setState({ people });\n        });\n        \n        window.onbeforeunload = this.endConnection;\n      }\n      \n      componentWillUnmount() {\n        this.endConnection();\n      }\n      \n    };\n    \n    export default () =\u003e \u003cIndexPage /\u003e\n```\nFirst, we initialize the state with two props namely:\n\n\n- `id` - UUID used to identify the current user. This is initialized with `null` and is updated when a persona is selected.\n\n\n- `people` - An array of people with their respective position coordinates. This is initialized with an empty array (`[]`). It will be populated after we fetch people from the server.\n\nNext, we create the `endConnection()` method which terminates the current Pusher connection and also sends an `/offline` request to the server for the current user. The `endConnection()` method is called before the component is unmounted or before the page is unloaded.\n\nOn the `componentWillMount()` lifecycle method, we set up a Pusher connection and a `channel` subscription to the `map-geofencing` channel.\n\nWhen the component is mounted as seen in the `componentDidMount()` lifecycle method, we fetch the people collection from the server by making a `GET` HTTP request using [axios](https://github.com/axios/axios) to the `/people` endpoint. We then update the state with the people collection gotten from the response.\n\nWe will go ahead and add the `render()` method to the `IndexPage` component. Make the following additions to the `IndexPage` component.\n\n``` javascript\n    /* pages/index.js */\n    \n    import ChoosePersona from '../components/ChoosePersona';\n    \n    class IndexPage extends Component {\n    \n      // previous methods here ...\n    \n      personaSelected = id =\u003e {\n        this.setState({ id });\n        axios.post(`/online/${id}`);\n      }\n      \n      render() {\n      \n        const { id, people } = this.state;\n        const person = people.find(person =\u003e person.id === id) || {};\n        const peopleOffline = people.filter(person =\u003e !person.online);\n        \n        return (\n          \u003cLayout pageTitle=\"Realtime Geofencing\"\u003e\n            \u003cmain className=\"container-fluid position-absolute h-100 bg-light\"\u003e\n              {\n                id ? \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\u003c/div\u003e\n                : \u003cChoosePersona count={5} people={peopleOffline} onSelected={this.personaSelected} /\u003e\n              }\n            \u003c/main\u003e\n          \u003c/Layout\u003e\n        );\n        \n      }\n      \n    };\n```\nFirst, we import the `ChoosePersona` component, which we will create in a moment. This component enables us to activate a selected user.\n\nIn the `render()` method, we conditionally render the `ChoosePersona` component when there is no active user. The `ChoosePersona` component will randomly display a maximum of 5 people who are offline, using the `count` and `people` props. Notice how we filter the `people` collection to fetch those who are offline.\n\nWe also added a `personaSelected()` method which is passed to the `ChoosePersona` component via the `onSelected` prop, and is triggered when a user persona has been chosen. The method sends an `/online` request to the server to activate the selected user.\n\n\n## Choosing a persona\n\nNow we will go ahead and create the `ChoosePersona` component we saw in the last section. Create a new `ChoosePersona.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/ChoosePersona.js */\n    \n    import React from 'react';\n    \n    const ChoosePersona = props =\u003e {\n    \n      const { people = [], count = 3, onSelected = f =\u003e f } = props;\n      \n      const nameBadgeStyles = {\n        fontSize: '0.8rem',\n        height: 40,\n        borderRadius: 20,\n        cursor: 'pointer'\n      };\n      \n      const choosePersona = id =\u003e evt =\u003e onSelected(id);\n      \n      const randomPeople = count =\u003e people =\u003e {\n      \n        const selected = [];\n        let i = 0;\n        \n        count = Math.max(0, Math.min(count, people.length));\n        \n        while (i \u003c count) {\n          const index = Math.floor(Math.random() * people.length);\n          if (selected.includes(index)) continue;\n          ++i \u0026\u0026 selected.push(index);\n        }\n        \n        return selected.map(index =\u003e {\n          const { id, name } = people[index];\n          const className = 'd-flex align-items-center text-center text-white bg-secondary font-weight-bold py-2 px-4 mx-1 my-2';\n          \n          return \u003cspan key={index} className={className} style={nameBadgeStyles} title={name} onClick={ choosePersona(id) }\u003e{name}\u003c/span\u003e\n        });\n        \n      };\n      \n      return (\n        \u003cdiv className=\"w-100 h-100 px-3 pb-5 d-flex flex-wrap align-items-center align-content-center justify-content-center\"\u003e\n          \u003cspan className=\"h3 text-dark text-center py-3 w-100 font-weight-bold\"\u003eChoose your Persona\u003c/span\u003e\n          { randomPeople(count)(people) }\n        \u003c/div\u003e\n      );\n    };\n    \n    export default ChoosePersona;\n```\n\nThe `randomPeople()` function takes a `count` as its only argument - which is the number of random personas to pick from the `people` collection prop. It then uses `.map()` to create an array of `\u003cspan\u003e` elements for each randomly picked persona and returns the array.\n\nNotice the `onClick` event handler for each `\u003cspan\u003e`. The `choosePersona(person)` function is used as the handler. It simply invokes the function passed to the `onSelected` prop with the `id` of the selected persona as argument.\n\nFinally, we render some random personas based on the `count` and `people` props passed to the `ChoosePersona` component.\n\nIf you test the app now in your browser, with `npm run dev`, you should see the following screen. Ensure that you hit `Ctrl+C` (Windows) or `Cmd+C` (Mac) on your command terminal before running `npm run dev` to restart the server.\n\n![nextjs-geofencing-choose-persona](//images.ctfassets.net/1es3ne0caaid/2NfbcBktMsUSCYQuQIYUKC/8012651152eec8d79e4faaa99fffbbdd/nextjs-geofencing-choose-persona.png)\n\n## Building the map components\n\nWe will go ahead and build the map components. As stated earlier in this tutorial, we will be using the [react-google-maps](https://tomchentw.github.io/react-google-maps) package for easy integration of the GoogleMaps API with our application.\n\n### The map component\n\nWe will start with building the `Map` component. This a wrapper component for the map. Create a new `Map.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/Map.js */\n    \n    import React, { Fragment, Component } from 'react';\n    import MapContainer from './MapContainer';\n    \n    const API_KEY = process.env.GMAPS_API_KEY;\n    const MAP_URL = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}\u0026v=3.exp\u0026libraries=geometry`;\n    \n    class Map extends Component {\n    \n      render() {\n        const containerStyles = {\n          height: '100%',\n          width: '100%',\n          position: 'relative'\n        };\n        \n        return \u003cMapContainer\n          googleMapURL={MAP_URL}\n          loadingElement={\u003cdiv style={containerStyles} /\u003e}\n          containerElement={\u003cdiv style={containerStyles} /\u003e}\n          mapElement={\u003cdiv style={containerStyles} /\u003e}\n          {...this.props}\n        /\u003e\n      }\n      \n    };\n    \n    export default Map;\n```\nHere we form the `MAP_URL` using the `API_KEY` of the GoogleMaps app we created earlier for our application. We also render the `MapContainer` passing in the `MAP_URL`. The `MapContainer` component contains the map and other visual elements such as markers and shape regions.\n\nNotice, how we pass the `props` received from the `Map` component to the `MapContainer`. We will go ahead and create the `MapContainer` component.\n\n### The map container\n\nCreate a new `MapContainer.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/MapContainer.js */\n    \n    import axios from 'axios';\n    import React, { Fragment, Component } from 'react';\n    import { withGoogleMap, withScriptjs, GoogleMap } from 'react-google-maps';\n    \n    import UserMarker from './UserMarker';\n    import PersonMarker from './PersonMarker';\n    \n    class MapContainer extends Component {\n    \n      withinRegion = (position, radius) =\u003e {\n        const to = new google.maps.LatLng(position.lat, position.lng);\n        const distance = google.maps.geometry.spherical.computeDistanceBetween;\n        return point =\u003e {\n          const from = new google.maps.LatLng(point.lat, point.lng);\n          return distance(from, to) \u003c= radius;\n        }\n      }\n      \n      render() {\n        const { person: { id, position }, radius, people, channel } = this.props;\n        \n        return (\n          \u003cGoogleMap ref={elem =\u003e this.map = elem} zoom={15} center={position}\u003e\n            \u003cFragment\u003e\n              { people.map((person, index) =\u003e {\n              \n                const props = { key: index, radius, person, channel };\n                const withinRegion = point =\u003e (position, radius) =\u003e this.withinRegion(position, radius)(point);\n                \n                return (person.id === id)\n                  ? \u003cUserMarker {...props} /\u003e\n                  : \u003cPersonMarker user={this.props.person} withinRegion={withinRegion} {...props} /\u003e\n                  \n              }) }\n            \u003c/Fragment\u003e\n          \u003c/GoogleMap\u003e\n        );\n      }\n      \n    };\n    \n    export default withScriptjs(withGoogleMap(MapContainer));\n```\n\nFirst, we create the `withinRegion()` method that enables us determine if a point is within a defined circular region. It takes the center and radius of the region as its arguments, and returns a function. The returned function takes a point as argument and returns if the point is in the region.\n\nIn the `render()` method, we render the `GoogleMap` component passing the `position` of the current user as the `center` prop. We loop through the `people` collection received by the `MapComponent` and render different types of makers based on the person.\n\nNotice that we create a `ref` to the `GoogleMap` component and store it in the `this.map` property. This `ref` will give us access to the underlying `google.maps.Map` instance, which we will need later to update the map properties.\n\nWe render the `UserMarker` for the currently active user and the `PersonMarker` for other people. We also pass the `radius`, `person` and `channel` props to the marker components. The `channel` prop contains a reference to the current Pusher channel subscription.\n\nFor the `PersonMarker` component, we pass in the currently active user to the `user` prop. We also pass in an inverted version of the `withinRegion()` method to the `withinRegion` prop.\n\nFinally, we export the higher-order component  `withScriptjs(withGoogleMap(MapContainer))`. See the [react-google-maps documentation](https://tomchentw.github.io/react-google-maps/#usage--configuration) to learn more. We will go ahead and create the `UserMarker` and `PersonMarker` components.\n\n### The user marker\n\nCreate a new `UserMarker.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/UserMarker.js */\n    \n    import React, { Fragment, Component } from 'react';\n    import { Marker, Circle } from 'react-google-maps';\n    \n    class UserMarker extends Component {\n    \n      constructor(props) {\n        super(props);\n        const { person: { id = null, position = null }, channel = null } = this.props;\n        \n        this.id = id;\n        this.channel = channel;\n        this.state = { position };\n      }\n      \n      componentDidMount() {\n        this.channel \u0026\u0026 this.channel.bind('transit', ({ person = {} }) =\u003e {\n          const { id, position } = person;\n          (id === this.id) \u0026\u0026 this.setState({ position });\n        });\n      }\n      \n      render() {\n      \n        const { radius } = this.props;\n        const { position } = this.state;\n        const regionOptions = { fillOpacity: 0.1, strokeWidth: 1, strokeOpacity: 0.2 };\n        \n        const MARKER_SIZE = new google.maps.Size(50, 70);\n        const MARKER_ICON = 'https://i.imgur.com/Rhv5xQh.png';\n        \n        return \u003cFragment\u003e\n          \u003cMarker position={position} title=\"You\" options={{ icon: { url: MARKER_ICON, scaledSize: MARKER_SIZE } }} /\u003e\n          \u003cCircle center={position} radius={radius} options={regionOptions} /\u003e\n        \u003c/Fragment\u003e\n        \n      }\n    };\n    \n    export default UserMarker;\n```\nThe `UserMarker` component stores the position of the current active user in the `position` property of the component’s state.\n\nWhen the component mounts, we bind to the `transit` event on the Pusher channel, and update the state with the new `position` of the user. We only update the state when the current user’s position changes.\n\nIn the `render()` method, we render a red marker icon for the currently active user by setting the `MARKER_ICON` constant as the marker icon URL. We also render a `Circle` region using the user’s current position as `center` and the `radius` received as prop.\n\n### The person marker\n\nCreate a new `PersonMarker.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/PersonMarker.js */\n    \n    import React, { Component } from 'react';\n    import { Marker } from 'react-google-maps';\n    \n    const BLACK_MARKER = 'https://i.imgur.com/8dOrls4.png?2';\n    const GREEN_MARKER = 'https://i.imgur.com/9v6uW8U.png';\n    \n    class PersonMarker extends Component {\n    \n      constructor(props) {\n        super(props);\n        \n        const {\n          user: { id: userID, position: userPosition },\n          person: { id = null, position = null },\n          channel = null\n        } = this.props;\n        \n        this.id = id;\n        this.userID = userID;\n        this.channel = channel;\n        \n        this.state = { position, userPosition };\n      }\n      \n      componentDidMount() {\n        this.channel \u0026\u0026 this.channel.bind('transit', ({ person = {} }) =\u003e {\n          const { id, position } = person;\n          (id === this.id) \u0026\u0026 this.setState({ position });\n          (id === this.userID) \u0026\u0026 this.setState({ userPosition: position });\n        });\n      }\n      \n      render() {\n        const { position, userPosition } = this.state;\n        const { person: { name }, radius, withinRegion = f =\u003e f } = this.props;\n        \n        const within = !!(withinRegion(position)(userPosition, radius));\n        \n        const MARKER_SIZE = new google.maps.Size(25, 35);\n        const MARKER_ICON = within ? GREEN_MARKER : BLACK_MARKER;\n        \n        return \u003cMarker position={position} title={name} options={{ icon: { url: MARKER_ICON, scaledSize: MARKER_SIZE } }} /\u003e\n      }\n      \n    };\n    \n    export default PersonMarker;\n```\n\nThe `PersonMarker` component stores the position of the person in the `position` property of the component’s state and the position of the current active user in the `userPosition` property of the state.\n\nWhen the component mounts, we bind to the `transit` event on the Pusher channel, and update the state with the new position of the person or currently active user. We update the state’s `position` when the person’s position changes, and the `userPosition`  when the currently active user’s position changes.\n\nIn the `render()` method, we use the `withinRegion()` method received as prop to check if the person is within the defined circular region of the currently active user. We then conditionally render a green marker icon if the person is within the region, otherwise, we render a black icon. \n\n\n## Displaying nearby friends\n\nNow, we will create a component for displaying a list of nearby people/friends. We will display a green marker icon for people within the current user’s region and a black icon for other people.\n\nCreate a new `NearbyFriends.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/NearbyFriends.js */\n    \n    import React, { Component, Fragment } from 'react';\n    \n    const BLACK_MARKER = 'https://i.imgur.com/8dOrls4.png?2';\n    const GREEN_MARKER = 'https://i.imgur.com/9v6uW8U.png';\n    \n    class NearbyFriends extends Component {\n    \n      state = { people: [] }\n      \n      updatePeople = people =\u003e this.setState({ people })\n      \n      render() {\n        const { people } = this.state;\n        const { person: { name, id } } = this.props;\n        \n        const nameBadgeStyles = {\n          fontSize: '0.8rem',\n          height: 40,\n          borderRadius: 20,\n          cursor: 'pointer'\n        };\n        \n        const showPeople = (filterFn, marker) =\u003e {\n          return \u003cFragment\u003e\n            { people.filter(filterFn).map((person, index) =\u003e {\n            \n              if (person.id === id) return null;\n              \n              return (\n                \u003cdiv key={index} className=\"d-flex border-bottom border-gray w-100 px-4 py-3 font-weight-bold text-secondary align-items-center\"\u003e\n                \n                  \u003cdiv className=\"pl-2\" style={{ width: 30, height: 30 }}\u003e\n                    \u003cimg src={marker} className=\"img-fluid\" alt=\"marker\" /\u003e\n                  \u003c/div\u003e\n                  \n                  \u003cspan className=\"pl-3\"\u003e{person.name}\u003c/span\u003e\n                  \n                \u003c/div\u003e\n              );\n              \n            }) }\n          \u003c/Fragment\u003e\n        };\n        \n        return id \u0026\u0026 \u003cFragment\u003e\n        \n          \u003cdiv className=\"border-bottom border-gray w-100 px-2 d-flex align-items-center bg-white justify-content-between\" style={{ height: 90 }}\u003e\n            \u003cspan className=\"h4 text-dark mb-0 mx-4 font-weight-bold\"\u003eNearby Friends\u003c/span\u003e\n            \u003cspan className=\"d-flex align-items-center text-center text-white bg-primary font-weight-bold py-2 px-4 mx-4\" style={nameBadgeStyles} title={name}\u003e{name}\u003c/span\u003e\n          \u003c/div\u003e\n          \n          \u003cdiv className=\"w-100 d-flex flex-wrap align-items-start align-content-start position-relative\" style={{ height: 'calc(100% - 90px)', overflowY: 'auto' }}\u003e\n            { showPeople(person =\u003e person.within, GREEN_MARKER) }\n            { showPeople(person =\u003e !person.within, BLACK_MARKER) }\n          \u003c/div\u003e\n          \n        \u003c/Fragment\u003e\n      }\n    };\n    \n    export default NearbyFriends;\n```\n\nWe initialize the state with a `people` property set to an empty array(`[]`). We then expose the `updatePeople()` method which will make it possible for us to update the `people` property of the component’s state.\n\nIn the `render()` method, we define the `showPeople()` method which will filter the `people` collection based on a `filterFn` and renders the filtered list of people using the given `marker`. Notice in the `showPeople()` function that we skip rendering the currently active user in the list.\n\nFinally, we render the two lists of people. First, we render the list of the people within the user’s region with a green marker. Then, we render the list of the rest people with a black marker.\n\n\n## Keeping track of nearby friends\n\nNow that we have our rendered list of nearby friends, we need to be able to update the list as the position of either the user or some other person changes.\n\nCurrently, our map markers are sensitive to position changes but our list is not. However, the list has an `updatePeople()` method that can enable us to update the people in the list based on position changes.\n\nWe will go ahead and create a bridge between the map and the list from the parent `IndexPage` component.\n\n### Completing the index page\n\nMake the following additions to the `pages/index.js` file:\n\n``` javascript\n    /* pages/index.js */\n    \n    import Map from '../components/Map';\n    import NearbyFriends from '../components/NearbyFriends';\n    \n    class IndexPage extends Component {\n    \n      regionFiltered = people =\u003e this.nearby.updatePeople(people)\n      \n      render() {\n        const { id, people } = this.state;\n        const person = people.find(person =\u003e person.id === id) || {};\n        const peopleOffline = people.filter(person =\u003e !person.online);\n        \n        return (\n          \u003cLayout pageTitle=\"Realtime Geofencing\"\u003e\n            \u003cmain className=\"container-fluid position-absolute h-100 bg-light\"\u003e\n              {\n                id ? \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\n                \n                  \u003csection className=\"col-md-9 px-0 border-right border-gray position-relative h-100\"\u003e\n                    \u003cMap person={person} radius={1000} people={people} channel={this.channel} onRegionFiltered={this.regionFiltered} /\u003e\n                  \u003c/section\u003e\n                  \n                  \u003csection className=\"col-md-3 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\u003e\n                    \u003cNearbyFriends ref={elem =\u003e this.nearby = elem} person={person} /\u003e\n                  \u003c/section\u003e\n                  \n                \u003c/div\u003e\n                : \u003cChoosePersona count={5} people={peopleOffline} onSelected={this.personaSelected} /\u003e\n              }\n            \u003c/main\u003e\n          \u003c/Layout\u003e\n        );\n      }\n      \n    }\n```\n\nHere, we update the `render()` method to render the `Map` and `NearbyFriends` components. You can see that we create a `ref` to the `NearbyFriends` component, storing it in the `this.nearby` component property.\n\nWe also add the `regionFiltered()` bridge method. This method receives a `people` collection as argument. It then calls the `updatePeople()` method on the `ref` created for the `NearbyFriends` component. This makes it possible for us to update the list as we so required.\n\nTo complete the bridge, we pass the `regionFiltered()` method to the `Map` component via the `onRegionFiltered` prop. We will go ahead and update the `MapContainer` component to handle position changes.\n\n### Updating the map container\n\nMake the following additions to the `components/MapContainer.js` file:\n\n``` javascript\n    /* components/MapContainer.js */\n    \n    class MapContainer extends Component {\n    \n      analyzeRegion = (position, radius) =\u003e people =\u003e {\n        const { onRegionFiltered = f =\u003e f } = this.props;\n        const withinRegion = this.withinRegion(position, radius);\n        \n        const mappedPeople = people.map(person =\u003e {\n          const { position } = person || {};\n          const within = withinRegion(position);\n          return { ...person, within };\n        });\n        \n        onRegionFiltered(mappedPeople);\n      }\n      \n      componentDidMount() {\n      \n        const { person: { id, position }, radius, people = [], channel = null } = this.props;\n        const mapContext = this.map.context['__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED'];\n        const setMapCenter = mapContext.setCenter.bind(mapContext);\n        \n        let { lat, lng } = position;\n        \n        channel \u0026\u0026 channel.bind('transit', ({ person = {}, people }) =\u003e {\n          const { id: $id, position: $position } = person;\n          const isUser = id === $id;\n          const center = isUser ? $position : position;\n          \n          isUser \u0026\u0026 setMapCenter(center);\n          this.analyzeRegion(center, radius)(people);\n        });\n        \n        this.positionUpdate = setInterval(() =\u003e {\n          lat = lat + Math.random() * 0.001;\n          lng = lng + Math.random() * 0.001;\n          \n          axios.post(`/transit/${id}`, { lat, lng });\n        }, 10000);\n        \n        this.analyzeRegion(position, radius)(people);\n        \n      }\n      \n      componentWillUnmount() {\n        clearInterval(this.positionUpdate);\n      }\n      \n    };\n```\n\nFirst, we add an `analyzeRegion()` method that uses the `withinRegion()` method defined earlier to modify the `people` collection based on the current user’s position, setting the `within` property for each person in the collection. It then calls the `onRegionFiltered()` method received as prop to the component, which in turns updates the `people` collection on the list as we stated earlier.\n\nWe then add the `componentDidMount()` lifecycle method. When the component mounts, we get the `setMapCenter` method from the underlying `google.maps.Map` instance which we will need to update the center of the map.\n\nWe then bind to the `transit` event on the Pusher channel, and update the center of the map to the new position of the currently active user. We also call the `analyzeRegion()` method to update the people on the `NearbyFriends` list.\n\nNext, we create an interval that randomly changes the user’s position every 10 seconds and triggers a realtime position update of the user by making a server request to the `/transit/:id` endpoint.\n\nFinally, we clear the interval when the component is unmounted.\n\n**Bravo**. If you made it to this point, then you have successfully built a realtime location-aware application app with geofencing updates using Next.js and Pusher.\n\nTest the app now in your browser, with `npm run dev`. Choose a persona and see how the position of the user along with the circular geofence updates in realtime. Your screen should look like the following screenshot.\n\nEnsure that you hit `Ctrl+C` (Windows) or `Cmd+C` (Mac) on your command terminal before running `npm run dev` to restart the server.\n\n![nextjs-geofencing-demo](//images.ctfassets.net/1es3ne0caaid/2vD20XayMY4cQOQAyWIYyQ/7e40fd4debb4db6f9d7c83a54b9106f6/nextjs-geofencing-demo.png)\n\n## Conclusion\n\nIn this tutorial, we have been able to build a very simple realtime application with geofencing updates using [Next.js](https://learnnextjs.com/), [React](https://reactjs.org/), [GoogleMaps API](https://developers.google.com/maps/documentation/) and [Pusher](https://pusher.com/). You can check the source code of this tutorial on [GitHub](https://github.com/gladchinda/realtime-geofencing-react-demo).\n\nDo check the documentation for each technology we used in this project to learn more about other ways of using them. I duly hope that this tutorial is of help to you.","metaTitle":"Build a geofencing web app using Next.js","metaDescription":"This tutorial will show you how to build a web app featuring geofencing. Track the location of nearby friends using Google Maps. Built with Next.js and React."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3ON0lPM8VWGM82c6OsYyEa","type":"Entry","createdAt":"2018-05-14T09:53:47.917Z","updatedAt":"2018-05-14T12:42:08.374Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a realtime game with React Native","url":"realtime-game-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RN-Pusher-TicTacToe/tree/master/app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-05-11","description":"Build the classic game of tic-tac-toe using React Native.","prerequisite":"You will need an Android emulator for testing, and the Android SDK. You should have a basic knowledge of React Native.","content":"In this tutorial, we’ll be implementing the classic game Tic-Tac-Toe with React Native and Pusher. This tutorial assumes that you already have a basic knowledge of React Native. \n\n## Prerequisites\n- **Pusher Account** - a Pusher account is needed to create a Pusher instance that we will be using in this tutorial. If you don’t already have an account, you can [sign up here](https://pusher.com/signup). After creating an account, you can go ahead and create a new Pusher app.\n- **Android SDK** - we’ll be specifically deploying the app as an Android App so you need the Android SDK to run the app on an Android device or emulator.\n- **A Machine that’s ready for React Native Development** - if you don’t already have your machine set up for React Native, you can follow the [Getting Started Guide](https://facebook.github.io/react-native/docs/getting-started.html) on the official docs. Be sure to follow the instructions in the \"Building Projects with Native Code” tab. \n- **Genymotion or Android Emulator** - this is optional, as you can always use a real device for testing. \n\n## What we’re going to build\n\nHere’s what the app is going to look like by default:\n\n![tic-tac-toe-react-native-pusher-home-screen](//images.ctfassets.net/1es3ne0caaid/7UasyMesgwckaEcYugA4E/d09c5d9e547a4ec5eaae93c401aa3559/tic-tac-toe-react-native-pusher-home-screen.png)\n\nWhen a user has chosen to create a room, the room ID will be generated by the app. This room ID should be entered by another user so the game can begin. Throughout this tutorial, I’ll be referring to the user other than the current user as the “rival”.\n\n![tic-tac-toe-react-native-pusher-after-room-creation](//images.ctfassets.net/1es3ne0caaid/2wQFNUAdUY0mgYIYsggMMK/5a067ba8b6ce7599a3938ac01bd10958/tic-tac-toe-react-native-pusher-after-room-creation.png)\n\nOnce someone has joined the room, the Tic-Tac-Toe board will be shown. At this point, any of the players can start the first move.\n\n![tic-tac-toe-react-native-pusher-empty-board](//images.ctfassets.net/1es3ne0caaid/2rRB0hTjpSiK2w4WAQuWA4/af679479736b164813bc2f632f60fdd6/tic-tac-toe-react-native-pusher-empty-board.png)\n\nOnce the last move is used to fill the board, an alert will be shown to the room creator asking whether they want to restart the game (empty the board and start over) or end the game. If the room creator has chosen to end the game, the app state will reset and the default screen will be shown.\n\n![tic-tac-toe-react-native-pusher-restart-game](//images.ctfassets.net/1es3ne0caaid/3IAy6jBTo4SAsCAiCG4e0o/1335b6530713b312b2122e82d0ec1f9c/tic-tac-toe-react-native-pusher-restart-game.png)\n\nYou can find the full source code of the app in its [Github repo](https://github.com/anchetaWern/RN-Pusher-TicTacToe).\n\n## Coding the server component\n\nThe server component authenticates the requests that will come from the app. This is needed because we’ll be using [client events](https://pusher.com/docs/client_api_guide/client_events#trigger-events) to send data from client to client. The server component authenticates the request whenever an app tries to connect using the API key of the app you created earlier. This way you can verify if the request really came from your app.\n\nStart by initializing a `package.json` file:\n\n```\n    npm init\n```\n\nInstall the dependencies:\n\n```\n    npm install --save express body-parser pusher dotenv\n```\n\nCreate a `.env` file in the same folder as the `package.json` file and add your Pusher app details:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\nCreate a `server.js` file and add the following code:\n\n``` javascript\n    var express = require('express'); // for running a server\n    var bodyParser = require('body-parser'); // for processing JSON submitted in the request body\n    var Pusher = require('pusher'); // for connecting to Pusher\n    \n    require('dotenv').config();\n    \n    var app = express();\n    app.use(bodyParser.json()); // for parsing JSON strings passed in the request body\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded request body\n    \n    var pusher = new Pusher({ // connect to pusher\n      appId: process.env.APP_ID, // load the Pusher app settings from the .env file\n      key: process.env.APP_KEY, \n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER, \n    });\n    \n    app.get('/', function(req, res){ // for testing if the server is running\n      res.send('everything is good...');\n    });\n    \n    app.post('/pusher/auth', function(req, res) { // authenticate user's who's trying to connect\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nHere’s what the code above does:\n\n- **Line 1** imports [`express`](https://expressjs.com/), a web framework for Node.js which allows us to create a server and respond to specific routes.\n- **Line 2** imports `body-parser`, a middleware for parsing the request body so that the data passed in the request body can be accessed like an object. For example, in the `/pusher/auth` route, this allows us to do the following to access the socket ID from the request body:  `req.body.socket_id`.\n- **Line 3** imports the `pusher` package. This allows us to communicate with the Pusher app you created earlier in order to authenticate the user (line 25).\n- **Line 5** imports the `dotenv` package which loads up the config in the `.env` file you created earlier. You can see them being accessed as environment variables on lines 12 to 15.\n- **Lines 7 to 9** tells Express to use `body-parser` to create two different middleware entries, one for parsing JSON strings and the other for parsing URL encoded strings. The `extended` option is set to `false` because we’re not really expecting rich objects and arrays to be included in the request body. Instead, we’re only expecting plain JSON strings to be passed in the request body. \n- **Lines 18 to 20** are for testing if the server is running, you can access `http://localhost:5000` from your browser. If you see the string output “everything is good…” then it works.\n- **Lines 22 to 27** are for processing the authentication requests coming from the app. The authentication request is sent every time a client connects to Pusher from the app that we’ll be creating. Note that the code for authenticating users doesn’t really have any security measures in place. This means anyone can just use your Pusher app if they happen to get a hold of your Pusher app credentials. \n\n## Coding the app\n\nNow we’re ready to add the code for the app. First bootstrap a new React Native app:\n\n```\n    react-native init RNPusherTicTacToe\n```\n\nOnce it’s done, you can now install the dependencies:\n\n```\n    npm install --save lodash.range pusher-js react-native-prompt shortid react-native-spinkit@latest\n```\n\nOut of these dependencies, React Native Spinkit has some assets which need to be linked, so execute the following command to link those:\n\n```\n    react-native link\n```\n\nHere’s how the packages you’ve just installed are used in the app:\n- **pusher-js** - for using Pusher. This allows us to send messages to channels, and receive messages from channels in real-time.\n- **react-native-prompt** - for showing a prompt box, used for getting user input.\n- **react-native-spinkit** - for showing a spinner while waiting for another player to join the room.\n- **lodash.range** - for generating arrays which has a specific number of items.\n- **shortid** - for generating unique IDs when creating a room.\n\nNow we’re ready to add the code for the app. First, open the `index.android.js` file and replace the default code with the following:\n\n``` javascript\n    import React, { Component } from 'react';\n    import {\n      AppRegistry\n    } from 'react-native';\n    \n    import Main from './components/Main';\n    \n    export default class RNPusherTicTacToe extends Component {\n      \n      render() {\n        return (\n          \u003cMain /\u003e\n        );\n      }\n      \n    }\n    \n    AppRegistry.registerComponent('RNPusherTicTacToe', () =\u003e RNPusherTicTacToe);\n```\n\nMake sure that `RNPusherTicTacToe` matches the name you’ve given to the app when you created it with `react-native init`.\n\nNext, create a `components/Main.js` file and add the following:\n\n``` javascript\n    import React, { Component } from 'react';\n    \n    import {\n      StyleSheet,\n      Text,\n      View,\n      Button,\n      Alert\n    } from 'react-native';\n    \n    // include the dependencies\n    import Pusher from 'pusher-js/react-native';\n    import shortid  from 'shortid';\n    import Spinner from 'react-native-spinkit';\n    \n    // include the components\n    import Header from './Header'; \n    import Home from './Home'; // the default screen\n    import Board from './Board'; // the tic-tac-toe board and score UI\n```\n\nInside the constructor, initialize the state and the functions that will be used throughout the component:\n\n``` javascript\n    export default class Main extends Component {\n    \n      constructor() {\n        super();\n        this.state = {\n          username: '', // the name of the user\n          piece: '', // the piece assigned to the user\n          rival_username: '', // the name of the rival player\n          is_playing: false, // whether the user is currently playing or not \n          show_prompt: false, // whether the prompt box for entering the room name is visible\n          is_waiting: false, // whether the user is currently waiting for another player (rival) or not\n          is_room_creator: false // whether the user is the room's creator\n        }\n      \n        this.game_channel = null; // the Pusher channel where data regarding the game will be sent\n        this.is_channel_binded = false; // whether a channel has already been binded or not\n      \n        this.onChangeUsername = this.onChangeUsername.bind(this); // executes when the value of the username text field changes\n        this.onPressCreateRoom = this.onPressCreateRoom.bind(this); // executes when user creates a room\n        this.onPressJoinRoom = this.onPressJoinRoom.bind(this); // executes when user taps on the join room button\n        this.joinRoom = this.joinRoom.bind(this); // the function for joining a room\n        this.onCancelJoinRoom = this.onCancelJoinRoom.bind(this); // executes when user cancels joining a room\n        this.endGame = this.endGame.bind(this); // the function for ending the game\n    \n      }\n    }\n```\n\nBefore the component is mounted, connect to Pusher using the credentials you’ve been given when you created the Pusher app:\n\n``` javascript\n    componentWillMount() {\n      this.pusher = new Pusher('YOUR PUSHER API KEY', {\n        authEndpoint: 'YOUR AUTH ENDPOINT',\n        cluster: 'YOUR PUSHER APP CLUSTER',\n        encrypted: true\n      });\n    }\n```\n\nWhen the component is updated,  we need to check whether the user is already waiting for a rival and that a Pusher channel has not been bound to any events yet. If that’s the case, we listen for the `client-joined` event. When this happens, update the state so that the UI shows the game board. If the user is the room creator, trigger the same event so that the rival (the one who joined the room) is informed that the game can already start. \n\n``` javascript\n    componentDidUpdate() {\n      if(this.state.is_waiting \u0026\u0026 !this.is_channel_binded){\n        \n        this.game_channel.bind('client-joined', (data) =\u003e {\n          this.setState({\n            is_waiting: false,\n            is_playing: true,\n            rival_username: data.username\n          });\n    \n          if(this.state.is_room_creator){\n            // inform the one who joined the room that the game can begin\n            this.game_channel.trigger('client-joined', {\n              username: this.state.username // send the name of the room creator to the one who joined\n            });\n          }\n        });\n    \n        this.is_channel_binded = true;\n      }\n    }\n```\n\nIn the `render` method, the `Home` component is shown by default. It displays the UI for letting the user enter their name, and either join or create a new room. Once a rival joins a room, the game board will be shown. The `Spinner` component is used as the transition state between the two while waiting for a rival to join a room.\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cHeader title={\"RN Pusher Tic-Tac-Toe\"} /\u003e\n    \n          \u003cSpinner \n            style={styles.spinner} \n            isVisible={this.state.is_waiting} \n            size={75} \n            type={\"WanderingCubes\"} \n            color={\"#549eff\"}\n          /\u003e\n    \n          {\n            !this.state.is_playing \u0026\u0026 !this.state.is_waiting \u0026\u0026\n            \u003cHome \n              username={this.state.name} \n              onChangeUsername={this.onChangeUsername}\n              onPressCreateRoom={this.onPressCreateRoom} \n              onPressJoinRoom={this.onPressJoinRoom}  \n              show_prompt={this.state.show_prompt}\n              onCancelJoinRoom={this.onCancelJoinRoom}\n            /\u003e\n          }\n    \n          {\n            this.state.is_playing \u0026\u0026\n            \u003cBoard \n              channel={this.game_channel} \n              username={this.state.username} \n              piece={this.state.piece}\n              rival_username={this.state.rival_username}\n              is_room_creator={this.state.is_room_creator}\n              endGame={this.endGame}\n            /\u003e\n          }\n    \n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the function that’s executed when the text field for entering the user’s name changes:\n\n``` javascript\n    onChangeUsername(username) {\n      this.setState({username});\n    }\n```\n\nWhen a user taps on the *Create Room* button, generate a unique ID for the room and subscribe to a new Pusher channel using that ID. Here we’re using a [private channel](https://pusher.com/docs/client_api_guide/client_private_channels) so that we can send messages directly from the app:\n\n``` javascript\n    onPressCreateRoom() {\n     \n      let room_id = shortid.generate(); // generate a unique ID for the room\n      this.game_channel = this.pusher.subscribe('private-' + room_id); // subscribe to a channel\n      \n      // alert the user of the ID that the friend needs to enter \n      Alert.alert(\n        'Share this room ID to your friend',\n        room_id,\n        [\n          {text: 'Done'},\n        ],\n        { cancelable: false }\n      );\n    \n      // show loading state while waiting for someone to join the room\n      this.setState({\n        piece: 'X', // room creator is always X\n        is_waiting: true,\n        is_room_creator: true\n      });\n    \n    }\n```\n\nWhen a rival taps on the *Join Room* button, the prompt box is shown:\n\n``` javascript\n    onPressJoinRoom() {\n      this.setState({\n        show_prompt: true\n      });\n    }\n```\n\nOnce the rival joins the room, the following function is executed. The `room_id` is provided by the prompt box so we simply use it to subscribe to the same channel as the room creator. This allows the two users to communicate directly using this channel. Note that the code below doesn’t handle if a third person happens to join the room. You can add the functionality to check for the number of users in the room if you want. That way the app will reject it if there are already two users in the room.\n\n``` javascript\n    joinRoom(room_id) {\n      this.game_channel = this.pusher.subscribe('private-' + room_id);\n      // inform the room creator that a rival has joined\n      this.game_channel.trigger('client-joined', {\n        username: this.state.username\n      });\n      \n      this.setState({\n        piece: 'O', // the one who joins the room is always O\n        show_prompt: false,\n        is_waiting: true // wait for the room creator to confirm\n      });\n    }\n```\n\nWhen the user cancels joining of a room, simply hide the prompt box:\n\n``` javascript\n    onCancelJoinRoom() {\n      this.setState({\n        show_prompt: false\n      });\n    }\n```\n\nWhen the room creator decides to end the game, the app is reset back to its default state:\n\n``` javascript\n    endGame() {\n      // reset to the default state\n      this.setState({\n        username: '',\n        piece: '',\n        rival_username: '',\n        is_playing: false,\n        show_prompt: false,\n        is_waiting: false,\n        is_room_creator: false\n      });\n      // reset the game channel\n      this.game_channel = null;\n      this.is_channel_binded = false;\n    }\n```\n\nLastly, add the styles:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        padding: 20,\n        backgroundColor: '#F5FCFF',\n      },\n      spinner: {\n        flex: 1,\n        alignSelf: 'center',\n        marginTop: 20,\n        marginBottom: 50\n      }\n    });\n```\n\nNext is the `Header` component. Create a `components/Header.js`  file and add the following:\n\n``` javascript\n    import React, { Component } from 'react';\n    \n    import {\n      StyleSheet,\n      Text,\n      View\n    } from 'react-native';\n    \n    export default class Header extends Component {\n    \n      render() {\n        return (\n          \u003cView style={styles.title_container}\u003e\n            \u003cText style={styles.title}\u003e{this.props.title}\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n      }\n    \n    }\n    \n    const styles = StyleSheet.create({\n      title_container: {\n        flex: 1,\n      },\n      title: {\n        alignSelf: 'center',\n        fontWeight: 'bold',\n        fontSize: 30\n      }\n    });\n```\n\nAll this component does is to display the title of the app in the header.\n\nNext, create a `components/Home.js` file. As mentioned earlier, this is the default component that is shown the first time the user opens the app or when the room creator ends the game. \n\n``` javascript\n    import React, { Component } from 'react';\n    \n    import {\n      StyleSheet,\n      Text,\n      View,\n      TextInput,\n      Button\n    } from 'react-native';\n    \n    import Prompt from 'react-native-prompt';\n    \n    export default class Home extends Component {\n    \n      render() {\n    \n        return (        \n          \u003cView style={styles.content_container}\u003e\n            \u003cView style={styles.input_container}\u003e\n              \u003cTextInput\n                style={styles.text_input}\n                onChangeText={this.props.onChangeUsername}\n                placeholder={\"What's your name?\"}\n                maxLength={20}\n                value={this.props.username}\n              /\u003e\n            \u003c/View\u003e\n    \n            \u003cView style={styles.button_container}\u003e\n              \u003cButton\n                onPress={this.props.onPressCreateRoom}\n                title=\"Create Room\"\n                color=\"#4c87ea\"\n                style={styles.button}\n              /\u003e\n              \u003cButton\n                onPress={this.props.onPressJoinRoom}\n                title=\"Join Room\"\n                color=\"#1C1C1C\"\n                style={styles.button}\n              /\u003e\n            \u003c/View\u003e\n    \n            \u003cPrompt\n              title=\"Enter Room Name\"\n              visible={this.props.show_prompt}\n              onSubmit={this.props.joinRoom}\n              onCancel={this.props.onCancelJoinRoom}\n            /\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      content_container: {\n        flex: 1\n      },\n      input_container: {\n        marginBottom: 20\n      },\n      button_container: {\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n        alignItems: 'center'\n      },\n      text_input: {\n        backgroundColor: '#FFF',\n        height: 40,\n        borderColor: '#CCC', \n        borderWidth: 1\n      },\n      button: {\n        flex: 1\n      }\n    });\n```\n\nNext, create a `components/Board.js` file. This component serves as the main meat of the app because it’s where the game happens. \n\nFirst, include the components and packages that we’ll be needing:\n\n``` javascript\n    import React, { Component } from 'react';\n    \n    import {\n      StyleSheet,\n      Text,\n      View,\n      TextInput,\n      Button,\n      TouchableHighlight,\n      Alert\n    } from 'react-native';\n    \n    import range from 'lodash.range'; \n```\n\nIn the constructor, bind the methods for generating the content for the board (3x3 board). The possible combinations for getting a score are also declared. The `ids` are used as the IDs for referring to the individual blocks. As you can see, it’s an array which has three arrays in it. Each of these arrays pertains to the rows in the board, and its items pertains to the individual blocks. So when referring to the second column in the first row of the board, you can get the ID for that by using `this.ids[0][1]`. This will then return `1`. The ID will be used later on to determine the scores based on the `possible_combinations` array.\n\n``` javascript\n    export default class Board extends Component {\n    \n      constructor() {\n        super();\n        this.generateRows = this.generateRows.bind(this); // bind the method for generating the rows for the board\n        this.generateBlocks = this.generateBlocks.bind(this); // bind the method for generating individual blocks for each row\n        \n        // the possible combinations for getting a score in a 3x3 tic-tac-toe board \n        this.possible_combinations = [\n          [0, 3, 6],\n          [1, 4, 7],\n          [0, 1, 2],\n          [3, 4, 5],\n          [2, 5, 8],\n          [6, 7, 8],\n          [0, 4, 8],\n          [2, 4, 6]\n        ];\n        \n        // the IDs of the individual blocks\n        this.ids = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8]\n        ];\n        \n        // the individual rows\n        this.rows = [\n          range(3).fill(''), // make an array with 3 elements and set each item to an empty string\n          range(3).fill(''),\n          range(3).fill('')\n        ];\n    \n        this.state = {\n          moves: range(9).fill(''), // the pieces (X or O) used on each block\n          x_score: 0, // score of the room creator\n          o_score: 0 // score of the rival\n        }\n    \n    }\n```\n\nRight below the declaration for `this.ids` is the array which will be used to generate the rows in the board. \n\nOnce the component is mounted, we then want to listen for the `client-make-move` event to happen. This event is triggered every time a user places their piece (either “X” or “O”) on the board. Note that this will only be triggered on the rival and not the user who has sent the event.\n\n``` javascript\n    componentDidMount() {\n      this.props.channel.bind('client-make-move', (data) =\u003e {\n        let moves = this.state.moves;\n        let id = this.ids[data.row_index][data.index]; // get the ID based on the row index and block index\n        moves[id] = data.piece; // set the piece\n        \n        // update the UI\n        this.setState({\n          moves\n        });\n        \n        this.updateScores.call(this, moves); // update the user scores\n      });\n    }\n```\n\nEvery time a move is made, the `updateScores` function is executed. This loops through all the possible combinations. It uses the [`every()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every) method to check whether a specific piece was used on each of the items for a possible combination. For example, if “X” is used for blocks 0, 1, and 2, then 1 point is rewarded to the user who has “X” as their piece.\n\n``` javascript\n    updateScores(moves) {\n    \n      var pieces = {\n        'X': 0,\n        'O': 0\n      }\n    \n      function isInArray(moves, piece, element, index, array){\n        return moves[element] \u0026\u0026 moves[element] == piece; // check if there's a piece assigned to a specific block and that piece is the piece we're looking for (either \"X\" or \"O\")\n      }\n    \n      this.possible_combinations.forEach((p_row) =\u003e {\n        if(p_row.every(isInArray.bind(null, moves, 'X'))){\n          pieces['X'] += 1;\n        }else if(p_row.every(isInArray.bind(null, moves, 'O'))){\n          pieces['O'] += 1;\n        }\n      });\n    \n      this.setState({\n        x_score: pieces['X'],\n        o_score: pieces['O']\n      });\n            \n    }\n```\n\nHere’s the `render()` method. It uses the `generateRows()` method to generate the content for the board. Below that is the score display for the two users.\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.board_container}\u003e\n          \u003cView style={styles.board}\u003e\n          {this.generateRows()}\n          \u003c/View\u003e\n        \n          \u003cView style={styles.scores_container}\u003e\n            \u003cView style={styles.score}\u003e\n              \u003cText style={styles.user_score}\u003e{this.state.x_score}\u003c/Text\u003e\n              \u003cText style={styles.username}\u003e{this.props.username} (x)\u003c/Text\u003e\n            \u003c/View\u003e\n        \n            \u003cView style={styles.score}\u003e\n              \u003cText style={styles.user_score}\u003e{this.state.o_score}\u003c/Text\u003e\n              \u003cText style={styles.username}\u003e{this.props.rival_username} (o)\u003c/Text\u003e\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the `generateRows()` method:\n\n``` javascript\n    generateRows() {\n      return this.rows.map((row, index) =\u003e {\n        return (\n          \u003cView style={styles.row} key={index}\u003e\n            {this.generateBlocks(row, index)}\n          \u003c/View\u003e\n        );\n      });\n    }\n```\n\nThe `generateBlocks()` method is used for generating the individual blocks on each row. It uses the `TouchableHighlight` component to create a view which can be tapped on by the user. Each block displays the piece of the user who first tapped on it. Tapping on a block executes the `onMakeMove()` method which places the user’s piece on that block.\n\n``` javascript\n    generateBlocks(row, row_index) {\n      return row.map((block, index) =\u003e {\n        let id = this.ids[row_index][index];\n        return (\n          \u003cTouchableHighlight \n            key={index} \n            onPress={this.onMakeMove.bind(this, row_index, index)} \n            underlayColor={\"#CCC\"} \n            style={styles.block}\u003e\n              \u003cText style={styles.block_text}\u003e\n              {this.state.moves[id]}\n              \u003c/Text\u003e\n          \u003c/TouchableHighlight\u003e        \n        );\n      });\n    }\n```\n\nThe `onMakeMove()` method receives the `row_index` and the block `index`. These allow us to get the block `id` which is used to set the piece on a specific block. After that, the `updateScores()` is also called to update the user scores. To update the UI of the rival, the details of the move is sent using the `client-make-move` event.\n\n``` javascript\n    onMakeMove(row_index, index) {\n      let moves = this.state.moves;\n      let id = this.ids[row_index][index];\n    \n      if(!moves[id]){ // nobody has occupied the space yet\n        moves[id] = this.props.piece;\n        this.setState({\n          moves\n        });\n    \n        this.updateScores.call(this, moves);\n        \n        // inform the rival that a move is made\n        this.props.channel.trigger('client-make-move', {\n          row_index: row_index,\n          index: index,\n          piece: this.props.piece\n        });   \n      }\n    }\n```\n\nOnce the board has been filled up with pieces, ask the room creator if they want to restart or end the game. If the room creator decides to restart the game the board is simply reset to its default state, otherwise the app is reset to its default state (the same as when the app is first opened).\n\n``` javascript\n    if(this.props.is_room_creator \u0026\u0026 moves.indexOf('') == -1){\n      Alert.alert(\n        \"Restart Game\", \n        \"Do you want to restart the game?\",\n        [\n          {\n            text: \"Nope. Let's call it quits.\", \n            onPress: () =\u003e {\n              this.setState({\n                moves: range(9).fill(''),\n                x_score: 0,\n                o_score: 0\n              });\n              this.props.endGame();\n            },\n            style: 'cancel'\n          },\n          {\n            text: 'Heck yeah!', \n            onPress: () =\u003e {\n              this.setState({\n                moves: range(9).fill(''),\n                x_score: 0,\n                o_score: 0\n              });\n            }  \n          },\n        ],\n        { cancelable: false } \n      );\n    }\n```\n\nLastly, add the styles:\n\n``` javascript\n    const styles = StyleSheet.create({\n      board_container: {\n        flex: 9\n      },\n      board: {\n        flex: 7,\n        flexDirection: 'column'\n      },\n      row: {\n        flex: 1,\n        flexDirection: 'row',\n        borderBottomWidth: 1,\n      },\n      block: {\n        flex: 1,\n        borderRightWidth: 1,\n        borderColor: '#000',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      block_text: {\n        fontSize: 30,\n        fontWeight: 'bold'\n      },\n      scores_container: {\n        flex: 2,\n        flexDirection: 'row',\n        alignItems: 'center'\n      },\n      score: {\n        flex: 1,\n        alignItems: 'center'\n      },\n      user_score: {\n        fontSize: 25,\n        fontWeight: 'bold'\n      },\n      username: {\n        fontSize: 20\n      }\n    });\n```\n\n## Testing the app\n\nNow that you’ve built the app, it’s now time to try it out. The first thing that you need to do is run the server:\n\n```\n    node server.js\n```\n\nYou can run the app with the following command:\n\n``` javascript\n    react-native run-android\n```\n\nBe sure that you already have a connected device or an emulator opened when you execute this.\n\nIf you’re using either Genymotion or the Android emulator, and you don’t really want to test on a real device, then you can use the browser to simulate the rival. \n\nOnce that’s done, run the app and create a new room. Then copy the room ID shown in the alert box.\n\nNext, go to your Pusher app’s dashboard and click on the **Debug Console** tab.\nClick on **Show event creator** and enter  `private-ROOM_ID` for the **Channel**. Be sure to replace `ROOM_ID` with the actual ID of the room then set `client-joined` as the value of the **Event.** The value for the **Data** is:\n\n``` javascript\n    {\n      \"username\": \"doraemon\"\n    }\n```\n\nUse the screenshot below as a reference:\n\n![tic-tac-toe-react-native-pusher-debug-console](//images.ctfassets.net/1es3ne0caaid/5narIxYz1SCGsOQySYIym/2cb538a597f45659c12201255d89c8e0/tic-tac-toe-react-native-pusher-debug-console.png)\n\n\nOnce that’s done, click on the **Send event** button.  This should trigger the app to change its UI to the actual game board.  To trigger some moves, set the **Event** name to `client-make-move` then add the details of the move on the **Data** field:\n\n``` javascript\n    {\n      \"row_index\": 0,\n      \"index\": 0,\n      \"piece\": \"O\"\n    }\n```\n\nThis will place the “O” piece on the first box in the game board.\n\nFrom there you can place a different value for the `index` and `row_index` to emulate the game play. \n\n## Deploying the server\n\nThe method I showed you above is great if you only want to test inside your own local network. But what if you want to test it out with your friends outside the network? For that, you could use [**Now**](https://zeit.co/now). I’m not going to go into details on how to deploy the server, but you can check out their [docs](https://zeit.co/docs). *Now* is free to use, the only downside is that your code will be available publicly. \n\n\n## Conclusion\n\nThat’s it! In this tutorial you’ve learned how to re-create Tic-Tac-Toe using Pusher. As you have seen, Pusher really makes it easy to implement real-time features in games. While Tic-Tac-Toe is a very simple game, this doesn’t mean that Pusher can only be used in simple games. You can pretty much use Pusher in any real-time game you can think of. You can find the source code for this tutorial [on GitHub](https://github.com/anchetaWern/RN-Pusher-TicTacToe/tree/master/app)","metaTitle":"Creating a realtime game with React Native","metaDescription":"This tutorial uses React Native to build an Android app where users can play tic-tac-toe."}}],"defaultValue":"React","queryType":"tag","pages":7,"route":"/tutorials","query":{"tag":"React","page":"5"}}},"page":"/tutorials","query":{"tag":"React","page":"5"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=React&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:15 GMT -->
</html>