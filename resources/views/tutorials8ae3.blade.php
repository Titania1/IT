<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=React&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:14 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">45</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; React</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials4426.html?tag=React" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials9a85.html?product=Beams&amp;tag=React" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; React"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/comment-voting-react-node.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a comment voting system with React and Node</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial will show you how to create a simple comments ranking system using React and Node. Users will be able to c...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-zapier-tweet-stream.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to stream user tweets with Zapier and React</h3><p class="css-k12xad e5jrto45">Learn how to use Zapier, together with Pusher Channels, to create a live tweet stream. You will build a simple web app w...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/spotify-history-react-node.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">View your live Spotify history with React and Node</h3><p class="css-k12xad e5jrto45">Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify acco...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-sharing-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a photo sharing app with React Native</h3><p class="css-k12xad e5jrto45">Use React Native, Node.js and Imgur to create a photo sharing app. Users will be able to follow their friends and share ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-progress-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a live progress bar with React</h3><p class="css-k12xad e5jrto45">This brief tutorial will show you how to create a simple progress bar in React. It will receive updates from a Node.js b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-news-feed-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live news feed with React</h3><p class="css-k12xad e5jrto45">This brief tutorial will show you how to build a live news feed app using React and Node.js. You will integrate NewAPI t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-feed-react-cloudinary.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live photo feed using React and Cloudinary</h3><p class="css-k12xad e5jrto45">In this short tutorial, create a live photo feed using Node, React and Cloudinary. Upload and publish photos in realtime...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chatbot-preact-witai.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a chatbot with Preact and Wit.ai</h3><p class="css-k12xad e5jrto45">Build a chatbot using Preact and Wit.ai, with a Node.js backend. Create custom entities, and implement realtime function...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-blog-kubeless.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kubernetes<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Adding realtime functionality to a blog using Kubeless</h3><p class="css-k12xad e5jrto45">In this tutorial you will create a simple blog using serverless architecture for the backend, specifically Kubeless. You...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials4f4f.html?product=Channels&amp;tag=React&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials4f4f.html?product=Channels&amp;tag=React&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials8ae3.html?product=Channels&amp;tag=React&amp;page=2" class="css-2wakph edg0byb1">2</a><a href="tutorialsed72.html?product=Channels&amp;tag=React&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorials8ec0.html?product=Channels&amp;tag=React&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials7e38.html?product=Channels&amp;tag=React&amp;page=5" class="css-5s6711 edg0byb1">5</a><a href="tutorialsed72.html?product=Channels&amp;tag=React&amp;page=3" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":45,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"45sGlPxgJ2yyIi2oWscsIy","type":"Entry","createdAt":"2019-01-31T18:16:19.106Z","updatedAt":"2019-01-31T18:16:19.106Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a comment voting system with React and Node","url":"comment-voting-react-node","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/realtime-comments","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2019-01-31","description":"This tutorial will show you how to create a simple comments ranking system using React and Node. Users will be able to comment on a demo post, and vote on other comments, with higher ranked comments being displayed above lower ranked responses.","prerequisite":"You will need Node 6+ installed on your machine. Basic knowledge of React will be helpful.","content":"In this tutorial, we’ll be integrating Channels’ capabilities into a comment system built with React. If you want to look at the complete code used for this tutorial, you can find it in this [GitHub repository](https://github.com/ayoisaiah/realtime-comments).\n\nTo make the comments section of a website more engaging, and so that readers can find the most useful or interesting comments, many comments software include voting capabilities that allow the best comments rise to the top while the irrelevant ones sink to the bottom.\n\nThe problem with many of them is that they are not updated in realtime. Some even require a page refresh before you can see the latest comments and votes. But with [Pusher Channels](https://pusher.com/docs), we can build a comment system that can be updated in realtime across all connected clients without requiring a refresh.\n\n## Prerequisites\n\nMake sure you have Node.js (version 6 or later) and npm installed on your computer. Otherwise, you can install Node and npm by following the [instructions on this page](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm). You also need to have a basic experience with building React and Node.js applications as I will not be explaining the basics of React and Node in this tutorial.\n\n## Sign up for Pusher Channels\n\nHead over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, navigate to the API Keys tab and take note of your app credentials as we’ll be using them in the next section.\n\n![react-comment-vote-keys](//images.ctfassets.net/1es3ne0caaid/162DRfOkOU64o2k8Y6C2CQ/457ceaa977c85a7d9cac5160c93b70ee/react-comment-vote-keys.png)\n\n## Set up the server\n\nCreate a new project folder in your filesystem. You can call it `realtime-comments` or something like that. Next, launch the terminal on your machine, `cd` into your project folder and run `npm init -y` to initialize the project with a `package.json` file.\n\nNext, run the command below to install all the dependencies we’ll be making use of on the server side:\n\n```\n    npm install express body-parser cors dotenv nedb pusher --save\n```\n\nHere’s what each package does:\n\n- [express](https://expressjs.com): A minimal and flexible Node.js server.\n- [nedb](https://github.com/louischatriot/nedb): In memory database for Node.js.\n- [body-parser](https://github.com/expressjs/body-parser): Express middleware for parsing incoming request bodies.\n- [dotenv](https://www.npmjs.com/package/dotenv): Loads environmental variables from `.env` file into `process.env`.\n- [pusher](https://pusher.com/): Node.js SDK for Pusher Channels.\n- [cors](https://github.com/expressjs/cors): For enabling [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) requests\n\nAfter the installation is complete, create a new `.env` file at the root of your project directory, and structure it as follows:\n\n```\n    // .env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nHardcoding credentials in your code is a bad practice so we’re going to use the  `dotenv` package to load the app’s credentials from the `.env` file and make them available on `process.env`. You should not include this file in your source control system.\n\nGo ahead and create the server entry file `server.js` in the root of your project directory. This file is where we’ll set up our Node server, routing and in-memory database for saving comments and votes. We’ll also trigger Channels events when a new comment or vote is made so that our app frontend can be updated promptly.\n\nOpen up `server.js` in your text editor and paste in the following code:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: '.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    const Datastore = require('nedb');\n    \n    const app = express();\n    \n    const db = new Datastore();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      useTLS: true,\n    });\n    \n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nThe above code creates a simple Node server that runs on port 5000. We’re not doing much yet. We’ll need to create some routes to handle when a new comment is made or when a comment is voted on so that we can trigger events.\n\nLet’s add a route that sends all existing comments to the client on load:\n\n``` javascript\n    // server.js\n    ...\n    \n    app.use(bodyParser.json());\n    \n    app.get('/', (req, res) =\u003e {\n      db.find({}, (err, data) =\u003e {\n        if (err) return res.status(500).send(err);\n    \n        res.json(data);\n      });\n    });\n    \n    ...\n```\n\nNext, add a route that receives a comment from the client, saves it to the in-memory database and triggers a new Channels event.\n\n``` javascript\n    // server.js\n    ...\n    \n    app.get('/', (req, res) =\u003e {\n      db.find({}, (err, data) =\u003e {\n        if (err) return res.status(500).send(err);\n    \n        res.json(data);\n      });\n    });\n    \n    app.post('/comment', (req, res) =\u003e {\n      db.insert(Object.assign({}, req.body), (err, newComment) =\u003e {\n        if (err) {\n          return res.status(500).send(err);\n        }\n    \n        pusher.trigger('comments', 'new-comment', {\n          comment: newComment,\n        });\n    \n        res.status(200).send('OK');\n      });\n    });\n    \n    ...\n```\n\nWith Channels, all we need to do to trigger an update on our app frontend is to use the `trigger` method on the `pusher` instance that we have created. Here, we’re triggering an event named `new-comment` to Channels on a channel called `comments`, and passing the new comment in the event payload.\n\nFor the client to receive an update, it needs to subscribe to the `comments` channel first. I’ll show you how to set this up in the next section.\n\nBefore you continue, install the [nodemon](https://www.npmjs.com/package/nodemon) package globally, so that you don’t have to restart your server manually whenever your code changes:\n\n```\n    npm install -g nodemon\n```\n\nRun the command below to start the server with `nodemon`:\n\n```\n    nodemon server.js\n```\n\n## Set up the application frontend\n\nLet’s use the `create-react-app` package to bootstrap our React application. You can install it on your machine by running `npm install -g create-react-app` in the terminal.\n\nOnce the installation is done, run the command below to setup the React app:\n\n```\n    create-react-app client\n```\n\nNext, `cd` into the newly created `client` directory and install the other dependencies which we’ll be needing for the application frontend:\n\n```\n    npm install pusher-js axios --save\n```\n\n- [pusher-js](https://pusher.com): Client SDK for Pusher.\n- [axios](https://github.com/axios/axios): Promise based HTTP client for the browser and Node.\n\nFinally, start the development server by running `npm start` from within the root of the `client` directory and navigate to http://localhost:3000 in your browser.\n\n## Add the styles for the app\n\nWithin the `client` directory, open up `src/App.css` and change its contents to look like this:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      width: 100%;\n      max-width: 600px;\n      margin: 0 auto;\n    }\n    \n    .post {\n      text-align: center;\n    }\n    \n    label {\n      display: block;\n      margin-bottom: 10px;\n      font-weight: bold;\n    }\n    \n    input, textarea {\n      width: 100%;\n      margin-bottom: 20px;\n      border: 1px solid #dedede;\n      padding: 10px;\n    }\n    \n    button {\n      display: inline-block;\n      height: 38px;\n      padding: 0 30px;\n      color: white;\n      text-align: center;\n      font-size: 11px;\n      font-weight: 700;\n      line-height: 38px;\n      letter-spacing: .1rem;\n      text-transform: uppercase;\n      text-decoration: none;\n      white-space: nowrap;\n      border-radius: 2px;\n      background-color: #331550;\n      border: 1px solid #331550;\n      cursor: pointer;\n      box-sizing: border-box;\n    }\n    \n    .comment {\n      padding-top: 20px;\n      padding-bottom: 20px;\n      border-bottom: 1px solid #ccc;\n    }\n    \n    .voting {\n      display: flex;\n      justify-content: space-between;\n      align-content: center;\n    }\n    \n    .upvote {\n      background-color: #073525;\n      border: 1px solid #073525;\n      margin-right: 10px;\n    }\n    \n    .downvote {\n      background-color: #FF0026;\n      border: 1px solid #FF0026;\n    }\n```\n\n## Post comments and display them in realtime\n\nOpen up `client/src/App.js` in your text editor and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import axios from 'axios';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        username: '',\n        newComment: '',\n        comments: [],\n      };\n    \n      updateInput = event =\u003e {\n        const { name, value } = event.target;\n        this.setState({\n          [name]: value,\n        });\n      };\n    \n      postComment = event =\u003e {\n        event.preventDefault();\n        const { username, newComment } = this.state;\n        if (username.trim() === '' || newComment.trim() === '') return;\n        \n        const data = {\n          name: username,\n          text: newComment,\n          votes: 0,\n        };\n    \n        axios\n          .post('http://localhost:5000/comment', data)\n          .then(() =\u003e {\n            this.setState({\n              username: '',\n              newComment: '',\n            });\n          })\n          .catch(error =\u003e console.log(error));\n      };\n    \n      componentDidMount() {\n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n        \n        axios.get('http://localhost:5000').then(({ data }) =\u003e {\n          this.setState({\n            comments: [...data],\n          });\n        }).catch(error =\u003e console.log(error))\n        \n        const channel = pusher.subscribe('comments');\n        channel.bind('new-comment', data =\u003e {\n          this.setState(prevState =\u003e {\n            const { comments } = prevState;\n            comments.push(data.comment);\n    \n            return {\n              comments,\n            };\n          });\n        });\n      }\n    \n      render() {\n        const { username, newComment, comments } = this.state;\n    \n        const userComments = comments.map(e =\u003e (\n          \u003carticle className=\"comment\" key={e._id}\u003e\n            \u003ch1 className=\"comment-user\"\u003e{e.name}\u003c/h1\u003e\n            \u003cp className=\"comment-text\"\u003e{e.text}\u003c/p\u003e\n            \u003cdiv className=\"voting\"\u003e\n              \u003cdiv className=\"vote-buttons\"\u003e\n                \u003cbutton className=\"upvote\"\u003e\n                  Upvote\n                \u003c/button\u003e\n                \u003cbutton className=\"downvote\"\u003e\n                  Downvote\n                \u003c/button\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"votes\"\u003eVotes: {e.votes}\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/article\u003e\n        ));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003carticle className=\"post\"\u003e\n              \u003ch1\u003eInteresting Video\u003c/h1\u003e\n              \u003ciframe\n                title=\"video\"\n                width=\"560\"\n                height=\"315\"\n                src=\"https://www.youtube.com/embed/PC60fAKJiek\"\n                frameborder=\"0\"\n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                allowfullscreen\n              /\u003e\n              \u003cp\u003eLeave a comment if you enjoyed the video above\u003c/p\u003e\n            \u003c/article\u003e\n            \u003csection className=\"comments-form\"\u003e\n              \u003cform onSubmit={this.postComment}\u003e\n                \u003clabel htmlFor=\"username\"\u003eName:\u003c/label\u003e\n                \u003cinput\n                  className=\"username\"\n                  name=\"username\"\n                  id=\"username\"\n                  type=\"name\"\n                  value={username}\n                  onChange={this.updateInput}\n                /\u003e\n    \n                \u003clabel htmlFor=\"new-comment\"\u003eComment:\u003c/label\u003e\n                \u003ctextarea\n                  className=\"comment\"\n                  name=\"newComment\"\n                  id=\"new-comment\"\n                  value={newComment}\n                  onChange={this.updateInput}\n                /\u003e\n                \u003cbutton type=\"submit\"\u003eHave your say\u003c/button\u003e\n              \u003c/form\u003e\n            \u003c/section\u003e\n            \u003csection className=\"comments-section\"\u003e{userComments}\u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nAs you can see, we have a simple form that takes the name of the user and their comment. Once the form is submitted, we initialize a `votes` property on the comment to keep track of the number of votes and post it to the `/comment` route we created on the server earlier.\n\nIn the `componentDidMount()` lifecycle hook, we’re using the Pusher client library to latch on to events emitted by the server so that we can update the application state and display the latest comments instantly. Here, we’re listening for the `new-comment` event on the `comments` channel. Once the `new-comment` event is triggered, our application is updated with the new comment as shown below:\n\n![react-comment-vote-demo-1](//images.ctfassets.net/1es3ne0caaid/t5nU8FSdMcywGKqeeUyAI/e54eb2292f53bf1eb8ae3fe49356bf68/react-comment-vote-demo-1.gif)\n\nNote that you need to replace with `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e`  with the appropriate values from your app dashboard before running the code.\n\n## Add voting capabilities\n\nEach comment has an **upvote** and **downvote** button, but it doesn’t do anything just yet. Let’s make it so that when the upvote button is clicked, the votes count is increased by one and when the downvotes button is clicked, the votes count is decreased by one.\n\nUpdate `client/src/App.js` to look like this:\n\n``` javascript\n    // client/src/App.js\n    ...\n      vote = (id, num) =\u003e {\n        axios.post('http://localhost:5000/vote', {\n          id,\n          vote: num,\n        });\n      };\n    \n      componentDidMount() {\n        ...\n        const channel = pusher.subscribe('comments');\n        channel.bind('new-comment', data =\u003e {\n          this.setState(prevState =\u003e {\n            const { comments } = prevState;\n            comments.push(data.comment);\n    \n            return {\n              comments,\n            };\n          });\n        });\n    \n        channel.bind('new-vote', data =\u003e {\n          let { comments } = this.state;\n          comments = comments.map(e =\u003e {\n            if (e._id === data.comment._id) {\n              return data.comment;\n            }\n    \n            return e;\n          });\n    \n          this.setState({\n            comments,\n          });\n        });\n      }\n    \n      render() {\n        const { username, newComment, comments } = this.state;\n    \n        const userComments = comments.map(e =\u003e (\n          \u003carticle className=\"comment\" key={e._id}\u003e\n            \u003ch1 className=\"comment-user\"\u003e{e.name}\u003c/h1\u003e\n            \u003cp className=\"comment-text\"\u003e{e.text}\u003c/p\u003e\n            \u003cdiv className=\"voting\"\u003e\n              \u003cdiv className=\"vote-buttons\"\u003e\n                \u003cbutton className=\"upvote\" onClick={() =\u003e this.vote(e._id, 1)}\u003e\n                  Upvote\n                \u003c/button\u003e\n                \u003cbutton className=\"downvote\" onClick={() =\u003e this.vote(e._id, -1)}\u003e\n                  Downvote\n                \u003c/button\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"votes\"\u003eVotes: {e.votes}\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/article\u003e\n        ));\n      }\n```\n\nOnce the **upvote** or **downvote** button is clicked, the ID of the comment and is sent to the server along with a number that increments or decrements the votes count. Notice that we’re now listening for the `new-vote` event in `componentDidMount()` so that we can easily update the votes count on the frontend, once this event is triggered on the server.\n\nLet’s go ahead and create the `/vote` route in `server.js` and trigger the `new-vote` event once a new vote is made on a comment. Add the following code to your `server.js` file below the `/comment` route:\n\n``` javascript\n    // server.js\n    \n    ...\n    \n    app.post('/vote', (req, res) =\u003e {\n      const { id, vote } = req.body;\n      db.findOne({ _id: id }, function (err, doc) {\n        if (err) {\n          return res.status(500).send(err);\n        }\n    \n        db.update({ _id: id }, { $set: { votes: doc.votes + vote } }, { returnUpdatedDocs: true }, (err, num, updatedDoc) =\u003e {\n          if (err) return res.status(500).send(err);\n    \n          pusher.trigger('comments', 'new-vote', {\n            comment: updatedDoc,\n          });\n        });\n      });\n    });\n    \n    ...\n```\n\nAs you can see, once a new vote is received, the record is updated in the database and we trigger the `new-vote` event with the updated comment in its payload. This allows us to update the vote count on each comment as soon as they happen.\n\n![react-comment-vote-demo-2](//images.ctfassets.net/1es3ne0caaid/2LcaBtMP040yss2g2uUyMM/0bb9c604e34d1ba4a84b1d9b2495b6ce/react-comment-vote-demo-2.gif)\n\n## Wrap up\n\nIn this tutorial, we learned how easy it is to create a live comments system and update several clients in realtime with Pusher Channels. If you want to learn more about Channels, visit its [documentation](https://pusher.com/docs) page or check out more [tutorials](https://pusher.com/tutorials) on the Pusher blog.\n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/realtime-comments).","metaTitle":"Build a comment voting system with React and Node","metaDescription":"This tutorial will show you how to create a simple comments ranking system using React and Node. Users will be able to comment on a demo post, and vote on other comments, with higher ranked comments being displayed above lower ranked responses."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3bqfumgc88gaOCYy2weYSs","type":"Entry","createdAt":"2018-12-12T20:28:47.063Z","updatedAt":"2018-12-12T20:28:47.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to stream user tweets with Zapier and React","url":"react-zapier-tweet-stream","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/tweet-stream","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-12-12","description":"Learn how to use Zapier, together with Pusher Channels, to create a live tweet stream. You will build a simple web app with Node and React, and use Zapier to connect to a Twitter feed. Pusher will supply the realtime functionality. ","prerequisite":"You will need Node 6+ installed on your machine. Some experience of React will be helpful.","content":"In this tutorial, we’ll explore how Pusher Channels can be used in conjunction with [Zapier](https://zapier.com/) to display updates to a user’s Twitter feed on a webpage. If you want to play around with the code as you read this tutorial, visit this [GitHub repository](https://github.com/ayoisaiah/tweet-stream) which contains the final version of the code for you to check out and run locally.\n\n## Prerequisites\n\nPrior experience with building [React](https://reactjs.org/) and Node.js applications is required to complete this tutorial, but you don’t need to know how to use Pusher Channels. You also need to have Node.js (version 6 and later) as well as npm (version 5 or later) installed on your machine. You can use the commands `node -v` and `npm -v` to see which versions of [Node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) you have installed.\n\n## Getting started\n\nCreate a new folder for this project in your filesystem. You can call it `tweet-stream` or any other name that you prefer. Open a new terminal window and `cd` into the new directory you just created, then run `npm init -y` to initialize the project with a `package.json` file.\n\nNext, run the following command to install all the dependencies we’ll be needing to build the server component of the application:\n\n```\n    npm install express body-parser cors dotenv pusher -S\n```\n\nOnce the installation completes, create the following files in the root of your project directory: `server.js` and `variables.env`.\n\n## Sign up for Pusher\n\nBefore we can utilize the features of Pusher Channels in our application, we need to [sign up for a free Pusher account](https://dashboard.pusher.com/accounts/sign_up). Once your account is created, select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Retrieve your credentials from the **API Keys** tab, and then add the following to the `variable.env` file you just created.\n\n```\n    // variables.env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Set up the server\n\nOpen up `server.js` in your text editor and paste in the following:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    const bodyParser = require('body-parser');\n    \n    // Create an express app\n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    app.post('/', (req, res) =\u003e {\n      console.log(req.body);\n    });\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nAs you can see, we’ve set up just the one route where new tweets will be posted to. For now we’re just logging the request body to the console, but we’ll revisit this section in the later parts of the tutorial.\n\nYou can start the server by running `node server.js` in the terminal. It should now be running on port 5000.\n\n## Expose your local server to the world with ngrok\n\nTo make your local server is accessible to the outside world, you can use a service like [ngrok](http://ngrok.com). Visit the ngrok website to find out [how to install and set up ngrok](https://ngrok.com/download) on your computer. Once you have it installed, start an HTTP tunnel on port 5000 by running the following command in a new terminal window:\n\n```\n    ./ngrok http 5000\n```\n\nIf your webhook server is listening on another port, make sure to provide the correct port when starting the HTTP tunnel. You will be given a couple of URLs but you only need the last one which is on the secure (HTTPS) protocol.\n\n![react-zapier-ngrok](//images.ctfassets.net/1es3ne0caaid/49KdyK8n9eO0AcuYMsMaI6/f4ee46edc5788d93aea1cab3d960d15d/react-zapier-ngrok.png)\n\n## Sign up for Zapier\n\nZapier is a service that allows you to integrate between several applications. To use Zapier, you need to [sign up for an account](https://zapier.com/sign-up/). Once your account is created, [go here](https://zapier.com/app/home)  and click the **Make a Zap!** button to create your first Zap.\n\nUnder **Choose a Trigger App,** select Twitter and choose **User Tweet** under **Twitter Trigger.**\n\n![react-zapier-1](//images.ctfassets.net/1es3ne0caaid/1bjW2hrALkWoC0ccY8wgMW/0b724a46b5bcc07ce83059ce0182b85b/react-zapier-1.png)\n\nHit the **Continue** button to move on to the next step. Connect a Twitter account that will be used for this Zap. You can use your existing Twitter account, or create a new one if you prefer. Once you have connected account, select it and hit **Save + Continue**. \n\n![react-zapier-2](//images.ctfassets.net/1es3ne0caaid/2GYUBhSq40UI0aaoUYKAm0/e2291fff2c2d7e5d620dc3772deac81b/react-zapier-2.png)\n\nOn the screen that says **Pick A Sample To Set Up Your Zap**, before you click **Pull in Samples**, make sure there is a recent enough tweet on the account you set up. Otherwise, send a tweet out before clicking the button.\n\n![react-zapier-3](//images.ctfassets.net/1es3ne0caaid/6bbckG38xqW2QsmKC2QW6k/80367b85eb62097dd8b566d85b155a26/react-zapier-3.png)\n\nYou should see the following screen once a sample tweet has been pulled from your Twitter account. Just hit the **Continue** button.\n\n![react-zapier-4](//images.ctfassets.net/1es3ne0caaid/1EwLTc8gIQSAekmGUkqE4G/98c08a0d7260017e2e65d19e1f5b6cf5/react-zapier-4.png)\n\nYou need to setup an action step. Click the link highlighted in the screenshot below to add an action app.\n\n![react-zapier-5](//images.ctfassets.net/1es3ne0caaid/2kmmNZZBy4UmqOe6o4us6W/6c71656cd3afbafb5c5e4be706537f91/react-zapier-5.png)\n\nUnder **Choose an Action app** select **Webhooks by Zapier Action,** then select **POST** under the  **CREATE** heading and click the **Continue** button.\n\n![react-zapier-6](//images.ctfassets.net/1es3ne0caaid/2YiZA7jymAEOKm0Qq08Kqy/861b4d8fd9d70cf9a449f77e678a1635/react-zapier-6.png)\n\nYou will be asked to provided a URL under **Set up Webhooks by Zapier POST**. Copy the URL received from ngrok into the input field. Under **advanced options**, set the **Payload** type to **Json** then hit the **Continue** button.\n\n![react-zapier-7](//images.ctfassets.net/1es3ne0caaid/5Opul6Opnq4iKAqGIyCsUw/fa63abf0b4f8a9260057137ae93ec286/react-zapier-7.png)\n\nOn the next page, hit **Send Test to Webhook by Zapier**. This will send a post request to your local server along with the payload of the sample tweet pulled in earlier in the request body. Check the terminal window where the server is running. You should see some JSON output in the terminal.\n\nFinally, hit **Skip test** on the left hand side and **Finish** on the right. You will be redirected to a page confirming the successful setup of your first Zap.\n\n![react-zapier-8](//images.ctfassets.net/1es3ne0caaid/3d0TWF2YI0EsKawGsASqYW/6d33288333892c5cd535ba887c53cf6b/react-zapier-8.png)\n\nThe 15 minute interval is a limitation of Zapier’s free and entry level plans. With a paid plan, you can take it to as low as 5 minutes.\n\n## Create the application frontend\n\nLet’s work on the app frontend a bit. We need to install the `create-react-app` package globally so that we can use it to bootstrap a new React app. Use the following command below to install `create-react-app`:\n\n```\n    npm install create-react-app -g\n```\n\nNext, `cd` in to your project directory and run `create-react-app client` to create a new React app in a new directory called `client`. Once the installation process completes, `cd` into the newly created `client` directory and run `yarn start` to start the development server. The application will be available for you to view it at http://localhost:3000.\n\nLaunch another terminal window, and `cd` into the `client` directory. Then run the following command to install the other dependencies we’ll be using to build the React app.\n\n```\n    npm install react-timeago pusher-js -S\n```\n\nNext, open up `client/src/App.js` in your favorite text editor and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import TimeAgo from 'react-timeago';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        tweets: [],\n      };\n    \n      componentDidMount() {\n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('tweets');\n        channel.bind('new-tweet', data =\u003e {\n          const { tweets } = this.state;\n          tweets.push(data.payload);\n    \n          this.setState({\n            tweets,\n          });\n        });\n      }\n    \n      render() {\n        const { tweets: tweetArr } = this.state;\n    \n        const Tweet = (tweet, index) =\u003e (\n          \u003cdiv className=\"tweet\" key={index}\u003e\n            \u003cp className=\"user\"\u003e\n              \u003cspan className=\"screen-name\"\u003e{tweet.user__name}\u003c/span\u003e\n              \u003cspan className=\"username\"\u003e{tweet.user__screen_name}\u003c/span\u003e\n            \u003c/p\u003e\n            \u003cp className=\"tweet-text\"\u003e{tweet.text}\u003c/p\u003e\n            \u003cdiv className=\"meta\"\u003e\n              \u003cdiv\u003e\n                \u003cspan className=\"retweets\"\u003eRetweets: {tweet.retweet_count}\u003c/span\u003e\n                \u003cspan className=\"likes\"\u003eLikes: {tweet.favorite_count}\u003c/span\u003e\n              \u003c/div\u003e\n              \u003ca href={tweet.url}\u003e\n                \u003cTimeAgo date={tweet.created_at} /\u003e\n              \u003c/a\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n    \n        const tweets = tweetArr.map((tweet, index) =\u003e Tweet(tweet, index));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003ch1\u003eTweets\u003c/h1\u003e\n            \u003c/header\u003e\n    \n            \u003cmain className=\"tweets\"\u003e{tweets}\u003c/main\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nThe `componentDidMount()` lifecycle method houses the logic for displaying new tweets on the page. We’re opening a connection to Channels using the `subscribe()` method which allows us to subscribe to a new channel called `tweets`. Then, we listen for the `new-tweet` event on the `tweets` channel using the `bind` method and update the application state once we receive a tweet update.\n\nDon’t forget to retrieve your Channels credentials from the **API Keys** tab in the dashboard, and then replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders in `App.js` with the appropriate values.\n\n## Add the styles for the app\n\nLet's add the styles for the app’s frontend. Open up `client/src/App.css` in your editor and replace its contents with the following styles:\n\n``` css\n    // client/src/App.css\n    \n    body {\n      font-family: Helvetica, \"Helvetica Nueue\", sans-serif;\n    }\n    \n    .App {\n      text-align: center;\n    }\n    \n    .tweets {\n      width: 100%;\n      max-width: 700px;\n      margin: 30px auto;\n    }\n    \n    .tweet {\n      margin-bottom: 20px;\n      border: 1px solid #ccc;\n      padding: 15px;\n      text-align: left;\n    }\n    \n    .screen-name {\n      font-weight: bold;\n      display: inline-block;\n      margin-right: 10px;\n    }\n    \n    .username::before {\n      content: '@';\n    }\n    \n    .retweets {\n      display: inline-block;\n      margin-right: 10px;\n    }\n    \n    .meta {\n      display: flex;\n      justify-content: space-between;\n    }\n```\n\n## Trigger updates from the server\n\nInside the `server.js` file, change the root route to look like this:\n\n``` javascript\n    // server.js\n    \n    app.post('/', (req, res) =\u003e {\n      pusher.trigger('tweets', 'new-tweet', {\n        payload: req.body,\n      });\n    });\n```\n\nZapier will hit this route for each new tweet that is posted to the Twitter account you connected, and include the tweet payload in the request body. We can then trigger a new update on the `tweets` channel with the tweet payload included.\n\nKill the server using `Ctrl-C` and run `node server.js` again from the root of your project directory. Then send a few tweets using your Twitter account. After about 15 minutes, you should see the new tweets on the page.\n\n![react-zapier-9](//images.ctfassets.net/1es3ne0caaid/2ZfACamgH662i4q8WMqAay/de17c789a6deda16a20d97795bd0e974/react-zapier-9.png)\n\nYou can also trigger the update manually by going to the [Zapier dashboard](https://zapier.com/app/dashboard), find the Zap you created and hit the **Run** button as shown the screenshot above.\n\n![react-zapier-demo](//images.ctfassets.net/1es3ne0caaid/30BrbmI74QiYyyMyM4cW4y/72f3b87a7047930485bdcd0df07b58b9/react-zapier-demo.gif)\n\n## Wrap up\n\nI have explained how to set up Zapier to get fetch user tweets every 15 minutes and how to display new updates on a webpage with Pusher Channels. If you want to dig into other things you can do with Channels, make sure to check out its [exhaustive documentation](https://pusher.com/docs). To grab the complete code used in this tutorial, please visit this [GitHub repository](https://github.com/ayoisaiah/tweet-stream).","metaTitle":"How to stream user tweets with Zapier and React","metaDescription":"Learn how to use Zapier, together with Pusher Channels, to create a live tweet stream. You will build a simple web app with Node and React, and use Zapier to connect to a Twitter feed. Pusher will supply the realtime functionality. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3m0gfzuNEsui62aYUI8QgI","type":"Entry","createdAt":"2018-11-14T19:23:28.246Z","updatedAt":"2018-11-14T19:23:28.246Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"View your live Spotify history with React and Node","url":"spotify-history-react-node","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/music-history","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-11-14","description":"Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify account and view a list of tracks played, with new tracks being added as they play.","prerequisite":"You will need Node 6+ installed on your machine. Some knowledge of Node and React will be helpful.","content":"In this tutorial, we’ll be creating an application that displays your Spotify music history in realtime. Once you connect a Spotify account, it’ll display a list of your 10 most recently played tracks. Then it’ll keep updating that list as you play more songs. The final result will look like this:\n\n![spotify-history-demo](//images.ctfassets.net/1es3ne0caaid/37NQjj1rGw0kysyWwqqGk4/c787a45b5fa976e4a273824ff79502d1/spotify-history-demo.gif)\n\n## Prerequisites\n\nExperience with building Node.js and React applications is required to grasp the concepts explored in this tutorial. You also need Node.js (v6 and later) along with npm on your machine to run the commands and code included in this article. You can find installation instructions [here](https://www.npmjs.com/get-npm).\n\n## Getting started\n\nCreate a new folder for this project in your filesystem. You can call it `spotify-history` or just `spotify`. Open up your terminal and `cd` into the newly created directory. Next, run the command below to initialize a new Node.js project:\n\n```\n    npm init -y\n```\n\nThe above command creates a new `package.json` file in the current directory. Now let’s install the dependencies we’ll be needing to build the server component of our application.\n\nRun the following command in the terminal to install the required packages. I’ll explain what each one does as we progress through the tutorial.\n\n```\n    npm install express cors nedb dotenv node-cron node-fetch pusher --save\n```\n\nOnce the server dependencies have been installed, run the command below to install [create-react-app](https://github.com/facebook/create-react-app) globally on your machine. This tool helps us bootstrap React apps quickly with no build configuration.\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation completes, you'll have access to the `create-react-app` command that will be used to set up the React project. Next, run the following command from within the root of your project directory to create the frontend component of the app.\n\n```\n    create-react-app client\n```\n\nThis command creates a new `client` directory and installs all the packages that are needed to build and run a React application within it.\n\nNext, change into the newly created `client` directory and run the command below install some additional dependencies that we’ll be needing in our application frontend:\n\n```\n    npm install pusher-js date-fns --save\n```\n\nFinally, run `npm start` within the `client` directory to start the development server. It should be available at http://localhost:3000 or some other port if 3000 is not available on your machine.\n\n\n## Create the application frontend\n\nLet’s begin by changing up the code in  `client/src/App.js` to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import format from 'date-fns/format';\n    import './App.css';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        const urlParams = new URLSearchParams(window.location.search);\n        const isUserAuthorized = urlParams.has('authorized') ? true : false;\n    \n        this.state = {\n          isUserAuthorized,\n          musicHistory: [],\n        };\n      }\n      \n      render() {\n        const { isUserAuthorized, musicHistory } = this.state;\n        const connectSpotify = isUserAuthorized ? (\n          ''\n        ) : (\n          \u003ca href=\"http://localhost:5000/login\"\u003eConnect your Spotify account\u003c/a\u003e\n        );\n    \n        const TableItem = (item, index) =\u003e (\n          \u003ctr key={item.played_at}\u003e\n            \u003ctd\u003e{index + 1}\u003c/td\u003e\n            \u003ctd\u003e{item.track_name}\u003c/td\u003e\n            \u003ctd\u003e{format(item.played_at, 'D MMM YYYY, hh:mma')}\u003c/td\u003e\n          \u003c/tr\u003e\n        );\n    \n        const RecentlyPlayed = () =\u003e (\n          \u003cdiv className=\"recently-played\"\u003e\n            \u003ch2\u003eRecent Tracks\u003c/h2\u003e\n            \u003ctable className=\"table\"\u003e\n              \u003cthead\u003e\n                \u003ctr\u003e\n                  \u003cth\u003e#\u003c/th\u003e\n                  \u003cth\u003eSong title\u003c/th\u003e\n                  \u003cth\u003eTime\u003c/th\u003e\n                \u003c/tr\u003e\n              \u003c/thead\u003e\n              \u003ctbody\u003e{musicHistory.map((e, index) =\u003e TableItem(e, index))}\u003c/tbody\u003e\n            \u003c/table\u003e\n          \u003c/div\u003e\n        );\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"header\"\u003e\n              \u003ch1\u003eSpotify Listening History\u003c/h1\u003e\n              \u003cp\u003eView your music history in realtime with Spotify and Pusher\u003c/p\u003e\n    \n              {connectSpotify}\n              {musicHistory.length !== 0 ? \u003cRecentlyPlayed /\u003e : null}\n            \u003c/header\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nWe’ve initialized the state of the application with two values: `isUserAuthorized` which keeps track of whether the user has authenticated with Spotify or not via a URL parameter, and `musicHistory` which is where all the recently played tracks will be stored. If `isUserAuthorized` is set to false (which it is by default), a link that prompts the user to connect a Spotify account to the app will be displayed on the screen.\n\nLet’s change up the styles for the app in `client/src/App.css`:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      width: 100%;\n      max-width: 750px;\n      margin: 0 auto;\n      padding: 30px;\n      text-align: center;\n    }\n    \n    table {\n      width: 100%;\n      text-align: center;\n    }\n    \n    th,\n    td {\n      padding: 12px 15px;\n      border-bottom: 1px solid #E1E1E1; }\n    th:first-child,\n    td:first-child {\n      padding-left: 0; }\n    th:last-child,\n    td:last-child {\n    padding-right: 0; }\n```\n\n## Set up the server\n\nIn the root of your project directory, create a new `server.js` file and change its contents to look like this:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const cron = require('node-cron');\n    const Pusher = require('pusher');\n    \n    const clientUrl = process.env.CLIENT_URL;\n    \n    const app = express();\n    \n    const db = new Datastore();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nNext, create a file called `variables.env` also in the root of your project folder. This is where all the environmental variables will be stored so that they can be made available on `process.env`. The `dotenv` package is what allows us to achieve this.\n\n```\n    // variables.env\n    \n    PORT=5000\n    CLIENT_URL=https://localhost:3000\n```\n\nThe `CLIENT_URL` variable is the URL where the React development server is available on. You can change the value if your app is running on another port.\n\n## Sign up for Spotify\n\nBefore you can access and use Spotify’s API, you need to [create a free account](https://www.spotify.com/signup/). You don’t need to be on the premium plan to follow through with this tutorial. Once you have done so, go to the [developer dashboard](https://developer.spotify.com/dashboard/) and log in to with your Spotify account. Accept the terms of service and create your first app by selecting any one of the three options presented.\n\n![spotify-history-signup](//images.ctfassets.net/1es3ne0caaid/3hE8aVYYzuK4MmOSYEAke2/4eafa968232a3138d01a4c6576e9f095/spotify-history-signup.png)\n\nFill the popup form as shown above and hit **Next** to move along. Hit **No** on the **Are you developing a commercial integration?** screen and tick all the checkboxes on the final screen before hitting the green **SUBMIT** button to create the app.\n\n![spotify-history-keys](//images.ctfassets.net/1es3ne0caaid/2IUr6YjSGcGGuSoA6EWUWw/ee5f5cc81c7f2800533cfa125dadb534/spotify-history-keys.png)\n\nOnce your app has been created, you will be redirected to the app page where you can access your Client ID and Client Secret tokens. You will find this at the top left of your screen. Also hit the **EDIT SETTINGS** button at the top right and add the redirect URI (http://localhost:5000/callback) in the popup form that appears, then hit the **ADD** button. Finally hit **SAVE** at the bottom of the form to save your settings.\n\n![spotify-history-settings](//images.ctfassets.net/1es3ne0caaid/7ykPNnlWrmukW4sO4KIQkC/f5c8528fdb9feb0c77d81f97269aa5ca/spotify-history-settings.png)\n\nAdd the following variables to your `variable.env` file:\n\n```\n    // variables.env\n    \n    SPOTIFY_CLIENT_ID=\u003cyour spotify client id\u003e\n    SPOTIFY_CLIENT_SECRET=\u003cyour spotify client secret\u003e\n    SPOTIFY_REDIRECT_URI=http://localhost:5000/callback\n```\n\nNext, create new `credentials.js` file in your project directory and change its contents to look like this:\n\n``` javascript\n    // credentials.js\n    \n    const spotify = {\n      client_id: process.env.SPOTIFY_CLIENT_ID,\n      client_secret: process.env.SPOTIFY_CLIENT_SECRET,\n      redirect_uri: process.env.SPOTIFY_REDIRECT_URI,\n    };\n    \n    module.exports = spotify;\n```\n\n## Create the authentication flow\n\nWe need to create a flow for authorizing users’ Spotify accounts to work with our app. We can do this by creating the login route in the server, which is where the user hits the **Connect your Spotify account** link is clicked on the app frontend.\n\nCreate a new file called `authorizeSpotify.js` and paste in the following code within it:\n\n``` javascript\n    // authorizeSpotify.js\n    \n    const spotify = require('./credentials');\n    \n    const authorizeSpotify = (req, res) =\u003e {\n      const scopes = 'user-read-recently-played';\n    \n      const url = `https://accounts.spotify.com/authorize?\u0026client_id=${\n        spotify.client_id\n      }\u0026redirect_uri=${encodeURI(\n        spotify.redirect_uri\n      )}\u0026response_type=code\u0026scope=${scopes}`;\n    \n      res.redirect(url);\n    };\n    \n    module.exports = authorizeSpotify;\n```\n\nNext  import this module into `server.js` and use it in the a new `/login` route as shown below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const Pusher = require('pusher');\n    const authorizeSpotify = require('./authorizeSpotify');\n    \n    ...\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.get('/login', authorizeSpotify);\n    ...\n```\n\nWhenever, the user hits the `/login` route (by trying to connect a Spotify account), the app generates a request where the user is prompted to grant the  `user-read-recently-played` permission.\n\nWhen the user grants the permission, it will redirect back to the redirect URL you specified while creating the app (http://localhost:5000/callback). We need to grab the code that is included in the URL parameters and exchange it for an access token which will be used when interacting with the Spotify API. Let’s write the code that’ll do just that in the next step.\n\nCreate a new file called `getAccessToken.js` and paste the following code inside it:\n\n``` javascript\n    // getAccessToken.js\n    \n    const fetch = require('node-fetch');\n    const spotify = require('./credentials');\n    \n    const getAccessToken = (req, res, next) =\u003e {\n      const { code } = req.query;\n    \n      if (code) {\n        const url = 'https://accounts.spotify.com/api/token';\n    \n        const data = {\n          grant_type: 'authorization_code',\n          code,\n          redirect_uri: spotify.redirect_uri,\n          client_id: spotify.client_id,\n          client_secret: spotify.client_secret,\n        };\n    \n        const headers = {\n          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        };\n    \n        const searchParams = new URLSearchParams();\n    \n        Object.keys(data).forEach(prop =\u003e {\n          searchParams.set(prop, data[prop]);\n        });\n    \n        fetch(url, {\n          method: 'POST',\n          headers,\n          body: searchParams,\n        })\n          .then(res =\u003e res.json())\n          .then(credentials =\u003e {\n            req.credentials = credentials;\n            next();\n          })\n          .catch(next);\n      }\n    };\n    \n    module.exports = getAccessToken;\n```\n\nNext, require `getAccessToken` in `server.js` and use it in the `/callback` route as shown below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const authorizeSpotify = require('./authorizeSpotify');\n    const getAccessToken = require('./getAccessToken');\n    \n    ...\n    app.get('/login', authorizeSpotify);\n    app.get('/callback', getAccessToken);\n    ...\n```\n\nIn  `getAccessToken`, we grab the code off the URL parameters and exchange it for an access token by making a POST request to the Spotify Accounts service. When the requested credentials are received, they’re saved on the `req` object and  `next()` is invoked which executes the next middleware.\n\nLet’s go ahead and create the succeeding middleware in the next step. This middleware is tasked with saving the credentials received from Spotify to a temporary database. Here’s the code that helps us achieve that:\n\n``` javascript\n    // server.js\n    ...\n    app.get('/login', authorizeSpotify);\n    app.get('/callback', getAccessToken, (req, res, next) =\u003e {\n      db.insert(req.credentials, err =\u003e {\n        if (err) {\n          next(err);\n        } else {\n          res.redirect(`${clientUrl}/?authorized=true`);\n        }\n      });\n    });\n```\n\nThis code allows us to redirect the user back to the app frontend once the credentials have been saved to the database. Notice the `?authorized=true` parameter? That presence of that in the URL lets us detect that authorization was successful and `isUserAuthorized` will now be set to `true` in the app frontend.\n\n## Fetch the user’s recently played tracks\n\nNow that we know that authorization with the Spotify API was successful, we need to fetch the 10 most recently played tracks of the user and display it on the page. At this point, you should start listening to some music on Spotify if your account is new so that some songs will show up when this request is performed.\n\nUnder the `constructor()` function, add the `componentDidMount()` lifecycle hook to your React app and paste the following code within it:\n\n``` javascript\n    // client/src/App.js\n    \n    componentDidMount() {\n      const { isUserAuthorized } = this.state;\n    \n      if (isUserAuthorized) {\n        fetch('http://localhost:5000/history')\n          .then(res =\u003e res.json())\n          .then(data =\u003e {\n            this.setState({\n              musicHistory: data,\n            });\n          })\n          .catch(error =\u003e console.log(error));\n      }\n    }\n```\n\nWe’re making a request to the `/history` route and we expect the 10 most recently played songs on the users’ account to be sent back. Let’s create this route on the server in the next step.\n\nCreate a file called `getRecentlyPlayed` and paste the code below within it. This is where the actual request to Spotify is performed.\n\n``` javascript\n    // getRecentlyPlayed.js\n    \n    const fetch = require('node-fetch');\n    \n    const getRecentlyPlayed = accessToken =\u003e {\n      const url = 'https://api.spotify.com/v1/me/player/recently-played?limit=10';\n    \n      return fetch(url, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n        .then(res =\u003e res.json())\n        .then(data =\u003e data.items)\n        .catch(error =\u003e console.log(error));\n    };\n    \n    module.exports = getRecentlyPlayed;\n```\n\nNext, import it in `server.js` and add the `/history` route below the other two:\n\n``` javascript\n    // server.js\n    \n    ...\n    const getAccessToken = require('./getAccessToken');\n    const getRecentlyPlayed = require('./getRecentlyPlayed');\n    \n    ...\n    app.get('/history', (req, res) =\u003e {\n      db.find({}, (err, docs) =\u003e {\n        if (err) {\n          throw Error('Failed to retrieve documents');\n        }\n    \n        const accessToken = docs[0].access_token;\n        getRecentlyPlayed(accessToken)\n          .then(data =\u003e {\n            const arr = data.map(e =\u003e ({\n              played_at: e.played_at,\n              track_name: e.track.name,\n            }));\n    \n            res.json(arr);\n          })\n          .catch(err =\u003e console.log(err));\n      });\n    });\n```\n\nAt this point, if the user is authenticated and this route is hit, the most recently played songs will be sent to the frontend and displayed on the page.\n\n![spotify-history-partial](//images.ctfassets.net/1es3ne0caaid/1qqnFvWVQgku0iKmEaW4O4/a2d0141ad82128558ce664c7b8be3b87/spotify-history-partial.png)\n\n## Set up realtime updates with Pusher\n\nThe next task is to make the list of songs update on the page as you continue to listen. Head over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, retrieve your credentials from the **API Keys** tab, then add the following to your `variables.env` file.\n\n```\n    // variables.env\n    \n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nWe’re going to set up a cron job to run every five minutes, retrieve the most recently played songs and merge it with the existing list of recent tracks so that new songs are displayed on top. Change up `server.js` to look like this:\n\n``` javascript\n    // server.js\n    \n    ....\n    const db = new Datastore();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n    app.get('/history', (req, res) =\u003e {\n      db.find({}, (err, docs) =\u003e {\n        if (err) {\n          throw Error('Failed to retrieve documents');\n        }\n    \n        const accessToken = docs[0].access_token;\n        getRecentlyPlayed(accessToken)\n          .then(data =\u003e {\n            const arr = data.map(e =\u003e ({\n              played_at: e.played_at,\n              track_name: e.track.name,\n            }));\n    \n            res.json(arr);\n          })\n          .then(() =\u003e {\n            cron.schedule('*/5 * * * *', () =\u003e {\n              getRecentlyPlayed(accessToken).then(data =\u003e {\n                const arr = data.map(e =\u003e ({\n                  played_at: e.played_at,\n                  track_name: e.track.name,\n                }));\n    \n                pusher.trigger('spotify', 'update-history', {\n                  musicHistory: arr,\n                });\n              });\n            });\n          })\n          .catch(err =\u003e console.log(err));\n      });\n    });\n```\n\nOnce the initial listing is made, a cron job is triggered that runs every five minutes. That’s what the `*/5 * * * *` string signifies. The user’s most recently played tracks are fetched and pushed to the `spotify` channel via the `update-history` event. Any client that is subscribed to this channel can receive the latest data and update the list of tracks on the page.\n\nLet’s go ahead and do just that in the frontend of our app. Update the `componentDidMount()` lifecycle hook in `client/src/App.js` to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    componentDidMount() {\n      const { isUserAuthorized } = this.state;\n    \n      if (isUserAuthorized) {\n        fetch('http://localhost:5000/history')\n          .then(res =\u003e res.json())\n          .then(data =\u003e {\n            this.setState({\n              musicHistory: data,\n            });\n          })\n          .catch(error =\u003e console.log(error));\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('spotify');\n        channel.bind('update-history', data =\u003e {\n          this.setState(prevState =\u003e {\n            const arr = data.musicHistory\n              .map(item =\u003e {\n                const isPresent = prevState.musicHistory.find(\n                  e =\u003e e.played_at === item.played_at\n                );\n                if (isPresent === undefined) {\n                  return item;\n                } else {\n                  return null;\n                }\n              })\n              .filter(Boolean);\n            return {\n              musicHistory: arr.concat(prevState.musicHistory),\n            };\n          });\n        });\n      }\n    }\n```\n\nHere, we opened a connection to Channels and used the `subscribe()` method  to subscribe to the `spotify` channel. Updates to the user’s music history are listened for via the `bind` method. Once an update is received, the data is merged with the existing one so that the list is updated with the latest tracks.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate details from your Pusher account dashboard.\n\nStart your server by running `node server.js` and link your Spotify account on the frontend. As long as you continue to play music, you should see the page update with your most recent tracks updates.\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to view your Spotify music history in realtime with React and Pusher. Along the way, you learned how to use Spotify’s API, and Pusher Channels to send and receive data in realtime.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/ayoisaiah/music-history).","metaTitle":"View your live Spotify history with React and Node","metaDescription":"Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify account and view a list of tracks played, with new tracks being added as they play."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xmvFyFo8GyCU6acuyo2My","type":"Entry","createdAt":"2018-10-15T18:24:47.488Z","updatedAt":"2018-11-12T17:12:56.801Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a photo sharing app with React Native","url":"photo-sharing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPhotoShare","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-11-12","description":"Use React Native, Node.js and Imgur to create a photo sharing app. Users will be able to follow their friends and share their own photos with their followers. New photos will be published and shared in realtime.","prerequisite":"You will need Node 8+ and the Expo CLI and SDK installed on your machine. Some knowledge of React Native development will be helpful.","content":"In this tutorial, we’ll be creating a realtime photo-sharing app with React Native and Pusher Channels. \n\n## Prerequisites\n\nBasic knowledge of React Native is required is in order to follow along. We’ll also be using [Redux](https://redux.js.org/) in some parts of the app so basic knowledge of it will be helpful as well.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. Download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.0.0\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n- React Navigation 2.14.0\n\nYou don’t necessarily have to use the versions above, but if you encounter problems when using other versions, I recommend you to use the ones above instead. For other packages used in the app, be sure to check out the `package.json` file found in the [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).\n\nWe’ll be using Pusher and Imgur in this tutorial so you need to have an account on both of those services:\n\n\n- [Pusher](http://pusher.com/)\n- [Imgur](https://imgur.com/register)\n\n\n## App overview\n\nWhen the user first opens the app, they’ll be greeted by the following screen. From here, they can either choose to share photos or view them by subscribing to another user who chose to share their photo:\n\n![react-native-photo-share-homepage](//images.ctfassets.net/1es3ne0caaid/3HcHtirrO0uwwgwa8gAQQw/8403a2f60c25d96dd5a27a52ce808cd1/react-native-photo-share-homepage.png)\n\nWhen a user chooses **Share**, they’ll be assigned a unique username, which they can share with anyone. This sharing mechanism will be entirely outside the app, so it can be anything (For example, email or SMS):\n\n![react-native-photo-share-share-screen](//images.ctfassets.net/1es3ne0caaid/5djOaJHu7SEmUEeEYqyKQK/5606ea888ba1d2c57977f323024421c4/react-native-photo-share-share-screen.png)\n\nHere’s what it looks like when someone chooses **View**. On this screen, they have to enter the username assigned to the user they want to follow:\n\n![react-native-photo-share-follow](//images.ctfassets.net/1es3ne0caaid/36VjMRTrAQyCkmWSumYYk8/86034cb4c4f690912d53e6d00f32422b/react-native-photo-share-follow.png)\n\nGoing back to the user who selected **Share**, here’s what their screen will look like when they click on the camera icon from earlier. This will allow the user to take a photo, flip the camera, or close it:\n\n![react-native-photo-share-camera](//images.ctfassets.net/1es3ne0caaid/7GUgMyZVKMCAs0m4m4uACc/4bb3ae4b6ef1b91385dc067196f3f73c/react-native-photo-share-camera.png)\n\nOnce they take a snap, the camera UI will close and the photo will be previewed. At this point, the photo should have already started uploading in the background using the Imgur API:\n\n![react-native-photo-share-preview](//images.ctfassets.net/1es3ne0caaid/67D4M5ttYcKsyo0wuIgwq0/86a3b74cf8aba2e8a895ad2418849f20/react-native-photo-share-preview.png)\n\nSwitching back to the follower (the user who clicked on **View**), once the upload is finished, the Imgur API should return the image URL and its unique ID. Those data are then sent to the Pusher channel which the follower has subscribed to. This allows them to also see the shared photo:\n\n![react-native-photo-share-photo-received](//images.ctfassets.net/1es3ne0caaid/3QWCIyl3w4kuUIysMgoymA/7db155610e74f1d47095cb3f3c7e594e/react-native-photo-share-photo-received.png)\n\nIt’s not shown in the screenshot above, but everytime a new photo is received, it will automatically be appended to the top of the list.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).\n\n\n## Create Pusher and Imgur apps\n\nOn your [Pusher dashboard](https://dashboard.pusher.com/), create a new app and name it **RNPhotoShare**. Once it’s created, go to app settings and enable client events. This will allow us to directly trigger events from the app:\n\n![react-native-photo-share-enable-client-events](//images.ctfassets.net/1es3ne0caaid/1PhoIFNEOQKA0AoaKqqoMW/856f0fe856a794e95700342da0fa917b/react-native-photo-share-enable-client-events.png)\n\nNext, after logging in to your Imgur account, go to [this page](https://api.imgur.com/oauth2/addclient) and register an app. The most important setting here is the **Authorization type**. Select **Anonymous usage without user authorization** as we will only be uploading images anonymously. **Authorization callback URL** can be any value because we won’t really be using it. Other than that, you can enter any value for the other fields:\n\n![react-native-photo-share-imgur-app](//images.ctfassets.net/1es3ne0caaid/74FnQEJcdyAqaWgq8qugiK/59e01a1269e38c32cf9494ad3e62ecd3/react-native-photo-share-imgur-app.png)\n\nClick **Submit** to create the app. This will show you the app ID and app secret. We’re only going to need the app ID so take note of that. In case you lose the app ID, you can view all the Imgur apps you created [here](https://imgur.com/account/settings/apps).\n\n\n## Building the app\n\nStart by cloning the project repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/RNPhotoShare.git\n    cd RNPhotoShare\n    git checkout starter\n```\n\nThe `starter` branch contains the bare-bones app template, navigation, components, and all of the relevant styles which we will be using later on. Having all of those in the starter allows us to focus on the main meat of the app.\n\nInstall the packages using [Yarn](https://yarnpkg.com/):\n\n```\n    yarn install\n```\n\nHere’s a quick overview of what each package does:\n\n\n- `expo` - the Expo SDK. This includes the Camera API and the icons that we will be using in the app.\n- `random-animal-name-generator` - for generating the unique usernames for users who want to share photos.\n- `pusher-js` - the JavaScript library for working with Pusher.\n- `react-navigation` - for implementing navigation within the app.\n- `prop-types` - for validating the props added to components on runtime.\n- `whatwg-fetch` - there’s a [recent issue](https://forums.expo.io/t/cant-find-variable-self/13547) with the latest version of the `whatwg-fetch` package that Expo uses, so we need to install a lower version through the main project in order to fix the issue.\n- `redux` - for adding and managing global app state.\n- `react-redux` - for working with Redux within the React environment.\n\n### Home screen\n\nLet’s first start with the Home screen by importing all the necessary packages:\n\n``` javascript\n    // src/screens/HomeScreen.js\n    import React, { Component } from \"react\";\n    import { View, Text, Button } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n```\n\nBy default, React Navigation will display a header on every page, we don’t want that in this page so we disable it. In the constructor, we initialize the value of the Pusher client. We will be using this to connect to Pusher and trigger and subscribe to events:\n\n``` javascript\n    export default class HomeScreen extends Component {\n      static navigationOptions = {\n        header: null // don't display header\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n      }\n      \n      // next: add componentDidMount\n    }\n```\n\nOnce the component is mounted, we initialize the Pusher client using the app key and app cluster from your app settings. As for the `authEndpoint`, retain the value below for now, we will be updating it later before we run the app:\n\n``` javascript\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR PUSHER APP CLUSTER\",\n        encrypted: true // false doesn't work, you need to always use https for the authEndpoint\n      });\n    }\n    \n    // next: add render method\n```\n\nNext, we render the UI for the Home screen. This contains two buttons that allow the user to navigate to either the Share screen or the View screen. In both cases, we pass in the reference to the Pusher client as a navigation param. This allows us to use Pusher on both pages:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cText style={styles.mainText}\u003eWhat to do?\u003c/Text\u003e\n    \n          \u003cView style={styles.buttonContainer}\u003e\n            \u003cButton\n              title=\"Share\"\n              color=\"#1083bb\"\n              onPress={() =\u003e {\n                this.props.navigation.navigate(\"Share\", {\n                  pusher: this.pusher\n                });\n              }}\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.buttonContainer}\u003e\n            \u003cButton\n              title=\"View\"\n              color=\"#2f9c0a\"\n              onPress={() =\u003e {\n                this.props.navigation.navigate(\"View\", {\n                  pusher: this.pusher\n                });\n              }}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\n### Share screen\n\nNext is the Share screen. This is where the user can take pictures with the in-app camera and share it on realtime to people who have followed their username. \n\nStart by importing all the packages we’ll need. Most of these should look familiar, except for `Clipboard`. We’ll be using it to copy the user’s username to the clipboard so they can easily share it on another app:\n\n``` javascript\n    // src/screens/ShareScreen.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TouchableOpacity,\n      Clipboard,\n      Alert,\n      Image,\n      Dimensions,\n      Button,\n      ScrollView\n    } from \"react-native\";\n```\n\nNext are the Expo packages and the random animal name generator. For Expo, we need the `Camera` for rendering a bare-bones camera UI and the `Permissions` to ask the user to access the camera:\n\n``` javascript\n    import { MaterialIcons } from \"@expo/vector-icons\";\n    import { Camera, Permissions } from \"expo\";\n    import generateRandomAnimalName from \"random-animal-name-generator\"; // for generating unique usernames\n```\n\nNext, add a button in the header. This will allow the user to stop sharing their photos. When this button is clicked, all users who are currently subscribed to this user will stop receiving updates:\n\n``` javascript\n    export default class ShareScreen extends Component {\n      static navigationOptions = ({ navigation }) =\u003e {\n        const { params } = navigation.state;\n        return {\n          title: \"Share Photos\",\n          headerTransparent: true,\n          headerRight: (\n            \u003cButton\n              title=\"Finish\"\n              color=\"#333\"\n              onPress={() =\u003e params.finishSharing()}\n            /\u003e\n          ),\n          headerTintColor: \"#333\"\n        };\n      };\n      \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      hasCameraPermission: null, // whether the user has allowed the app to access the device's camera\n      cameraType: Camera.Constants.Type.front, // which camera to use? front or back?\n      isCameraVisible: false, // whether the camera UI is currently visible or not\n      latestImage: null // the last photo taken by the user\n    };\n    \n    // next: add constructor\n```\n\nIn the constructor, we generate a unique username for the user. This is composed of the funny animal name from the `random-animal-name-generator` library and a random number. Here, we also initialize the value for the Pusher client (we’ll get it from the navigation params shortly) and the `user_channel` where we will emit the event for sharing photos. Since this screen is where the Camera UI will be rendered, we also want the user to be able to change the screen orientation. That way, they can capture both portrait and landscape photos:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      // generate unique username\n      const animalName = generateRandomAnimalName()\n        .replace(\" \", \"_\")\n        .toLowerCase();\n      const min = 10;\n      const max = 99;\n      const number = Math.floor(Math.random() * (max - min + 1)) + min;\n      const username = animalName + number;\n      this.username = username;\n      \n      // initialize pusher\n      this.pusher = null;\n      this.user_channel = null;\n      \n      // allow changing of screen orientation\n      Expo.ScreenOrientation.allow(\n        Expo.ScreenOrientation.Orientation.ALL_BUT_UPSIDE_DOWN // enable all screen orientations except upside-down/reverse portrait\n      );\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we set the `finishSharing` method as a navigation param. We’ll define this method later, but for now, know that this is used for unsubscribing the user from their own channel. We’re subscribing to that channel right below that code. This allows us to listen to or trigger messages from this channel. Lastly, we ask for permission from the user to access the camera:\n\n``` javascript\n    async componentDidMount() {\n      const { navigation } = this.props;\n    \n      navigation.setParams({\n        finishSharing: this.finishSharing\n      });\n    \n      // subscribe to channel\n      this.pusher = navigation.getParam(\"pusher\");\n      this.user_channel = this.pusher.subscribe(`private-user-${this.username}`);\n    \n      // ask user to access device camera\n      const { status } = await Permissions.askAsync(Permissions.CAMERA);\n      this.setState({ hasCameraPermission: status === \"granted\" });\n    }\n    // next: add render method\n```\n\nFor those who are working with Pusher for the first time, the way it works is that you first have to subscribe the users to a channel. Anyone who is subscribed to this channel will be able to trigger and listen for messages sent through that channel by means of “events”. Not all users who are subscribed to the channel need to know all about the events being sent through that channel, that’s why users can selectively bind to specific events only.\n\nNext, we render the contents of the Share screen. In this case, there are only two possible contents: one where only the camera UI is visible, and the other where only the box containing the username and a button (for opening the camera) is visible:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          {!this.state.isCameraVisible \u0026\u0026 (\n            \u003cScrollView contentContainerStyle={styles.scroll}\u003e\n              \u003cView style={styles.mainContent}\u003e\n                \u003cTouchableOpacity onPress={this.copyUsernameToClipboard}\u003e\n                  \u003cView style={styles.textBox}\u003e\n                    \u003cText style={styles.textBoxText}\u003e{this.username}\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n                \u003cView style={styles.buttonContainer}\u003e\n                  \u003cTouchableOpacity onPress={this.openCamera}\u003e\n                    \u003cMaterialIcons name=\"camera-alt\" size={40} color=\"#1083bb\" /\u003e\n                  \u003c/TouchableOpacity\u003e\n                \u003c/View\u003e\n    \n                {this.state.latestImage \u0026\u0026 (\n                  \u003cImage\n                    style={styles.latestImage}\n                    resizeMode={\"cover\"}\n                    source={{ uri: this.state.latestImage }}\n                  /\u003e\n                )}\n              \u003c/View\u003e\n            \u003c/ScrollView\u003e\n          )}\n    \n          {this.state.isCameraVisible \u0026\u0026 (\n            \u003cCamera\n              style={styles.camera}\n              type={this.state.cameraType}\n              ref={ref =\u003e {\n                this.camera = ref;\n              }}\n            \u003e\n              \u003cView style={styles.cameraFiller} /\u003e\n              \u003cView style={styles.cameraContent}\u003e\n                \u003cTouchableOpacity\n                  style={styles.buttonFlipCamera}\n                  onPress={this.flipCamera}\n                \u003e\n                  \u003cMaterialIcons name=\"flip\" size={25} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n    \n                \u003cTouchableOpacity\n                  style={styles.buttonCamera}\n                  onPress={this.takePicture}\n                \u003e\n                  \u003cMaterialIcons name=\"camera\" size={50} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n    \n                \u003cTouchableOpacity\n                  style={styles.buttonCloseCamera}\n                  onPress={this.closeCamera}\n                \u003e\n                  \u003cMaterialIcons name=\"close\" size={25} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n              \u003c/View\u003e\n            \u003c/Camera\u003e\n          )}\n        \u003c/View\u003e\n      );\n    }\n    \n    // next: add copyUsernameToClipboard\n```\n\nIf you’ve read the app overview earlier, you should already have a general idea on what’s going on in the code above so I’ll no longer elaborate. Take note of the `ref` prop we’ve passed to the `Camera` component though. This allows us to get a reference to that instance of the `Camera` component and assign it to a local variable called `this.camera`. We will be using it later to take a picture using that camera instance.\n\nWhen the user clicks on the box containing the user’s username, this method is called and it sets the username to the clipboard:\n\n``` javascript\n    copyUsernameToClipboard = () =\u003e {\n      Clipboard.setString(this.username);\n      Alert.alert(\"Copied!\", \"Username was copied clipboard\");\n    };\n    \n    // next: add openCamera\n```\n\nNext, are the methods for opening the camera UI, flipping it (use either back or front camera), and closing it:\n\n``` javascript\n    openCamera = () =\u003e {\n      const { hasCameraPermission } = this.state;\n      if (!hasCameraPermission) {\n        Alert.alert(\"Error\", \"No access to camera\");\n      } else {\n        this.setState({ isCameraVisible: true });\n      }\n    };\n    \n    flipCamera = () =\u003e {\n      this.setState({\n        cameraType:\n          this.state.cameraType === Camera.Constants.Type.back\n            ? Camera.Constants.Type.front\n            : Camera.Constants.Type.back\n      });\n    };\n    \n    closeCamera = () =\u003e {\n      this.setState({\n        isCameraVisible: false\n      });\n    };\n    \n    // next: add takePicture\n```\n\nNext is the method for taking pictures. This is where we use the camera reference from earlier (`this.camera`) to call the `takePictureAsync` method from the Camera API. By default, the `takePictureAsync` method only returns an object containing the `width`, `height` and `uri` of the photo that was taken. That’s why we’re passing in an object containing the options we want to use. In this case, `base64` allows us to return the base64 representation of the image. This is what we set in the request body of the request we send to the Imgur API. Once we receive a response from the Imgur API, we extract the data that we need from the response body and trigger the `client-posted-photo` event so any subscriber who is currently listening to that event will receive the image data:\n\n``` javascript\n    takePicture = async () =\u003e {\n      if (this.camera) {\n        let photo = await this.camera.takePictureAsync({ base64: true }); // take a snap, and return base64 representation\n        \n        // construct\n        let formData = new FormData();\n        formData.append(\"image\", photo.base64); \n        formData.append(\"type\", \"base64\");\n    \n        this.setState({\n          latestImage: photo.uri, // preview the photo that was taken\n          isCameraVisible: false // close the camera UI after taking the photo\n        });\n    \n        const response = await fetch(\"https://api.imgur.com/3/image\", {\n          method: \"POST\",\n          headers: {\n            Authorization: \"Client-ID YOUR_IMGUR_APP_ID\" // add your Imgur App ID here\n          },\n          body: formData\n        });\n    \n        let response_body = await response.json(); // get the response body\n        \n        // send data to all subscribers who are listening to the client-posted-photo event\n        this.user_channel.trigger(\"client-posted-photo\", {\n          id: response_body.data.id, // unique ID assigned to the image\n          url: response_body.data.link // Imgur link pointing to the actual image\n        });\n      }\n    };\n    \n    // next: add finishSharing\n```\n\nNote that the name of the event has to have `client-` as its prefix, just like what we did above. This is because we’re triggering this event from the client side. It’s a naming convention used by Pusher so your event won’t work if you don’t follow it. Check out the [docs](https://pusher.com/docs/client_api_guide/client_events#trigger-events) for more information about this.\n\nOnce the user clicks on the **Finish** button, we unsubscribe them from their own channel. This effectively cuts off all communication between this user and all their followers:\n\n``` javascript\n    finishSharing = () =\u003e {\n      this.pusher.unsubscribe(`private-user-${this.username}`);\n      this.props.navigation.goBack(); // go back to home screen\n    };\n```\n\nFor production apps, it’s a good practice to first trigger an “ending” event right before the main user (the one who mainly triggers events) unsubscribes from their own channel. This way, all the other users will get notified and they’ll be able to clean up their connection before their source gets completely shut off.\n\n\n### View screen\n\nThe View screen is where users who want to follow another user go. Again, start by importing all the packages we need:\n\n``` javascript\n    // src/screens/ViewScreen.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      ScrollView,\n      Dimensions,\n      Button,\n      Alert\n    } from \"react-native\";\n    \n    import CardList from \"../components/CardList\";\n```\n\nNothing really new in the code above, except for the `CardList` component. This component is already included in the starter project so we don’t have to create it separately. What it does is render all the images that were sent by the user followed by the current user.\n\nNext, import all the Redux-related packages:\n\n``` javascript\n    // src/screens/ViewScreen.js\n    import { Provider } from \"react-redux\";\n    import { createStore } from \"redux\";\n    import reducers from \"../reducers\";\n    \n    import { addedCard } from \"../actions\";\n    \n    const store = createStore(reducers);\n```\n\nNext, we also add a button in the header. This time, to unfollow the user. We’re also passing in the function used here (`params.unfollow`) as a navigation param later inside the `componentDidMount` method:\n\n``` javascript\n    export default class ViewScreen extends Component {\n    \n      static navigationOptions = ({ navigation }) =\u003e {\n        const { params } = navigation.state;\n        return {\n          title: \"View Photos\",\n          headerTransparent: true,\n          headerTintColor: \"#333\",\n          headerRight: (\n            \u003cButton\n              title=\"Unfollow\"\n              color=\"#333\"\n              onPress={() =\u003e params.unFollow()}\n            /\u003e\n          )\n        };\n      };\n      \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      subscribedToUsername: \"\", // the username of the user the current user is subscribed to\n      isSubscribed: false // is the user currently subscribed to another user?\n    };\n```\n\nIn the constructor, we also set the default value for the Pusher client and the user channel. In this case, the user channel will be whoever the current user is subscribed to. The current user doesn’t really need to trigger any events in the user channel, so we don’t have to generate a unique username and subscribe them to their own channel as we did in the Share screen earlier:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.pusher = null;\n      this.user_channel = null;\n    }\n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we set the `unFollow` function as a navigation param and initialize the Pusher client:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      navigation.setParams({ unFollow: this.unFollow }); // set the unFollow function as a navigation param\n    \n      this.pusher = navigation.getParam(\"pusher\");\n    }\n    \n    // next: add render\n```\n\nNext, we render the UI of the of the View screen. Here, we wrap everything in the `Provider` component provided by `react-redux`. This allows us to pass down the `store` so we could use it inside the `followUser` to dispatch the action for adding a new Card to the CardList:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cView style={styles.container}\u003e\n            {!this.state.isSubscribed \u0026\u0026 (\n              \u003cView style={styles.initialContent}\u003e\n                \u003cText style={styles.mainText}\u003eUser to follow\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={subscribedToUsername =\u003e\n                    this.setState({ subscribedToUsername })\n                  }\n                \u003e\n                  \u003cText style={styles.textInputText}\u003e\n                    {this.state.subscribedToUsername}\n                  \u003c/Text\u003e\n                \u003c/TextInput\u003e\n    \n                \u003cView style={styles.buttonContainer}\u003e\n                  \u003cButton\n                    title=\"Follow\"\n                    color=\"#1083bb\"\n                    onPress={this.followUser}\n                  /\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n            )}\n    \n            {this.state.isSubscribed \u0026\u0026 (\n              \u003cScrollView\u003e\n                \u003cView style={styles.mainContent}\u003e\n                  \u003cCardList /\u003e\n                \u003c/View\u003e\n              \u003c/ScrollView\u003e\n            )}\n          \u003c/View\u003e\n        \u003c/Provider\u003e\n      );\n    }\n    // next: add followUser\n```\n\nThe `followUser` method is where we add the code for subscribing to the username entered by the user in the text field. Once the subscription succeeds, only then can we listen for the `client-posted-photo` event. When we receive this event, we expect the `id` and `url` of the image to be present. We then use those to dispatch the action for adding a new Card on top of the CardList:\n\n``` javascript\n    followUser = () =\u003e {\n      this.setState({\n        isSubscribed: true\n      });\n      \n      // subscribe to the username entered in the text field\n      this.user_channel = this.pusher.subscribe(\n        `private-user-${this.state.subscribedToUsername}`\n      );\n      \n      // alert the user if there's an error in subscribing\n      this.user_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.user_channel.bind(\"pusher:subscription_succeeded\", () =\u003e { // subscription successful\n        this.user_channel.bind(\"client-posted-photo\", data =\u003e { // listen for the client-posted-photo event to be triggered from the channel\n          store.dispatch(addedCard(data.id, data.url)); // dispatch the action for adding a new card to the list\n        });\n      });\n    };\n    \n    // next: add unFollow\n```\n\nLastly, add the `unFollow` method. This gets called when the user clicks on the **Unfollow** button in the header. This allows us to unsubscribe from the user we subscribed to earlier inside the `followUser` method:\n\n``` javascript\n    unFollow = () =\u003e {\n      this.pusher.unsubscribe(`private-user-${this.state.subscribedToUsername}`);\n      this.props.navigation.goBack(); // go back to the home page\n    };\n```\n\nUnsubscribing from a channel automatically unbinds the user from all the events they’ve previously bound to. This means they’ll no longer receive any new photos.\n\n### Adding the action and reducer\n\nEarlier in the `followUser` method of the `src/screens/ViewScreen.js` file, we dispatched the `addedCard` action. We haven’t really defined it yet so let’s go ahead and do so. Create an `actions` and `reducers` folder inside the `src` directory to house the files we’re going to create.\n\nTo have a single place where we define all the action types in this app, create a `src/actions/types.js` file and add the following:\n\n``` javascript\n    export const ADDED_CARD = \"added_card\";\n```\n\nIn the code above, all we do is export a constant which describes the action type. Nothing really mind-blowing, but this allows us to import and use this constant every time we need to use this specific action. This prevents us from making any typo when using this action.\n\nNext, create a `src/actions/index.js` file, this is where we define and export the action. We pass in the `ADDED_CARD` constant as a type along with the `id` and `url`. These are the unique ID and URL of the image which is received by the reducer everytime this action is dispatched:\n\n``` javascript\n    // src/actions/index.js\n    import { ADDED_CARD } from \"./types\";\n    \n    export const addedCard = (id, url) =\u003e {\n      return {\n        type: ADDED_CARD,\n        id: id,\n        url: url\n      };\n    };\n```\n\nNext, create a `src/``reducers/CardsReducer.js` file, this is where we add the reducer responsible for modifying the value of the `cards` array in the state. This gets executed every time we dispatch the `addedCard` action. When that happens, we simply return a new array containing the existing card objects and the new card object:\n\n``` javascript\n    // src/reducers/CardsReducer.js\n    import { ADDED_CARD } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      cards: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case ADDED_CARD:\n          const cards = [...state.cards, { id: action.id, url: action.url }]; // return a new array containing the existing card objects and the new card object\n          return { ...state, cards };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNote that we’re adding it to the end of the new array instead of in the beginning. This is because the `FlatList` component which is responsible for rendering this data is `inverted`. This means that the items are rendered from bottom to top.\n\nLastly, combine all the reducers in a single file:\n\n``` javascript\n    // src/reducers/index.js\n    import { combineReducers } from \"redux\";\n    import CardsReducer from \"./CardsReducer\";\n    \n    export default combineReducers({\n      cards: CardsReducer\n    });\n```\n\nThe code above enabled us to import only a single file to include the reducers and use it for creating the store. Don't add this, as it was already added earlier:\n\n``` javascript\n    // src/screens/ViewScreen.js (don't add as it was already added earlier)\n    import reducers from \"../reducers\"; \n    const store = createStore(reducers);\n```\n\n### Update the CardList component\n\nIf you saw the `CardList` component from the codes of the View screen earlier, you might have noticed that we haven’t really passed any props to it. So how will it have any data to render?\n\n``` javascript\n    // src/screens/ViewScreen.js\n    {this.state.isSubscribed \u0026\u0026 (\n      \u003cScrollView\u003e\n        \u003cView style={styles.mainContent}\u003e\n          \u003cCardList /\u003e\n        \u003c/View\u003e\n      \u003c/ScrollView\u003e\n    )}\n```\n\nThe answer is it doesn’t. Currently, the `CardList` component doesn’t really have the ability to render cards, so we have to update it. Start by importing the `connect` method from the `react-redux` library. This will allow us to create a “connected” component:\n\n``` javascript\n    // src/components/CardList.js\n    import { connect } from \"react-redux\";\n```\n\nAfter the `CardList` prop types, add a `mapStateToProps` method. This allows us to map out any value in the store as a prop for this component. In this case, we only want the `cards` array:\n\n``` javascript\n    CardList.propTypes = {\n      // previous CardList propTypes code here...\n    };\n    \n    // add this:\n    const mapStateToProps = ({ cards }) =\u003e { // extract the cards array from the store\n      return cards; // make it available as props\n    };\n    \n    // replace export default CardList with this:\n    export default connect(mapStateToProps)(CardList);\n```\n\nNow, every time the `addedCard` action is dispatch, the value of `this.props.cards` inside this component will always be in sync with the value of the `cards` array in the store.\n\n\n## Creating the server\n\nThe server is mainly used for authenticating a user who tries to connect to Pusher. If you open the file for the Home screen, we’ve added this code earlier:\n\n``` javascript\n    // src/screens/HomeScreen.js\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR PUSHER APP CLUSTER\",\n        encrypted: true\n      });\n    }\n```\n\nThis is where we establish the connection to Pusher’s servers. The `authEndpoint` is responsible for authenticating the user to verify that they’re really a user of your app. So the app hits the server every time the code above is executed.\n\nNow that you know what the server is used for, we’re ready to add its code. Start by navigating inside the `server` directory and install all the packages:\n\n```\n    cd server\n    npm install\n```\n\nImport all the libraries we need and intialize them. This includes Express and a couple of middlewares (JSON and URL encoded body parser), and `dotenv` which allows us to load values from the `.env` file:\n\n``` javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    \n    var app = express(); // Express server\n    app.use(bodyParser.json()); // for parsing the request body into JSON object\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded request body\n    \n    require(\"dotenv\").config(); // initialize dotenv\n```\n\nNext, initialize the Pusher server component using the values from the `.env` file inside your `server` directory:\n\n``` javascript\n    var pusher = new Pusher({\n      // connect to pusher\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nNext, add the route for testing if the server is working correctly:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the route for authenticating user requests:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n```\n\nNote that in the code above, we haven’t really added any form of authentication. All we’re really doing is authenticating the user as they hit this route. This is not what you want to do for production apps. For production apps, you will most likely have some sort of user authentication before a user can use your app. That’s what you need to integrate into this code so you can ensure that the users who are making requests to your Pusher app are real users of your app.\n\nNext, make the server listen to the port indicated in the `.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nLastly, update the `.env` file and update it with your Pusher app details:\n\n``` javascript\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\n## Running the app\n\nTo run the app, you need to create an account on [ngrok.com](https://ngrok.com/). Once you have an account, go to your [account dashboard](https://dashboard.ngrok.com/get-started) and download the ngrok binary for your operating system. Extract the zip file and you’ll see an `ngrok` file. Execute that file from the terminal (Note: you’ll probably need to add [execution permissions](https://askubuntu.com/questions/484718/how-to-make-a-file-executable) to it if you’re on Linux) to add your auth token:\n\n```\n    ./ngrok authToken YOUR_NGROK_AUTH_TOKEN\n```\n\nOnce that’s done, run the server and expose port 3000 using ngrok:\n\n```\n    node server.js\n    ./ngrok http 3000\n```\n\nNgrok will provide you with an https URL. Use that as the value for the `authEndpoint` in the `src/screens/HomeScreen.js` file:\n\n``` javascript\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_HTTPS_URL/pusher/auth\",\n      });\n    }\n```\n\nLastly, navigate inside the root directory of the app and start it:\n\n```\n    expo start\n```\n\nYou can test the app on your machine using the emulator if you have a powerful machine. Personally, I tested it on my iOS and Android device so you might have better luck when running it on your device also.\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to create a realtime photo-sharing app with React Native and Pusher. Along the way, you learned how to use Expo’s Camera API, Imgur API to anonymously upload images, and Pusher to send and receive data in realtime.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).","metaTitle":"Creating a photo sharing app with React Native","metaDescription":"Create a live photo sharing app using Node.js, React Native and Imgur. Users will be able to follow their friends and broadcast their own photos to their followers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6t55VPE9Gw0gQmWq8OMAAy","type":"Entry","createdAt":"2018-10-25T06:40:44.687Z","updatedAt":"2018-10-25T06:40:44.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a live progress bar with React","url":"live-progress-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/progress-bar","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-10-24","description":"This brief tutorial will show you how to create a simple progress bar in React. It will receive updates from a Node.js backend and update live. The example creates a mock file upload process, allowing you to add your own real-life functionality as needed.","prerequisite":"You will need Node 6+ installed on your machine. Previous experience with React will be helpful.","content":"Long running tasks are a feature of many web applications which need to be handled properly to improve the experience of the user. In many cases, a static progress bar that doesn’t update until the end is provided which leaves the user unsure of how long a task will take or if progress is being made at all.\n\nWe can improve this situation by making our progress bars show the actual progress of the task in realtime, and Pusher makes this really easy to do as you’ll see in the tutorial below.\n\n## Prerequisites\n\nPrevious experience with React is required to follow through with this tutorial. You also need to install [Node.js](https://nodejs.org/en/) (v6 and above) and [npm](https://www.npmjs.com/) on your machine if you don’t have them already. [Installation instructions can be found here](https://docs.npmjs.com/getting-started/installing-node).\n\n\n## Getting started\n\nOpen a new terminal window and create a new folder called `progress-bar`, then `cd` into it:\n\n```\n    mkdir progress-bar\n    cd progress-bar\n```\n\nNext, install `create-react-app`, a tool that allows us to quickly get a React application up and running:\n\n```\n    npm install -g create-react-app\n```\n\nOnce `create-react-app` is installed, use it to bootstrap a new React project. Run the command below within the `progress-bar` directory.\n\n```\n    create-react-app client\n```\n\nThe above command will create a new directory called `client` and install React as well as its accompanying dependencies. It may take a while to complete, so sit tight and wait. Once it’s done, you should see a some information in the terminal informing you of what you can do next.\n\nNext, change into the newly created directory (`cd client`)and run `yarn start` to start the development server. Once the application compiles, you will be able to view it at http://localhost:3000.\n\n## Build the application frontend\n\nFor this demo, we will simulate the common task of uploading a large file to the server. We’re not going to upload a real file; however, we’ll write a small Node script that will simulate the effect of a file upload.\n\nLet’s start by building the application frontend first. We need some additional dependencies for our React application, so let’s install them first. Within the `client` directory, run the following command:\n\n```\n    npm install pusher-js react-ladda\n```\n\n`pusher-js` is the client side SDK for Channels, while `react-ladda` lets us use the [Ladda](https://github.com/hakimel/Ladda) button library in our React app.\n\nOpen up `App.js` in your favorite text editor and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import LaddaButton, { XL, EXPAND_RIGHT } from 'react-ladda';\n    import Pusher from 'pusher-js';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        loading: false,\n        progress: 0,\n      };\n    \n      componentDidMount() {\n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('upload');\n        channel.bind('progress', data =\u003e {\n          this.setState({\n            progress: data.percent / 100,\n          });\n    \n          if (data.percent === 100) {\n            this.setState({\n              loading: false,\n              progress: 0,\n            });\n          }\n        });\n      }\n    \n      handleClick = event =\u003e {\n        event.preventDefault();\n    \n        this.setState({\n          loading: !this.state.loading,\n        });\n    \n        fetch('http://localhost:5000/upload', {\n          method: 'POST',\n        }).catch(error =\u003e console.log(error));\n      };\n    \n      render() {\n        const { loading, progress } = this.state;\n        const message = loading ? (\n          \u003cspan className=\"progress-text\"\u003e{progress * 100}% completed\u003c/span\u003e\n        ) : null;\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003ch1\u003eImaginary Image Upload Service :)\u003c/h1\u003e\n            \u003cLaddaButton\n              loading={this.state.loading}\n              onClick={this.handleClick}\n              progress={this.state.progress}\n              data-color=\"#eee\"\n              data-size={XL}\n              data-style={EXPAND_RIGHT}\n              data-spinner-size={30}\n              data-spinner-color=\"#ddd\"\n              data-spinner-lines={12}\n            \u003e\n              Upload really large image!\n            \u003c/LaddaButton\u003e\n    \n            {message}\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nOur React application consists of one button which, when clicked, will show the progress of the file upload. The `componentDidMount()` lifecycle method houses the logic for streaming upload progress to the app in realtime.\n\nWe’re opening a connection to Channels using the `subscribe()` method which allows us to subscribe to a new channel called `upload`. Then, we listen for the `progress` event on the `upload` channel using the `bind` method and update the application state once we receive a progress update.\n\nBefore you can integrate Channels into your application you need to [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up) on [Pusher](https://pusher.com). Once your account is created, select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Retrieve your credentials from the **API Keys** tab, and then replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders in `App.js` with the appropriate values.\n\n## Add the styles for the application\n\nLet's add the styles for the app’s frontend. Open up `App.css` in your editor and replace its contents with the following styles:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      margin-top: 50px;\n      text-align: center;\n    }\n    \n    .progress-text {\n      display: block;\n      font-size: 16px;\n      margin-top: 20px;\n    }\n```\n\nYou also need to add the style for the Ladda button. You can do so by adding the following tag to the `\u003chead\u003e` of the `index.html` file within the `client/public` directory:\n\n```\n    \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Ladda/1.0.0/ladda.min.css\"\u003e\n```\n\nAt this point, the application should look like this:\n\n![react-progress-bar-demo-1](//images.ctfassets.net/1es3ne0caaid/1EdXEFBJaICmCGu4OuISuY/033308eb9893dcbb6dd1ddce516dd293/react-progress-bar-demo-1.png)\n\n## Create the server component\n\nWe’ll set up the server in the next step so as to simulate the file upload and trigger upload progress updates from the server. Run the following command from the root of the `progress-bar` directory to install the necessary dependencies:\n\n```\n    npm install express cors dotenv pusher\n```\n\nNext, create a new file called `server.js` in the root of your project directory and paste in the following code to set up a simple express server:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nCreate another file called `variables.env` in the root of your project directory and change it’s contents to look like this:\n\n```\n    // variables.env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nRemember, your Pusher credentials can be retrieved from the **API Keys** tab on the Pusher account dashboard.\n\n## Add the /upload route\n\nIf you check the `handleClick()` method within `App.js`, you will see that we are making a post request to `/upload` when the button is clicked. Let’s go ahead and create this route within `server.js`:\n\n``` javascript\n    // server.js\n    \n    ...\n    app.use(cors());\n    \n    app.post('/upload', (req, res) =\u003e {\n      let percent = 0;\n      const interval = setInterval(() =\u003e {\n        percent += 10;\n        pusher.trigger('upload', 'progress', {\n          percent,\n        });\n    \n        if (percent === 100) clearInterval(interval);\n      }, 2000);\n    });\n```\n\nWe’re simulating an upload progress of 10% every two seconds, and triggering a new update on check increment.\n\nYou can start the server by running `node server.js` in a new terminal window and try out the application by clicking the upload button. You should see the progress update in realtime.\n\n![react-progress-bar-demo-2](//images.ctfassets.net/1es3ne0caaid/50Mqe44UdygeSOqcQQayMo/4b4556fd224cb54a8aa08a4f22c6d387/react-progress-bar-demo-2.gif)\n\n## Conclusion\n\nAnd that’s it! This is just scratching the surface of realtime updates using Pusher. Check out some other [use cases](https://pusher.com/tutorials/) for Channels, and as always, you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/progress-bar).","metaTitle":"How to build a live progress bar with React","metaDescription":"This brief tutorial will show you how to create a simple progress bar in React. It will receive updates from a Node.js backend and update live. The example creates a mock file upload process, allowing you to add your own real-life functionality as needed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1JFAD8AF6kqaoGyyo6seu8","type":"Entry","createdAt":"2018-10-01T19:58:43.290Z","updatedAt":"2018-10-02T15:29:17.907Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live news feed with React","url":"live-news-feed-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/react-news-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-10-01","description":"This brief tutorial will show you how to build a live news feed app using React and Node.js. You will integrate NewAPI to allow users to receive a news feed on a given topic (this example uses Bitcoin articles). ","prerequisite":"You will need Node 6+ installed on your machine. Some knowledge of JavaScript and React will be helpful.","content":"There are several instances where it’s important to show new updates in realtime. This  could be in the form of displaying live activities for a sporting event, or updating a news feed with breaking news and headlines as they happen.\n\nIn this tutorial, we’ll explore how Pusher Channels can be used in conjunction with React to build a realtime news feed. If you want to play around with the code as you read this tutorial, visit this [GitHub repository](https://github.com/ayoisaiah/react-news-feed), which contains the final version of the code for you to check out and run locally.\n\n## Prerequisites\n\nTo follow along, a basic knowledge of JavaScript (ES6) and React is required. You also need to have the following installed on your machine:\n\n\n- [Node.js](https://nodejs.org/en/) (v6 and above)\n- [npm](https://www.npmjs.com/)\n\n## Getting started\n\nStart by creating a new empty directory `news-app` and run `npm init -y` from within it in order to initialize the project with a `package.json` file.\n\n### Get News API credentials\n\nHead over to [News API](https://newsapi.org) and [register for a free account](https://newsapi.org/register). Once your account is created, your API key will be presented to you. Take note of it as we’ll be using it shortly.\n\n### Get Pusher credentials\n\nVisit the Pusher website and create an account. Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, check the **API Keys** tab to view your credentials.\n\nIn the root of your project directory, create a new file `variables.env` and populate it with the following contents:\n\n```\n    // variables.env\n    \n    PORT=5000\n    NEWS_API_KEY=\u003cyour news api key\u003e\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Set up the React app\n\nWe will bootstrap our React application with create-react-app. Install it globally on your computer by running the following command:\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process is done, you can run the command below within the `news-app`  directory to set up your React application:\n\n```\n    create-react-app client\n```\n\nOnce the command has finished running, `cd` into the newly created `client` folder and install the other dependencies we will be needing to build the app frontend.\n\n```\n    npm install pusher-js pushid\n```\n\nThe `pusher-js` package is the client SDK for Pusher Channels, while `pushid` helps us generate a random ID string which we’ll be needing when creating the news feed.\n\nRun `yarn start` to launch the development server once all the dependencies have been installed.\n\n## Application logic\n\nOpen up `client/src/App.js` and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import pushid from 'pushid';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        newsItems: [],\n      }\n    \n      componentDidMount() {\n        fetch('http://localhost:5000/live')\n          .then(response =\u003e response.json())\n          .then(articles =\u003e {\n            this.setState({\n              newsItems: [...this.state.newsItems, ...articles],\n            });\n          }).catch(error =\u003e console.log(error));\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('news-channel');\n        channel.bind('update-news', data =\u003e {\n          this.setState({\n            newsItems: [...data.articles, ...this.state.newsItems],\n          });\n        });\n      }\n    \n      render() {\n        const NewsItem = (article, id) =\u003e (\n          \u003cli key={id}\u003e\u003ca href={`${article.url}`}\u003e{article.title}\u003c/a\u003e\u003c/li\u003e\n        );\n        \n        const newsItems = this.state.newsItems.map(e =\u003e NewsItem(e, pushid()));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003ch1 className=\"App-title\"\u003eLive Bitcoin Feed\u003c/h1\u003e\n    \n            \u003cul className=\"news-items\"\u003e{newsItems}\u003c/ul\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nOur application `state` contains only one property: `newsItems`, which will contain a list of all news articles. When the app loads, it will fetch a list of news items from the server and update the `newsItems` array which would trigger an update on  the page, causing a list of news items to be displayed.\n\nWe also subscribed the app to the `news-channel` channel, which is where our server will publish events to. Once the `update-news` event is received, the page will be updated with incoming news items.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate details from your Pusher account dashboard.\n\n## Add the application styles\n\nWithin the `client` directory, locate `src/App.css` and change its contents to look like this:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      width: 100%;\n      max-width: 700px;\n      margin: 0 auto;\n    }\n    \n    .App-title {\n      text-align: center;\n    }\n    \n    .text-input {\n      width: 100%;\n      border: 1px solid #f7f7f7;\n      padding: 10px;\n    }\n    \n    .text-input:hover {\n      box-shadow: 0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.25);\n    }\n    \n    .news-items {\n      list-style: none;\n      padding-left: 0;\n    }\n    \n    .news-items li {\n      margin-bottom: 10px;\n    }\n```\n\n## Set up the server\n\nLet’s set up a simple Express server for the purpose of fetching news items from https://newsapi.org and triggering realtime updates with Pusher.\n\n`cd` to the root of the `news-app` directory and install all the dependencies that are required to build the server:\n\n```\n    npm install express cors dotenv newsapi pusher --save\n```\n\nCreate a new `server.js` file and open it up in your text editor. Add the following code to `server.js`:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    const NewsAPI = require('newsapi');\n    \n    const app = express();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    const newsapi = new NewsAPI(process.env.NEWS_API_KEY);\n    \n    const fetchNews = (searchTerm, pageNum) =\u003e\n      newsapi.v2.everything({\n        q: searchTerm,\n        language: 'en',\n        page: pageNum,\n        pageSize: 5,\n      });\n    \n    app.use(cors());\n    \n    function updateFeed(topic) {\n      let counter = 2;\n      setInterval(() =\u003e {\n        fetchNews(topic, counter)\n          .then(response =\u003e {\n            pusher.trigger('news-channel', 'update-news', {\n              articles: response.articles,\n            });\n            counter += 1;\n          })\n          .catch(error =\u003e console.log(error));\n      }, 5000);\n    }\n    \n    app.get('/live', (req, res) =\u003e {\n      const topic = 'bitcoin';\n      fetchNews(topic, 1)\n        .then(response =\u003e {\n          res.json(response.articles);\n          updateFeed(topic);\n        })\n        .catch(error =\u003e console.log(error));\n    });\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nOnce the `/live` endpoint is hit, news articles about bitcoin are retrieved from newsapi.org, and sent back to the client. We then make further requests every five seconds with  `setInterval` and use Pusher to trigger the `update-news` event with the incoming articles in the event payload.\n\nStart the server by running `node server.js` from the root of your project directory. At this point, you should have a news feed that updates in realtime.\n\n![react-news-feed-demo](//images.ctfassets.net/1es3ne0caaid/1Ii2mspYQImoWKKUISsWGA/d71c7248852d97e3cc6192a967180047/react-news-feed-demo.gif)\n\n## Conclusion\n\nIn this tutorial, you have learned how to build a news feed with React and how to set up Channels for adding realtime functionality to the feed. \n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/react-news-feed).","metaTitle":"Build a live news feed with React","metaDescription":"Use React and Node to create a live news feed. The example pulls in new stories about Bitcoin every few seconds, via the News API service."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7wyCFxpsoEwUKO8uGqm4IC","type":"Entry","createdAt":"2018-09-05T19:16:08.892Z","updatedAt":"2018-09-05T19:16:08.892Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live photo feed using React and Cloudinary","url":"live-feed-react-cloudinary","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/realtime-photo-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-09-05","description":"In this short tutorial, create a live photo feed using Node, React and Cloudinary. Upload and publish photos in realtime.","prerequisite":"You will need Node 6+ and npm installed on your machine. A basic knowledge of JavaScript (ES6) and React will be helpful.","content":"In this tutorial, we’ll go through how to build a photo feed with React and Cloudinary, while providing realtime updates to the feed using Pusher Channels. You can find the entire source code of the application in this [GitHub repository](https://github.com/ayoisaiah/realtime-photo-feed).\n\n## Prerequisites\n\nTo follow along, a basic knowledge of JavaScript (ES6) and React is required. You also need to have the following installed on your machine:\n\n- [Node.js](https://nodejs.org/en/) (v6 and above)\n- [npm](https://www.npmjs.com/)\n\n## Set up the server\n\nLet’s set up a simple Node server for the purpose of uploading images to Cloudinary and triggering realtime updates with Pusher.\n\nThe first step is to create a new empty directory and run `npm init -y` from within it. Next, install all the dependencies that we need for this project by running the command below:\n\n```\n    npm install express nedb cors body-parser connect-multiparty pusher cloudinary dotenv\n```\n\nWait for the installation to complete, then create a file named `server.js` in the root of your project directory and populate the file with the following contents:\n\n``` javascript\n    // server.js\n    \n    // import dependencies\n    require('dotenv').config({ path: 'variables.env' });\n    const express = require('express');\n    const multipart = require('connect-multiparty');\n    const bodyParser = require('body-parser');\n    const cloudinary = require('cloudinary');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const Pusher = require('pusher');\n    \n    // Create an express app\n    const app = express();\n    // Create a database\n    const db = new Datastore();\n    \n    // Configure middlewares\n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    // Setup multiparty\n    const multipartMiddleware = multipart();\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nHere, we’ve imported the dependencies into our entry file. Here’s an explanation of what they all do:\n\n\n- [express](https://expressjs.com): A minimal and flexible Node.js server.\n- [nedb](https://github.com/louischatriot/nedb): In memory database for Node.js.\n- [connect-multiparty](https://github.com/expressjs/connect-multiparty): Express middleware for parsing uploaded files.\n- [body-parser](https://github.com/expressjs/body-parser): Express middleware for parsing incoming request bodies.\n- [dotenv](https://www.npmjs.com/package/dotenv): Loads environmental variables from `.env` file into `process.env`.\n- [pusher](https://pusher.com/): Server SDK for Pusher Channels.\n- [cloudinary](http://cloudinary.com/): Cloudinary server SDK.\n\nCreate a `variables.env` file in the root of your project and add a `PORT` variable therein:\n\n```\n    // variables.env\n    \n    PORT:5000\n```\n\nHard-coding credentials in your code is a bad practice so we’ve set up `dotenv` to load the app’s credentials from `variables.env` and make them available on `process.env`.\n\n\n## Set up Pusher\n\nHead over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, retrieve your credentials from the API Keys tab, then add the following to your `variables.env` file:\n\n```\n    // variables.env\n    \n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nNext, initialize the Pusher SDK within `server.js`:\n\n``` javascript\n    // server.js\n    ...\n    const db = new Datastore();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n```\n\n## Set up Cloudinary\n\nVisit the Cloudinary website and [sign up for a free account](https://cloudinary.com/signup). Once your account is confirmed, retrieve your credentials from the dashboard, then add the following to your `variables.env` file:\n\n![react-cloudinary-credentials](//images.ctfassets.net/1es3ne0caaid/1SHB7e0OMQQsyq686Go8Q6/a42812880e0dd610159c324b1fe56f51/react-cloudinary-credentials.png)\n\n```\n    // variables.env\n    \n    CLOUDINARY_CLOUD_NAME=\u003cyour cloud name\u003e\n    CLOUDINARY_API_KEY=\u003cyour api key\u003e\n    CLOUDINARY_API_SECRET=\u003cyour api secret\u003e\n```\n\nNext, initialize the Cloudinary SDK within `server.js` under the `pusher` variable:\n\n``` javascript\n    // server.js\n    \n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n```\n\n## Create routes\n\nWe are going to create two routes for our application: the first one will serve all gallery images, while the second one handles the addition of a new image to the database.\n\nHere’s the one that handles sending all images to the client. Add this above the `port` variable:\n\n``` javascript\n    // server.js\n    \n    app.get('/', (req, res) =\u003e {\n      db.find({}, (err, data) =\u003e {\n        if (err) return res.status(500).send(err);\n        res.json(data);\n      });\n    });\n```\n\nWhen this endpoint is hit, a JSON representation of all images that exist in the database will be sent to the client, except if an error is encountered, in which case a 500 server error will be sent instead.\n\nNext, let’s add the route that adds new images sent from the client to the database.\n\n``` javascript\n    // server.js\n    \n    app.post('/upload', multipartMiddleware, (req, res) =\u003e {\n      // Upload image\n      cloudinary.v2.uploader.upload(req.files.image.path, {}, function(\n        error,\n        result\n      ) {\n        if (error) {\n          return res.status(500).send(error);\n        }\n        // Save image to database\n        db.insert(Object.assign({}, result, req.body), (err, newDoc) =\u003e {\n          if (err) {\n            return res.status(500).send(err);\n          }\n          //\n          pusher.trigger('gallery', 'upload', {\n            image: newDoc,\n          });\n          res.status(200).json(newDoc);\n        });\n      });\n    });\n```\n\nHere, the image is uploaded to Cloudinary and, on successful upload, a database entry is created for the image and a new `upload` event is emitted for the `gallery` channel along with the payload of the newly created item.\n\nThe code for the server is now complete. You can start it by running `node server.js` in your terminal.\n\n\n## Set up React app\n\nLet's bootstrap our project using the create-react-app which allows us to quickly get a React application up and running. Open a new terminal window, and run the following command to install `create-react-app` on your machine:\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process is done, you can run the command below to setup your react application:\n\n```\n    create-react-app client\n```\n\nThis command will create a new folder called `client` in the root of your project directory, and install all the dependencies needed to build and run the React application.\n\nNext, `cd` into the newly created directory and install the other dependencies which we’ll be needing for our app’s frontend:\n\n```\n    npm install pusher-js axios react-spinkit\n```\n\n- [pusher-js](https://pusher.com): Client SDK for Pusher.\n- [axios](https://github.com/axios/axios): Promise based HTTP client for the browser and Node.\n- [react-spinkit](https://www.npmjs.com/package/react-spinkit): Loading indicator component.\n\nFinally, start the development server by running `yarn start` from within the root of the `client` directory.\n\n## Add the styles for the app\n\nWithin the `client` directory, locate `src/App.css` and change its contents to look like this:\n\n``` css\n    // src/App.css\n    \n    body {\n      font-family: 'Roboto', sans-serif;\n    }\n    \n    .App {\n      margin-top: 40px;\n    }\n    \n    .App-title {\n      text-align: center;\n    }\n    \n    img {\n      max-width: 100%;\n    }\n    \n    form {\n      text-align: center;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      font-size: 18px;\n    }\n    \n    .label {\n      display: block;\n      margin-bottom: 20px;\n      font-size: 20px;\n    }\n    \n    input[type=\"file\"] {\n      margin-bottom: 20px;\n    }\n    \n    button {\n      border: 1px solid #353b6e;\n      border-radius: 4px;\n      color: #f7f7f7;\n      cursor: pointer;\n      font-size: 18px;\n      padding: 10px 20px;\n      background-color: rebeccapurple;\n    }\n    \n    .loading-indicator {\n      display: flex;\n      justify-content: center;\n      margin-top: 30px;\n    }\n    \n    .gallery {\n      display: grid;\n      grid-template-columns: repeat(3, 330px);\n      grid-template-rows: 320px 320px 320px;\n      grid-gap: 20px;\n      width: 100%;\n      max-width: 1000px;\n      margin: 0 auto;\n      padding-top: 40px;\n    }\n    \n    .photo {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n      background-color: #d5d5d5;\n      box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);\n    }\n```\n\n## Application logic\n\nOpen up `src/App.js` and change its contents to look like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import Spinner from 'react-spinkit';\n    import './App.css';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          images: [],\n          selectedFile: null,\n          loading: false,\n        };\n      }\n    \n      componentDidMount() {\n        this.setState({\n          loading: true,\n        });\n    \n        axios.get('http://localhost:5000').then(({ data }) =\u003e {\n          this.setState({\n            images: [...data, ...this.state.images],\n            loading: false,\n          });\n        });\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('gallery');\n        channel.bind('upload', data =\u003e {\n          this.setState({\n            images: [data.image, ...this.state.images],\n          });\n        });\n      }\n    \n      fileChangedHandler = event =\u003e {\n        const file = event.target.files[0];\n        this.setState({ selectedFile: file });\n      };\n    \n      uploadImage = event =\u003e {\n        event.preventDefault();\n    \n        if (!this.state.selectedFile) return;\n    \n        this.setState({\n          loading: true,\n        });\n    \n        const formData = new FormData();\n        formData.append(\n          'image',\n          this.state.selectedFile,\n          this.state.selectedFile.name\n        );\n    \n        axios.post('http://localhost:5000/upload', formData).then(({ data }) =\u003e {\n          this.setState({\n            loading: false,\n          });\n        });\n      };\n    \n      render() {\n        const image = (url, index) =\u003e (\n          \u003cimg alt=\"\" className=\"photo\" key={`image-${index} }`} src={url} /\u003e\n        );\n    \n        const images = this.state.images.map((e, i) =\u003e image(e.secure_url, i));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003ch1 className=\"App-title\"\u003eLive Photo Feed\u003c/h1\u003e\n    \n            \u003cform method=\"post\" onSubmit={this.uploadImage}\u003e\n              \u003clabel className=\"label\" htmlFor=\"gallery-image\"\u003e\n                Choose an image to upload\n              \u003c/label\u003e\n              \u003cinput\n                type=\"file\"\n                onChange={this.fileChangedHandler}\n                id=\"gallery-image\"\n                accept=\".jpg, .jpeg, .png\"\n              /\u003e\n              \u003cbutton type=\"submit\"\u003eUpload!\u003c/button\u003e\n            \u003c/form\u003e\n    \n            \u003cdiv className=\"loading-indicator\"\u003e\n              {this.state.loading ? \u003cSpinner name=\"spinner\" /\u003e : ''}\n            \u003c/div\u003e\n    \n            \u003cdiv className=\"gallery\"\u003e{images}\u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nI know that’s a lot of code to process in one go, so let me break it down a bit.\n\nThe `state` of our application is initialized with three values: `images` is an array that will contain all images in our photo feed, while `selectedFile` represents the currently selected file in the file input. `loading` is a Boolean  property that acts as a flag to indicate whether the loading component, `Spinner`, should be rendered on the page or not.\n\nWhen the user selects a new image, the `fileChangedHandler()` function is invoked, which causes `selectedFile` to point to the selected image. The **Upload** button triggers a form submission, causing `uploadImage()` to run. This function basically sends the image to the server and through an `axios` post request.\n\nIn the `componetDidMount()` lifecycle method, we try  to fetch all the images that exist in the database (if any) so that on page refresh, the feed is populated with existing images.\n\nThe Pusher client library provides a handy  `bind` function that allows us to latch on to events emitted by the server so that we can update the application state. You need to update the `pusher` variable with your app key and cluster before running the code. Here, we’re listening for the `upload` event on the `gallery` channel. Once the `upload` event is triggered, our application is updated with the new image as shown below:\n\n![react-cloudinary-demo](//images.ctfassets.net/1es3ne0caaid/4tWSUnHBt6OI64cOMAQQeC/e3ef4e5b1721a278c65d948956136e7b/react-cloudinary-demo.gif)\n\n## Conclusion\n\nYou have now learned how easy it is to create a live feed and update several clients with incoming updates in realtime with Pusher. \n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository.](https://github.com/ayoisaiah/realtime-photo-feed)","metaTitle":"Build a live photo feed using React and Cloudinary","metaDescription":"Use Node, React and Cloudinary to create a live photo feed. Upload and publish photos in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2XflDszQXuWmUW82mC0KWs","type":"Entry","createdAt":"2018-08-16T18:40:59.286Z","updatedAt":"2018-08-16T18:40:59.286Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a chatbot with Preact and Wit.ai","url":"chatbot-preact-witai","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/preact-chatbot","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-08-16","description":"Build a chatbot using Preact and Wit.ai, with a Node.js backend. Create custom entities, and implement realtime functionality to allow users to interact with the bot instantly.","prerequisite":"You will need a recent version of Node and npm installed on your machine. A basic understanding of React or Preact will be helpful.","content":"In this tutorial, we will consider how to build a realtime chatbot that incorporates NLP using [Preact](https://preactjs.com), [Wit.ai](https://wit.ai) and [Pusher Channels](https://pusher.com/docs). You can find the entire source code of the application in this [GitHub](https://github.com/ayoisaiah/preact-chatbot) [repository](https://github.com/ayoisaiah/preact-chatbot).\n\nChatbots have become more and more prevalent over the past few years, with several businesses taking advantage of them to serve their customers better.\n\nMany chatbots integrate natural language processing (NLP) which adds a more human touch to conversations, and helps them understand a wider variety of inputs.\n\n## Prerequisites\n\nBefore you continue, make sure  you have [Node.js](https://nodejs.org/en/), [npm](https://www.npmjs.com/) and `curl` installed on your computer. [You can find out how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node).  \n\nThe versions I used while creating this tutorial are as follows:\n\n- Node.js v10.4.1\n- npm v6.3.0\n\nYou can view the version of Node and `npm` you have installed by running the following commands in your terminal:\n\n```\n    node -v\n    npm -v\n```\n\nI believe the code will still work even if you’re on an older version of Node, but if you have any trouble completing the tutorial, try upgrading to the versions I used to see if it fixes your problem.\n\nAlso investigate how to install `curl` on your favorite operating system, or use [this website](https://onlinecurl.com/).\n\nFinally, you need to have a basic understanding of JavaScript and Preact or React, but no prior experience with Pusher or Wit.ai is required.\n\n## Getting started\n\nLet's bootstrap our project using the [preact-cli](https://github.com/developit/preact-cli) tool which allows us to quickly get a Preact application up and running.\n\nOpen up your terminal, and run the following command to install `preact-cli` on your machine:\n\n```\n    npm install -g preact-cli\n```\n\nOnce the installation completes, you'll have access to the `preact` command that will be used to setup the project. Run the following command in the terminal to create your Preact app:\n\n```\n    preact create simple preact-chatbot\n```\n\nThe above command will create a new directory called `preact-chatbot` and install `preact` as well as its accompanying dependencies. It may take a while to complete, so sit tight and wait. Once it’s done, you should see a some information in the terminal informing you of what you can do next.\n\n![preact-new-project](//images.ctfassets.net/1es3ne0caaid/1mPFykN3V2A4MO0asuwEgm/4b6dcebf806b0e17d8290c72be1e61fd/preact-new-project.png)\n\nNext, change into the newly created directory and run `npm run start` to start the development server.\n\nOnce the application compiles, you will be able to view it at http://localhost:8080. When you open up that URL in your browser, you should see a page on your screen that looks like this:\n\n![preact-hello-world](//images.ctfassets.net/1es3ne0caaid/4edVeotl7WI2kU4IAgoAq2/1d6982ab1a8a55ed299fee2ff931a5d3/preact-hello-world.png)\n\n## Create your application frontend with Preact\n\nOpen up `index.js` in your text editor, and change its contents to look like this:\n\n``` javascript\n    // index.js\n    \n    import './style';\n    import { Component } from 'preact';\n    \n    export default class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          userMessage: '',\n          conversation: [],\n        };\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleChange(event) {\n        this.setState({ userMessage: event.target.value });\n      }\n    \n      handleSubmit(event) {\n        event.preventDefault();\n        const msg = {\n          text: this.state.userMessage,\n          user: 'user',\n        };\n    \n        this.setState({\n          conversation: [...this.state.conversation, msg],\n        });\n    \n        fetch('http://localhost:7777/chat', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            message: this.state.userMessage,\n          }),\n        });\n    \n        this.setState({ userMessage: '' });\n      }\n    \n      render() {\n        const ChatBubble = (text, i, className) =\u003e {\n          const classes = `${className} chat-bubble`;\n          return (\n            \u003cdiv key={`${className}-${i}`} class={`${className} chat-bubble`}\u003e\n              \u003cspan class=\"chat-content\"\u003e{text}\u003c/span\u003e\n            \u003c/div\u003e\n          );\n        };\n    \n        const chat = this.state.conversation.map((e, index) =\u003e\n          ChatBubble(e.text, index, e.user)\n        );\n    \n        return (\n          \u003cdiv\u003e\n            \u003ch1\u003eRealtime Preact Chatbot\u003c/h1\u003e\n            \u003cdiv class=\"chat-window\"\u003e\n              \u003cdiv class=\"conversation-view\"\u003e{chat}\u003c/div\u003e\n              \u003cdiv class=\"message-box\"\u003e\n                \u003cform onSubmit={this.handleSubmit}\u003e\n                  \u003cinput\n                    value={this.state.userMessage}\n                    onInput={this.handleChange}\n                    class=\"text-input\"\n                    type=\"text\"\n                    autofocus\n                    placeholder=\"Type your message and hit Enter to send\"\n                  /\u003e\n                \u003c/form\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nIf you have some experience with Preact or React, the above code should be straightforward to understand. The state of the application is initialized with two values:  `userMessage` which contains the value of whatever the user types into the input field, and `conversation` which is an array that will hold each message in the conversation.\n\nThe `handleChange` function runs on every keystroke to update `userMessage` which allows the displayed value to update as the user types. When the user hits the `Enter` button the form will be submitted and `handleSubmit` will be invoked. \n\n`handleSubmit` updates the  `conversation` state with the contents of the user's message and sends the message in a `POST` request to the `/chat` endpoint which we will soon setup in our app’s server component, before clearing the input field by setting `userMessage` to an empty string.\n\n## Add the styles for the application\n\nLet's add the styles for the app’s frontend. Open up `style.css` in your editor and replace its contents with the following styles:\n\n``` css\n    // style.css\n    \n    html, body {\n      font: 14px/1.21 'Helvetica Neue', arial, sans-serif;\n      font-weight: 400;\n      box-sizing: border-box;\n    }\n    \n    *, *::before, *::after {\n      box-sizing: inherit;\n      margin: 0;\n      padding: 0;\n    }\n    \n    h1 {\n      text-align: center;\n      margin-bottom: 40px;\n    }\n    \n    .chat-window {\n      width: 750px;\n      margin: auto;\n      border: 1px solid #eee;\n    }\n    \n    .conversation-view {\n      width: 100%;\n      min-height: 300px;\n      padding: 20px 40px;\n    }\n    \n    .message-box {\n      width: 100%;\n      background-color: #d5d5d5;\n      padding: 10px 20px;\n    }\n    \n    .text-input {\n      width: 100%;\n      border-radius: 4px;\n      border: 1px solid #999;\n      padding: 5px;\n    }\n    \n    .chat-bubble {\n      font-size: 20px;\n      margin-bottom: 20px;\n      width: 100%;\n      display: flex;\n    }\n    \n    .chat-bubble.ai {\n      justify-content: flex-end;\n    }\n    \n    .chat-bubble.ai .chat-content {\n      background-color: #eec799;\n    }\n    \n    .chat-content {\n      display: inline-block;\n      padding: 8px 15px;\n      background-color: #bada55;\n      border-radius: 10px;\n    }\n```\n\nNow, the application should look like this:\n\n![preact-demo-1](//images.ctfassets.net/1es3ne0caaid/3E3qH2JZlKokeCwCeqC2e8/427d30a0046bf3fc09ea865372edbcf5/preact-demo-1.png)\n\n\n## Setup your Wit.ai application\n\nHead over to the [Wit.ai website](https://wit.ai) and create a free account.\n\nOnce you are signed in, hit the **+** icon at the top right of the page to create a new application. Enter your app name and click the **+Create App** button at the bottom.\n\n![witai-create-app](//images.ctfassets.net/1es3ne0caaid/3pNYuoHdgkwcom6AeeMmKa/331b33fab6db187d4bb2b3ff51ae15d1/witai-create-app.png)\n\nYou should see the following page once your app has been created.\n\n![witai-new-app](//images.ctfassets.net/1es3ne0caaid/34M4WfEdWwswGAWQi0U4u0/157b5b6650b5ad9b1f9f53fc5549f3f3/witai-new-app.png)\n\n## Create your first entity\n\nWit.ai uses entities to help you understand user queries and extract meaningful information from them. Let's setup an entity that will enable our bot to understand common greetings like \"Hi\" or \"Hello\". \n\nType the word \"Hello\" in the \"User says…\" input field, then select the “wit/greetings” entity in the **Add a new entity** field. Use the dropdown on the right to set the value of the entity to **true**.\n\n![witai-new-entity](//images.ctfassets.net/1es3ne0caaid/3cpWaboPnO4Q8a2y0QMkYS/d6eeec27f83db214a5fc8789a4948263/witai-new-entity.png)\n\nOnce done, hit the **Validate** button to add the entity to your application. You can repeat the steps for other greetings such as \"Hi\", \"Hey\", \"Good morning\" etc.\n\n![witai-entity-validate](//images.ctfassets.net/1es3ne0caaid/35NxRkXs40uWu6CQM4we8q/5572518f63a427f90a7b52b047e4c66a/witai-entity-validate.png)\n\nIf you click on the **wit/greetings** entry at the bottom, you will be directed to the entity page that contains all the expressions under that entity.\n\n![witai-expressions](//images.ctfassets.net/1es3ne0caaid/2flNrPZj0kgYeq2mCMo0eE/5560609feebdf8e0c65eb352248a7e49/witai-expressions.png)\n\n## Create a custom entity\n\n`wit/greetings` is an example of a [built-in entity.](https://wit.ai/docs/built-in-entities/20180601) These built-in entities are prefixed by `wit/`, and are defined to extract common expressions from messages. Things like age, money, email address, location and the likes are all covered by Wit.ai’s built-in entities.\n\nYou can train our bot to understand other things that the built-in entities do not cover. For example, let's add an entity that allows our bot to understand a request for a joke.\n\nType \"Tell me a joke\" in the **User says...** input field, and add a new entity called \"getJoke\". As before, use the dropdown on the right to set the value of the entity to **true** and hit the **Validate** button.\n\n![witai-custom-entity](//images.ctfassets.net/1es3ne0caaid/v3wP6YwgGkyuMugQgKkIg/4df89a482c1591f9c01b30a1776a4bc1/witai-custom-entity.png)\n\n## Test your Wit.ai chatbot with curl\n\nGo to the settings page, and type \"Hello\" in the input field that says **Type something to cURL**, then copy the command to your clipboard using the copy icon on the right.\n\n![witai-curl-test-1](//images.ctfassets.net/1es3ne0caaid/l8yw7etu6WKkEAmmy2GAw/f606daeb4dd84584905e900604cca448/witai-curl-test-1.png)\n\nOpen a terminal window and paste in the command, then press Enter. This would produce some output in your terminal that shows the entity that your query matches.\n\n![witai-curl-test-2](//images.ctfassets.net/1es3ne0caaid/6xRWJ4lpOoooMc8aAyYcAO/b68aaf6d165bb588ba538613525b88d1/witai-curl-test-2.png)\n\n## Set up the server component\n\nWe need to setup a server component so that we can pass messages sent through the frontend of the app to Wit.ai for processing.\n\nRun the following command to install the dependencies we’ll be needing on the server side:\n\n```\n    npm install --save express body-parser cors node-wit dotenv\n```\n\nNext, create a new file called `server.js` in the root of your project directory and paste in the following code to set up a simple express server:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const { Wit } = require('node-wit');\n    \n    const client = new Wit({\n      accessToken: process.env.WIT_ACCESS_TOKEN,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.post('/chat', (req, res) =\u003e {\n      const { message } = req.body;\n      \n      client\n        .message(message)\n        .then(data =\u003e {\n          console.log(data);\n        })\n        .catch(error =\u003e console.log(error));\n    });\n    \n    app.set('port', process.env.PORT || 7777);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nWe've also set up a `/chat` endpoint that receives messages from the frontend of our app and sends it off to the [Wit message API](https://wit.ai/docs/http/20160330#get-intent-via-text-link). Whatever response is received is then logged to the console.\n\nBefore you start the server, create a `variables.env` file in the root of your project directory. You should add this file to your `.gitignore` so that you do not commit it into your repository by accident.\n\nHere’s how your `variables.env` file should look like:\n\n```\n    // variables.env\n    \n    PORT=7777\n    WIT_ACCESS_TOKEN=\u003cyour server access token\u003e\n```\n\nYou can grab your Wit.ai server access token by heading to the settings under API Details.\n\n![witai-server-key](//images.ctfassets.net/1es3ne0caaid/5mNVf378PuCw0a24YOQUiW/1b0b95da1db1be193ed6defa609011ec/witai-server-key.png)\n\nSave the file and run `node server.js` from the root of your project directory to start the server.\n\nNow, send a few messages in the chat window, and watch the terminal where your Node server is running. You should see some output in your terminal that shows the entity that your query matches.\n\n![preact-demo-2](//images.ctfassets.net/1es3ne0caaid/18JOCTILrK8qGWgKu0qowY/b01a7693713d12707214e54209ebb4e2/preact-demo-2.png)\n\n\n![preact-demo-cli](//images.ctfassets.net/1es3ne0caaid/4eAIENajO8yaesgqIom2kK/e3832f087d3fd84f79e31626e1c8c337/preact-demo-cli.png)\n\n## Set up responses for your chatbot\n\nNow that user messages are being passed on to Wit.ai successfully, we need to add a way to detect which entity was matched and send an appropriate response to the user.\n\nWe'll achieve that by setting up a `responses` object that contains a variety of responses for each entity that we defined, and then send a random message when the appropriate entity is matched.\n\nInside the `/chat` route and under the `message` variable, paste in the following code:\n\n``` javascript\n    // server.js\n    \n    const responses = {\n      greetings: [\"Hey, how's it going?\", \"What's good with you?\"],\n    \n      jokes: [\n        'Do I lose when the police officer says papers and I say scissors?',\n        'I have clean conscience. I haven’t used it once till now.',\n        'Did you hear about the crook who stole a calendar? He got twelve months.',\n      ],\n    };\n    \n    const firstEntityValue = (entities, entity) =\u003e {\n      const val =\n        entities \u0026\u0026\n        entities[entity] \u0026\u0026\n        Array.isArray(entities[entity]) \u0026\u0026\n        entities[entity].length \u003e 0 \u0026\u0026\n        entities[entity][0].value;\n        \n      if (!val) {\n        return null;\n      }\n      \n      return val;\n    };\n    \n    const handleMessage = ({ entities }) =\u003e {\n      const greetings = firstEntityValue(entities, 'greetings');\n      const jokes = firstEntityValue(entities, 'getJoke');\n    \n      if (greetings) {\n        return console.log(responses.greetings[\n          Math.floor(Math.random() * responses.greetings.length)\n        ]);\n      }\n    \n      if (jokes) {\n        return console.log(responses.jokes[\n          Math.floor(Math.random() * responses.jokes.length)\n        ]);\n      }\n    \n      return console.log('I can tell jokes! Say \\'tell me a joke\\'')\n    };\n```\n\nThen change the line that says `console.log(data)` to `handleMessage(data)`:\n\n``` javascript\n    // server.js\n    \n    client\n      .message(message)\n      .then(data =\u003e {\n        handleMessage(data);\n      })\n      .catch(error =\u003e console.log(error));\n```\n\nOnce we find an entity that matches, a random message from the appropriate property in the `responses` object is logged to the console. Otherwise the default response is logged.\n\n\n## Set up Pusher Channels for realtime responses\n\nNow, let's integrate Pusher into the app so that our bot can respond to the user in realtime. Head over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app.\n\nOnce your app is created, retrieve your credentials from the API Keys tab, then add the following to your `variables.env` file:\n\n```\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Integrate Pusher Channels into your Preact application\n\nFirst, install the Pusher Channels client library by running the command below:\n\n```\n    npm install pusher-js\n```\n\nThen import it at the top of `index.js`:\n\n``` javascript\n    import Pusher from 'pusher-js';\n```\n\nNext, we’ll open a connection to Channels and use the  `subscribe()` method from Pusher to subscribe to a new channel called `bot`. Finally, we’ll listen for the `bot-response` on the `bot` channel using the `bind` method and update the application state once we receive a message.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholder with the appropriate details from your Pusher account dashboard.\n\n``` javascript\n    // index.js\n    \n    componentDidMount() {\n      const pusher = new Pusher('\u003cyour app key\u003e', {\n        cluster: '\u003cyour app cluster\u003e',\n        encrypted: true,\n      });\n    \n      const channel = pusher.subscribe('bot');\n      channel.bind('bot-response', data =\u003e {\n        const msg = {\n          text: data.message,\n          user: 'ai',\n        };\n        this.setState({\n          conversation: [...this.state.conversation, msg],\n        });\n      });\n    }\n```\n\n## Trigger events from the server\n\nAdd the Pusher server library though npm:\n\n```\n    npm install pusher\n```\n\nThen import it at the top of `server.js`:\n\n``` javascript\n    // server.js\n    \n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n```\n\nChange the `handleMessage` function to look like this:\n\n``` javascript\n    // server.js\n    \n    onst handleMessage = ({ entities }) =\u003e {\n      const greetings = firstEntityValue(entities, 'greetings');\n      const jokes = firstEntityValue(entities, 'getJoke');\n      \n      if (greetings) {\n        return pusher.trigger('bot', 'bot-response', {\n          message:\n            responses.greetings[\n              Math.floor(Math.random() * responses.greetings.length)\n            ],\n        });\n      }\n    \n      if (jokes) {\n        return pusher.trigger('bot', 'bot-response', {\n          message:\n            responses.jokes[\n              Math.floor(Math.random() * responses.jokes.length)\n            ],\n        });\n      }\n    \n      return pusher.trigger('bot', 'bot-response', {\n        message: 'I can tell jokes! Say \\'tell me a joke\\'',\n      });\n    };\n```\n\nStop the node server if it is currently running by pressing `Ctrl + C` in the terminal and restart it with `node server.js`. Now you can go ahead and test your bot! Send messages like “hey”, or “Tell me a joke” and you will get replies from the bot.\n\n![preact-demo-3](//images.ctfassets.net/1es3ne0caaid/47YtBeZqT6QUakm8cACS8a/ffaed43b52eeed12e87420590f04f7cc/preact-demo-3.png)\n\n## Conclusion\n\nYou have now learned how easy it is to create a chatbot that incorporates natural language processing with Wit.ai and how to respond in realtime with Pusher Channels.\n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/preact-chatbot).","metaTitle":"How to build a chatbot with Preact and Wit.ai","metaDescription":"This tutorial shows how to create a simple chatbot using Preact, Node.js and Wit.ai. The bot will respond to queries in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2d4PDsL23OUcUGAYceGw8g","type":"Entry","createdAt":"2018-08-23T18:19:02.151Z","updatedAt":"2018-08-23T19:55:19.188Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Adding realtime functionality to a blog using Kubeless","url":"realtime-blog-kubeless","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-kubeless-blog","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4sfpYwaAdiGWy2gW6Ak2Yc","type":"Entry","createdAt":"2018-08-23T19:44:54.047Z","updatedAt":"2018-08-23T19:53:29.265Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kubernetes","url":"kubernetes","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-08-15","description":"In this tutorial you will create a simple blog using serverless architecture for the backend, specifically Kubeless. You will add basic blogging functionality, including realtime post publishing. You will use React for your frontend.","prerequisite":"You will need a functioning Kubernetes system (1.8+). This tutorial was created and tested using Kubernetes 1.10 inside Docker 18.05 on macOS 10. It assumes you can debug Kubernetes problems on your own system.","content":"## Introduction\n\nIn this article, we are going to examine how to create a simple blog using a serverless architecture - in specific, Kubeless. This will show how we can connect simple handlers together to make everything work, and how we can add new functionality easily to the system without any major upheaval. \n\n![kubeless-realtime-demo](//images.ctfassets.net/1es3ne0caaid/50s0MKQDgAYuAEg44SMOCI/844d2ce62cc17e55ca40e1a8c598095f/kubeless-realtime-demo.gif)\n\n\n### What is a serverless architecture?\n\nServerless development is a relatively recent architectural pattern that separates the business logic from the connectivity and deployment concerns. As a developer, you need only be interested in writing the actual core functionality of your application - for example, the code that will persist a blog post to the data store. You then deploy this small piece of code into the serverless framework and configure it to be triggered by appropriate events - for example, incoming HTTP requests. The framework then takes care of all the orchestration needed to make everything work together correctly.\n\n## Prerequisites\n\nThis article focuses on the use of Kubeless as a serverless architecture. This needs a functioning Kubernetes system (at least version 1.8) in order for it to work, and it is assumed that this is already available. If not then it can be set up on a local system using [Minikube](https://kubernetes.io/docs/setup/minikube/), or the [Edge channel of Docker for Desktop](https://blog.docker.com/2018/02/docker-compose-kubernetes-docker-desktop/). You will also need to install the *kubeless* CLI as described on the [Kubeless Quick Start page](https://github.com/kubeless/kubeless/blob/master/docs/quick-start.md). \n\n\n\u003e **Note:** it is assumed that Kubernetes is already installed and working on your system, and that you are able to work with it to diagnose any system-specific issues that might come up.\n\n\n\u003e **Note:** this article was tested using Kubernetes 1.10 running inside Docker 18.05 on macOS 10.13.5. \n\n\n\u003e **Note:**  you don’t need to actually set up kubeless inside your kubernetes cluster. We will cover that later on in this article.\n\nWe will be using Node.js to develop the serverless functions and Create React App for the user interface. Whilst there is no need to actually run the functions locally, npm is needed to configure their dependencies, and a full Node.js stack is needed for Create React App to be used, so ensure that these are available for use.\n\n### Create a Pusher account\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Then create a new Pusher Channels app and save the keys for later on.\n\n## Creating the blog backend\n\nOur backend architecture will be created using a series of small functions wired up in the Kubeless system. Our overall architecture will eventually look like this:\n\n![kubeless-realtime-architecture](//images.ctfassets.net/1es3ne0caaid/5TNtaKTsKA6ycUs4Uei8ms/b5a453c99e125a2a8ac335fcedc341f6/kubeless-realtime-architecture.png)\n\nThis looks a little daunting at first, but each of the five functions that we are going to write are very simple, and the rest of the system is handled for us by Kubeless.\n\n### Setting up Kubeless\n\nBefore we can do anything, we need to set up the underlying Kubeless architecture. This includes Kubeless itself, Kafka, MongoDB and Nginx for ingress.\n\n\n\u003e **Note:** at the time of writing, the latest version of Kubeless was v1.0.0-alpha.7. \n\n\n\u003e **Note:** ingress is the setup allowing HTTP calls to come in to the Kubeless infrastructure from outside on clean URLs. There are other alternatives available, but Nginx is easy to work with and does everything we need.\n\nIn order to set up Kubeless itself, we need to execute the following:\n\n```\n    $ kubectl create ns kubeless\n    namespace \"kubeless\" created\n    \n    $ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kubeless-non-rbac-v1.0.0-alpha.7.yaml\n    serviceaccount \"controller-acct\" created\n    customresourcedefinition.apiextensions.k8s.io \"functions.kubeless.io\" created\n    customresourcedefinition.apiextensions.k8s.io \"httptriggers.kubeless.io\" created\n    customresourcedefinition.apiextensions.k8s.io \"cronjobtriggers.kubeless.io\" created\n    configmap \"kubeless-config\" created\n    deployment.apps \"kubeless-controller-manager\" created\n```\n\nThis creates a Kubernetes namespace in which Kubeless will live, and creates the Kubeless resources from the specified resource definition. \n\nWe then can set up Kafka in the cluster in a very similar manner:\n\n```\n    $ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kafka-zookeeper-v1.0.0-alpha.7.yaml\n    customresourcedefinition.apiextensions.k8s.io \"kafkatriggers.kubeless.io\" created\n    service \"broker\" created\n    statefulset.apps \"kafka\" created\n    service \"kafka\" created\n    service \"zoo\" created\n    statefulset.apps \"zoo\" created\n    clusterrole.rbac.authorization.k8s.io \"kafka-controller-deployer\" created\n    clusterrolebinding.rbac.authorization.k8s.io \"kafka-controller-deployer\" created\n    service \"zookeeper\" created\n    deployment.apps \"kafka-trigger-controller\" created\n```\n\nAnd the Nginx ingress resources in the same way:\n\n```\n    $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/bc59b7ddeee6e252974853f167c299005c600781/deploy/mandatory.yaml\n    namespace \"ingress-nginx\" created\n    deployment.extensions \"default-http-backend\" created\n    service \"default-http-backend\" created\n    configmap \"nginx-configuration\" created\n    configmap \"tcp-services\" created\n    configmap \"udp-services\" created\n    serviceaccount \"nginx-ingress-serviceaccount\" created\n    clusterrole.rbac.authorization.k8s.io \"nginx-ingress-clusterrole\" created\n    role.rbac.authorization.k8s.io \"nginx-ingress-role\" created\n    rolebinding.rbac.authorization.k8s.io \"nginx-ingress-role-nisa-binding\" created\n    clusterrolebinding.rbac.authorization.k8s.io \"nginx-ingress-clusterrole-nisa-binding\" created\n    deployment.extensions \"nginx-ingress-controller\" created\n    \n    $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/bc59b7ddeee6e252974853f167c299005c600781/deploy/provider/cloud-generic.yaml\n    service \"ingress-nginx\" created\n```\n\n\u003e **Note:** at the time of writing, the current latest release of the ingress-nginx resource files were not working correctly, so this points at the last known commit that did work.\n\nFinally we want to set up MongoDB. There isn’t a convenient kubernetes resource definition for this, so we’ll write our own. Create a new file called `mongodb.yml` under your project directory as follows:\n\n``` yaml\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: mongo\n    spec:\n      ports:\n      - port: 27017\n      selector:\n        app: mongo\n      clusterIP: None\n    ---\n    apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2\n    kind: Deployment\n    metadata:\n      name: mongo\n    spec:\n      selector:\n        matchLabels:\n          app: mongo\n      strategy:\n        type: Recreate\n      template:\n        metadata:\n          labels:\n            app: mongo\n        spec:\n          containers:\n          - image: mongo:3.2.20\n            name: mongo\n            ports:\n            - containerPort: 27017\n              name: mongo\n```\n\nAnd then execute it:\n\n```\n    $ kubectl create -f mongodb.yml\n    service \"mongo\" created\n    deployment.apps \"mongo\" created\n```\n\nAt this point we have all of the infrastructure we need in order to build our application. \n\n### Creating articles\n\nOur first handler is the endpoint that will be called to create an article. This will ensure that we have the appropriate values in our request, and put a message onto the Kafka queue for other handlers to deal with. \n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir create-article\n    $ cd create-article\n    $ npm init -y\n    $ npm install --save uuid kafka-node\n```\n\nThe `uuid` module will be used to generate a new, unique ID for the article, and the `kafka-node` module is used to produce a new message onto the Kafka queue.\n\nOur actual handler is then written in `create-article/index.js` as follows:\n\n``` javascript\n    const uuid = require('uuid/v4');\n    const kafka = require('kafka-node');\n    \n    const kafkaClient = new kafka.KafkaClient({kafkaHost: 'kafka.kubeless:9092'});\n    const kafkaProducer = new kafka.Producer(kafkaClient);\n    \n    module.exports = {\n      createArticle: function (event, context) {\n    \n        return new Promise((resolve, reject) =\u003e {\n            if (!event.data.title) {\n                reject('Missing field: title');\n            } else if (!event.data.body) {\n                reject('Missing field: body');\n            } else {\n                resolve({\n                    id: uuid(),\n                    created: new Date(),\n                    title: event.data.title,\n                    body: event.data.body\n                });\n            }\n        }).then((article) =\u003e {\n            return new Promise((resolve, reject) =\u003e {\n                kafkaProducer.send([\n                    { topic: 'new-article-topic', messages: JSON.stringify(article), partition: 0 }\n                ], (err, data) =\u003e {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(article);\n                    }\n                });\n            });\n        }).then((article) =\u003e {\n            event.extensions.response.statusCode = 201;\n            return article;\n        }).catch((err) =\u003e {\n            event.extensions.response.statusCode = 400;\n            return err;\n        });\n      }\n    }\n```\n\n\u003e **Note:** we’re assuming that Kafka is installed on “kafka.kubeless:9092” and that we’re using a topic called “new-article-topic”. This is the default host and port if using the Kafka that deploys as part of Kubeless, but in a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this location.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy create-article --runtime nodejs8 --dependencies package.json --handler index.createArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `createArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create create-article --function-name create-article --path create --hostname localhost\n```\n\nThis means that calls to http://localhost/create **will trigger the function named `create-article` **- which we’ve just created.\n\nFinally we’ll create the Kafka topic that we are writing to:\n\n```\n    $ kubeless topic create new-article-topic\n```\n\nWe can test this now as well:\n\n```\n    $ curl http://localhost/create --data '{\"title\": \"My first post\", \"body\": \"This is my first post\"}' -H \"Content-type: application/json\"\n    {\"id\":\"6a61513b-06c8-4139-a816-a7188e75728e\",\"created\":\"2018-07-24T07:14:45.561Z\",\"title\":\"My first post\",\"body\":\"This is my first post\"}\n```\n\n### Persisting articles\n\nOnce we can handle the request to create an article, and put the message onto the Kafka topic, we can then handle this message to persist it into the MongoDB store.\n\nHandlers that are triggered by Kafka messages act in the exact same way as HTTP ones, including the fact that they are given an event that looks like an HTTP request. The data of this request is the message from the topic, ready to work with. We can also guarantee the contents of it, since it was put onto the topic by our own code and not by an external party.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir persist-article\n    $ cd persist-article\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `persist-article/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      persistArticle: function (event, context) {\n        const article = event.data;\n        const post = {\n          \"_id\": article.id,\n          \"created\": new Date(article.created),\n          \"title\": article.title,\n          \"body\": article.body\n        };\n    \n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect(\"mongodb://mongo.default:27017\", (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts').insert(post, (err, result) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve(post);\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\n\u003e **Note:** we’re assuming that MongoDB is installed on “mongo.default:27017” and that we’re using a database called “kubeless_blog”. This is the default host and port if using the MongoDB that deploys as part of the earlier deployment resource, but in a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy persist-article --runtime nodejs8 --dependencies package.json --handler index.persistArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `persistArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming Kafka messages on our topic to trigger this function:\n\n```\n    $ kubeless trigger kafka create persist-article --function-selector created-by=kubeless,function=persist-article --trigger-topic new-article-topic\n```\n\nAt this point, we have a setup where all successful calls to our first handler will put messages onto the Kafka topic, and then our second handler will read and process them to write into our MongoDB database.\n\n### Listing articles\n\nNow that we can get articles into our system, we need to get them out again. The first part of this is a handler to get a list of all articles. \n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir list-articles\n    $ cd list-articles\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `list-articles/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      listArticles: function (event, context) {\n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect('mongodb://mongo.default:27017', (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts')\n                    .find({})\n                    .sort({created: -1})\n                    .project({'_id': 1, 'title': 1, 'created': 1})\n                    .toArray((err, docs) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve(docs.map((doc) =\u003e {\n                      return {\n                          id: doc['_id'],\n                          title: doc.title,\n                          created: doc.created\n                      };\n                  }));\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\nThis gets every article, with no pagination or filtering, and returns them in order so that the most recent ones are first. It also only returns the title of each article, not the entire text.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy list-articles --runtime nodejs8 --dependencies package.json --handler index.listArticles --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `listArticles` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create list-articles --function-name list-articles --path list --hostname localhost\n```\n\nThis means that calls to http://localhost/list **will trigger the function named `list-articles` **- which we’ve just created.\n\n### Getting individual articles\n\nFinally, we need to be able to get an individual article out so that we can display it.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir get-article\n    $ cd get-article\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `get-article/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      getArticle: function (event, context) {\n        const url = event.extensions.request.url;\n        const id = url.substring(1);\n    \n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect('mongodb://mongo.default:27017', (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts')\n                    .findOne({'_id': id}, (err, doc) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  if (doc) {\n                    resolve({\n                      id: doc['_id'],\n                      created: doc.created,\n                      title: doc.title,\n                      body: doc.body\n                    });\n                  } else {\n                    event.extensions.response.statusCode = 404;\n                    resolve();\n                  }\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\nThis expects to be called with a URL containing the article ID, and then retrieves that article from the MongoDB store and returns it. If there is no matching article then an HTTP 404 is returned instead.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy get-article --runtime nodejs8 --dependencies package.json --handler index.getArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `getArticles` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create get-article --function-name get-article --path get --hostname localhost\n```\n\n\u003e **Note:** the ingress mechanism does prefix matching, not exact matching. This means that the above actually matches any calls that **start** with “/get”, such as “/get/123”.\n\nThis means that calls to http://localhost/get/123 will trigger the function named `get-article` - which we’ve just created.\n\n## Creating the blog UI\n\nNow that we have our backend functionality, we need a UI to actually drive it. This will be a [React](https://github.com/facebook/create-react-app) application, using [Semantic UI](https://react.semantic-ui.com/) for some structure and styling.\n\nFirstly we’ll create a new application using the Create React App tool:\n\n```\n    $ create-react-app ui\n```\n\nThen we’ll add some dependencies that we need:\n\n```\n    $ npm install --save axios semantic-ui-react semantic-ui-css\n```\n\nWe can now start up the UI, and it will automatically update as we make changes to it:\n\n```\n    $ npm start\n```\n\nOur UI is going to consist of two different parts - the list of articles, and the actual article that we’re looking at.\n\nFirstly, let’s create a component to represent the article list. For this, create a file called `src/ArticleList.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { List } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class ArticleList extends React.Component {\n        state = {\n            articles: []\n        };\n        _showArticle = this._handleShowArticle.bind(this);\n        loadList() {\n            axios.get('http://localhost/list')\n                .then((response) =\u003e {\n                    this.setState({\n                        articles: response.data\n                    });\n                });\n        }\n        _handleShowArticle(article) {\n            this.props.showArticle(article.id);\n        }\n        componentDidMount() {\n            this.loadList();\n        }\n        render() {\n            const articleEntries = this.state.articles.map((article) =\u003e {\n                return (\n                    \u003cList.Item key={article.id} onClick={() =\u003e this._showArticle(article)}\u003e\n                        \u003cList.Content\u003e\n                            \u003cList.Header as='a'\u003e{article.title}\u003c/List.Header\u003e\n                            \u003cList.Description as='a'\u003e{article.created}\u003c/List.Description\u003e\n                        \u003c/List.Content\u003e\n                    \u003c/List.Item\u003e\n                );\n            });\n            return (\n                \u003cList divided relaxed\u003e\n                    {articleEntries}\n                    \u003cList.Item onClick={this.props.newArticle}\u003e\n                        \u003cList.Content\u003e\n                            \u003cList.Header as='a'\u003eNew Article\u003c/List.Header\u003e\n                        \u003c/List.Content\u003e\n                    \u003c/List.Item\u003e\n                \u003c/List\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This gets the list of articles from http://localhost/list, which corresponds to the handler we defined above. \n\nNext we want a component to display a given article. For this, create a new file called `src/Article.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Card, Loader } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class Article extends React.Component {\n        state = {\n            article: undefined\n        };\n        componentDidMount() {\n            const id = this.props.id;\n            axios.get(`http://localhost/get/${id}`)\n                .then((response) =\u003e {\n                    this.setState({\n                        article: response.data\n                    });\n                });\n        }\n        render() {\n            const { article } = this.state;\n            if (!article) {\n                return \u003cLoader /\u003e;\n            }\n            return (\n                \u003cCard fluid\u003e\n                    \u003cCard.Content header={article.title} /\u003e\n                    \u003cCard.Content description={article.body} /\u003e\n                    \u003cCard.Content extra\u003e\n                        {article.created}\n                    \u003c/Card.Content\u003e\n                \u003c/Card\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This gets the article from http://localhost/get, which corresponds to the handler we defined above. \n\nFinally, we want a component to create a new article. This will be in `src/NewArticle.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Form, Button, Message } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class NewArticle extends React.Component {\n        state = {\n            title: '',\n            body: ''\n        };\n        _changeTitle = this._handleChangeTitle.bind(this);\n        _changeBody = this._handleChangeBody.bind(this);\n        _postArticle = this._handlePostArticle.bind(this);\n        _handleChangeTitle(e) {\n            this.setState({\n                title: e.target.value\n            });\n        }\n        _handleChangeBody(e) {\n            this.setState({\n                body: e.target.value\n            });\n        }\n        _handlePostArticle() {\n            const { title, body } = this.state;\n            axios({\n                method: 'post',\n                url: 'http://localhost/create',\n                data: {\n                    title,\n                    body\n                },\n                headers: {\n                    'content-type': 'application/json'\n                }\n            })\n            .then(() =\u003e {\n                this.setState({\n                    title: '',\n                    body: '',\n                    success: true,\n                    error: undefined\n                });\n            }, (e) =\u003e {\n                this.setState({\n                    success: false,\n                    error: e.response.data\n                });\n            });\n        }\n        render() {\n            let message;\n            if (this.state.success) {\n                message = \u003cMessage positive\u003eArticle posted successfully\u003c/Message\u003e;\n            } else if (this.state.error) {\n                message = \u003cMessage error\u003e{this.state.error}\u003c/Message\u003e\n            }\n            return (\n                \u003cForm error={this.state.error} success={this.state.success}\u003e\n                {message}\n                \u003cForm.Field\u003e\n                  \u003clabel\u003eTitle\u003c/label\u003e\n                  \u003cinput placeholder='Title' value={this.state.title} onChange={this._changeTitle} autoFocus /\u003e\n                \u003c/Form.Field\u003e\n                \u003cForm.Field\u003e\n                  \u003clabel\u003eArticle\u003c/label\u003e\n                  \u003ctextarea placeholder=\"Article\" value={this.state.body} onChange={this._changeBody} /\u003e\n                \u003c/Form.Field\u003e\n                \u003cButton type='submit' onClick={this._postArticle} \u003ePost Article\u003c/Button\u003e\n              \u003c/Form\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This creates the article by POSTing to http://localhost/create, which corresponds to the handler we defined above. \n\nNow that we’ve got these components, we need to tie these together. This is done by replacing the existing `src/App.js` to read as follows:\n\n``` javascript\n    import React, { Component } from 'react';\n    import 'semantic-ui-css/semantic.min.css';\n    import { Grid, Header, Container } from 'semantic-ui-react';\n    import { ArticleList } from './ArticleList';\n    import { Article } from './Article';\n    import { NewArticle } from './NewArticle';\n    class App extends Component {\n      state = {\n        currentArticle: undefined\n      };\n      _newArticle = this._handleNewArticle.bind(this);\n      _showArticle = this._handleShowArticle.bind(this);\n      _handleShowArticle(article) {\n        this.setState({\n          currentArticle: article\n        });\n      }\n      _handleNewArticle() {\n        this.setState({\n          currentArticle: undefined\n        });\n      }\n      render() {\n        let body;\n        if (this.state.currentArticle) {\n          body = \u003cArticle id={this.state.currentArticle} /\u003e\n        } else {\n          body = \u003cNewArticle /\u003e;\n        }\n        return (\n          \u003cContainer\u003e\n            \u003cGrid\u003e\n              \u003cGrid.Row\u003e\n                \u003cGrid.Column\u003e\n                  \u003cHeader as=\"h2\"\u003e\n                    Kubeless Blog\n                  \u003c/Header\u003e\n                \u003c/Grid.Column\u003e\n              \u003c/Grid.Row\u003e\n              \u003cGrid.Row\u003e\n                \u003cGrid.Column width={12}\u003e\n                  { body }\n                \u003c/Grid.Column\u003e\n                \u003cGrid.Column width={4}\u003e\n                  \u003cArticleList showArticle={this._showArticle} newArticle={this._newArticle} /\u003e\n                \u003c/Grid.Column\u003e\n              \u003c/Grid.Row\u003e\n            \u003c/Grid\u003e\n          \u003c/Container\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nAt this point, we can use the UI to read and post articles:\n\n![kubeless-realtime-demo-no-realtime](//images.ctfassets.net/1es3ne0caaid/340Y10wn20Gscqc0a4S06g/ee857682c0b51fafe0ddfbd5c0764979/kubeless-realtime-demo-no-realtime.gif)\n\n## Adding realtime functionality to the blog\n\nCurrently, we can post articles to the blog and read ones that are posted. What we don’t get is any indication that a post has been made without refreshing the page. This can be achieved by adding Pusher in to the mix.\n\nWe are going to add a new handler into our Kubeless system that reacts to the same Kafka messages that are used to persist the messages, and which will trigger Pusher to indicate that a new post has been made.\n\n### Broadcasting articles\n\nOur new handler is going to react every time a new article is created, in the exact same way as the `persist-article` handler from above.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir broadcast-article\n    $ cd broadcast-article\n    $ npm init -y\n    $ npm install --save pusher\n```\n\nOur actual handler is then written in `broadcast-article/index.js` as follows:\n\n``` javascript\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n          appId: 'PUSHER_APP_ID',\n          key: 'PUSHER_KEY',\n          secret: 'PUSHER_SECRET',\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true\n    });\n    \n    \n    module.exports = {\n      broadcastArticle: function (event, context) {\n        const article = event.data;\n        const post = {\n          \"_id\": article.id,\n          \"created\": new Date(article.created),\n          \"title\": article.title,\n          \"body\": article.body\n        };\n    \n        pusher.trigger('posts', 'new-post', post);\n      }\n    }\n```\n\n\u003e **Note:** we’re hard-coding the Pusher credentials here, which need to be updated to match those you obtained earlier. In a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy broadcast-article --runtime nodejs8 --dependencies package.json --handler index.broadcastArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `broadcastArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming Kafka messages on our topic to trigger this function:\n\n```\n    $ kubeless trigger kafka create broadcast-article --function-selector created-by=kubeless,function=broadcast-article --trigger-topic new-article-topic\n```\n\nThis is the exact same topic as was used before, so every message that triggers the `persist-article` handler will also trigger the `broadcast-article` one.\n\n### Updating the article list\n\nNow that we’re broadcasting events whenever articles are posted, we can automatically update the UI based on this. For this we want to listen to the Pusher events and react to them.\n\nFirstly, we need our Pusher dependency. From inside the UI project:\n\n```\n    $ npm install --save pusher-js\n```\n\nThen we need to update `src/ArticleList.js` to listen for the events and react accordingly. Firstly add the following to the top of the file:\n\n``` javascript\n    import Pusher from 'pusher-js';\n    \n    const pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_CLUSTER',\n        encrypted: true\n    });\n```\n\n\u003e **Note:** make sure you update this to include the App Key and Cluster from your Pusher Application you created earlier. These should exactly match those used in the `broadcast-article` handler.\n\nFinally, add the following to the `componentDidMount` method:\n\n``` javascript\n    pusher.subscribe('posts').bind('new-post', () =\u003e {\n       this.loadList();\n    });\n```\n\nThis will react to the `new-post` event that we are broadcasting by loading the full list of articles again. This means that whenever anyone posts an article, all active browsers will be told about it and get their article list updated.\n\nRestart your UI and we can see that the posts now appear automatically:\n\n![kubeless-realtime-demo](//images.ctfassets.net/1es3ne0caaid/50s0MKQDgAYuAEg44SMOCI/844d2ce62cc17e55ca40e1a8c598095f/kubeless-realtime-demo.gif)\n\n## Cleaning up\n\nOne thing that needs to be considered with a serverless application is deployment, and tearing it down if needed. We are actually running a large number of components here: five serverless functions, Kafka, Zookeeper, MongoDB, Nginx and the Kubeless framework itself. Each of these needs to be managed, and shut down, individually and correctly otherwise you leave bits hanging around.\n\nCleaning up this application can be done as follows if needed:\n\n```\n    # Broadcast Article Handler\n    kubeless trigger kafka delete broadcast-article\n    kubeless function delete broadcast-article\n    \n    # Get Article Handler\n    kubeless trigger http delete get-article\n    kubeless function delete get-article\n    \n    # List Articles Handler\n    kubeless trigger http delete list-articles\n    kubeless function delete list-articles\n    \n    # Persist Article Handler\n    kubeless trigger kafka delete persist-article\n    kubeless topic delete new-article-topic\n    kubeless function delete persist-article\n    \n    # Create Article Handler\n    kubeless trigger http delete create-article\n    kubeless function delete create-article\n    \n    # Nginx Ingress\n    kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/provider/cloud-generic.yaml\n    kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/mandatory.yaml\n    \n    # MongoDB\n    kubectl delete -f mongodb.yml\n    \n    # Kafka\n    kubectl delete -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kafka-zookeeper-v1.0.0-alpha.7.yaml\n    \n    # Kubeless\n    kubectl delete -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kubeless-non-rbac-v1.0.0-alpha.7.yaml\n    kubectl delete ns kubeless\n```\n\n## Summary\n\nThis article shows a brief introduction to using Kubeless to build a simple application, and then extending it by adding new functionality. We can easily see how adding this new functionality can be done later on, with no impact to the rest of the service. \n\nWhilst not shown here, there’s no reason that all of these handlers need to be written by the same team, or even in the same language. Serverless architectures, in the same way as Microservices, thrive on a disjoint ecosystem where each component is developed in the way that makes the most sense for that one component, rather than forcing a single language on the entire application.\n\nThe full source code for this can be seen on [GitHub](https://github.com/sazzer/pusher-kubeless-blog).","metaTitle":"Adding realtime functionality to a blog using Kubeless","metaDescription":"Create a basic blog using Kubeless to power a serverless backend, and React for the frontend. Learn how to create and deploy serverless functions."}}],"defaultValue":"Channels \u0026 React","queryType":"tag","pages":5,"route":"/tutorials","query":{"product":"Channels","tag":"React","page":"2"}}},"page":"/tutorials","query":{"product":"Channels","tag":"React","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=React&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:15 GMT -->
</html>