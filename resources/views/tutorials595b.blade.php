<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Angular&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:40:46 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">28</span> tutorials for “<span class="css-npldjc ehwuahf2">Angular</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsf93c.html?product=Channels&amp;tag=Angular" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsca23.html?product=Beams&amp;tag=Angular" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Angular"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/social-online-presence-ionic.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a social app with online presence using Ionic</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live comments feature with Ionic</h3><p class="css-k12xad e5jrto45">Build a mobile app feature with Ionic, allowing users to add comments to a post, and see updates in realtime. The app fe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live voting app with Ionic</h3><p class="css-k12xad e5jrto45">Build a live voting app using Ionic, with a Node backend. The app replicates the behaviour of a Twitter poll: users can ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement geofencing in Ionic</h3><p class="css-k12xad e5jrto45">Build a geofencing app for mobile using Ionic and Google Maps. Ionic is an open source SDK for developing native web app...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-poll-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live poll app with Ionic</h3><p class="css-k12xad e5jrto45">Use Ionic to create a live poll application for mobile. The app features a Node.js backend. It allows users to vote on t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-ionic-sentiment.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with Ionic featuring sentiment analysis</h3><p class="css-k12xad e5jrto45">Build a chat app for mobile using Ionic and Cordova. Code with TypeScript, targeting mobile devices. Use Node for the ba...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/group-chat-angular-dialogflow.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a group chat app with Angular and Dialogflow</h3><p class="css-k12xad e5jrto45">Build an Angular group chat app, and integrate a chatbot using Dialogflow. Users will be able to talk to each other, or ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-painting-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a collaborative painting application with Angular</h3><p class="css-k12xad e5jrto45">Learn to build a collaborative painting application using Angular. Create a web app where two users can paint together, ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geofencing web app using Angular </h3><p class="css-k12xad e5jrto45">Learn to build a web app with Angular and Node featuring geofencing functionality. Track whether guests are within your ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials6eb0.html?tag=Angular&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials6eb0.html?tag=Angular&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials595b.html?tag=Angular&amp;page=2" class="css-2wakph edg0byb1">2</a><a href="tutorialsaa6d.html?tag=Angular&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorials970c.html?tag=Angular&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorialsaa6d.html?tag=Angular&amp;page=3" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":28,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39sm03YEbuOmqucCw6Qk42","type":"Entry","createdAt":"2018-12-04T20:59:40.666Z","updatedAt":"2020-06-19T13:26:52.630Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a social app with online presence using Ionic","url":"social-online-presence-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-twitter-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-12-04","description":"This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node backend, and online presence indicators powered by Pusher.","prerequisite":"You will need Node and Ionic installed on your machine. A basic knowledge of modern JavaScript development will be helpful.","content":"In this tutorial, we are going to explore how to build a simple social application using Ionic and Pusher. [Ionic](https://ionicframework.com) will be used to create the mobile demo and [Pusher](http://www.pusher.com) Channels to add online functionality. At the end of this tutorial, you will have built an application that looks like this:\n\n![ionic-presence-demo-1](//images.ctfassets.net/1es3ne0caaid/4OKTHp8v4IAu6Ywo8uAigy/a899870614f492408bff0e0bf4d60d55/ionic-presence-demo-1.png)\n\nA while back on Twitter, the official Twitter handle teased their followers with a sample of an interesting idea they were exploring. They were exploring the possibility of letting you know who on your Twitter feed is online. This is something very different and it got a lot of mixed reactions because we know Twitter for for likes and retweets but not “online five minutes ago”. In other messaging applications we use, it is important to know if who you’re interacting with is online. As a developer, you are likely curious about how this all works.\n\n## Requirements\n\nTo be follow through this article properly, you’ll need the following:\n\n- Basic knowledge of JavaScript\n- [Ionic](https://ionicframework.com) installed on your machine, you can read up on how to do that [here](https://ionicframework.com/docs/intro/installation/)\n- [Node.js](https://nodejs.org) installed on your machine\n- [NPM](https://npmjs.org) installed on your machine\n\n\n## Getting started\n\nTo get started, create a new ionic application using the command:\n\n```\n    ionic start twi-clone blank\n```\n\nThis creates a starter ionic project in a folder titled `twi-clone`. To see the demo application at work, go to your terminal and run the command:\n\n```\n    cd twi-clone\n    ionic serve\n```\n\nThis serves the Ionic application. Navigate your browser to  `http://locahost:8100` and you should get a view that looks like this:\n\n![ionic-default](//images.ctfassets.net/1es3ne0caaid/qQv7V1UOEou4OOS6y8GIg/8e28ae0fc41a2af1a00a650fa41cec16/ionic-default.png)\n\n\n## Building the backend server\n\nThe backend server of our application will be responsible for doing the following:\n\n- Sharing users’ posts\n- Authenticating new users on the presence channel\n\nCreate a `/server` folder in your project:\n\n```\n    mkdir server\n    cd server\n```\n\nInstall the Node modules that we will need to power the backend server:\n\n```\n    npm install express body-parser pusher\n```\n\n- `express` will power the web server\n- `body-parser` to handle incoming requests\n- `pusher` to add realtime functionality and online presence\n\nAfterwards, create a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nEdit the `server.js` file to look as follows:\n\n``` javascript\n    // server/server.js\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher');\n    \n    // create a express application\n    const app = express();\n    \n    // initialize pusher\n    let pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    // to Allow CORS\n    app.use((req, res, next) =\u003e {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n        );\n        next();\n    });\n    \n    [...]\n```\n\nWe include the necessary JavaScript libraries and then create a new Pusher object using your Pusher application credentials.\n\n\n\u003e To obtain your Pusher credentials, create a new account [here](https://dashboard.pusher.com/accounts/sign_up). Afterwards, you’ll be redirected to your [Pusher dashboard](https://dashboard.pusher.com). Go ahead and create a new project, obtain your `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_APP_CLUSTER` and add them to your `server.js` file.\n\nAfterwards, we specify some application middleware to handle incoming requests. The backend server will have two routes:\n\n- `/pusher/auth` - will be used to authenticate users joining the presence channel\n- `/create-post` - will be used when a new post is created.\n\nWith Pusher, when a new client tries to join a presence channel, a `POST` request is first made to authenticate the new client. In this case, a random string is created to identify the client and this makes up the `presenceData` object. The `presenceData` , `channel` and `socketId` are then passed to Pusher to authenticate the client.\n\nThe `/create-post` route accepts the incoming data and then triggers a `new-post` event to the `presence-channel`.\n\n\n\u003e In later parts of the article, we will see how the channel is created in our Ionic application\n\nAdd the code below to your `server/server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    app.post('/pusher/auth', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n        random_string = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n        let presenceData = {\n            user_id: random_string,\n            user_info: {\n                username: '@' + random_string,\n            }\n        };\n        let auth = pusher.authenticate(socketId, channel, presenceData);\n        res.send(auth);\n    });\n    \n    app.post('/create-post', (req, res) =\u003e {\n        // trigger a new post event via pusher\n        pusher.trigger('presence-channel', 'new-post', {\n            'username': req.body.username,\n            'content': req.body.content\n        })\n        res.json({ 'status': 200 });\n    });\n    \n    let port = 3128;\n    app.listen(port);\n    console.log('listening');\n```\n\nNow that the backend server is created, you can run it by entering the command:\n\n```\n    node server.js\n```\n\nNow, let’s look at how to build the rest of the application.\n\n\n## Creating the interface\n\n![ionic-presence-interface](//images.ctfassets.net/1es3ne0caaid/4EICjygAsgii0kAm00Gwuy/9a97402d9d40017edb4e56f9979cb9df/ionic-presence-interface.png)\n\nThe starter application created a default homepage which we will then update to fit our particular use case. Update your `home.html` file to look like this: \n\n``` html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title style=\"text-align: center\"\u003e\n          Let's Go Social\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content padding\u003e\n      \u003cform (ngSubmit)=\"submitPost()\"\u003e\n        \u003cdiv class=\"compose-post-area\"\u003e\n          \u003cion-textarea class=\"post-compose\" placeholder=\"Post something....\" [(ngModel)]=\"post.content\" name=\"content\"\u003e\u003c/ion-textarea\u003e\n          \u003cbutton ion-button round class=\"tweet-post\" type=\"submit\"\u003ePOST\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/form\u003e\n      \u003cdiv\u003e\n        \u003cion-card\u003e\n          \u003cion-item\u003e\n            \u003ch3\u003eHi \u003ci\u003e@{{ current_user }}\u003c/i\u003e \u003c/h3\u003e\n            \u003ch3\u003eFriends Online: {{ get_users_online() }}\u003c/h3\u003e\n          \u003c/ion-item\u003e\n        \u003c/ion-card\u003e\n    \n        \u003cdiv *ngFor=\"let post of post_list\"\u003e\n          \u003cion-card\u003e\n            \u003cion-item\u003e\n              \u003cion-avatar item-start\u003e\n                \u003cimg src=\"https://api.adorable.io/avatars/100/avatar.png\" alt=\"\"\u003e\n              \u003c/ion-avatar\u003e\n              \u003cp\u003e@{{ post.username }} \u003ci\u003e{{ isOnline(post.username) }} \u003c/i\u003e\u003c/p\u003e\n            \u003c/ion-item\u003e\n    \n            \u003cion-card-content\u003e\n              \u003cp\u003e{{ post.content }}\u003c/p\u003e\n            \u003c/ion-card-content\u003e\n    \n            \u003cion-row\u003e\n              \u003cion-col\u003e\n                \u003cbutton ion-button ion-start clear small\u003e\n                  \u003cion-icon name=\"repeat\"\u003e\u003c/ion-icon\u003e\n                  \u003cdiv\u003e\u0026nbsp;932 reposts\u003c/div\u003e\n                \u003c/button\u003e\n              \u003c/ion-col\u003e\n              \u003cion-col\u003e\n                \u003cbutton ion-button ion-start clear small color=\"danger\"\u003e\n                  \u003cion-icon name=\"heart\"\u003e\u003c/ion-icon\u003e\n                  \u003cdiv\u003e\u0026nbsp;12k likes\u003c/div\u003e\n                \u003c/button\u003e\n              \u003c/ion-col\u003e\n            \u003c/ion-row\u003e\n          \u003c/ion-card\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nThe page also has the following styling:\n\n``` scss\n    # src/page/home/home.scss\n    \n    .compose-post-area{\n        display: flex;\n        align-items: center;\n    }\n    \n    ion-content{\n        background-color: #FAFAFA;\n    }\n```\n\nWe have seen the interface of the application. To add any functionality to our application, we need to edit the `home.ts` file to look like this:\n\n``` javascript\n    // src/app/pages/home/home.ts\n    \n    import { Component } from '@angular/core';\n    import { NavController, AlertController } from 'ionic-angular';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      // this will represent a new post by a user\n      post: any = {};\n      // this will represent your default pusher presence channel\n      presence_channel: any;\n      // this will represent the username of the current user\n      current_user;\n      // this will online a list of users online\n      users_online = {};\n      // list of default posts\n      post_list = [\n        {\n          'username': 'og',\n          'content': 'Making money was the plan oooo'\n        },\n        {\n          'username': 'daddywon',\n          'content': 'You can catch me on the express'\n        }\n      ];\n      \n      constructor(public navCtrl: NavController) {\n        [...]\n      }\n     \n    [...]\n    \n    }\n```\n\nWe can see that the home page component contains the variables that were referenced in the homepage template.\n\n### Creating the Pusher service\n\nTo know the number of friends online and when someone who shares a post is online, let’s make use of Presence Channels by Pusher. To use Pusher in our Ionic application, we need to install the library using the command:\n\n```\n    npm install pusher-js\n```\n\nNow, let’s create a simple Pusher provider. To do this, head over to your terminal and run the command:\n\n```\n    ionic generate provider pusher-service\n```\n\nNow, a `pusher-service` provider has been created. In the `pusher-service.ts` create a new Pusher object in the constructor by specifying the `PUSHER_APP_KEY`, `PUSHER_APP_CLUSTER` and the `authEndpoint` created on our backend server earlier in the article. \n\nAfterwards, subscribe to the `presence-channel` . The `init()` function is then responsible for returning the created presence channel which is to be used in our `home.ts` file. Update your `pusher-service.ts` to look like this:\n\n``` javascript\n    // src/providers/pusher-service/pusher-service.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherServiceProvider {\n      presenceChannel;\n    \n      constructor(public http: HttpClient) {\n        let pusher = new Pusher('PUSHER_APP_KEY', {\n          authEndpoint: 'http://localhost:3128/pusher/auth',\n          cluster: 'PUSHER_APP_CLUSTER'\n        });\n    \n        this.presenceChannel = pusher.subscribe('presence-channel');\n      }\n    \n      public init() {\n        return this.presenceChannel;\n      }\n    }\n```\n\nUpdate your `app.module.ts` to ensure that the Pusher provider and the HttpClientModule are loaded:\n\n``` javascript\n    // src/app/app.module.ts\n    \n    import { BrowserModule } from '@angular/platform-browser';\n    import { ErrorHandler, NgModule } from '@angular/core';\n    import { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    import { StatusBar } from '@ionic-native/status-bar';\n    \n    import { MyApp } from './app.component';\n    import { HomePage } from '../pages/home/home';\n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    import { HttpClientModule } from '@angular/common/http';\n    \n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage\n      ],\n      imports: [\n        BrowserModule,\n        HttpClientModule,\n        IonicModule.forRoot(MyApp)\n      ],\n      bootstrap: [IonicApp],\n      entryComponents: [\n        MyApp,\n        HomePage\n      ],\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        PusherServiceProvider\n      ]\n    })\n    export class AppModule { }\n```\n\nNow, let’s go back to the home page component. \n\n## Adding realtime functionality and online presence with Pusher\n\nWe are going to update the `home.ts` file to allow users know when other users are online. We first get the Pusher Channel using the Pusher provider we created earlier and then listen for the `pusher:subscription_succeeded` event. Once the client has successfully subscribed to the `presence-channel`, a `members` object is returned that contains information about the people subscribed to the `presence-channel`.\n\nWe also listen for a `new-post` event on the `presence-channel`. When a `new-post` event is triggered, the `post_list` is then updated to contain the new post. At this point, your `home.ts` should look like this:\n\n``` javascript\n    // src/pages/home/home.ts\n    import { Component } from '@angular/core';\n    import { NavController, AlertController } from 'ionic-angular';\n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      // this will represent a new post by a user\n      post: any = {};\n      // this will represent your default pusher presence channel\n      presence_channel: any;\n      // this will represent the username of the current user\n      current_user;\n      // this will online a list of users online\n      users_online = {\n      };\n      // list of default posts\n      post_list = [\n        {\n          'username': 'og',\n          'content': 'Making money was the plan oooo'\n        },\n        {\n          'username': 'daddywon',\n          'content': 'You can catch me on the express'\n        }\n      ];\n    \n      constructor(public navCtrl: NavController, private pusher: PusherServiceProvider, private http: HttpClient, public alertCtrl: AlertController) {\n        let self = this\n        this.presence_channel = this.pusher.init();\n        // update the list of users online\n        this.presence_channel.bind('pusher:subscription_succeeded', function (members) {\n          console.log(members);\n          self.users_online = members.members;\n          self.current_user = members.myID;\n        })\n    \n        this.presence_channel.bind('new-post', function (body) {\n          self.post_list.unshift(body);\n        })\n      }\n    \n      [...]\n    }\n```\n\nFinally, we have three other methods in the component:\n\n- `get_users_online()` which returns the number of users that are currently online\n- `isOnline()` that checks if a particular user is currently online\n- `submitPost()` that submits a post by a user\n\nAdd the methods to your `home.ts` file:\n\n``` javascript\n    // src/pages/home/home.ts\n    \n      [...]\n      \n      get_users_online() {\n        return Object.keys(this.users_online).length - 1;\n      }\n      \n      isOnline(username: string) {\n        if (username in this.users_online) {\n          return 'online'\n        } else {\n          return 'offline'\n        }\n      }\n    \n      submitPost() {\n        let self = this;\n        // make a post request to the server\n        let body = {\n          'username': this.current_user,\n          'content': this.post.content\n        }\n    \n        const alert = this.alertCtrl.create({\n          title: 'Post Shared!',\n          subTitle: `Users online to see your post: ${self.get_users_online()}`,\n          buttons: ['OK']\n        });\n    \n        // submit post to the backend server to trigger pusher event\n        this.http.post('http://localhost:3128/create-post', body).subscribe(() =\u003e {\n          alert.present();\n        });\n      }\n    }\n```\n\nRecall in the `home.html` interface, we had the following form:\n\n``` html\n    \u003cform (ngSubmit)=\"submitPost()\"\u003e\n      \u003cdiv class=\"compose-post-area\"\u003e\n        \u003cion-textarea class=\"post-compose\" placeholder=\"Post something....\" [(ngModel)]=\"post.content\" name=\"content\"\u003e\u003c/ion-textarea\u003e\n        \u003cbutton ion-button round class=\"tweet-post\" type=\"submit\"\u003ePOST\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/form\u003e\n```\n\nWhen the `POST` button is clicked, the `submitPost()` function is called and the post content and username of the current user are sent to the `/create-post` of the backend server which then triggers the `new-post` event on the `presence-channel` and the `post_list` is updated accordingly.\n\nTo see it all at work, serve your Ionic application using the command:\n\n```\n    npm start  # or ionic serve\n```\n\n\u003e Ensure your backend server is on.\n\nNavigate on your browser to `http://localhost:8100` and you should get an experience that looks like this:\n\n![ionic-presence-demo-2](//images.ctfassets.net/1es3ne0caaid/1x0M3f2oWAw6qo0KI28q28/178a215890d22676babe4fad7b610651/ionic-presence-demo-2.gif)\n\n## Testing your Ionic application on a mobile device\n\nIf you’re building with Ionic, you generally don’t intend to have your application on your browser. Rather, you’d want to have it running on mobile devices. Before you do that, you should serve the backend of your application on a tunnel using [ngrok](https://ngrok.io).  Head over [here](https://ngrok.com/download) and follow the download instructions for your platform.\n\nAfter you’ve had it installed, tunnel your backend server using the command:\n\n```\n    ngrok http 3128\n```\n\nYou should get a view that looks like this:\n\n```\n    ngrok by @inconshreveable                                                                                                                                                                                                    (Ctrl+C to quit)\n    \n    Session Status                online\n    Session Expires               7 hours, 59 minutes\n    Version                       2.2.8\n    Region                        United States (us)\n    Web Interface                 http://127.0.0.1:4040\n    Forwarding                    http://b3b88c11.ngrok.io -\u003e localhost:3128\n    Forwarding                    https://b3b88c11.ngrok.io -\u003e localhost:3128\n    \n    Connections                   ttl     opn     rt1     rt5     p50     p90\n                                  0       0       0.00    0.00    0.00    0.00\n                                \n```\n\nThis means that you can now access your backend server using the public URL → `https://b3b88c11.ngrok.io`\n\nUpdate the `authEndpoint` of your `pusher-service.ts` to use the new public URL:\n\n``` javascript\n    // src/providers/pusher-service/pusher-service.ts\n    [...]\n       let pusher = new Pusher('9effdb6e1245bda33b17', {\n          authEndpoint: 'https://b3b88c11.ngrok.io/pusher/auth',\n          cluster: 'mt1'\n        });\n    [...]\n```\n\nAlso update the POST request in the `submitPost` of your `home.ts` file:\n\n``` javascript\n    // src/pages/home/home.ts\n    [...]\n        // submit post to the backend server to trigger pusher event\n        this.http.post('http://localhost:3128/create-post', body).subscribe(() =\u003e {\n          alert.present();\n        });\n    [...]\n```\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Ensure that your device and computer are on the same network and you should see this demo application listed there:\n\n![ionic-presence-test-app](//images.ctfassets.net/1es3ne0caaid/1DdiNS8Nm4Ui0oysWcumQO/e2203b9d31dfeaa0e98f8f42269348bf/ionic-presence-test-app.png)\n\nNow, testing with the device, we get the following:\n\n![ionic-presence-demo-3](//images.ctfassets.net/1es3ne0caaid/AptCnwyeRwMQgKuSW2uag/dcccc9c4dafe09e22ee8a467b84e8e32/ionic-presence-demo-3.gif)\n\n## Conclusion\n\nIn this tutorial, we saw how to use Pusher Channels and Ionic to build a social media application that lets you know who’s online and how many online friends your post reach when they’re shared. There are many more use cases for Pusher Channels, so feel free to use concepts shared here in your own application. Here’s a link to the [GitHub](https://github.com/oreHGA/ionic-twitter-clone) repository.","metaTitle":"Building a social app with online presence using Ionic","metaDescription":"This tutorial will show you how to create a simple social feed for Android and iOS using Ionic. The app features a Node backend, and online presence indicators powered by Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4QXgSliGogg2OWc0iQGkW6","type":"Entry","createdAt":"2018-07-04T14:12:16.900Z","updatedAt":"2018-07-04T14:12:16.900Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live comments feature with Ionic","url":"live-comments-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/FeezyHendrix/ionic-realtime-comments-with-sentiment-analysis","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-07-02","description":"Build a mobile app feature with Ionic, allowing users to add comments to a post, and see updates in realtime. The app features sentiment analysis, adding upvotes (or downvotes) to the post, depending on the language of the comments.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Ionic development will be helpful.","content":"## Introduction\n\nSentiment analysis is a way to evaluate written or spoken language to determine if the expression is favorable, unfavorable, or neutral, and to what degree. You can read up about it [here](https://www.clarabridge.com/sentiment-analysis/).\n\nLive comments offer a realtime comment experience that doesn’t require a page refresh. You see comments when they’re posted.\n\nUsing [Ionic](https://ionicframework.com/), you can build a mobile app with HTML, CSS/SCSS, and JavaScript. With [Pusher](https://pusher.com/) we can enable realtime messaging in the chat using Pusher’s pub/sub pattern.\n\nWe’ll be building a live comments application using Pusher, Ionic and the [sentiment](https://github.com/thisandagain/sentiment) library for rating suggestions based on the context of messages received.\n\nUsing our application, users can see the rating of each post using sentiment analysis.\n\nHere’s a demo of the final product:\n\n![ionic-comments-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/3TS8YXmOI0umyCGYaCQWg8/234fc8069d0e70c578a148659f4fb393/ionic-comments-sentiment-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), [Ionic](https://ionicframework.com) and [Node.js](https://nodejs.org/en/) is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Ionic, kindly follow the [tutorial here.](https://ionicframework.com/docs/intro/tutorial/) Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build out our application:\n\n1. [Express](https://expressjs.com/)\n2. [Node](https://nodejs.org/en/)\n3. [Pusher](https://pusher.com/)\n4. [Ionic](https://ionicframework.com)\n\n\n## Setup and folder structure\n\nTo get started, we will use the CLI (command line interface) provided by the Ionic team to initialize our project.\n\nFirst, install the CLI by running `npm install -g ionic cordova`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Ionic App using the CLI, open a terminal and run:\n\n```\n    ionic start liveComments blank\n```\n\nThe command is merely telling the CLI to create a new app called `liveComments` and it should make use of the blank starter template.  While the setup is running, you might get a prompt `\"Would you like to integrate your new app with Cordova to target native iOS and Android?\"`. If you want to start running or testing the application on a mobile device or emulator as you build, then choose yes by typing `Y` and pressing Enter on your keyboard, else type `N` and continue. You might get another prompt   `\"If you would like to integrate ionic pro ?\"` ,  we wouldn’t need that in this tutorial so just type `N` and if you would like to extend the project into production with your team choose `Y`.\n\nOpen the newly created `liveComments`. Your folder structure should look something like this:\n\n```\n    liveComments /\n      node_modules /\n      src / \n        app /\n          assets /\n          pages /\n            home /\n              home.html\n              home.ts\n              home.scss\n```\n\nOpen a terminal inside the app folder and start the application by running: \n\n```\n    ionic serve \n```\n\nAutomatically your default browser should open, and you should see the screenshot below if everything went well.\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Building our server\n\nNow that we have our Ionic application running let’s build our server.\nTo do this, we’ll need to install Express. Express is a fast, unopinionated, minimalist web framework for Node.js. We’ll use this to receive requests from our Ionic application.\n\nRun `npm install express` on a terminal inside the root folder of your project to install Express.\nCreate a file called `server.js` at the root of the project and update it with the code snippet below:\n\n``` javascript\n     // server.js   \n        require('dotenv').config();\n        const express = require('express');\n        const bodyParser = require('body-parser');\n    \n        const app = express();\n        const port = process.env.PORT || 4000;\n    \n        app.use(bodyParser.json());\n        app.use(bodyParser.urlencoded({ extended: false }));\n        app.use((req, res, next) =\u003e {\n          res.header('Access-Control-Allow-Origin', '*');\n          res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n          );\n          next();\n        });\n    \n        app.listen(port, () =\u003e {\n          console.log(`Server started on port ${port}`);\n        });\n```\n\nWe referenced three packages that haven’t been installed, `body-parser`, `pusher` and `dotenv`. Install these packages by running the following command in your terminal.\n\n```\n        npm i body-parser pusher dotenv\n```\n\n\n- body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env). This package is used to avoid adding sensitive information like the `appId` and `secret` into our codebase directly.\n- The dotenv package will load the variables provided in our `.env` file into our environment.\n- CORS: The calls to our endpoint will be coming in from a different origin. Therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n- The `dotenv` library should always be initialized at the start of our file because we need to load the variables as early as possible to make them available throughout the application.\n\nWe also installed the [Pusher](https://pusher.com/) library as a dependency. Follow this [link](https://pusher.com) to create a Pusher account if you haven’t done so already.\n\nLet’s create a `.env` file to load the variables we’ll be needing into the Node environment. Create the file in the root folder of your project and update it with the code below.\n\nYour `.env`  file should look something like the snippet below. We’ll add our Pusher `appId`, `key` and `secret` provided here.\n\n```\n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    PUSHER_CLUSTER=\u003cPUSHER_CLUSTER\u003e\n```\n\nIf you noticed, we added the `dotenv` package at the start of our file. This is done because we need to make the variables available throughout the file.\n\n\n### Send comments\n\nTo enable users to send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js` file with the code below:\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_KEY,\n        secret: process.env.PUSHER_SECRET,\n        cluster: process.env.PUSHER_CLUSTER,\n        encrypted: true,\n    });\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n    );\n      next();\n    });\n    app.post('/message', async (req, res) =\u003e {\n      const { body } = req\n      const { comment } = body\n      const data = {\n        comment,\n        timeStamp: new Date(),\n      };\n      try {\n        pusher.trigger('comments', 'message', data);\n      } catch (e) {}\n      res.json(data);\n    })\n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\n\n- We created a `POST /message` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `comment` in the request body sent by the user.\n- The `data` object contains the `text` and `name` sent by the user. It also includes a timestamp.\n- The `trigger` method which takes a trigger identifier, triggers our `chat` channel.\n- The trigger function also takes a second argument, the event name (`message`), and a payload(`data`).\n- We still go ahead to respond with an object containing the `data` variable we created.\n\n\n## Sentiment analysis\n\n\u003e Sentiment analysis uses data mining processes and techniques to extract and capture data for analysis in order to discern the subjective opinion of a document or collection of documents, like blog posts, reviews, news articles, and social media feeds like tweets and status updates. - [Technopedia](https://www.techopedia.com/definition/29695/sentiment-analysis).\n\nUsing sentiment analysis, we’ll analyze the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user.\n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command.\n\n```\n        npm install sentiment\n```\n\nWe’ll update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_KEY,\n        secret: process.env.PUSHER_SECRET,\n        cluster: process.env.PUSHER_CLUSTER,\n        encrypted: true,\n    });\n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    const app = express();\n    const port = process.env.PORT || 4000;\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    app.post('/message', async (req, res) =\u003e {\n      const { body } = req\n      const { message } = body\n      const result = sentiment.analyze(message);\n      const comparative = result.comparative;\n      const data = {\n        message,\n        score : result.score,\n        timeStamp: new Date(),\n      };\n      try {\n        pusher.trigger('comments', 'message', data);\n      } catch (e) {}\n      res.json(data);\n    })\n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\n- Include the sentiment library in the project.\n- `result`: here, we analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message.\n- A new property (`score`) is added to the response data containing the message’s score after analysis.\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Building the UI\n\nLet’s begin building the interface, open `home.html` and update with the code below :\n\n``` html\n    // src/pages/home/home.html\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003e\n          Live Comments\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content padding\u003e\n      \u003c!-- example blog post--\u003e\n      \u003ch1 text-center\u003e Interesting Article\u003c/h1\u003e\n      \u003cp\u003e\n        Once you're done creating the quality content, you still have the challenge of presenting it that clearly dictates what your blog is about. Images, text, and links need to be shown off just right -- otherwise, readers might abandon your content if it's not aesthetically showcased in a way that's both appealing and easy to follow. \u003c/p\u003e\n        \u003cdiv class=\"flex-items\"\u003e\n            \u003cion-row\u003e\n                \u003cion-col col-6\u003e\n                      \u003ch1 float-right\u003e{{rating.good}} \u003cion-icon  name=\"arrow-round-up\" style=\"color : #90EE90; font-size: 25px;\"\u003e\u003c/ion-icon\u003e\u003c/h1\u003e\n                \u003c/ion-col\u003e\n                \u003cion-col col-6\u003e\n                    \u003ch1\u003e{{rating.bad}} \u003cion-icon name=\"arrow-round-down\" style=\"color: #FF0000; font-size: 25px;\"\u003e\u003c/ion-icon\u003e\u003c/h1\u003e\n                \u003c/ion-col\u003e\n              \u003c/ion-row\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"comment-box\"\u003e\n          \u003cion-card *ngFor=\"let comment of comments\"\u003e\n            \u003cion-card-content\u003e\n                  \u003cstrong\u003e{{comment.message}}\u003c/strong\u003e\n                  \u003cp\u003e\n                   {{comment.timeStamp | date : 'H:mm a'}}\n                  \u003c/p\u003e\n            \u003c/ion-card-content\u003e\n           \n          \u003c/ion-card\u003e\n        \u003c/div\u003e\n      \u003cion-footer padding\u003e\n        \u003cion-textarea [(ngModel)]=\"message\" type=\"text\" placeholder=\"Comment .... \"\u003e\u003c/ion-textarea\u003e\n        \u003cbutton ion-button small float-right round (click)=\"sendComment()\"\u003eSend\u003c/button\u003e\n      \u003c/ion-footer\u003e\n      \n    \u003c/ion-content\u003e\n```    \n\nIn the code snippet above:\n\n- We have an `ion-input` element for our users’ comments.\n- A send button to send our comment to the server.\n- We also used the `*ngFor` directive to loop through all our comments from the server and render them inside an `ion-card` element.\n\nOpen `Home.ts` file and update it like so:\n\n``` typescript\n    // src/pages/home/home.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    \n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      comments = [];\n      message: string;\n      url: string = 'http://localhost:4000/message'\n      rating = {\n        bad : 0,\n        good : 0,\n      }\n      constructor(public navCtrl: NavController, public http : HttpClient) {}\n    \n      sendComment(){\n        if(this.message != ''){\n          this.http.post(this.url, {message : this.message}).subscribe((res : any) =\u003e {\n            this.message = '';\n          })\n        }\n      }\n    \n      ionViewDidLoad(){}\n    }\n```    \n\n`sendComment()` : this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of comments.\n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Also to make use of form-related directives, we’ll need to import the `FormsModule`. Update your app module file as follows:\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { HttpClientModule } from '@angular/common/http';\n    import { FormsModule } from '@angular/forms';\n    ...\n    imports: [\n    ...\n    FormsModule,\n    HttpClientModule\n    ]\n    ...\n```\n\n## Styling\n\nOpen `home.scss` and update with the code below:\n\n``` scss\n    page-home {\n        ion-textarea {\n            border-bottom: 1px solid #000000;\n            margin: 0px 5px;\n        }\n        p {\n            text-align: justify;\n        }\n        .comment-box {\n            overflow: scroll;\n            height: 220px;\n        }\n    }\n```    \n\n\n## Introducing Pusher\n\nSo far we have an application that allows users to send in comments, but we want to update the comments under the post in realtime. We’ll include the [Pusher](https://pusher.com/) library in our application to enable realtime features like seeing comments as they come in without having to refresh the page.\n\nOpen the `index.html` file and paste the Pusher CDN like so:\n\n``` html\n    ...\n    \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- add to homescreen for ios --\u003e \n    ... \n```\n\nNow that Pusher has been made available in our project, we’ll create a Pusher Provider to be used application wide. The Ionic CLI can aid in the service creation. Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher-service\n```\n\nThis command simply generates a provider named `pusher-service`. Now open `pusher-service.ts` and update with the code below :\n\n``` typescript\n    // src/provider/pusher-service/pusher-service.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherServiceProvider {\n      channel;\n      constructor(public http: HttpClient) {\n      var pusher = new Pusher(\"PUSHER_KEY\", { \n      cluster: 'eu',\n      encrypted: true,\n      });\n      this.channel = pusher.subscribe('comments');\n    }\n    \n      public init(){\n       return this.channel;\n      }\n    }\n```\n\nFirst, we initialize Pusher in the constructor.\nThe `init()` method returns the Pusher property we created.\nEnsure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\nTo make the provider available in the application, import it into the `app.module.ts` file.\n\n``` typescript\n    // ../src/app/app.module.ts\n    \n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    ....\n    providers: [\n    StatusBar,\n    SplashScreen,\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\n    PusherServiceProvider\n    ]\n    ....\n```\n\nWe’ll make use of this provider in our home page, by binding to the message event and add the comment returned in the event and add it to the comments array. This will be done in the `ionViewDidLoad` lifecycle.\n\n``` typescript\n    // ../src/pages/home/home.ts\n    \n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    \n    constructor(public navCtrl: NavController, public http : HttpClient, private pusher : PusherServiceProvider) {}\n    \n    ...\n    \n    ionViewDidLoad(){\n     const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if(data.score \u003e= 1){\n            this.rating.good = this.rating.good + 1;\n          }\n          else{\n            this.rating.bad = this.rating.bad + 1;\n          }\n          this.comments.push(data);\n        });\n    }\n```\n\nAt this point, your application should have realtime updates when comments are placed. Ensure that the server is running alongside the Ionic development server. If not, run `node server` and `ionic serve` in two separate terminals. Both terminals should be opened in the root folder of your project. \n\nTo test the realtime functionality of the application, open two browsers side-by-side and comment. You’ll notice that votes placed on one reflect on the other browser.\n\n## Conclusion\n\nUsing the sentiment analysis, we are able to see the ratio of good comments to bad. Using [Pusher Channels](https://pusher.com/channels), we were able to implement live comments functionality in our application. You can view the source code for the demo [here](https://github.com/FeezyHendrix/ionic-realtime-comments-with-sentiment-analysis).","metaTitle":"Create a live comments feature with Ionic","metaDescription":"Use Ionic, Node and sentiment analysis to create a mobile app with realtime comments, and an automatic upvote/downvote system."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6DAliEpVCgYEcIgOk4aYOu","type":"Entry","createdAt":"2018-07-06T09:15:49.491Z","updatedAt":"2018-07-06T09:15:49.491Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live voting app with Ionic","url":"live-graph-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/ionic-graph-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-07-02","description":"Build a live voting app using Ionic, with a Node backend. The app replicates the behaviour of a Twitter poll: users can vote for who they expect to win the World Cup.","prerequisite":"You should have Node and npm installed on your machine. Familiarity with Ionic development will be helpful.","content":"\u003e **Data visualization** is viewed by many disciplines as a modern equivalent of visual communication. It involves the creation and study of the visual representation of data. \n\u003e - [Wikipedia](https://en.wikipedia.org/wiki/Data_visualization)\n\n An important advantage of data visualization is how it enables users to more effectively see connections as they are occurring between operating conditions and business performance. Adding realtime functionality using [Pusher](https://pusher.com) improves this experience as data changes are witnessed in realtime.\n\nWe’ll be creating an application that will present data about how football fans predict who wins the current running World Cup. Using our application, users will complete a poll and then see the data from the polls in realtime.\n\nHere’s a screenshot of the final product:\n\n![ionic-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/6bQMCuvpks8wsgkOWwAGgq/f7e885b2d2af1dbd1a5dbbbe711d93a3/ionic-live-graph-demo.png)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), Ionic and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Ionic, kindly follow the tutorial [here](https://ionicframework.com/docs/intro/tutorial/). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Ionic](https://ionicframework.com)\n- [Chart.js](http://www.chartjs.org/)\n\nWe’ll be sending data to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive data in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nWe’ll initialize our project using the Ionic CLI (command line interface). First, install the CLI by running `npm install -g ionic` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Ionic project called `chat-app` using the CLI, open a terminal and run:   \n\n```\n    ionic start ionic-polls blank\n```\n\nThe command is simply telling the CLI to create a new project called `ionic-polls` without a template. \n\nFollow the prompt and integrate your app with Cordova to target IOS and Android.\n\n![ionic-geofence-integrate-cordova](//images.ctfassets.net/1es3ne0caaid/1IUUkS2jWEsGkaoC0ImGA0/a4419e24c715605029dc1edc7a6a60d5/ionic-geofence-integrate-cordova.png)\n\n Type **Y** to integrate Cordova into the application. The next prompt will ask if you want to integrate Ionic pro into the application. If you have a pro account type **Y** and **N** if you don’t.\n\nThe Ionic team provides three ready made starter templates. You can check out the rest of the templates [here](https://ionicframework.com/getting-started).\n\nOpen the newly created folder, your folder structure should look something like this:\n\n```\n    chat-app/\n      resources/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.module.ts\n          app.scss\n          ...\n```\n\nOpen a terminal inside the project folder and start the application by running `ionic serve`. A browser window should pop up and you should see a page like this.\n\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Installing dependencies\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install ng2-charts pusher-js\n```\n\nStart the Ionic development server by running `ionic serve` in a terminal in the root folder of your project.\n\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. Create a file in the root folder of the project and name it `.env`. Copy the the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n    PUSHER_CLUSTER=PUSHER_CLUSTER\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initalized as early as possible in the application.\n\n\n### Sending votes\n\nTo let users send requests to the server, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/vote', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n        // set the selected property of the body to true\n        selected: true,\n      };\n      // trigger a new-entry event on the vote-channel\n      pusher.trigger('vote-channel', 'new-entry', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- We added a POST route(`/vote`) to handle incoming requests.\n- Using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), we got the body of the request.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`vote-channel`), an event name (`new-entry`), and a payload.\n- The payload being sent contains the body of the request sent in. The `selected` property of the payload is set to `true`.\n\nStart the server by running `node server` in a terminal in the root folder of your project.\n\n\n## Home view\n\nThe home view of the project will house both the polling area and the area where the data is visualized. We’ll present the user with options and a submit button to place vote.\n\nOpen the `home.html` file and replace it with the content below. The `home.html` file is in the `src/pages/home/` directory.\n\n``` html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003e\n          Vote\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cdiv padding\u003e\n        \u003ch1 class=\"header\"\u003eWho will win the world cup?\u003c/h1\u003e\n        \u003cp class=\"sub-header\"\u003e* Place vote to see results\u003c/p\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"vote-area\" *ngIf=\"!voted\"\u003e\n        \u003cdiv class=\"options\"\u003e\n          \u003cbutton ion-button full class=\"option\" color=\"light\" [ngClass]=\"{active: selectedOption === option}\" *ngFor=\"let option of optionsArray\"\n            (click)=\"selectOption(option)\"\u003e{{options[option].name}}\u003c/button\u003e\n        \u003c/div\u003e\n        \u003cdiv\u003e\n          \u003cbutton ion-button block class=\"submit\" (click)=\"vote()\"\u003eSubmit Vote!\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"result-area\" *ngIf=\"voted\"\u003e\n        \u003c!-- Charts area --\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\n\n\n- In the code snippet above, we looped through `optionsArray` to create a view based on the player’s information. \n- The `vote` method will make use of the `HttpClient`  to send the user’s selection as a request to the server.\n- An option is active if the current `selectedOption` is equal to the option’s name.\n\nVariables used will be defined in the component’s TypeScript file.\n\n### Styling\n\nReplace the contents of `home.scss` with the following:\n\n``` scss\n    // src/pages/home/home.scss\n    \n    page-home {\n      .toolbar-background {\n        background: #1cd8d2; /* fallback for old browsers */\n        background: linear-gradient(to right, #93edc7, #1cd8d2);\n      }\n      .toolbar-title {\n        color: white;\n      }\n      .header {\n        font-size: 35px;\n        line-height: 1.1;\n      }\n       .sub-header{\n        margin: 0;\n        opacity: 0.5;\n        font-size: 13px;\n        font-weight: bold;\n      }\n      .options {\n        margin-top: 1.5rem;\n        padding: 0 17px 5px;\n        .option {\n          margin: 15px 0;\n          padding-top: 32px;\n          padding-bottom: 32px;\n          opacity: 0.6;\n          font-size: 17px;\n          font-weight: bold;\n          box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.2);\n          \u0026.active {\n            border-left-width: 5px;\n            border-left-style: solid;\n            border-image: linear-gradient(to right, #93edc7, #1cd8d2) 1 100%;\n            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.2);\n            opacity: 0.9;\n          }\n        }\n      }\n      .submit {\n        background: #1cd8d2; /* fallback for old browsers */\n        background: linear-gradient(to right, #93edc7, #1cd8d2);\n        border-radius: 0;\n        padding-top: 35px;\n        padding-bottom: 35px;\n        margin-bottom: 0;\n        font-size: 19px;\n        font-weight: bold;\n      }\n      .response{\n        @extend .submit;\n        margin-top: 5rem;\n      }\n    }\n```\n\n\nThese styles are meant to add a bit of life to our application. It also helps distinguish between states during application use. \n\n### Home component\n\nIn the HTML snippet, we made reference to some variables that weren’t yet defined, we’ll create the variables here with the logic behind our application. \n\n``` typescript\n    // src/pages/home/home.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private http: HttpClient,\n      ) {}\n      options = {\n        germany: { name: 'Germany', votes: 0 },\n        spain: { name: 'Spain', votes: 0 },\n        france: { name: 'France', votes: 0 },\n        nigeria: { name: 'Nigeria', votes: 0 },\n      };\n      optionsArray = Object.keys(this.options);\n      chartData = this.optionsArray.map((val) =\u003e this.options[val].votes);\n      selectedOption = '';\n      chartType = 'doughnut';\n      voted = false;\n      selectOption(option) {\n        this.selectedOption = this.selectedOption !== option ? option : '';\n      }\n      computeData(option) {\n        this.options = {\n          ...this.options,\n          [option]: {\n            ...this.options[option],\n            votes: ++this.options[option].votes,\n          },\n        };\n        this.chartData = this.optionsArray.map((val) =\u003e this.options[val].votes);\n      }\n      vote() {\n        if (this.selectedOption) {\n          this.http\n            .post('http://localhost:4000/vote', { option: this.selectedOption })\n            .subscribe((res) =\u003e {\n              this.voted = true;\n            });\n        }\n      }\n      ngOnInit() {\n        \n      }\n    }\n```\n\n\n\n- `vote`: this method makes use of the native HttpClient service to make requests to our server. A request is sent, only if the user has made a selection. When a response is returned the `voted` property is set to true.\n\n\n- `computeData`: when a response is returned, this function takes the `option`  and increments the votes for the selected option.  \n\n\n- `selectOption`: this method will be used to set the `selectedOption` property to the `option`  param passed it. \n\nTo make use of the HttpClient service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { HomePage } from '../pages/home/home';\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule,\n      ],\n      ...\n      providers: [\n        ...\n        HttpClient\n      ]\n    })\n    export class AppModule {}\n```\n\n\nLet’s check how our application looks at this point. Make sure the server(`node server`) and Ionic dev server(`ionic serve`) are both running.\n\n![ionic-live-graph-homepage](//images.ctfassets.net/1es3ne0caaid/vW6xfrCOECykEMyOSum28/7eb2e7362cf2b6de7a182149e1503994/ionic-live-graph-homepage.png)\n\n\n## Introducing Pusher\n\nSo far we have an application that allows users be a part of the polling process but data updates aren’t happening in realtime.  Let’s create a provider that will make it easier to include Pusher in our components.\n\nWe’ll create a Pusher provider to be used application wide. The Ionic CLI can aid in the provider creation. Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.ts` file in the `src/providers/pusher/` directory and update it with the code below.\n\n``` typescript\n    // src/providers/pusher/pusher.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherProvider {\n      constructor() {\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n        });\n        this.channel = pusher.subscribe('vote-channel');\n      }\n      channel;\n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER` string with your actual credentials.\n  \n\nTo make the service available application wide, import it into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    import { PusherProvider } from '../providers/pusher/pusher';\n    \n    @NgModule({\n      ...\n      providers: [\n        ...\n        PusherProvider,\n      ]\n    })\n    export class AppModule {}\n```\n\nThe next step is to include the provider in the `home.ts` file. Using the `PusherProvider`, we’ll listen for `vote` events from the server and update our app in real time according to votes placed by users.\n \nOpen the `home.ts` file and update the `ngOnInit` lifecycle to listen for Pusher events.\n \n``` typescript\n    // src/pages/home/home.ts\n    ...\n    import { PusherProvider } from '../../providers/pusher/pusher';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        ...\n        private pusher: PusherProvider\n      ) {}\n      ...\n      \n      ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('new-entry', (data) =\u003e {\n          this.computeData(data.option);\n        });\n    }\n```\n\nNow our application should receive vote updates in realtime. Let’s include a chart component to visualize the data in the application.\n\n## Charts component\n\nTo visualize the data in our application, we’ll be making use of [ng2-charts](https://valor-software.com/ng2-charts/) to create charts and present the data in a graphical format. Let’s make use of the components provided by the [ng2-charts](https://valor-software.com/ng2-charts/) library. Update the `home.html` file to include the `canvas` provided by [ng2-charts](https://valor-software.com/ng2-charts/).\n\nOpen the `home.html` file and update it with the contents below:\n\n``` html\n    // src/pages/home/home.html\n    \n    ...\n    \n    \u003cion-content\u003e\n      ...\n      \u003cdiv class=\"result-area\" *ngIf=\"voted\"\u003e\n        \u003ccanvas baseChart [data]=\"chartData\" [labels]=\"optionsArray\" [chartType]=\"chartType\"\u003e\u003c/canvas\u003e\n        \u003cdiv ion-button block class=\"response\"\u003eThank you for voting!\u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nTo make use of the `ng2-charts` package, we’ll have to import the `ChartsModule` into our module file.\n\nUpdate the `app.module.ts` file like so:\n\n``` typescript\n    // src/app/app.module.ts\n    ...\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    import {ChartsModule} from 'ng2-charts';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule,\n        ChartsModule\n      ],\n      ...\n    })\n    ...\n```\n\n At this point, your application should have realtime updates when votes are placed. Ensure that the server is running alongside the Ionic development server. If not, run `node server` and `ionic serve` in two separate terminals. Both terminals should be opened in the root folder of your project.\n  \nTo test the realtime functionality of the application, open two browsers side-by-side and engage the application. Data updates should be in realtime.\n\n\n## Testing on mobile devices\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\n![ionic-geofence-in-app](//images.ctfassets.net/1es3ne0caaid/4Tto6qC43SyoeuuCwWk6kC/10b2fcce68e32c25cb8da5cfe7e635ad/ionic-geofence-in-app.png)\n\nTo view the application, click on it and you should see a similar view to what was in the browser. Sending messages to the server might have worked in the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-geofence-ngrok](//images.ctfassets.net/1es3ne0caaid/5xPwNwr4DmMCA6k0MaaIqo/d569c60667d1da3659409f57b9a52da5/ionic-geofence-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `home.ts` file that previously had `http://localhost:4000/vote`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/pages/home/home.ts\n    ...\n    export class ChatComponent implements OnInit {\n      ...\n      vote() {\n        ...\n        this.http\n            .post('\u003cNGROK_URL\u003e/vote', data)\n            .subscribe((res) =\u003e {\n              this.voted = true;\n            });\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding URL you copied where the placeholder string is\n\nNow you should be receiving messages sent from the phone on the browser. Preferably you can test it with two mobile devices connected to the same network.\n\n\n![ionic-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/6bQMCuvpks8wsgkOWwAGgq/f7e885b2d2af1dbd1a5dbbbe711d93a3/ionic-live-graph-demo.png)\n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n\n## Conclusion\n\nUsing Pusher,  we’ve built out an application using the pub/sub pattern to recieve realtime updates. With the help of Chart.js, our data was well presented using charts. You can check out the repo containing the demo on [GitHub](https://github.com/HackAfro/ionic-graph-app).","metaTitle":"Build a live voting app with Ionic","metaDescription":"Use Ionic and Node to create a live voting app, similar to a Twitter poll. Users can vote for who they expect to win the World Cup."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"60CR8KRc2IA8o8IqCWUosQ","type":"Entry","createdAt":"2018-07-02T13:14:33.936Z","updatedAt":"2020-06-19T11:09:48.081Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement geofencing in Ionic","url":"geofencing-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/ionic-geofence-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-06-29","description":"Build a geofencing app for mobile using Ionic and Google Maps. Ionic is an open source SDK for developing native web apps. Admin users will be notified when a user exits a defined area.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Angular, TypeScript and Ionic will be helpful.","content":"## Introduction\n\nA **geo-fence** is a virtual perimeter for a real-world geographic area. Geofencing is the use of GPS or RFID technology to create a virtual geographic boundary, enabling software to trigger a response when a mobile device enters or leaves a particular area. \n\nUsing [Ionic](https://ionicframework.com/), you can create a mobile application using web technologies and use a wide array of existing components. Using [Pusher](https://pusher.com), we can enable realtime functionalities in the application using Pusher’s pub/sub pattern. \n\nWe’ll be building a realtime location tracker application using Pusher, Ionic and the Google Maps library. Using the application, admin users will be notified when a user exits a predefined geofence. When this happens, the admin user receives a notification containing the user’s current location\n\nHere’s a demo of the final product:\n\n![ionic-geofence-demo](//images.ctfassets.net/1es3ne0caaid/16YJyTIcJY2U24gQIk6OkM/bfb4d451e5d968578686b7cac3fbc8ba/ionic-geofence-demo.png)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), Ionic and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Ionic](https://ionicframework.com/)\n- [Google Maps](https://cloud.google.com/maps-platform/)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nWe’ll initialize our project using the Ionic CLI (command line interface). First, install the CLI by running `npm install -g ionic` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Ionic project called `geofence``-app` using the CLI, open a terminal and run:   \n\n```\n    ionic start geofence-app tabs\n```\n\nThe command uses the CLI to create a new project using the tabs template. Follow the prompt and integrate your app with Cordova to target IOS and Android.\n\n![ionic-geofence-integrate-cordova](//images.ctfassets.net/1es3ne0caaid/1IUUkS2jWEsGkaoC0ImGA0/a4419e24c715605029dc1edc7a6a60d5/ionic-geofence-integrate-cordova.png)\n\n Type **Y** to integrate Cordova into the application. The next prompt will ask if you want to integrate Ionic pro into the application. If you have an Ionic pro account, type **Y** and **N** if you don’t.\n\nThe Ionic team provides three ready made starter templates. You can check out the rest of the templates [here](https://ionicframework.com/getting-started).\n\nIf you don’t have Cordova installed on your PC, install it by running the following command:\n\n```\n    npm install -g cordova\n```\n\nOpen the newly created folder, your folder structure should look something like this:\n\n```\n    geofence-app/\n      resources/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.module.ts\n          app.scss\n          ...\n        assets/\n          ...\n        pages/\n          home/\n          about/\n          ...\n```\n\nOpen a terminal inside the project folder and start the application by running `ionic serve`. A browser window should pop up and you should see screenshot below.\n\n![ionic-geofence-starter](//images.ctfassets.net/1es3ne0caaid/WmvVlyOTE2YeW0IMuSsIe/c4228b1e7aa22077fab6c15abd2513a1/ionic-geofence-starter.png)\n\n## Installing dependencies\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher sentiment uuid \n    \n    // front-end dependencies\n    npm install pusher-js @types/pusher-js @agm/core\n```\n\n## Building our server\n\nNow that we have our application running, let’s build out our server.\n\nTo do this we’ll make user of [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nWe referenced three packages in the snippet above, `body-parser`, `pusher` and `dotenv`. Let’s get into what each one does.\n\n\n-  body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into `[process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env)`. This package is used so sensitive information like the `appId` and `secret` aren’t added to our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n\nThe `dotenv` package should always be initialized very early in the application at the top of the file. This is because we need the environment variables available throughout the application.\n\nThe calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nAlso, you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency. Visit the [Pusher](https://pusher.com) website to create a Pusher account if you haven’t done so already.\n\nCreate a `.env` file to load the variables we’ll be needing into the Node environment. The file should be in the root folder of your project. Open the file and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    PUSHER_CLUSTER=\u003cPUSHER_CLUSTER\u003e\n```\n\n\u003e **P.S:** Please ensure you replace the placeholder values above with your Pusher `appId`, `key`, `secret` and `cluster`.\n\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Realtime location updates\n\nTo enable users send in their current receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    \n    app.post('/ping', (req, res) =\u003e {\n      const { lat, lng } = req.body;\n      const data = {\n        lat,\n        lng,\n      };\n      pusher.trigger('location', 'ping', data);\n      res.json(data);\n    });\n     ...\n```\n\n- We created a `POST /ping` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `lat` and `lng` in the request body sent by the user.\n- The `data` object will contain the `lat` and `lat` sent by the user. \n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`location`), an event name (`ping`) and a payload(`data`).\n- The payload can be any value, but in this case, we have a JS object.\n- The response will contain the `data` object.\n\n\n### Geofence updates\n\nWe’ll need another route to notify admin users when a user leaves their defined geofence. Let’s create a  `POST /notify` route to handle incoming updates on the user’s geofence status. Update the `server.js` file to include the new route.\n\n``` javascript\n    //server.js\n    \n    ...\n    app.post('/ping', (req, res) =\u003e {\n      ...\n    });\n    \n    app.post('/notify', (req, res) =\u003e {\n      const { lat, lng } = req.body;\n      const data = {\n        lat,\n        lng,\n      };\n      pusher.trigger('geofence', 'exit', data);\n      res.json(data);\n    });\n    \n    ...\n```\n\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Home page\n\nLet’s build out the home page for our application. We’ll be creating two pages for this project, the home page and the admin page. Typically, the admin page would have been a separate application but in this context, we’ll limit it to just a page on this project.\n\nSince we’re using a starter template, we already have some pages created in the `pages` directory. \nWe’ll edit and refactor the `home`  page to suit our needs. The `home` page will display the user’s current location on the map using a marker and a string of containing the user’s formatted address. Open the `home.html` file and replace the contents with the snippet below:\n\n``` html\n    \u003c!-- home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eHome\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cmap [center]=\"center\" [zoom]=\"zoom\"\u003e\n      \u003c/map\u003e\n      \u003cdiv class=\"location-address\"\u003e\n        \u003cp\u003e{{address}}\u003c/p\u003e\n        \u003ch4\u003e{{state}}\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nWe’ve referenced a `map` component that hasn’t been created, we’ll get to creating it but before then let’s add some styles to the `home.scss` file. Open the file and copy the following content into it:\n\n``` scss\n    // home.scss\n    \n    page-home {\n      ion-content {\n        position: relative;\n        agm-map {\n          height: 100%;\n          width: 100%;\n        }\n        .location-address {\n          width: 100%;\n          border-top-left-radius: 15px;\n          border-top-right-radius: 15px;\n          box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);\n          background: white;\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          padding: 0 23px 10px;\n          p{\n            font-size: 20px;\n            opacity: .7;\n            font-weight: bold;\n            letter-spacing: .2px;\n            margin-bottom: 4px;\n          }\n          h4{\n            font-size: 14px;\n            opacity: 0.4;\n            font-weight: 500;\n            margin: 0;\n          }\n        }\n      }\n    }\n```\n\n\n\nUpdate the `home.ts` file below to be similar to the snippet below:\n\n``` typescript\n    import { Component, OnInit } from '@angular/core';\n    import { NavController, Platform } from 'ionic-angular';\n    import { MapsAPILoader } from '@agm/core';\n    import { HttpClient } from '@angular/common/http';\n    \n    declare const google;\n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private loader: MapsAPILoader,\n        private http: HttpClient,\n      ) {\n      \n      }\n      center = {\n        lat: 6.4393477,\n        lng: 3.5244628999999996,\n      };\n      zoom = 15;\n      address = '';\n      state = '';\n      \n      pingLocation(location) {\n        this.http\n          .post('http://localhost:4000/ping', location)\n          .subscribe((res) =\u003e {});\n      }\n      notify(location) {\n        this.http\n          .post('http://localhost:4000/notify', location)\n          .subscribe((res) =\u003e {});\n      }\n      \n      ngOnInit() {\n        this.loader.load().then(() =\u003e {\n          this.pingLocation(this.center);\n        });\n      }\n    }\n```\n\n\n### Realtime location updates\n\nWe’ll be updating the user’s location in realtime and also sending live location data of the user to the server. For this we’ll be using the native Geolocation API by ionic. The API will watch the user’s current position and update the marker on the map. \n\nFirst, we'll install the Geolocation plugin. Run the following commands to add the plugin to your project.\n\n```\n    ionic cordova plugin add cordova-plugin-geolocation --variable GEOLOCATION_USAGE_DESCRIPTION=\"To locate you\"\n    npm install --save @ionic-native/geolocation\n```\n\nUpdate the `home.ts` file with the snippet below:\n\n``` typescript\n    // home.ts\n    ...\n    import { MapsAPILoader } from '@agm/core';\n    import { Geolocation } from '@ionic-native/geolocation';\n    ...\n    export class HomePage implements OnInit{\n      constructor(\n        ...\n        private platform: Platform,\n        private geolocation: Geolocation\n      ){};\n      ...\n      notify(location) {\n        ...\n      }\n      reverseGeocode(latLng) {\n        const geocoder = new google.maps.Geocoder();\n        geocoder.geocode({ location: latLng }, (results, status) =\u003e {\n          if (status === 'OK') {\n            if (results[0]) {\n              const address = results[0].formatted_address;\n              const addressList = address.split(',');\n              this.address = addressList[0];\n              this.state = addressList.slice(2).join(', ');\n            }\n          }\n        });\n      }\n    \n      ngOnInit(){\n        this.loader.load().then(() =\u003e {\n          this.reverseGeocode(this.center);\n          this.pingLocation(this.center);\n        });\n        this.platform.ready().then(() =\u003e {\n          if (this.platform.is('cordova')) {\n            const watch = this.geolocation.watchPosition();\n            watch.subscribe((position) =\u003e {\n              const positionEmpty = Object.keys(position).length \u003c 1;\n              if (!positionEmpty) {\n                this.center = {\n                  lat: position.coords.latitude,\n                  lng: position.coords.longitude,\n                };\n                this.reverseGeocode(this.center);\n                this.pingLocation(this.center);\n              }\n            });\n          }\n        });\n      }\n    }\n```\n\n    \n\nIn the snippet above, we added a new method to the `HomePage` component. The `reverseGeocode` method uses the Google Maps `Geocoder` API to reverse geocode coordinates to addresses. In the function we split the `formatted_address` property getting the `short_name`, `state` and `country`.\n\nThe `ngOnInit` lifecycle got an update. First we reverse geocoded the current address after the Google Maps script has been loaded. We then check if the platform is [Cordova](https://cordova.apache.org/) supported. If it is, we initialize the geolocation API to watch the user's location, subscribing to the `watch` variable initiates the process. When the user's location is returned, we reverse geocode the coordinates to get the address, then we send the coordinates to the server.\n\nAfter this update, you should get an error that the `Geolocation` and `HttpClient` providers haven't been registered. To clear this error, we'll register the these providers in the `app.module.ts` file. Open the file and add them to the list of providers.\n\n``` typescript\n    // app.module.ts\n    \n    ...\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    import { Geolocation } from '@ionic-native/geolocation';\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule\n      ],\n      ...\n      providers: [\n        ...\n        Geolocation,\n        HttpClient,\n      ],\n    })\n    export class AppModule {}\n```\n\n\n### Setting up geofences\n\nTo set up geofences for the user, we'll make use of the native Geofence Ionic API. Install this plugin by running the following commands in a terminal in the root folder of your project.\n\n```\n    ionic cordova plugin add cordova-plugin-geofence\n    \n    npm install --save @ionic-native/geofence\n```\n\nThe next step is to use the Geofence provider in the `HomePage` component. Open the `home.ts` file and update it like so:\n\n``` typescript\n    // home.ts\n    ...\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    import { Geofence } from '@ionic-native/geofence';\n    import { v4 } from 'uuid';\n    ...\n    export class HomePage implements OnInit {\n      constructor(\n        ...\n        private geofence: Geofence\n      ){\n        if (this.platform.is('cordova')) {\n          this.platform.ready().then((_) =\u003e {\n            geofence.initialize().then((_) =\u003e {\n              console.log('Geofence Plugin Ready');\n            });\n          });\n        }\n      }\n    \n      ...\n      private createGeofence() {\n        let fence = {\n          id: v4(), //any unique ID\n          latitude: this.center.lat, //center of geofence radius\n          longitude: this.center.lng,\n          radius: 1000, //radius to edge of geofence in meters\n          transitionType: 2,\n        };\n        this.geofence\n          .addOrUpdate(fence)\n          .then(\n            () =\u003e console.log('Geofence added'),\n            (err) =\u003e console.log('Geofence failed to add', err)\n          );\n        this.geofence.onTransitionReceived().subscribe((res) =\u003e {\n          this.notify(this.center);\n        });\n      }\n      ngOnInit(){\n        this.loader.load().then(() =\u003e {\n          ...\n        });\n        this.platform.ready().then(() =\u003e {\n          if (this.platform.is('cordova')) {\n            this.createGeofence();\n            const watch = this.geolocation.watchPosition();\n            ...\n          }\n        });\n      }\n    }\n```\n\nFirst we check if the platform is supported by Cordova and if the platform is ready. Then we initialize the `Geofence` provider in the `constructor`. In the `createGeofence` method, we define a `fence` object. The `id`, `latitude`, `longitude` and `radius` properties are kind of self explanatory. The `transitionType` is one of three possible types. A geofence has three transition types:\n\n  \n\n1. Enter\n2. Leave\n3. Both\n\n  \n\nEach type is represented by accordingly by the numbers 1, 2 and 3. Next, we call the `addOrUpdate` method of the geofence provider, the method takes in the `fence` object we created.\nWe'll be listening for the transition type of `leave`, which means we should get notified when the user leaves the set geofence. \n\nUpdating the `ngOnInit` lifecycle to call the `createGeofence` method ensures that the geofence is created once the component is initialized. Include the `Geofence` provider in the module file to prevent the app from throwing errors. Add the `Geofence` to the list of providers in the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    import { Geofence } from '@ionic-native/geofence';\n    @NgModule({\n      ...\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        Geolocation,\n        HttpClient,\n        Geofence,\n      ],\n    })\n    export class AppModule {}\n```\n\n\n## Setting up the map component\n\nWe referenced an uncreated `map` component in the `home.html` file. Create a `components` folder in the `src` directory. Within it, create a `map`  folder with three files in it. `map.ts`, `map.html` and `map.scss`.\n\nFor the map component, we'll be using components provided by the [angular-google-maps](https://angular-maps.com/) library. Let's register the angular-google-maps module and the new map component in the `app.module.ts` file. Open the `app.module.ts` file and update the `imports` and `declarations` properties.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { Geofence } from '@ionic-native/geofence';\n    import { AgmCoreModule } from '@agm/core';\n    import { MapComponent } from '../components/map/map';\n    @NgModule({\n      declarations: [\n        ...\n        MapComponent\n      ],\n      imports: [\n        ...\n        AgmCoreModule.forRoot({\n          // please add your own API key here: https://developers.google.com/maps/documentation/javascript/get-api-key?hl=en\n          apiKey: 'GOOGLE_API_KEY',\n          libraries: ['geometry'],\n        }),\n      ],\n     ...\n    })\n    export class AppModule {}\n```\n\nNow, open the `map.html` file and copy the content below into it:\n\n``` html\n    \u003c!-- map.html --\u003e\n    \u003cagm-map [latitude]=\"center.lat\" [longitude]=\"center.lng\" [zoom]=\"zoom\"\u003e\n      \u003cagm-marker [latitude]=\"center.lat\" [longitude]=\"center.lng\" [iconUrl]=\"'assets/imgs/user.svg'\"\u003e\u003c/agm-marker\u003e\n      \u003cagm-circle [latitude]=\"radiusCenter.lat\" [longitude]=\"radiusCenter.lng\" [radius]=\"500\" [fillColor]=\"'#ADC1B9'\"\u003e\u003c/agm-circle\u003e\n    \u003c/agm-map\u003e\n```\n\n\u003e **P.S**: All assets used in the project are available on [GitHub](https://github.com/HackAfro/ionic-geofence-app)\n\nNext, let's update the `map.scss` file to feature styles for the component:\n\n``` scss\n    // map.scss\n    map {\n      agm-map{\n        width: 100%;\n        height: 100%;\n      }\n    }\n```\n\nThat's it. Pretty straightforward. Let's define the missing variables for the map component in the `map.ts` file.\n\n``` typescript\n    // map.ts\n    import { Component, Input } from '@angular/core';\n    /**\n     * Generated class for the MapComponent component.\n     *\n     * See https://angular.io/api/core/Component for more info on Angular\n     * Components.\n     */\n    @Component({\n      selector: 'map',\n      templateUrl: 'map.html',\n    })\n    export class MapComponent {\n      text: string;\n      constructor() {}\n      @Input()\n      center = {\n        lat: 6.435838,\n        lng: 3.451384,\n      };\n      @Input() zoom = 15;\n      radiusCenter = {\n        lat: 6.435838,\n        lng: 3.451384,\n      }\n    }\n```\n\nThe map component will feature two inputs, `center` and `zoom`. The `center` input will set the center of the map and the `zoom` will do the same. Pretty self-explanatory. The `radiusCenter` will be used to define the circle drawn on the map, displaying the geofence set up. Below is a screenshot of the home page after all the changes made.\n\n![ionic-geofence-home-1](//images.ctfassets.net/1es3ne0caaid/5EISWY5Y5yMOQkgQ6k2qKU/e4b4c7c63908ea59c01f0f37887c068d/ionic-geofence-home-1.png)\n\n## Introducing Pusher and updating location in realtime\n\nSo far we have an application that allows users to send location data but the location isn’t updated in realtime. To solve this problem, we’ll include the [Pusher](https://pusher.com) library.\n\nLet’s create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher\n```\n\nThis command simply tells the CLI to generate a provider named `pusher` . Now open the `pusher.ts` file in the `src/providers/pusher`  directory and update it with the code snippet below:\n\n\n``` typescript\n    // src/providers/pusher/pusher.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherProvider {\n      constructor() {\n        this.pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true,\n        });\n      }\n      pusher;\n    \n      public init(channelName) {\n        const channel = this.pusher.subscribe(channelName);\n        return channel;\n      }\n    }\n```\n\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note:** Ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER` string with your actual Pusher credentials.\n  \n\n\n## Admin page\n\nThe admin page will feature two segments, `location` and `notifications`. The location segment will display the user's current location at any particular time. Create the admin page using the CLI by running the following command:\n\n```\n    ionic generate page admin\n```\n\nYou’ll find the `admin` page generated in the `pages` folder. Open the `admin.html` file and copy the code below into it:\n\n``` html\n    \u003c!-- admin.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cdiv padding\u003e\n        \u003cion-segment [(ngModel)]=\"tab\"\u003e\n          \u003cion-segment-button value=\"location\"\u003e\n            Position\n          \u003c/ion-segment-button\u003e\n          \u003cion-segment-button value=\"notifications\"\u003e\n            Notifications\n          \u003c/ion-segment-button\u003e\n        \u003c/ion-segment\u003e\n      \u003c/div\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cdiv [ngSwitch]=\"tab\" style=\"height: 100%\"\u003e\n        \u003cdiv *ngSwitchCase=\"'location'\" style=\"height: 100%\"\u003e\n          \u003cmap [center]=\"center\"\u003e\u003c/map\u003e\n        \u003c/div\u003e\n        \u003cdiv *ngSwitchCase=\"'notifications'\" class=\"notifications-holder\"\u003e\n          \u003ch4 class=\"no-notifications\" *ngIf=\"!notifications.length\"\u003eNo notifications to display\u003c/h4\u003e\n          \u003cion-list *ngIf=\"notifications.length\"\u003e\n            \u003cion-item *ngFor=\"let notification of notifications\"\u003e\n              \u003cion-thumbnail item-start\u003e\n                \u003cion-icon name=\"person\"\u003e\u003c/ion-icon\u003e\n              \u003c/ion-thumbnail\u003e\n              \u003ch2\u003e{{notification.header}}\u003c/h2\u003e\n              \u003cp\u003e{{notification.body}}\u003c/p\u003e\n            \u003c/ion-item\u003e\n          \u003c/ion-list\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nStyle up the page by copying the following styles into the `admin.scss` file.\n\n``` scss\n    agm-map {\n      width: 100%;\n      height: 100%;\n    }\n    ion-thumbnail {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: #adc1b9;\n      border-radius: 50%;\n      ion-icon {\n        font-size: 2.2em;\n        color: whitesmoke;\n      }\n    }\n    .no-notifications {\n      font-size: 14px;\n      color: deepskyblue;\n      text-transform: uppercase;\n      text-align: center;\n    }\n```\n\n\nLet’s update the `admin.ts` file to include the variables we used in the HTML file:\n\n``` typescript\n    // admin.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { PusherProvider } from '../../providers/pusher/pusher';\n    import { Platform } from 'ionic-angular';\n    import { PhonegapLocalNotification } from '@ionic-native/phonegap-local-notification';\n    \n    declare const google;\n    \n    @Component({\n      selector: 'page-admin',\n      templateUrl: 'admin.html',\n    })\n    \n    export class AdminPage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private pusher: PusherProvider,\n        private platform: Platform,\n        private localNotification: PhonegapLocalNotification\n      ) {\n        if (platform.is('cordova')) {\n          platform.ready().then((_) =\u003e {\n            this.localNotification.requestPermission().then((perm) =\u003e {\n              if (perm === 'granted') this.permissionGranted = true;\n            });\n          });\n        }\n      }\n      tab = 'location';\n      notifications = [];\n      center = {\n        lat: 6.435838,\n        lng: 3.451384,\n      };\n      permissionGranted = false;\n      address = '';\n      reverseGeocode(latLng) {\n        const geocoder = new google.maps.Geocoder();\n        geocoder.geocode({ location: latLng }, (results, status) =\u003e {\n          if (status === 'OK') {\n            if (results[0]) {\n              const address = results[0].formatted_address;\n              const addressList = address.split(',');\n              this.address = addressList[0];\n            }\n          }\n        });\n      }\n      ngOnInit() {\n        const locationChannel = this.pusher.init('location');\n        const geofenceChannel = this.pusher.init('location');\n        locationChannel.bind('ping', (data) =\u003e {\n          this.center = {\n            ...data,\n          };\n        });\n        geofenceChannel.bind('exit', (data) =\u003e {\n          this.reverseGeocode(data);\n          if (this.permissionGranted) {\n            this.localNotification.create('Geofence exited', {\n              tag: 'message1',\n              body: 'User has exited the defined geofence',\n              icon: 'assets/imgs/user.svg',\n            });\n          }\n          const notification = {\n            header: 'User has exited the geofence',\n            body: `Current location: ${this.address}`,\n          };\n          this.notifications = this.notifications.concat(notification);\n        });\n      }\n    }\n```\n\n\nThe admin component will be displaying notifications in the notifications bar whenever a user leaves the set geofence. We’ll also have a notifications segment that will show a list of notifications over time.\n\nTo display notifications in the notifications bar, we’ll be using the [PhonegapLocalNotification](https://ionicframework.com/docs/native/phonegap-local-notification/) native API. Install it as a plugin by running the following commands.\n\n```\n    ionic cordova plugin add phonegap-plugin-local-notification\n    \n    npm install --save @ionic-native/phonegap-local-notification\n```\n\nIn the `ngOnInit` lifecycle, we list for two events `ping` and `exit` from Pusher. In the `ping` event callback we use the data returned to update the current position of the marker. When the `exit` event is called we trigger a notification using the `PhonegapLocalNotification`. A notification object is created containing a reverse geocoded address and appended to the notifications array.\n\nAfter creating the `admin` page, the next step is to register it in the `app.module.ts`  file and then add it to the `tabs` page. Update the `app.module.ts`  file and the `tabs` page to include the `admin` page and the `PhonegapLocalNotification` provider.\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { AdminPage } from '../pages/admin/admin';\n    import { PhonegapLocalNotification } from '@ionic-native/phonegap-local-notification';\n    \n    @NgModule({\n      declarations: [\n        ...\n        AdminPage\n      ],\n      ...\n      providers: [\n        ...\n        PhonegapLocalNotification,\n      ],\n    })\n    export class AppModule {}\n```\n\n\nThen update the TabsPage to Include the AdminPage. Open the `tabs.html` file in the `src/pages/tabs` directory and replace the content with the code below:\n\n``` html\n    \u003c!-- tab.html --\u003e\n    \u003cion-tabs\u003e\n      \u003cion-tab [root]=\"tab1Root\" tabTitle=\"Home\" tabIcon=\"home\"\u003e\u003c/ion-tab\u003e\n      \u003cion-tab [root]=\"tab2Root\" tabTitle=\"Admin\" tabIcon=\"people\"\u003e\u003c/ion-tab\u003e\n    \u003c/ion-tabs\u003e\n```\n\n\nNext update the `tabs.ts` file and include the AdminPage:\n\n``` typescript\n    import { Component } from '@angular/core';\n    import { AdminPage } from '../admin/admin';\n    import { HomePage } from '../home/home';\n    @Component({\n      templateUrl: 'tabs.html',\n    })\n    export class TabsPage {\n      tab1Root = HomePage;\n      tab2Root = AdminPage;\n      constructor() {}\n    }\n```\n\n\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n![ionic-geofence-in-app](//images.ctfassets.net/1es3ne0caaid/4Tto6qC43SyoeuuCwWk6kC/10b2fcce68e32c25cb8da5cfe7e635ad/ionic-geofence-in-app.png)\n\nTo view the application, click on it and you should see a similar view with what was on the browser. Sending messages to the server might have worked on the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-geofence-ngrok](//images.ctfassets.net/1es3ne0caaid/5xPwNwr4DmMCA6k0MaaIqo/d569c60667d1da3659409f57b9a52da5/ionic-geofence-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `home.ts` file that previously had `http://localhost:4000/ping` and `http://localhost:4000/notify`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/pages/home/home.ts\n    ...\n    export class HomePage implements OnInit {\n      ...\n      pingLocation() {\n        this.http\n            .post('\u003cNGROK_URL\u003e/ping', data)\n            .subscribe((res: Message) =\u003e {});\n      }\n      \n      notify(location) {\n        this.http\n          .post('\u003cNGROK_URL\u003e/notify', location)\n          .subscribe((res) =\u003e {});\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding url you copied where the placeholder string is\n\n\n## Running on an emulator\n\nSince our application is making use of some native APIs, we’ll need to test it on an emulator. To run our app on an emulator, run any of the following commands depending on the platform you’re building for.\n\n```\n    // for IOS\n    ionic cordova emulate ios\n    \n    // for android\n    ionic cordova emulate android\n```\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n## Conclusion\n\nUsing Ionic, Google Maps and Pusher, we’ve been able to create an application that offers realtime location tracking. We’ve also learnt how to create geofences using native APIs. You can view the source code for the demo [here](https://github.com/HackAfro/ionic-geofence-app).","metaTitle":"Implement geofencing in Ionic","metaDescription":"Create a geofencing app with Ionic and Google Maps. Ionic uses Angular and TypeScript along with Cordova. Admin users will be notified when a user exits a defined area."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6uu3Ys68yQ6sIMwae8OAQU","type":"Entry","createdAt":"2018-06-28T09:38:54.858Z","updatedAt":"2018-06-28T09:38:54.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live poll app with Ionic","url":"live-poll-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/FeezyHendrix/ionic-realtime-pollapp","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-06-26","description":"Use Ionic to create a live poll application for mobile. The app features a Node.js backend. It allows users to vote on their favorite premier league player, and see other users' votes displayed in realtime.","prerequisite":"You will need Node and npm installed on your machine. A basic knowledge of Angular, Ionic and Node will be helpful.","content":"## Introduction\n\nAn electronic polling system allows users cast their votes with ease without the hassle and stress of visiting a polling booth. This makes it easily accessible as it can be used by users anywhere in the world. Adding realtime functionality to the application improves the user experience as votes are seen in realtime.\n\nWe’ll build a realtime polling application using Pusher, Node, and Ionic.\nUsing our application, users will get to vote for their favorite soccer player in the English Premier League.\nHere’s a demo of the final product:\n\n![ionic-poll-demo](//images.ctfassets.net/1es3ne0caaid/2tcCbmsgRyI2YYqEcuOEO2/d09a686ee51a5db0fc1706672a373556/ionic-poll-demo.gif)\n\nWe’ll send our votes to the server and with the help of Pusher, update our polls in realtime. To make use of Pusher, you’ll have to create an account [here.](https://pusher.com/)\n\nLet’s build!\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), [Ionic](https://ionicframework.com) and [Node.js](https://nodejs.org/en/) is required. Please ensure that you have Node and npm installed before you begin.\nIf you have no prior knowledge of Ionic, kindly follow the [tutorial here.](https://ionicframework.com/docs/intro/tutorial/) Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build out our application:\n\n1. [Express](https://expressjs.com/)\n2. [Node](https://nodejs.org/en/)\n3. [Pusher](https://pusher.com/)\n4. [Ionic](https://ionicframework.com)\n\n\n## Setup and folder structure\n\nTo get started, we will use the CLI (command line interface) provided by the Ionic team to initialize our project.\n\nFirst, install the CLI by running `npm install -g ionic cordova`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Ionic App using the CLI, open a terminal and run:\n\n```\n    ionic start pollApp blank\n```\n\nThe command is merely telling the CLI to create a new app called `pollApp` and it should make use of the blank starter template.  While the setup is running you might get a prompt `\"Would you like to integrate your new app with Cordova to target native iOS and Android?\"`. If you want to start running or testing the application on a mobile device or emulator as you build, then choose yes by typing `Y` and pressing Enter on your keyboard, else type `N` and continue. You might get another prompt   `\"If you would like to integrate ionic pro ?\"` ,  we wouldn’t be needing that in this tutorial so just type `N` and if you would like extend the project into production with your team choose `Y`.\n\nOpen the newly created `pollApp`. Your folder structure should look something like this:\n\n```\n    pollApp /\n      node_modules /\n      src / \n        app /\n          assets /\n          pages /\n            home /\n              home.html\n              home.ts\n              home.scss\n```\n\nOpen a terminal inside the app folder and start the application by running: \n\n```\n    ionic serve \n```\n\nAutomatically your default browser should open, and you should see the screenshot below if everything went well.\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Building our server\n\nNow that we have our Ionic application running let’s build our server.\nTo do this, we’ll need to install Express. Express is a fast, unopinionated, minimalist web framework for Node.js. We’ll use this to receive requests from our Ionic application.\n\nRun `npm install express` on a terminal inside the root folder of your project to install Express.\nCreate a file called `server.js` in the root of the project and update it with the code snippet below:\n\n``` javascript\n    //pollApp/server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.CLUSTER,\n      encrypted: true,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\nWe referenced three packages that we are yet to install, `body-parser`, `pusher` and `dotenv`. Install these packages by running this code in your terminal:\n\n```\n    npm i body-parser pusher dotenv\n```\n\nThe `body-parser` package is used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n\nThe calls to our endpoint will be coming in from a different origin. Therefore we need to make sure we include the CORS headers (Access-Control-Allow-Origin). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\nAlso, you’ll notice that we installed Pusher library as a dependency. [Create a Pusher account](https://pusher.com/) and a new Pusher Channels app and get your `appId`, `key` and `secret`.\n\nThe last package, `dotenv` is a zero-dependency module that loads environment variables from a `.env` file into `process.env`.\n\nWe use this package to make sure we don’t add sensitive information like our `appId` and `secret` directly into our code. To get these values loaded into our environment, we'll create a `.env` file in the root of our project.\n\nYour `.env file` should look something like the snippet below. We’ll add our Pusher `appId`, `key` and `secret` provided here.\n\n```\n    // pollApp/.env\n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    CLUSTER=\u003cCLUSTER\u003e\n```\n\nIf you noticed, we added the `dotenv` package at the start of our file. This is done because we need to make the variables available throughout the file.\nPlease ensure you replace the following placeholder values above with your unique Pusher `appId`, `key` and `secret` from your Pusher dashboard.\n\n## Send votes\n\nTo enable users send requests to the server, we’ll create a route to handle incoming requests. Update your `server.js` file with the code below:\n\n``` javascript\n    // pollApp/server.js\n    require('dotenv').config();\n    ...\n    app.post('/vote', (req, res) =\u003e {\n      const { body } = req;\n      const { player } = body;\n      pusher.trigger('vote-channel', 'vote', {\n        player,\n      });\n      res.json({ player });\n    });\n    \n     ...\n```\n\nWe created a POST `/vote` route which, when hit, triggers a Pusher event.\nWe used object destructuring to get the body of the request and also the player info sent by the user.\n\nThe trigger is achieved using the `trigger``()` method which takes the trigger identifier (vote-channel), an event name (vote), and a payload.\nThe payload can be any value, but in this case, we have a JS object. This object contains the name of the player being voted for.\n\nWe still go ahead to respond with an object containing the voted player string so we can update the frontend with the data.\n\n## Building the app UI\n\nOpen `home.html` and replace it with the content below:\n \n``` html\n    //../src/pages/home/home.html\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003e\n        Poll APP  \n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content padding\u003e\n      \u003cion-list no-lines\u003e\n        \u003cion-item *ngFor=\"let player of playerData\"\u003e\n          \u003cion-row\u003e\n            \u003cion-col col-6\u003e\n                \u003cion-avatar\u003e\n                    \u003cimg [src]=\"player.image\" [alt]=\"player.name\" [ngClass]=\"getVoteClasses(player.shortName)\"\u003e\n                    \u003ch4\u003e{{player.name}}\u003c/h4\u003e\n                    \u003cp\u003e{{player.goals}} goals\u003c/p\u003e\n                    \u003cp\u003e{{player.assists}} assists\u003c/p\u003e\n                  \u003c/ion-avatar\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col col-6\u003e\n                  \u003ch1\u003eVoteCount\u003c/h1\u003e\n                  \u003ch1 text-center\u003e{{voteCount[player.shortName]}}\u003c/h1\u003e\n            \u003c/ion-col\u003e\n          \u003c/ion-row\u003e \n          \u003cbutton ion-button full round (click)=\"sendVotes(player)\"\u003eVote\u003c/button\u003e\n        \u003c/ion-item\u003e\n      \u003c/ion-list\u003e\n    \u003c/ion-content\u003e\n```    \n\nIn the code snippet above, we looped through `playerData``[]` to create a view based on the player’s information.\nThere are some undefined variables in the code snippet above, don’t panic yet, we’ll define them in our `home.ts` file below.\n\n## Home.ts\n\nIn the HTML snippet, we referred to some variables that weren’t yet defined. We’ll create the variables here with the logic behind our application, and import the HttpClient service.\n\n\n\n``` typescript    \n    // ../src/pages/home/home.ts\n    import { HttpClient } from '@angular/common/http';\n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      constructor(public navCtrl: NavController, public http : HttpClient) {\n      }\n      event: string = 'vote';\n      vote: string = '';\n      ifVoted : boolean = false;\n      voteCount = {\n        salah: 0,\n        kane: 0,\n        eriksen: 0,\n        kevin: 0,\n      };\n      playerData = [\n        {\n          name: 'Mo. Salah',\n          goals: 30,\n          assists: 12,\n          shortName: 'salah',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/250x250/p118748.png'\n        },\n        {\n          name: 'Christian Eriksen',\n          goals: 8,\n          assists: 13,\n          shortName: 'eriksen',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/250x250/p80607.png',\n        },\n        {\n          name: 'Harry Kane',\n          goals: 26,\n          assists: 5,\n          shortName: 'kane',\n          image:\n            'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/40x40/p78830.png',\n        },\n        {\n          name: \"Kevin De'bruyne\",\n          goals: 10,\n          assists: 17,\n          shortName: 'kevin',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/40x40/p61366.png',\n        },\n    ];\n      sendVotes(player){\n        this.http.post('http://localhost:4000/vote', { player }).subscribe((res : any) =\u003e {\n          this.vote  = res.player;\n          this.ifVoted = true;\n        })\n      }\n      getVoteClasses(player){\n        return {\n          elect : this.ifVoted \u0026\u0026 this.vote === player,\n          lost : this.ifVoted \u0026\u0026 this.vote !== player\n        }\n      }\n      ionViewDidLoad(){}\n    }\n```\n\n`send``Votes``()`: this method makes use of the native HttpClient service to make requests to our server. It sends the name of the player being voted for in a POST request to the server. When a response is returned, it sets the voted property to true signifying that the user has placed a vote. Also, it sets the vote property to the name of the player being voted.\n\n`getVoteClasses``()`: this method sets classNames on each player element based on if a player was voted for or not.\n\nTo make use of the HttpClient service, we’ll need to import the HttpClientModule into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // src/app/app.module.ts\n    \n    import { BrowserModule } from '@angular/platform-browser';\n    import { ErrorHandler, NgModule } from '@angular/core';\n    import { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    import { StatusBar } from '@ionic-native/status-bar';\n    import { HttpClientModule } from '@angular/common/http';\n    import { MyApp } from './app.component';\n    import { HomePage } from '../pages/home/home';\n    @NgModule({\n    declarations: [\n    MyApp,\n    HomePage\n    ],\n    imports: [\n    BrowserModule,\n    IonicModule.forRoot(MyApp),\n    HttpClientModule\n    ],\n    bootstrap: [IonicApp],\n    ....\n```\n\nBy now our application should look like this:\n\n![ionic-poll-vote-page-1](//images.ctfassets.net/1es3ne0caaid/5KahXsHznU6giAomgwaaA4/3f95e4a7ead72f9b9a6f2f4d1196ca62/ionic-poll-vote-page-1.png)\n\n## Introducing Pusher\n\nSo far we have an application that enables users to cast votes, but we have no way of keeping track of how others voted in realtime. We also have no way of visualizing the polling data. To solve both of these problems, we’ll include the Pusher library.\n\nOpen `index.html` file in the src folder of the project and paste the cdn into it:\n\n``` html\n    ...\n    \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- add to homescreen for ios --\u003e \n    ...\n```\n\nNow that Pusher has been made available in our project, we’ll create a Pusher Provider to be used in our application. The Ionic CLI can aid in the provider creation. Open a terminal in your project’s root folder and run the following command:\n\n```\n    ionic generate provider pusher-service\n```\n\nThis command simply tells the CLI to generate a provider named pusher. Now open the `pusher-service.ts` file and update it with the code below:\n\n``` typescript\n    // ../src/providers/pusher-service/pusher-service.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherServiceProvider {\n    channel;\n    constructor(public http: HttpClient) {\n    var pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n    cluster: 'eu',\n    encrypted: true,\n    });\n    this.channel = pusher.subscribe('vote-channel');\n    }\n    public init(){\n      return this.channel;\n      }\n    }\n```\n\nFirst, we initialize Pusher in the constructor.\nThe `init()` method returns the Pusher property we created.\nEnsure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\nTo make the provider available in the application, import it into the `app.``module.ts` file.\n\n``` typescript\n    // ../src/app/app.module.ts\n    \n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    ....\n    providers: [\n    StatusBar,\n    SplashScreen,\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\n    PusherServiceProvider\n    ]\n    ....\n```\n\nWe’ll make use of this provider in our home page, by binding to the vote event and increment the votes of the voted player returned in the event. This will be done in the `ionViewDidLoad` lifecycle.\n\n``` typescript\n    // ../src/pages/home/home.ts\n    \n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    \n    constructor(public navCtrl: NavController, public http : HttpClient, private pusher : PusherServiceProvider) {}\n    \n    ...\n    \n    ionViewDidLoad(){\n      const channel = this.pusher.init();\n      channel.bind(this.event, ({ player }) =\u003e {\n        this.voteCount[player.shortName] += 1\n      });\n    }\n```\n\nAt this point, your application should have realtime updates when votes are placed. Ensure that the server is running alongside the Ionic development server. If not, run `node server` and `ionic serve` in two separate terminals. Both terminals should be opened in the root folder of your project. \n\n\n## Testing on Mobile Devices\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\n![ionic-chat-sentiment-in-app](//images.ctfassets.net/1es3ne0caaid/2OsgMWFKTC8ksw2wMCqEkI/983d5ae2843c21149a10fb468393ba2b/ionic-chat-sentiment-in-app.png)\n\nTo view the application, click on it and you should see a similar view to what was in the browser. Sending messages to the server might have worked in the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\nYou can also run the following code in your terminal if the above method doesn’t work for you.\n\n```\n    ionic cordova run \u003ctarget_platform\u003e\n```\n\n- `target_platform` : either `ios` or `android`\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-chat-sentiment-ngrok](//images.ctfassets.net/1es3ne0caaid/5pf60lqM9i8YmkC4eG8iY8/d31c9d7421f2bef8b8595d98e98e4082/ionic-chat-sentiment-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `home.ts` file that previously had `http://localhost:4000/``vote`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/pages/home/home.ts\n    ...\n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      ...\n       sendVotes(player){\n          this.http.post('\u003cNGROK_URL\u003e/vote', { player }).subscribe((res : any) =\u003e {\n          this.vote  = res.player;\n          this.ifVoted = true;\n        });\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding URL you copied where the placeholder string is\n\nNow you should be seeing realtime update of the votes, both on the phone and the browser.\n\n\n![ionic-poll-demo](//images.ctfassets.net/1es3ne0caaid/2tcCbmsgRyI2YYqEcuOEO2/d09a686ee51a5db0fc1706672a373556/ionic-poll-demo.gif)\n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n\n## Conclusion\n\nUsing Pusher, we’ve built out an application using the pub/sub pattern without having to set up a WebSocket server. This shows how powerful Pusher is and how easy it is to set up. You can find the demo for this article on [GitHub.](https://github.com/FeezyHendrix/ionic-realtime-pollapp)","metaTitle":"Build a live poll app with Ionic","metaDescription":"Build a voting app with Ionic, using Node for the backend. Users can vote on their favorite premier league player, and see other users' votes displayed in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qcRMPzJ6QGCC68gKEw8CU","type":"Entry","createdAt":"2018-06-27T11:26:11.397Z","updatedAt":"2019-01-02T15:36:43.539Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with Ionic featuring sentiment analysis","url":"chat-app-ionic-sentiment","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/ionic-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-24","description":"Build a chat app for mobile using Ionic and Cordova. Code with TypeScript, targeting mobile devices. Use Node for the backend. Implement sentiment analysis to provide emoji suggestions.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Angular, Node and Ionic will be helpful.","content":"## Introduction\n\nSentiment Analysis examines the problem of studying texts, uploaded by users on microblogging platforms or electronic businesses.  It is based on the opinions they have about a product, service or idea. Using sentiment analysis, we can suggest emojis to be used as replies to messages based on the context of the received message. \n\nUsing [Ionic](https://ionicframework.com/), you can create a mobile application using web technologies and use a wide array of existing components. Using [Pusher](https://pusher.com), we can enable realtime messaging in the chat using pusher’s pub/sub pattern. \n\nWe’ll be building a realtime chat application using Pusher, Ionic and the [S](https://github.com/thisandagain/sentiment)[entiment](https://github.com/thisandagain/sentiment) library for emoji suggestions based on the context of messages received.\n\nHere’s a demo of the final product:\n\n![ionic-chat-sentiment-demo-1](//images.ctfassets.net/1es3ne0caaid/1jcFQgp60yy2Cc64kw6w62/0bd5e4c9ff384b493ac719686e270142/ionic-chat-sentiment-demo-1.png)\n![ionic-chat-sentiment-demo-2](//images.ctfassets.net/1es3ne0caaid/1KTliA6iskG2AgWOU0s22E/890d13657887efeecdbb3f4988c18895/ionic-chat-sentiment-demo-2.png)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), Ionic and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Ionic](https://ionicframework.com/)\n- [Sentiment](https://github.com/thisandagain/sentiment)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\nLet’s build!\n\n## Setup and folder structure\n\nWe’ll initialize our project using the Ionic CLI (command line interface). First, install the CLI by running `npm install -g ionic` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Ionic project called `chat-app` using the CLI, open a terminal and run:   \n\n```\n    ionic start chat-app blank\n```\n\nThe command is simply telling the CLI to create a new project called `chat-app` without a template. \n\nFollow the prompt and integrate your app with Cordova to target IOS and Android.\n\n![ionic-chat-sentiment-cordova](//images.ctfassets.net/1es3ne0caaid/1fgioEsEgEg8aY6qs04iYq/3ff23aaeaa45ba8573cdf28fc193193e/ionic-chat-sentiment-cordova.png)\n\n Type **Y** to integrate Cordova into the application. The next prompt will ask if you want to integrate Ionic pro into the application. If you have a pro account type **Y** and **N** if you don’t.\n\nThe Ionic team provides three ready made starter templates. You can check out the rest of the templates [here](https://ionicframework.com/getting-started)\n\nOpen the newly created folder, your folder structure should look something like this:\n\n```\n    chat-app/\n      resources/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.module.ts\n          app.scss\n          ...\n```\n\nOpen a terminal inside the project folder and start the application by running `ionic serve`. A browser window should pop up and you should see a page like this.\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Installing dependencies\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher sentiment uuid \n    \n    // front-end dependencies\n    npm install pusher-js @types/pusher-js\n```\n\n## Building our server\n\nNow that we have our application running, let’s build out our server.\n\nTo do this we’ll make user of [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n      encrypted: true,\n    });\n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\n\nWe referenced three packages in the snippet above, `body-parser`, `pusher` and `dotenv`. Let’s get into what each one does.\n\n\n-  body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into `[process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env)`. This package is used so sensitive information like the `appId` and `secret` aren’t added to our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n\nThe `dotenv` package should always be initialized very early in the application at the top of the file. This is because we need the environment variables available throughout the application.\n\nThe calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nAlso, you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency. Visit the [Pusher](https://pusher.com) website to create a Pusher account if you haven’t done so already\n\nCreate a `.env` file to load the variables we’ll be needing into the Node environment. The file should be in the root folder of your project. Open the file and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    PUSHER_CLUSTER=\u003cPUSHER_CLUSTER\u003e\n```\n\n\u003e **P.S:** Please ensure you replace the placeholder values above with your Pusher `appId`, `key`, `secret` and `cluster`.\n\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Sending messages\n\nTo enable users send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, id } = body;\n      const data = {\n        text,\n        id,\n        timeStamp: new Date(),\n      };\n      \n      pusher.trigger('chat', 'message', data);\n      res.json(data);\n    });\n     ...\n```\n\n- We created a `POST /messages` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `text` and `id` in the request body sent by the user.\n- The `data` object will contain the `text` and `id` sent by the user accompanied by a timestamp. \n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`chat`), an event name (`message`), and a payload(`data`).\n- The payload can be any value, but in this case, we have a JS object.\n- The response will contain the `data` object.\n\n\n### Sentiment analysis\n\n\u003e Sentiment analysis refers to the use of [natural language processing](https://en.wikipedia.org/wiki/Natural_language_processing), [text analysis](https://en.wikipedia.org/wiki/Text_analytics), [computational linguistics](https://en.wikipedia.org/wiki/Computational_linguistics), and [biometrics](https://en.wikipedia.org/wiki/Biometrics) to systematically identify, extract, quantify, and study effective states and subjective information. - [Wikipedia](https://en.wikipedia.org/wiki/Sentiment_analysis)\n\nYou can read up a bit about sentiment analysis using the following links below:\n\n\n- [Brandwatch](https://www.brandwatch.com/blog/understanding-sentiment-analysis/)\n- [TowardsDataScience](https://towardsdatascience.com/sentiment-analysis-concept-analysis-and-applications-6c94d6f58c17)\n\nUsing sentiment analysis, we’ll analyse the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user. \n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. The next step is to update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    \n    ...\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, id } = body;\n      const result = sentiment.analyze(text);\n      const comparative = result.comparative;\n      const tone =\n        comparative \u003e= 0 ? (comparative \u003e= 1 ? 'positive' : 'neutral') : 'negative';\n      const data = {\n        text,\n        id,\n        timeStamp: new Date(),\n        sentiment: {\n          tone,\n          score: result.score,\n        },\n      };\n      pusher.trigger('chat', 'message', data);\n      res.json(data);\n    });\n    \n    ...\n```\n\n\n\n- Include the Sentiment library in the project\n- `result`: analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message. This score is used to determine if a message is `positive`, `negative` or `neutral`.\n- `tone`: this variable is the context of the message gotten after analysis. This will be `negative` if the comparative score is below `0`, `neutral` if the score is above `0` but below `1`. The tone is `positive` if the comparative score is `1` and above.\n- A new object(`sentiment`) property is added to the response data containing the message’s tone and score.\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Chat view\n\nLet’s build out our chat interface. We’ll create a `chat` component to hold the chat interface. Create a folder called `components` in the `src/` directory. This folder will hold all our components.\n\nIn the `components`  folder, create a folder named `chat`, then proceed to create three files in the chat folder. `chat.ts`, `chat.scss` and `chat.html`. \n\nNow let’s go ahead and update the newly created chat component files. Open the `chat.html`  file and update it with the code snippet below: \n\n``` html\n    // src/components/chat/chat.html\n    \n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"chat-box\"\u003e\n        \u003cdiv class=\"message-area\"\u003e\n          \u003cdiv class=\"message\" *ngFor=\"let message of messages\" [ngClass]=\"getClasses(message.type)\"\u003e\n            \u003cp\u003e{{message.text}}\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"emo-area\"\u003e\n          \u003c!-- emoji-panel component comes here --\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-area\"\u003e\n          \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n            \u003cion-input type=\"text\" name=\"message\" id=\"message\" [(ngModel)]=\"message\" placeholder=\"Say something nice...\"\u003e\u003c/ion-input\u003e\n            \u003cbutton\u003e\n              \u003cion-icon name=\"send\"\u003e\u003c/ion-icon\u003e\n            \u003c/button\u003e\n          \u003c/form\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\nIn the code snippet above:\n\n- We loop through the available `messages` in the `.message-area`. \n- We have a form containing an `ion-input` element and a submit button.\n- We are making use of the [ionicons](https://ionicons.com/) library.\n\nOpen the `chat.ts` file and update with the code below:\n\n``` typescript\n    // src/components/chat/chat.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import { v4 } from 'uuid';\n    \n    interface Message {\n      id: string;\n      text: string;\n      timeStamp: Date;\n      type: string;\n    }\n    \n    @Component({\n      selector: 'chat',\n      templateUrl: 'chat.html',\n    })\n    \n    export class ChatComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      \n      messages: Array\u003cMessage\u003e = [];\n      message: string = '';\n      lastMessageId;\n      \n      sendMessage() {\n        if (this.message !== '') {\n          // Assign an id to each outgoing message. It aids in the process of differentiating between outgoing and incoming messages\n          this.lastMessageId = v4();\n          const data = {\n            id: this.lastMessageId,\n            text: this.message,\n          };\n          \n          this.http\n            .post(`http://localhost:4000/messages`, data)\n            .subscribe((res: Message) =\u003e {\n              const message = {\n                ...res,\n                // The message type is added to distinguish between incoming and outgoing             messages. It also aids with styling of each message type\n                type: 'outgoing',\n              };\n              this.messages = this.messages.concat(message);\n              this.message = '';\n            });\n            \n        }\n      }\n      \n      // This method adds classes to the element based on the message type\n      getClasses(messageType) {\n        return {\n          incoming: messageType === 'incoming',\n          outgoing: messageType === 'outgoing',\n        };\n      }\n      \n      ngOnInit() {\n      }\n    }\n```\n\n\n`sendMessage`: this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of messages. We make use of a package called `[uuid](https://www.npmjs.com/package/uuid)` to give each message a unique `id`. \n\n`getClasses` : this method generates classes for a message element based on the `messageType`.\n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` and `HttpClient` into the `app.module.ts` file. Also, we’ll need to register our newly created component, we’ll add it to the declarations array.\n\n``` typescript\n    // src/app/app.module.ts\n    ...\n    import { ChatComponent } from '../components/chat/chat';\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    \n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        ChatComponent,\n      ],\n      imports: [BrowserModule, IonicModule.forRoot(MyApp), HttpClientModule],\n      ...\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        HttpClient,\n      ],\n    })\n    export class AppModule {}\n    \n      ...\n```\n\n### Styling\n\nOpen the `chat.scss` file and update it with the styles below: \n\n``` css\n    // src/components/chat/chat.scss\n    \n    .main {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      .chat-box {\n        width: 100%;\n        height: 100%;\n        position: relative;\n        background: #f9fbfc;\n        .message-area {\n          max-height: 90%;\n          height: 90%;\n          overflow: auto;\n          padding: 15px 10px;\n          .message {\n            p {\n              color: #8a898b;\n              font-size: 13px;\n              font-weight: bold;\n              margin: 0px;\n              max-width: 95%;\n              min-width: 55%;\n              box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1);\n              padding: 10px 15px 10px 7px;\n              margin: 5px 0;\n              background: white;\n            }\n          }\n          .message.incoming {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-start;\n            align-items: flex-start;\n            p {\n              color: white;\n              border-radius: 0 11px 11px 11px;\n              background: #B9C0E9;\n            }\n          }\n          .message.outgoing {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-end;\n            align-items: flex-end;\n            p {\n              border-radius: 11px 11px 0 11px;\n            }\n          }\n        }\n        .emo-area {\n          position: absolute;\n          bottom: 50px;\n          left: 0;\n          width: 100%;\n          padding: 3px 10px;\n        }\n      }\n    }\n```\n\n\nThis first SCSS snippet styles the `.chat-area`, including how messages should look. The next snippet will style the input area and the send button. The styles below should be nested within the `.main` style.\n\n``` css\n    // src/components/chat/chat.scss\n    \n    .input-area {\n          position: absolute;\n          bottom: 1px;\n          left: 0;\n          width: 100%;\n          height: 50px;\n          background: white;\n          form {\n            display: flex;\n            height: 100%;\n            \n            ion-input {\n              width: 82%;\n              border: none;\n              padding: 5px 10px;\n              color: #8a898b;\n              font-size: 14px;\n              font-weight: bold;\n              font-family: 'Titillium Web', sans-serif;\n              background: inherit;\n              \u0026:focus {\n                outline: none;\n              }\n            }\n            button {\n              width: 18%;\n              border: none;\n              color: #8a898b;\n              opacity: 0.9;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              cursor: pointer;\n              background: inherit;\n              ion-icon {\n                font-size: 3rem;\n              }\n            }\n          }\n        }\n```\n\n\nLet’s include the `chat` component in the home page. In the `pages` directory, you’ll find the `home` folder, open the `home.html` file in the home folder and replace the content with the snippet below:\n\n``` html\n    // src/pages/home/home.html\n    \n    \u003cion-header\u003e\n      \u003cion-navbar color=\"light\"\u003e\n        \u003cion-title\u003eChat\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n        \u003cchat\u003e\u003c/chat\u003e\n    \u003c/ion-content\u003e\n```\n\nVisit http://localhost:8100 in your browser to view the chat interface. It should be similar to the screenshot below:\n\n![ionic-chat-sentiment-demo-3](//images.ctfassets.net/1es3ne0caaid/6Qi79HF0xq2ks4OUI06KE4/58cfaccc1d524fb9949c99b9182fddce/ionic-chat-sentiment-demo-3.png)\n\n## Introducing Pusher and sending messages\n\nSo far we have an application that allows users send messages but the messages aren’t delivered in realtime. To solve this problem, we’ll include the [Pusher](https://pusher.com) library.\n\nLet’s create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher\n```\n\nThis command simply tells the CLI to generate a provider named `pusher` . Now open the `pusher.ts` file in the `src/providers/pusher`  directory and update it with the code snippet below:\n\n``` typescript\n    // src/providers/pusher/pusher.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherProvider {\n      constructor() {\n        var pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n          cluster: '\u003cPUSHER_CLUSTER\u003e',\n          encrypted: true,\n        });\n        this.channel = pusher.subscribe('chat');\n      }\n      channel;\n      \n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\u003e **Note:** Ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER` string with your actual Pusher credentials.\n  \nWe’ll make use of this service in our component, by binding to the message event and appending the returned message into the list of messages. This will be done in the `ngOnInit` lifecycle.\n\n``` typescript\n    // src/components/chat/chat.ts\n    ...\n    import { v4 } from 'uuid';\n    import { PusherProvider } from '../../providers/pusher/pusher';\n    \n    ...\n    // Include the PusherProvider in the component's constructor\n    constructor(private http: HttpClient, private pusher: PusherProvider){}\n      ...\n      \n      ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if (data.id !== this.lastMessageId) {\n            const message: Message = {\n              ...data,\n              type: 'incoming',\n            };\n            this.messages = this.messages.concat(message);\n          }\n        });\n      }\n    }\n```\n\n\n## Emoji suggestions\n\nTo display emoji suggestions during a chat session, we’ll make use of the `sentiment` param being sent from the server as a response for each message request. The data being sent from the server should be similar to the snippet below.\n\n``` json\n    {\n      id: '83d3dd57-6cf0-42dc-aa5b-2d997a562b7c',\n      text: 'i love pusher',\n      timeStamp: '2018-04-27T15:04:24.574Z'\n      sentiment: {\n        tone: 'positive',\n        score: 3\n      }\n    }\n```\n\n\nCreate an `emoji` component that will hold the emoji section. This component will handle the display of emojis based on the tone of each message received. Create a folder `emoji-panel` in the `components` directory and in that directory,  create three files, `emoji-panel.ts`, `emoji-panel.scss` and `emoji-panel.html`\n\nReplace the contents of the `emoji-panel.html` in the `src/components/emoji-panel` directory with the code snippet below.\n\n``` html\n    // src/components/emoji-panel/emoji-panel.html\n    \n    \u003cdiv class=\"emojis\" [hidden]=\"!showEmojis\" [attr.aria-hidden]=\"!showEmojis\"\u003e\n      \u003cdiv class=\"emoji-list positive\" *ngIf=\"result.tone === 'positive'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.positive; let i = index;\" (click)=\"onClick('positive', i)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"emoji-list neutral\" *ngIf=\"result.tone === 'neutral'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.neutral; let j = index;\" (click)=\"onClick('neutral', j)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"emoji-list negative\" *ngIf=\"result.tone === 'negative'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.negative; let k = index;\" (click)=\"onClick('negative', k)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\n`attr.aria-hidden`: here we set the accessibility attribute of the element to either `true` or `false` based on the `showEmojis` variable.\n\n\nUpdate the `emoji-panel.ts` with code below:\n\n``` typescript\n    // src/components/emoji-panel/emoji-panel.ts\n    import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n    \n    @Component({\n      selector: 'emoji-panel',\n      templateUrl: 'emoji-panel.html',\n    })\n    \n    export class EmojiPanelComponent implements OnInit {\n      constructor() {}\n      @Input() result = {};\n      @Input() showEmojis: boolean = false;\n      @Output() onEmojiSelect: EventEmitter\u003cstring\u003e = new EventEmitter();\n    \n     emojiList = {\n        positive: [128512, 128513, 128536, 128516],\n        neutral: [128528, 128529, 128566, 129300],\n        negative: [128543, 128577, 128546, 128542],\n      };\n      codePoint(emojiCodePoint) {\n        return String.fromCodePoint(emojiCodePoint);\n      }\n    \n      onClick(reaction, index) {\n        const emoji = this.emojiList[reaction][index];\n        this.onEmojiSelect.emit(emoji);\n      }\n    \n      ngOnInit() {}\n    }\n```\n\n\n`emojiList`:  this is an object containing a list of unicode characters for each emoji that’ll be used. There’s a list for each message tone. \n`codePoint`: this method returns an emoji from the codepoint passed in. It uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) introduced in ES2015.\n`showEmojis`**:** an input variable from the parent component(`chat`) to determine the visibility of the emoji panel\n`onClick`**:**  this method takes to parameters. The `reaction` param is used to select the list of emojis to check for the provided `index`. The selected emoji is then emitted to the parent component. \n\nAdd the following styles to the `emoji-panel.scss` file.\n\n``` css\n    // /src/components/emoji-panel/emoji-panel.scss\n    \n    .emojis {\n      \u0026[aria-hidden='true'] {\n        animation: slideOutDown 0.7s;\n      }\n      \u0026[aria-hidden='false'] {\n        animation: slideInUp 0.7s;\n      }\n      .emoji-list {\n        display: flex;\n        .emoji {\n          margin: 0 5px;\n          cursor: pointer;\n        }\n      }\n    }\n    @keyframes slideInUp {\n      from {\n        transform: translate3d(0, 100%, 0);\n        visibility: visible;\n      }\n      to {\n        transform: translate3d(0, 0, 0);\n      }\n    }\n    @keyframes slideOutDown {\n      from {\n        transform: translate3d(0, 0, 0);\n      }\n      to {\n        visibility: hidden;\n        transform: translate3d(0, 100%, 0);\n      }\n    }\n```\n\n\nAfter creating the `emoji-panel` component, the next step is to register it in the `app.module.ts`  file and then add it to our `chat` component. Update the `app.module.ts`  file and the chat component to include the `emoji-panel`.\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { PusherProvider } from '../providers/pusher/pusher';\n    import { EmojiPanelComponent } from '../components/emoji-panel/emoji-panel';\n    \n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        ChatComponent,\n        EmojiPanelComponent\n      ],\n      ...\n     })\n    export class AppModule {}\n```\n\n\nThen include the `emoji-panel` component in the `chat.html` file.\n\n``` html\n    // chat.component.html\n    ...\n    \u003cdiv class=\"main\"\u003e\n      ...\n      \u003cdiv class=\"emo-area\"\u003e\n        \u003cemoji-panel [showEmojis]=\"showEmojis\" [result]=\"score\" (onEmojiSelect)=\"selectEmoji($event)\"\u003e\u003c/emoji-panel\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"input-area\"\u003e\n        ...\n      \u003c/div\u003e  \n    \u003c/div\u003e\n```\n\n\nLet’s update the `chat.ts` to display or hide the emoji-panel based on the sentiment of each message.\n\nOpen the `chat.ts` file and update it like so:\n\n``` typescript\n    // src/components/chat/chat.ts\n    \n    ...\n      messages: Array\u003cMessage\u003e = [];\n      message: string = '';\n      lastMessageId;  \n      showEmojis = false;\n      score = {\n        tone: '',\n        score: 0,\n      };\n      \n      sendMessage() {\n        if (this.message !== '') {\n          this.lastMessageId = v4();\n          this.showEmojis = false;\n          ...\n        }\n      }\n      \n      selectEmoji(e) {\n        const emoji = String.fromCodePoint(e);\n        this.message += ` ${emoji}`;\n        this.showEmojis = false;\n      }\n      ...\n      \n      ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if (data.id !== this.lastMessageId) {\n            const message: Message = {\n              ...data,\n              type: 'incoming',\n            };\n            this.showEmojis = true;\n            this.score = data.sentiment;\n            this.messages = this.messages.concat(message);\n          }\n        });\n      }\n    ...\n```\n\n\n \n`selectEmoji` : this method gets the emoji from the codepoint passed as a parameter and then appends the selected emoji to the current message. Finally it hides the emoji panel by setting `showEmojis`  to false.\n\nIn the Pusher event callback, we set the `showEmojis` property to `true`. In the same callback, we assign the `data's` sentiment property to the `score` variable.\n\nBy now our application should provide emoji suggestions for received messages.\n\n\n## Testing on mobile devices\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\n![ionic-chat-sentiment-in-app](//images.ctfassets.net/1es3ne0caaid/2OsgMWFKTC8ksw2wMCqEkI/983d5ae2843c21149a10fb468393ba2b/ionic-chat-sentiment-in-app.png)\n\nTo view the application, click on it and you should see a similar view to what was in the browser. Sending messages to the server might have worked in the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-chat-sentiment-ngrok](//images.ctfassets.net/1es3ne0caaid/5pf60lqM9i8YmkC4eG8iY8/d31c9d7421f2bef8b8595d98e98e4082/ionic-chat-sentiment-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `chat.ts` file that previously had `http://localhost:4000/message`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/components/chat/chat.ts\n    ...\n    export class ChatComponent implements OnInit {\n      ...\n      sendMessage() {\n        ...\n        this.http\n            .post('\u003cNGROK_URL\u003e/messages', data)\n            .subscribe((res: Message) =\u003e {});\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding URL you copied where the placeholder string is\n\nNow you should be receiving messages sent from the phone on the browser. Or if you have more than one phone you can test it using two of them.\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n## Conclusion\n\nUsing sentiment analysis library, we’ve been able to suggest emojis as replies for received messages and with the help of [Pusher](https://pusher.com) and Ionic we’ve built an application can send and receive messages in realtime. You can view the source code for the demo [here](https://github.com/HackAfro/ionic-chat-app).","metaTitle":"Build a chat app with Ionic featuring sentiment analysis","metaDescription":"Use Ionic to create a chat app, powered by a Node backend. Build in TypeScript, using Cordova to target mobile platforms. The app features emoji suggestions thanks to sentiment analysis."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"16T0HdkJrAygmwwuuuUCss","type":"Entry","createdAt":"2018-05-23T07:17:23.863Z","updatedAt":"2020-06-19T12:27:14.330Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a group chat app with Angular and Dialogflow","url":"group-chat-angular-dialogflow","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/theo4u/botAndPusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-22","description":"Build an Angular group chat app, and integrate a chatbot using Dialogflow. Users will be able to talk to each other, or to the bot.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of JavaScript will be helpful. This tutorial requires Angular 6+.","content":"## Introduction\n\nOver the past few years, advances in machine learning, especially natural language processing (NLP), have made it easy for computers to analyse and derive meaning from human language in a smart way. With this, developers can now create smaller, simpler and more intuitive natural language processing software.\n\nIn this tutorial, we’ll demonstrate how to build a group chat using [Pusher](https://pusher.com/) with an [Angular](http://angular.io/) application. We will also build a basic chatbot using the [Dialogflow conversation platform](https://dialogflow.com/) formerly know as api.ai by Google. This bot will engage in a simple conversation with any user within the group chat.\n\n![chatbot-angular-demo](//images.ctfassets.net/1es3ne0caaid/yOYSKR8lfUsSeioGcok2C/9f71fb07746d9535ce897ec8e5ee84fb/chatbot-angular-demo.gif)\n\n## Prerequisites\n\nWe are going to make use of the following dependencies: \n\n- [Angular 6+](http://angular.io/): a platform that makes it easy to build applications with the web. Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. \n\n\n- [Pusher](https://github.com/pusher/pusher-js): a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications. It has different products based on the need of your application. \n\n\n- [Bootstrap 4](http://getbootstrap.com/): an open source toolkit for developing with HTML and CSS. It includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins.\n\n\n- [Dialogflow](https://dialogflow.com/): an engine for building conversational experiences. It leverages Google’s machine learning and natural language processing technology, thereby giving developers the ability to utilize a user-friendly interface to build chatbots and deploy them to any platform.\n\n\n\u003e Please ensure you have Node and npm installed before starting the tutorial.\n\u003e No knowledge of Angular is required, but a basic understanding of Javascript (not necessarily Typescript) may be helpful.\n\n\n## Let’s build our group chat\n\nBootstrapping with [A](https://github.com/angular/angular-cli)[ngular-cli](https://github.com/angular/angular-cli): \n\n```\n    npm install -g @angular/cli\n    ng new botAndPusher\n    cd botAndPusher\n```\nWe installed a command line interface to scaffold and build Angular apps globally. It exposes `ng` in our terminal for us to make use of the [commands](https://github.com/angular/angular-cli#generating-and-serving-an-angular-project-via-a-development-server) available. To confirm everything went well, run the below command on your terminal within the newly created app folder `/botAndPusher`.\n\n```\n    ng serve\n```\nYou should see this:\n\n![angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\nInstalling dependencies:\n```\n    npm install bootstrap pusher-js\n```\nOpen `angular.json` within our application root folder and update the `projects.botAndPusher.architect.build.styles` field to look like so:\n\n``` json\n    \"styles\": [\n      \"../node_modules/bootstrap/dist/css/bootstrap.css\",\n      \"styles.css\"\n    ]\n```\n\nOpen `src/styles.css` and add the below CSS to it:\n\n```css\n    /* You can add global styles to this file, and also import other style files */\n    .box-shadow { box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05); }\n```\nWe added a utility style for adding shadows to our div.\n\nNext, we need to create two services to manage our Pusher instance (we don’t have to always create a new instance of Pusher anytime we want to use it, we can use just one instance of it throughout the entire app) and our chat (interaction with the remote server and vice versa for chat messages):\n\n```\n    ng g s services/pusher --spec false\n    ng g s services/chat --spec false\n    ng g i interfaces/ichat\n```\nWe used another command of Angular CLI, which in full is `ng generate service path/name`. This creates a folder if it doesn’t already exist called `services/` and place our service files there. We also used `--spec false`  to let the Angular CLI know we don’t need to generate a test file for the service file. The last comand generates an employee interface to help give an idea of what an employee object should have.\n\nOpen `src/app/services/pusher.service.ts` and update it to look like the one below:\n\n``` typescript\n    import { Injectable } from '@angular/core';\n    import * as Pusher from 'pusher-js';\n    \n    // this is here to discourage the instantiating of pusher any where its\n    // needed, better to reference it from one place\n    @Injectable()\n    export class PusherService {\n    private _pusher: any;\n    \n    constructor() {\n      this._pusher = new Pusher('API_KEY', {\n        cluster: 'CLUSTER',\n        encrypted: true\n      });\n    }\n    // any time it is needed we simply call this method\n    getPusher() {\n      return this._pusher;\n    }\n    \n    }\n```\nWe insert the free `API_KEY` and `CLUSTER` we get after [signing up](https://dashboard.pusher.com/accounts/sign_up) and creating a channel app with Pusher.\n\n\n\u003e After creating an app from Pusher’s dashboard, navigate to **App Keys** tab to see your app credentials \n\nTo ensure that connection traffic is encrypted, we set `encrypted` to the Boolean `true` in our app. Read more about client configuration [here](https://pusher.com/docs/client_api_guide).\n\nOpen `src/app/interfaces/ichat.ts` and update it to look like so:\n\n``` typescript\n    export interface IChat {\n      id: string;\n      displayName: string;\n      email: string;\n      type: 'human' | 'joined';\n      message: string;\n      createdAt: string;\n      isMe: boolean;\n    }\n```\nFrom the above interface, every chat message must contain an ID, display name (used to display who sent the message), and a type (whether not the speaker is human).\n\nLet’s create our chat service to help send messages to others, connect to Pusher’s channel and to join the group.\n\n``` typescript\n    // src/app/services/chat.service.ts\n    import { Injectable } from '@angular/core';\n    import { PusherService } from './pusher.service';\n    import { HttpClient } from '@angular/common/http';\n    import { Observable } from 'rxjs';\n    import {tap} from 'rxjs/operators';\n    \n    @Injectable({\n      providedIn: 'root'\n    })\n    export class ChatService {\n      user: {displayName: string, email: string};\n      private _endPoint = 'http://localhost:2000'; // normally you use environment.ts\n      private _channel: any;\n    \n      constructor(private _pusherService: PusherService, private _http: HttpClient) {\n        this._channel = this._pusherService.getPusher().subscribe('chat-group');\n      }\n    \n      join(param): Observable\u003cany\u003e {\n        return this._http.post(`${this._endPoint}/join`, param)\n        .pipe(tap(data =\u003e {\n          this.user = param;\n        }));\n      }\n    \n      sendMessage(message: string): Observable\u003cany\u003e {\n        const param = {\n          message,\n          type: 'human',\n          ...this.user\n        };\n        return this._http.post(`${this._endPoint}/message`, param);\n      }\n    \n      getChannel() {\n        return this._channel;\n      }\n    }\n```\n\n\nWe’ve created three different methods to help us interact with others within our service file.\n\n- `join`: this is like registration of new users to get their display name and email address which we are going to be using to send messages to others within the group. If you observe, anytime we join, we automatically use RxJs [tap](https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md#howto-convert-to-pipe-syntax) (formerly called do) to pipe the response and do something with the response before sending it to the caller (save our user information for later usage). \n- `sendMessage`: this attaches the user object we saved after joining to the message before sending it to our server.\n- `getChannel`: is returning our Pusher’s channel so we can easily subscribe to any message coming from `chat-group` channel\n\nLet’s make our services available in the app. Add them to  `app.module.ts`, along with the `[HTTPClientModule](https://angular.io/guide/http)` since it was used within `chat.service.ts` for http requests. [ReactiveFormsModule](https://angular.io/api/forms/ReactiveFormsModule) and [FormsModule](https://angular.io/api/forms/FormsModule) are going to be used later to build our forms :\n\n``` typescript\n    // src/app/app.module.ts\n    import { ChatService } from './services/chat.service';\n    import { PusherService } from './services/pusher.service';\n    import { HttpClientModule } from '@angular/common/http'; \n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n    \n    ...\n    imports: [\n      ...,\n      HttpClientModule,\n      FormsModule,\n      ReactiveFormsModule\n      ],\n    providers:[ChatService, PusherService]\n```\n\n## Angular components to join and chat with others\n\nWe’ll now create two more components to join and chat with others in the group chat:\n\n```\n    ng g c myDetails -is --spec false\n    ng g c chat --spec false\n```\nUsing the Angular CLI, we generated a component with no test attached as explained earlier. It will create a folder for each containing a `.ts` and a `.html`. The `-is` command means don’t create a `.css` file.  We will use inline styling within our `.ts`.\n\nLet’s begin with my details component, it should look like our gif above. Open `my-details/my-details.component.html` and update it to look like so:\n\n``` html\n    \u003c!-- src/app/my-details/my-details.component.html --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eMy Details\u003c/h6\u003e\n    \n    \u003cform [formGroup]=\"detailsForm\" (ngSubmit)=\"onSubmit()\" novalidate\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"name\"\u003eDisplay Name\u003c/label\u003e\n        \u003cinput formControlName=\"displayName\" type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Alien\"\u003e\n         \u003csmall *ngIf=\"detailsForm.get('displayName').hasError('required')\" class=\"form-text text-danger\"\u003eDisplay name is required.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"email\"\u003eEmail\u003c/label\u003e\n        \u003cinput formControlName=\"email\" type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"test@example.com\"\u003e\n        \u003csmall *ngIf=\"detailsForm.get('email').hasError('required')\" class=\"form-text text-danger\"\u003eEmail is required.\u003c/small\u003e\n        \u003csmall *ngIf=\"detailsForm.get('email').hasError('email')\" class=\"form-text text-danger\"\u003eEmail is invalid.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cbutton type=\"submit\" [disabled]=\"loader || detailsForm.invalid\" class=\"btn btn-primary\"\u003e{{loader?'Joining':'Join Group'}}\u003c/button\u003e\n    \u003c/form\u003e\n```\nWe have created our template using [Bootrap](http://getbootstrap.com/docs/4.1/components/forms/)’[s forms](http://getbootstrap.com/docs/4.1/components/forms/) with [A](https://angular.io/api/forms/ReactiveFormsModule)[ngular’s reactive form](https://angular.io/api/forms/ReactiveFormsModule) directives such as `formControlName` and `[formGroup]` which allows us to easily validate the form.\n\nLet’s wire the template above to be functional, open `my-details/my-details.component.ts` \n\n``` typescript\n    // src/app/my-details/my-details.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { FormGroup, FormBuilder, Validators } from '@angular/forms';\n    import { ChatService } from '../services/chat.service';\n    \n    @Component({\n      selector: 'app-my-details',\n      templateUrl: './my-details.component.html',\n      styles: []\n    })\n    export class MyDetailsComponent implements OnInit {\n      detailsForm: FormGroup;\n      loader;\n    \n      constructor(private _fb: FormBuilder, private _chatService: ChatService) { }\n    \n      ngOnInit() {\n         this._createForm();\n      }\n    \n      /**\n       * create our reactive form here\n       */\n      private _createForm() {\n        this.detailsForm = this._fb.group({\n          displayName: ['', Validators.required],\n          email: ['', [Validators.required, Validators.email]]\n        });\n      }\n    \n      /**\n       * Join the fun\n       */\n      onSubmit() {\n        const param = this.detailsForm.value;\n        this._chatService.join(param)\n          .subscribe((resp) =\u003e {\n            this.loader = false;\n          },\n            (error) =\u003e {\n              console.error(error);\n              this.loader = false;\n            });\n      }\n    }\n```\nWe used the `_createForm` method to instantiate our reactive form and set the validations needed. On submit of our form we call the `onSubmit` method, which was used (`(ngSubmit)=\"onSubmit()\"` ) within our `my-details.component.html`.\n\nLet’s make use of our just created component within our `app.component.html` . \n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \n    \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-primary\"\u003e\n      \u003ca class=\"navbar-brand\" href=\"#\"\u003e\n        \u003cimg src=\"assets/angular.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\"\u003e\n        Angular Group Chat with Pusher And Dialogflow Chat Bot\n      \u003c/a\u003e\n    \u003c/nav\u003e\n    \n    \u003cdiv class=\"container\"\u003e\n    \n      \u003cp align=\"center\"\u003e\n        \u003cimg src=\"assets/pusher.svg\" width=\"30\" height=\"100\" width=\"60\"  alt=\"Pusher\"\u003e\n      \u003c/p\u003e\n    \n      \u003cdiv class=\"row justify-content-center\"\u003e \n        \u003cdiv class=\"col-md-4\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-my-details\u003e\u003c/app-my-details\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```\nRun `ng serve` on your terminal to see our component in action,  we should get something like so:\n\n![chatbot-angular-stage-1](//images.ctfassets.net/1es3ne0caaid/3j8HNjFziEEcIQGKsI2e4K/b2d50cb500b250db0321b2c319a1f767/chatbot-angular-stage-1.png)\n\nYou can join the group, but we need a screen to see who joined and also to chat with others within the group.\n\nOpen `chat.component.html` and update it to look like so: \n\n``` html\n    \u003c!-- src/app/chat/chat.component.html --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eGroup Chat \u003cbutton class=\"btn btn-sm btn-primary\"\u003einvite others\u003c/button\u003e\u003c/h6\u003e\n    \n    \u003cdiv class=\"chats\"\u003e\n      \u003cdiv class=\"chatbox\"\u003e\n        \u003cdiv *ngFor=\"let chat of chats\"\u003e\n          \u003cdiv class=\"message sent\" *ngIf=\"chat.type!=='joined' \u0026\u0026 chat.isMe\"\u003e\n            {{chat.message}}\n            \u003cspan class=\"metadata\"\u003e\n              \u003cspan class=\"time\"\u003e{{chat.createdAt | date: 'HH:mm aaa'}}\u003c/span\u003e\n            \u003c/span\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"message received\"  *ngIf=\"chat.type!=='joined' \u0026\u0026 !chat.isMe\"\u003e\n            \u003cstrong\u003e{{chat.displayName}}\u003c/strong\u003e \u003cbr\u003e\n            {{chat.message}}\n            \u003cspan class=\"metadata\"\u003e\n              \u003cspan class=\"time\"\u003e{{chat.createdAt | date: 'HH:mm aaa'}}\u003c/span\u003e\n            \u003c/span\u003e\n          \u003c/div\u003e\n          \u003cp align=\"center\" class=\"joined\"  *ngIf=\"chat.type==='joined'\"\u003e\n          \u003cspan class=\"rounded bg-primary text-white\"\u003e{{chat.displayName}} Joined\u003c/span\u003e\n          \u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"d-flex flex-row\"\u003e\n        \u003cinput [(ngModel)]=\"message\" type=\"text\" class=\"form-control\" placeholder=\"Enter message\" style=\"margin-right: 10px\"\u003e\n        \u003cbutton [disabled]=\"!message || sending\" (click)=\"sendMessage(message)\" class=\"btn btn-primary\"\u003e {{sending ? 'Sending' : 'Send'}}\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\nFrom the above template, we are making use of the `*ngFor` directive to loop through our chats and display them based on the type of chat message. We have three types of chat messages:\n\n1. Joined: once you join a chat from my details component, we receive a chat message of type `joined`. Doing this gives us the privilege to style it or handle how to display who just joined the chat to others.\n2. From me: if the chat message is from me which means my email address from my details matches with the email address within the chat message. Here, you observe we didn’t show the name of the person sending the message since it’s me, and the styling we used `message sent` class.\n3. Not me: if the chat message is not from me and it’s not joined, which means another user from the group sent a message. Here, we added the user display name, so we can easily identify who sent the message.\n\nNow, let’s add styling to our chat component, to differentiate the three types of chat messages. Open `chat.component.css` and update it to look like so:\n\n``` css\n    /* src/app/chat/chat.component.css */\n    \n    .chats {\n        height: calc(100% - 12px);\n        position: relative;\n        z-index: 0;\n    }\n    \n    .chats .chatbox {\n        height: calc(100% - 68px);\n        overflow-x: hidden;\n        padding: 0 16px;\n        margin-bottom: 5px;\n    }\n    \n    .joined {\n      clear: both;\n      line-height: 18px;\n      font-size: 15px;\n      margin: 8px 0;\n      padding: 8px;\n    }\n    .joined span {\n      padding: 5px\n    }\n    \n    /* Messages*/\n    \n    .message {\n      color: #000;\n      clear: both;\n      line-height: 18px;\n      font-size: 15px;\n      padding: 8px;\n      position: relative;\n      margin: 8px 0;\n      max-width: 85%;\n      word-wrap: break-word;\n      z-index: -1;\n    }\n    \n    .message:after {\n      position: absolute;\n      content: \"\";\n      width: 0;\n      height: 0;\n      border-style: solid;\n    }\n    \n    .metadata {\n      display: inline-block;\n      float: right;\n      padding: 0 0 0 7px;\n      position: relative;\n      bottom: -4px;\n    }\n    \n    .metadata .time {\n      color: rgba(0, 0, 0, .45);\n      font-size: 11px;\n      display: inline-block;\n    }\n    \n    \n    .message:first-child {\n      margin: 16px 0 8px;\n    }\n    \n    .message.received {\n      background: #ccc;\n      border-radius: 0px 5px 5px 5px;\n      float: left;\n    }\n    \n    \n    .message.received:after {\n      border-width: 0px 10px 10px 0;\n      border-color: transparent #ccc transparent transparent;\n      top: 0;\n      left: -10px;\n    }\n    \n    .message.sent {\n      background: #e1ffc7;\n      border-radius: 5px 0px 5px 5px;\n      float: right;\n    }\n    \n    .message.sent:after {\n      border-width: 0px 0 10px 10px;\n      border-color: transparent transparent transparent #e1ffc7;\n      top: 0;\n      right: -10px;\n    }\n    \n    \n    .metadata {\n      display: inline-block;\n      float: right;\n      padding: 0 0 0 7px;\n      position: relative;\n      bottom: -4px;\n    }\n    \n    .metadata .time {\n      color: rgba(0, 0, 0, .45);\n      font-size: 11px;\n      display: inline-block;\n    }\n```\nBefore we try out our chat component, let’s incorporate Pusher and connect to our server to send messages to others.\n\n\n## Integrating Pusher and message sending to server\n\nPusher is going to listen to the channel we created above for chat and give us realtime updates of any triggered event related to our chat group. \nOpen `chat.component.ts` and update it to look like so:\n\n``` typescript\n    // src/app/chat/chat.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { IChat } from '../interfaces/ichat';\n    import { ChatService } from '../services/chat.service';\n    \n    @Component({\n      selector: 'app-chat',\n      templateUrl: './chat.component.html',\n      styleUrls: ['./chat.component.css']\n    })\n    export class ChatComponent implements OnInit {\n      chats: IChat[] = [];\n      message: string;\n      sending: boolean;\n    \n      constructor(private _chatService: ChatService) { }\n    \n      ngOnInit() {\n        // subscribe to pusher's event\n        this._chatService.getChannel().bind('chat', data =\u003e {\n          if (data.email === this._chatService.user.email) {\n            data.isMe = true;\n          }\n          this.chats.push(data);\n        });\n      }\n    \n      sendMessage(message: string) {\n        this.sending = true;\n        this._chatService.sendMessage(message)\n          .subscribe(resp =\u003e {\n            this.message = undefined;\n            this.sending = false;\n          }, err =\u003e {\n            this.sending = false;\n          } );\n      }\n    \n    }\n```\nFrom the above code, we subscribed to our Pusher channel for `chat-group` when the component is being called by Angular ([ngOnInit](https://angular.io/guide/lifecycle-hooks#lifecycle-sequence)). We also check if the message that is coming from Pusher contains the same email as the one we used in joining the chat group. If so we add an extra key called `isMe:boolean`, which is going to be true when it matches.\nWe used `sendMessage` method to send messages to our server and toggling a variable called `sending` to notify our template to show what is going on to the users. Then we reset the message to undefined to clear the message input field on our `chat.component.html`.\n\n\n## Finalizing our Angular application\n\nWe need to toggle the chat component only when the user joined our group. So, initially, any new user sees my details component, which is going to get the display name and email address before entering the chat component to chat with others. \n\nOpen `app.component.ts` and update it to look like so:\n\n``` typescript\n    import { Component } from '@angular/core';\n    import { ChatService } from './services/chat.service';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n    \n      constructor(public chatService: ChatService) {\n      }\n    }\n```\nWhat we simply did above, is just to make use of our chat service, which contains the `user` object. This `user` object is gotten anytime a user joins our chat group. If it is `undefined` it means the current user trying to use our group chat is not registered or hasn’t joined. Let’s make use of it to toggle which view/component a user is going to see. \n\nOpen `app.component.html` and update it to look like so:\n\n``` html\n    \u003c!-- src/app/app.component.html --\u003e\n    \n    \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-primary\"\u003e\n      \u003ca class=\"navbar-brand\" href=\"#\"\u003e\n        \u003cimg src=\"assets/angular.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\"\u003e\n        Angular Group Chat with Pusher And Dialogflow Chat Bot\n      \u003c/a\u003e\n    \u003c/nav\u003e\n    \n    \u003cdiv class=\"container\"\u003e\n    \n      \u003cp align=\"center\"\u003e\n        \u003cimg src=\"assets/pusher.svg\" width=\"30\" height=\"100\" width=\"60\"  alt=\"Pusher\"\u003e\n      \u003c/p\u003e\n    \n      \u003cdiv class=\"row justify-content-center\"\u003e\n        \u003cdiv class=\"col-md-8\" [hidden]=\"!chatService.user\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-chat\u003e\u003c/app-chat\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-4\" [hidden]=\"chatService.user\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-my-details\u003e\u003c/app-my-details\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```\nWe’ve used the `user` within our `chatService`  to handle what the user sees using angular’s `hidden` directive. If the user is defined we hide our `my-details` component. Else, we show it to get details of the new user. If there is no user, we hide our `chat` component and wait for registration through the my-details component. \nRun `ng serve`. You should get something like this:\n\n![chatbot-angular-stage-2](//images.ctfassets.net/1es3ne0caaid/74PKQz1sqIoouSGUKac6UK/0a9faa40b07a5e63dd8d88f93bc46353/chatbot-angular-stage-2.gif)\n\nObserve our above result, we were unable to join our chat group because the server specified in our `chatService._endPoint` does not exist. Let’s go over to setting up our server.\n\n## Setting up our Node server with Pusher\n\nOur Node server is going to handle when a new message is sent from our frontend Angular application and also when a new user is joining the chat group.\nOpen your terminal and run the below commands:\n\n```\n    npm install express body-parser cors pusher dotenv shortid\n    touch server.js \n    touch .env\n```\nWhat we have done above is to install our node dependencies, creating our server file which is going to hold our APIs using [Express](http://expressjs.com/) and `.env` to help manage our environment variables using the [dotenv](https://github.com/motdotla/dotenv) module.\nOpen `server.js`  and update it to look like so: \n\n``` javascript\n    // server.js\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher')\n    const cors = require('cors')\n    require('dotenv').config()\n    const shortId = require('shortid')\n    \n    const app = express()\n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    app.post('/message', async (req, res) =\u003e {\n      // simulate actual db save with id and createdAt added\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        createdAt: new Date().toISOString()\n      } \n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n      res.send(chat)\n    })\n    \n    app.post('/join', (req, res) =\u003e {\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        type: 'joined',\n        createdAt: new Date().toISOString()\n      }\n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n      res.send(chat)\n    })\n    \n    app.listen(process.env.PORT || 2000, () =\u003e console.log('Listening at 2000'))\n```    \n\nWe have created two APIs: \n\n1. `POST /messsage`: send a message to others in the group by triggering an event with Pusher so our chat component (which subscribed to it earlier on) can receive the message.\n2. `POST /join`: anytime a new user wants to join our chat we send a trigger to the others that a user just joined the chat with a `type:'joined``'` and the `req.body` which contains `email` and `displayName`.\n\nBefore running our server to test our group chat, we need to set our `.env` variables used in our `server.js`. Open `.env` and make it look like so:\n\n```\n    PUSHER_APP_ID=\"APP_ID\"\n    PUSHER_APP_KEY=\"APP_KEY\"\n    PUSHER_APP_SECRET=\"APP_SECRET\"\n```\n\nYou can get your own `.env` config within your Pusher’s channel application dashboard. Navigate to the **Getting Started** tab, under  **Add this to your server** column, select `.env` to copy, then paste in your `.env` file.\n\nLet’s run our server. Start the frontend if it is not already running. Open your terminal and run this:\n\n```\n    node server.js\n```\n\nNow, let’s go over to our application to test it out:\n\n![chatbot-angular-stage-3](//images.ctfassets.net/1es3ne0caaid/3rCkmJC4Fy0MmmeKq4KEUq/a4876481427843e205c3d1a53ace5414/chatbot-angular-stage-3.gif)\n\nOur application is working as it should 😊, but we are not done yet. The next section is going to show how to add a chatbot user to our group.\n\n\n## Integrating Dialogflow with our server\n\nWe are going to add a chatbot to our group chat to help with getting live scores of football matches. We can easily trigger our bot or call out our bot with the below command:\n\n```\n    /bot message-here\n```\n\nFor example:  `/bot who are you ?` \n\nLet’s head over to [Dialogflow](https://console.dialogflow.com/api-client/#/editAgent/dbe8a515-e82c-4fbc-bb6b-978a24b8ff59/)  to setup our chatbot. Open your Dialogflow dashboard after [creat](https://console.dialogflow.com/api-client/#/login)[ing](https://console.dialogflow.com/api-client/#/login) [a free account](https://console.dialogflow.com/api-client/#/login):\n\n![dialogflow-welcome](//images.ctfassets.net/1es3ne0caaid/17wY4avnWO4g4OE2UsqSUE/f86e28cfc20567a747685b667dd24e5e/chat-bot-nest-dialogflow-welcome.png)\n\nClick on **Create Agent** button to create our chatbot. We are going to name our agent `Pusher-chatbot` \n\n![dialogflow-create-bot](//images.ctfassets.net/1es3ne0caaid/2lm6GmNL0g6I68AeI40asO/f830537f0ed3ea7a6c68881a96e889d6/chat-bot-nest-dialogflow-create-bot.png)\n\n### Creating small talk\nFor a quick start, we can easily program our chatbot for common chat style questions in the small talk panel. This will give our bot a basic level of interactivity with the users. By default, there are responses with predefined phrases within the small talk panel. Go ahead and customize the response as you deem fit. For now, we are going to keep it simple and respond to few questions:\n\n![dialogflow-enable-smalltalk](//images.ctfassets.net/1es3ne0caaid/4wDUh0JEAESOKGG2IKcmsw/65b3e063025111512a59b52ec716ce6e/chat-bot-nest-dialogflow-enable-smalltalk.jpeg)\n\nEnable and save it. You can use the **Try it now** by your right to test our chatbot responses. Let’s get our access token for connecting to our chatbot from our Node server: \n\n![dialogflow-access-keys](//images.ctfassets.net/1es3ne0caaid/3YIKAdn5aUsS2gqkeUkAOi/bddd599ef0eadea32ad12d96feacefee/dialogflow-access-keys.png)\n\nClick on the icon within the red circle to view our agent settings where we can locate our API keys. Open our `.env` and add our client access token not the developer token, as our use case we are going to be doing more of querying of our chatbot via APIs. [Read more](https://dialogflow.com/docs/reference/agent/).\n\n```\n    PUSHER_APP_ID=\"APP_ID\"\n    PUSHER_APP_KEY=\"APP_KEY\"\n    PUSHER_APP_SECRET=\"APP_SECRET\"\n    DIALOG_ACCESS_TOKEN=\"CLIENT_ACCESS_TOKEN\"\n```\nLet’s install [Axios](https://github.com/axios/axios) for sending HTTP request from our Node server to Dialogflow endpoints:\n```\n    npm install axios\n    touch dialogFlow.js\n```\nOpen `dialogFlow.js` and update it to look like so:\n``` javascript\n    // dialogFlow.js\n    \n    const axios = require('axios')\n    \n    const accessToken = process.env.DIALOG_ACCESS_TOKEN\n    const baseURL = 'https://api.dialogflow.com/v1/query?v=20150910'\n    \n    module.exports = {\n      send (message) {\n        const data = {\n          query: message,\n          lang: 'en',\n          sessionId: '123456789!@#$%'\n        }\n    \n        return axios.post(baseURL, data, {\n          headers: { Authorization: `Bearer ${accessToken}` }\n        })\n      }\n    }\n```\nWe used Axios to send a post request to Dialogflow, passing our message to the bot as `query`. Let’s make use of our utility function above to communicate with out chatbot. Open `server.js` \nand update it to look like so:\n``` javascript\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher')\n    const cors = require('cors')\n    require('dotenv').config()\n    const shortId = require('shortid') \n    const dialogFlow = require('./dialogFlow')\n    \n    const app = express()\n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    app.post('/message', async (req, res) =\u003e {\n      // simulate actual db save with id and createdAt added\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        createdAt: new Date().toISOString()\n      }\n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n    \n      // check if this message was invoking our bot, /bot\n      if (chat.message.startsWith('/bot')) {\n        const message = chat.message.split('/bot')[1]\n        const response = await dialogFlow.send(message)\n        pusher.trigger('chat-group', 'chat', {\n          message: `@${chat.displayName} ${\n            response.data.result.fulfillment.speech\n          }`,\n          displayName: 'Bot User',\n          email: 'bot@we.com',\n          createdAt: new Date().toISOString(),\n          id: shortId.generate()\n        })\n      }\n    \n      res.send(chat)\n    })\n    \n    app.post('/join', (req, res) =\u003e {\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        type: 'joined',\n        createdAt: new Date().toISOString()\n      }\n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n      res.send(chat)\n    })\n    \n    app.listen(process.env.PORT || 2000, () =\u003e console.log('Listening at 2000'))\n```\nWhat we have done is to update the `POST /message` endpoint to handle any message sent from our angular application. The goal is to check where `/bot` is used to begin a message, then intercept those type of messages after sending a Pusher event to others that a user just called a bot. The code within our `POST /message` checks if the message starts with `/bot`. If so we take the second part of the message as what the user is trying to ask the bot to do. After getting the main message we send it to Dialogflow through our utility function. Dialogflow returns a response containing what our bot processed from the message. Then we triggered Pusher’s event to send a message to our group as a bot user using the response from Dialogflow.\n\nLet’s re-run our server like so:\n```\n    node server.js\n```\nOpen our angular app and try sending this message:\n```\n    /bot who are you?\n```\n\n![chatbot-angular-complete](//images.ctfassets.net/1es3ne0caaid/7LhcyXw5l62UwmMmAKkwkm/e882eb2f52140a51a4689e054801e862/chatbot-angular-complete.gif)\n\n## Conclusion\n\nHere, we have been able to build a group chat with a chatbot user. The intention was to give you a general building block that can be built on, explored, and improved to build an amazing chatbot that can do much more with group chats.\n\nI hope this tutorial was helpful and gave you enough information required to start building bots tailored for other use cases, as you deem fit in your organization. \n\nThe source code for this tutorial can be found on [GitHub](https://github.com/theo4u/botAndPusher). Feel free to explore and add more features. ","metaTitle":"Build a group chat app with Angular and Dialogflow","metaDescription":"This tutorial shows you how to build a group chat app in Angular. You will integrate a chatbot, provided by Dialogflow. Users will be able to talk to each other, or to the bot."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5xGfjb8aooYKUSGQ0OCqye","type":"Entry","createdAt":"2018-05-20T15:06:47.896Z","updatedAt":"2018-05-20T15:06:47.896Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a collaborative painting application with Angular","url":"collaborative-painting-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-geolocation","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-18","description":"Learn to build a collaborative painting application using Angular. Create a web app where two users can paint together, seeing each other's actions in realtime.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Angular is required.","content":"We’ll be creating a realtime paint application. Using our application,  users can easily collaborate while working on the application and receive changes in realtime. We’ll be using Pusher’s pub/sub pattern to get realtime updates and Angular for templating.\n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Angular, kindly follow the tutorial [here](https://angular.io/tutorial). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n\nHere’s a demo of the final product:\n\n![angular-live-paint-demo](//images.ctfassets.net/1es3ne0caaid/2bmcqgtnOM0KM6W4mGAyQa/4e4bf636bcfeaccab9d2d127e7a086bb/angular-live-paint-demo.gif)\n\n## Initializing the application and installing dependencies\n\nTo get started, we will use the [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team to initialize our project.\n\nFirst, install the CLI by running `npm install -g @angular/cli`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:  \n`ng new angular-realtime-paintapp`\n\nThis command is used to initialize a new Angular project.\n\nNext, run the following command in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js uuid @types/uuid\n```\nStart the Angular development server by running `ng serve` in a terminal in the root folder of your project.\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\nStart the server by running `node server` in a terminal inside the root folder of your project.\n\n### Draw route\n\nLet’s create a post route named `draw`, the frontend of the application will send make a request to this route containing the mouse events needed to show the updates of a guest user. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/draw', (req, res) =\u003e {\n      pusher.trigger('painting', 'draw', req.body);\n      res.json(req.body);\n    });\n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`painting`), an event name (`draw`), and a payload.\n\n\n## Canvas view\n\nWe’ll be attaching a [directive](https://angular.io/guide/attribute-directives) to the `canvas` element. Using the directive, we’ll listen for events on the host element and also bind attributes to it.\n\nRun `ng generate directive canvas` to create the canvas directive. \n\nOpen the `canvas.directive.ts` file and update it with the content below.\n\n``` typescript\n    // canvas.directive.ts\n    import {\n      Directive,\n      ElementRef,\n      HostListener,\n      HostBinding,\n      AfterViewInit,\n    } from '@angular/core';\n    import { v4 } from 'uuid';\n    import { HttpClient } from '@angular/common/http';\n    \n    declare interface Position {\n      offsetX: number;\n      offsetY: number;\n    }\n    @Directive({\n      selector: '[myCanvas]',\n    })\n    export class CanvasDirective implements AfterViewInit {\n      constructor(\n        private el: ElementRef,\n        private http: HttpClient\n      ) {\n        // We use the ElementRef to get direct access to the canvas element. Here we set up the properties of the element. \n        this.canvas = this.el.nativeElement;\n        this.canvas.width = 1000;\n        this.canvas.height = 800;\n        // We create a canvas context. \n        this.ctx = this.canvas.getContext('2d');\n        this.ctx.lineJoin = 'round';\n        this.ctx.lineCap = 'round';\n        this.ctx.lineWidth = 5;\n      }\n      canvas: HTMLCanvasElement;\n      ctx: CanvasRenderingContext2D;\n      // Stroke styles for user and guest\n      userStrokeStyle = '#FAD8D6';\n      guestStrokeStyle = '#CD5334';\n      position: {\n        start: {};\n        stop: {};\n      };\n      // This will hold a list of positions recorded throughout the duration of a paint event\n      line = [];\n      // Since there's no auth setup, we'll need to able to tell users and guests apart.v4 creates a unique id for each user\n      userId = v4();\n      // This object will hold the start point of any paint event.\n       prevPos: Position = {\n        offsetX: 0,\n        offsetY: 0,\n      };\n      // This will be set to true when a user starts painting\n      isPainting = false;\n      \n      @HostListener('mousedown', ['$event'])\n      onMouseDown({ offsetX, offsetY }) {\n        this.isPainting = true;\n        // Get the offsetX and offsetY properties of the event. \n        this.prevPos = {\n          offsetX,\n          offsetY,\n        };\n      }\n      @HostListener('mousemove', ['$event'])\n      onMouseMove({ offsetX, offsetY }) {\n        if (this.isPainting) {\n          const offSetData = { offsetX, offsetY };\n          // Set the start and stop position of the paint event. \n          this.position = {\n            start: { ...this.prevPos },\n            stop: { ...offSetData },\n          };\n          // Add the position to the line array\n          this.line = this.line.concat(this.position);\n          this.draw(this.prevPos, offSetData, this.userStrokeStyle);\n        }\n      }\n      @HostListener('mouseup')\n      onMouseUp() {\n        if (this.isPainting) {\n          this.isPainting = false;\n          // Send a request to the server at the end of a paint event\n          this.makeRequest();\n        }\n      }\n      @HostListener('mouseleave')\n      onmouseleave() {\n        if (this.isPainting) {\n          this.isPainting = false;\n          this.makeRequest();\n        }\n      }\n      @HostBinding('style.background') background = 'black';\n      \n      makeRequest() {\n        // Make a request to the server containing the user's Id and the line array.\n        this.http\n          .post('http://localhost:4000/draw', {\n            line: this.line,\n            userId: this.userId,\n          })\n          .subscribe((res) =\u003e {\n            this.line = [];\n          });\n      }\n      // The draw method takes three parameters; the prevPosition, currentPosition and the strokeStyle\n      draw(\n        { offsetX: x, offsetY: y }: Position,\n        { offsetX, offsetY }: Position,\n        strokeStyle\n      ){\n        // begin drawing\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = strokeStyle;\n        // Move the the prevPosition of the mouse\n        this.ctx.moveTo(x, y);\n        // Draw a line to the current position of the mouse\n        this.ctx.lineTo(offsetX, offsetY);\n        // Visualize the line using the strokeStyle\n        this.ctx.stroke();\n        this.prevPos = {\n          offsetX,\n          offsetY,\n        };\n      }\n      ngAfterViewInit() {}\n    }\n```    \n    \n\n\n\u003e **Note:**  a **paint** event in this context is the duration from when the mousedown event is triggered to when the mouse is up or when the mouse leaves the canvas area.\n\u003e Also remember to rename the directive selector property from `appCanvas` to `myCanvas`\n\n\nThere’s quite a bit going on in the file above. Let’s walk through it and explain each step.\n\n We are making use of [HostListener](https://angular.io/api/core/HostListener) decorators to listen for mouse events on the host elements. Methods are defined for each event.\n \n\n-  In the `onMouseDown` method, we set the `isPainting` property to true and then we get the `offsetX` and `offsetY` properties of the event and store it in the `prevPos` object.\n\n\n- The `onMouseMove` method is where the painting takes place. Here we check if `isPainting` is set to true, then we create an `offsetData` object to hold the current `offsetX` and `offsetY` properties of the event. We update the `position`  object with the previous and current positions of the mouse. We then append the `position` to the `line` array and then we call the `draw` method with the current and previous positions of the mouse as parameters.\n\n\n- The `onMouseUp` and `onMouseLeave` methods both check if the user is currently painting. If true, the `isPainting` property is set to false to prevent the user from painting until the next `mousedown` event is triggered. The `makeRequest` method is the called to send the paint event to the server.\n\n\n- `makeRequest`:  this method sends a post request to the server containing the `userId` and the `line` array as the request body. The line array is then reset to an empty array after the request is complete.\n\n\n- In the `draw` method, three parameters are required to complete a paint event. The previous position of the mouse, current position and the strokeStyle. We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the properties of each parameter. The `ctx.moveTo` function takes the x and y properties of the previous position. A line is drawn from the previous position to the current mouse position using the `ctx.lineTo` function. `ctx.stroke` visualizes the line.\n\n\nWe made reference to the `HttpClient` service. To make use of this in the application, we’ll need to import the `HttpClientModule` into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { CanvasDirective } from './canvas.directive';\n    import { HttpClientModule } from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [BrowserModule, HttpClientModule],\n      ...\n    })\n    \n    ...\n```\n\nNow that the directive has been set up, let’s add a canvas element to the `app.component.html` file and attach the `myCanvas` directive to it. Open the `app.component.html` file and replace the content with the following:\n\n``` html\n    \u003c!-- app.component.html --\u003e\n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"color-guide\"\u003e\n        \u003ch5\u003eColor Guide\u003c/h5\u003e\n        \u003cdiv class=\"user user\"\u003eUser\u003c/div\u003e\n        \u003cdiv class=\"user guest\"\u003eGuest\u003c/div\u003e\n      \u003c/div\u003e\n      \u003ccanvas myCanvas\u003e\u003c/canvas\u003e\n    \u003c/div\u003e\n```\nAdd the following styles to the `app.component.css` file:\n\n``` css\n    // app.component.css\n    .main {\n      display: flex;\n      justify-content: center;\n      font-family: 'Arimo', sans-serif;\n    }\n    .color-guide {\n      margin: 20px 40px;\n    }\n    h5{\n      margin-bottom: 10px;\n    }\n    .user {\n      padding: 7px 15px;\n      border-radius: 4px;\n      color: black;\n      font-size: 13px;\n      font-weight: bold;\n      background: #fad8d6;\n      margin: 10px 0;\n    }\n    .guest {\n      background: #cd5334;\n      color: white;\n    }\n```    \n\nWe’re making use of an external font; so let’s include a link to the stylesheet in the `index.html` file.\n\n``` html\n    \u003c!-- index.html --\u003e\n    \u003chead\u003e\n      ...\n      \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"\u003e\n      \u003clink href=\"https://fonts.googleapis.com/css?family=Arimo:400,700\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n```\nRun `ng serve`  in your terminal and visit http://localhost:4200/ to have a look of the application. It should be similar to the screenshot below:\n\n![angular-live-paint-stage1-screenshot](//images.ctfassets.net/1es3ne0caaid/5kG6xWPn9K2mkcscMwEYik/6c6b80e86b511b478d15a8f6c014d986/angular-live-paint-stage1-screenshot.png)\n\n## Introducing Pusher\n\nTo make the Pusher library available in our project, add the library as a third party script to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n    ]\n     ...\n```          \n\nAfter updating this file, you’ll need to restart the Angular server so the CLI compiles the new script file added.\n\nCreate a Pusher service using the Angular CLI by running the following command:\n\n```\n    ng generate service pusher\n```\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherService {\n      constructor() {\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n        this.channel = pusher.subscribe('painting');\n      }\n      channel;\n      public init() {\n        return this.channel;\n      }\n    }\n```    \n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule } from '@angular/common/http';\n    import {PusherService} from './pusher.service';\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n    \n    ...\n```\n \n## Realtime painting\n\nLet’s include the Pusher service in the `canvas.directive.ts` file to make use of the realtime functionality made available using Pusher. Update the `canvas.directive.ts` to include the new Pusher service.\n\n``` typescript\n    // canvas.directive.ts\n      ...\n      import { HttpClient } from '@angular/common/http';\n      import { PusherService } from './pusher.service';\n      \n      ...\n      constructor(\n        private el: ElementRef,\n        private http: HttpClient,\n        private pusher: PusherService\n      ) {\n        ...\n      }\n      \n      ...\n      \n      ngAfterViewInit() {\n        const channel = this.pusher.init();\n        channel.bind('draw', (data) =\u003e {\n          if (data.userId !== this.userId) {\n            data.line.forEach((position) =\u003e {\n              this.draw(position.start, position.stop, this.guestStrokeStyle);\n            });\n          }\n        });\n      }\n    }\n```\nIn the `AfterViewInit` lifecycle, we initialized the Pusher service and listened for the `draw` event. In the event callback, we check if the there’s a distinct userId. Then we loop through the `line`  property of the data returned from the callback. Wed proceed to draw using the `start` and `stop` objects properties of each position contained in the array.\n\n\nOpen two browsers side by side to observe the realtime functionality of the application. A line drawn on one browser should show up on the other. Here’s a screenshot of two browsers side by side using the application:\n\n\n\u003e **Note:** Ensure both the server and the Angular dev server are up by running `ng serve` and `node server` on separate terminal sessions.\n\n![angular-live-paint-final-screenshot](//images.ctfassets.net/1es3ne0caaid/9KD2M5ow3mY8qKE2aQykk/cd5928c0168aadce6be1138334a81174/angular-live-paint-final-screenshot.png)\n\n## Conclusion\n\nWe’ve created a collaborative drawing application in Angular, using Pusher to provide realtime functionality. You can check out the repo containing the demo on [GitHub](https://github.com/christiannwamba/angular-geolocation).","metaTitle":"Build a collaborative painting application with Angular","metaDescription":"This tutorial will show you how to build a collaborative painting application using Angular. You will develop a web app that allows two users to paint together."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Xdb7IlcGsuYMMsIWCKI04","type":"Entry","createdAt":"2018-05-16T08:00:50.038Z","updatedAt":"2018-05-16T08:00:50.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geofencing web app using Angular ","url":"geofencing-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-geolocation","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-05-15","description":"Learn to build a web app with Angular and Node featuring geofencing functionality. Track whether guests are within your hotel limits or not.","prerequisite":"You will need Node and npm installed on your machine.","content":"A **geo-fence** is a virtual perimeter for a real-world geographic area. Geofencing is the use of GPS or RFID technology to create a virtual geographic boundary, enabling software to trigger a response when a mobile device enters or leaves a particular area. \n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Angular, kindly follow the tutorial [here](https://angular.io/tutorial). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n- [Google Maps](https://cloud.google.com/maps-platform/)\n\nWe’ll be creating an application for a fictional ranch called “The Ranch”. Our application will allow “The Ranch” employees track the location of each active guest in realtime. The application will alert employees when an active guest is exiting the boundaries of the ranch.\n\nHere’s a screenshot of the final product:\n\n![angular-geofencing-demo](//images.ctfassets.net/1es3ne0caaid/6aLhQwx15KaGiqYKIsk626/a74ee3ef8d3a4dd507e7adaf6a204091/angular-geofencing-demo.png)\n\n## Initializing the application and installing dependencies\n\nTo get started, we will use the [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team to initialize our project.\n\nFirst, install the CLI by running `npm install -g @angular/cli`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:  \n`ng new pusher-geofencing --style=scss` `--``routing`\n\nThis command is used to initialize a new Angular project with routing setup; the project will make use of SCSS for styling.\n\nNext run the following command in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js\n```\n\nStart the Angular development server by running `ng serve` in a terminal in the root folder of your project.\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\n### Send votes\n\nLet’s create a post route `ping` , the frontend of the application will send make a request to this route containing the current location of the user. This will be done whenever there’s a location change.\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/ping', (req, res) =\u003e {\n      const { lat, lng } = req.body;\n      const data = {\n        lat,\n        lng,\n      };\n      pusher.trigger('location', 'ping', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- Using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), we got the `lat` and `lng` from the body of the request.\n- The `data` object contains the coordinates sent in. This object will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`location`), an event name (`ping`), and a payload.\n\n\n## Home view\n\nRun `ng generate component home` to create the home component. This component will be the view users see when they visit. It will request permission to get the user’s current location.  \n\nOpen the `home.component.html` file and replace it with the content below.\n\n``` html\n    // home.component.html\n    \n    \u003capp-header [username]=\"username\"\u003e\u003c/app-header\u003e\n    \u003cdiv class=\"content\"\u003e\n      \u003ch2\u003eWelcome to \"The Ranch\"\u003c/h2\u003e\n      \u003cimg src=\"/assets/placeholder.svg\" alt=\"\"\u003e\n      \u003ch6\u003eEnable location to get updates\u003c/h6\u003e\n    \u003c/div\u003e\n```    \n\n\n\u003e **Note:** all assets used in the article are available in the [GitHub repo](https://github.com/christiannwamba/angular-geolocation) \n\nThe view itself is static. There won’t be a lot happening in this particular view except the request to get the user’s current location. We referenced a `header` component in the markup. The component was created because the same header will be reused in the admin page. We’ll create the component shortly.\n\n### Styling\n\nCopy the following styles into the `home.component.scss` file.\n\n``` scss\n    // home.component.scss\n    \n    .content {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      padding: 30px 0;\n      img {\n        height: 100px;\n      }\n      h6 {\n        margin:15px 0;\n        opacity: 0.6;\n      }\n    }\n```    \n\n### Home component\n\nHere, we’ll define methods to get the user’s location and sending the location to the server.\n\n``` typescript\n    // home.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    @Component({\n      selector: 'app-home',\n      templateUrl: './home.component.html',\n      styleUrls: ['./home.component.scss'],\n    })\n    export class HomeComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      username = 'J. User'\n      pingServer(location) {\n        this.http\n          .post('http://localhost:4000/ping', location)\n          .subscribe((res) =\u003e {});\n      }\n      ngOnInit() {\n        if ('geolocation' in navigator) {\n          navigator.geolocation.watchPosition((position) =\u003e {\n            this.pingServer({\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            });\n          });\n        }\n      }\n    }\n```    \n    \n\n\n- `pingServer`: this method makes use of the native HttpClient service to make requests to our server. It takes a `location`  parameter and sends it as the body of the request.\n- In the `OnInit` lifecycle, we check if the current browser supports the [geolocation](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) API; we watch for location changes and send the  \n\nTo make use of the HttpClient service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // app.module.ts\n    ...\n    import { AppRoutingModule } from './app-routing.module';\n    import { AppComponent } from './app.component';\n    import { HomeComponent } from './home/home.component';\n    import { HttpClientModule } from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        HttpClientModule\n      ],\n      ...\n    })\n    export class AppModule { }\n    \n      ...\n```\n\nLet’s create the header component by running `ng generate component header` in a terminal in the root folder of the project.\n\nReplace the contents of the `header.component.html` with the following:\n\n``` html\n    \u003c!-- header.component.html --\u003e\n    \n    \u003cheader\u003e\n      \u003cdiv class=\"brand\"\u003e\n        \u003ch5\u003eThe Ranch\u003c/h5\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"nav\"\u003e\n        \u003cul\u003e\n          \u003cli\u003e\n            \u003cimg src=\"/assets/boy.svg\" alt=\"avatar\"\u003e\n            \u003cspan\u003e{{username}}\u003c/span\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/div\u003e\n    \u003c/header\u003e\n```\n\n\u003e **Note:** all assets used in this article are available in the [repo](https://github.com/christiannwamba/angular-geolocation)\n\nUpdate the `home.component.scss` file with the following styles:\n\n``` scss\n    // header.component.scss\n    \n    header {\n      display: flex;\n      background: mediumseagreen;\n      margin: 0;\n      padding: 5px 40px;\n      color: whitesmoke;\n      box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1);\n      .brand {\n        flex: 1;\n        display: flex;\n        align-items: center;\n        h5 {\n          font-family: 'Lobster', cursive;\n          font-size: 20px;\n          margin: 0;\n          letter-spacing: 1px;\n        }\n      }\n      ul {\n        list-style: none;\n        padding-left: 0;\n        display: flex;\n        li {\n          display: flex;\n          align-items: center;\n          img {\n            height: 40px;\n            border-radius: 50%;\n          }\n          span {\n            margin-left: 8px;\n            font-size: 15px;\n            font-weight: 500;\n          }\n        }\n      }\n    }\n```    \n\nThe `header.component.ts` file should be updated to look like the snippet below:\n\n``` typescript\n    // header.component.ts\n    \n    import { Component, OnInit, Input } from '@angular/core';\n    @Component({\n      selector: 'app-header',\n      templateUrl: './header.component.html',\n      styleUrls: ['./header.component.scss'],\n    })\n    export class HeaderComponent implements OnInit {\n      constructor() {}\n      @Input() username = '';\n      ngOnInit() {}\n    }\n```    \n\nWe’ll be using external fonts in our application. Include a link to the stylesheet in the `index.html`  file.\n\n``` html\n    // index.html\n    \n    \u003chead\u003e\n      ...\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Dosis:400,500,700|Lobster\" rel=\"stylesheet\"\u003e\n      ...\n    \u003c/head\u003e\n    ...\n```      \n\nUpdate the `styles.scss` file to use the external fonts throughout the project.\n\n``` scss\n    // styles.scss\n    \n    body{\n      margin: 0;\n      font-family: 'Dosis', sans-serif;\n    }\n```    \n\n\n## Introducing Pusher\n\nTo make the pusher library available in our project, add the library as a third party script to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\",\n    ]\n     ...\n```          \n\nAfter updating this file, you’ll need to restart the angular server so the CLI compiles the new script file added.\n\nCreate a Pusher service using the Angular CLI by running the following command:\n\n```\n    ng generate service pusher\n```\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherService {\n      constructor() {\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n        this.channel = pusher.subscribe('location');\n      }\n      channel;\n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule } from '@angular/common/http';\n    import {PusherService} from './pusher.service';\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n    \n    ...\n```\n \n\n## Admin page\n\nTo monitor and track users using our application, we’ll need an admin page accessible to privileged employees. The page will use Google Maps to visualize the location of the user.  Using Pusher, changes in the user’s location will be seen in realtime.\n\nWe’ll be using [angular-google-maps](https://github.com/SebastianM/angular-google-maps), which has a set of reusable Angular components for Google Maps. Install the package by running `npm install @agm/core`.\n[](https://github.com/SebastianM/angular-google-maps)\nTo use the components in our project, we’ll need to include the angular-google-maps’ module in the `app.module.ts` file.\n\n``` typescript\n    //app.module.ts\n    ...\n    import {PusherService} from './pusher.service';\n    import { AgmCoreModule } from '@agm/core';\n    \n    @NgModule({\n      ...\n      imports: [\n        BrowserModule,\n        AppRoutingModule,\n        HttpClientModule,\n        AgmCoreModule.forRoot({\n          // please get your own API key here: https://developers.google.com/maps/documentation/javascript/get-api-key?hl=en\n          apiKey: 'GOOGLE_API_KEY',\n          libraries: ['geometry']\n        }),\n      ...\n    })\n    export class AppModule { }\n```    \n\n\n\u003e **Note:** ensure to replace the placeholder value with your google API key\n\nNow we’ll create the admin component using the CLI by running the following command:\n\n```\n    ng generate component admin\n```\nOpen the `admin.component.html` file and update it with the contents below:\n\n``` html\n    // admin.component.html\n    \n    \u003capp-header [username]=\"username\"\u003e\u003c/app-header\u003e\n    \u003cdiv class=\"main\"\u003e\n      \u003ch3\u003eAdmin\u003c/h3\u003e\n      \u003cagm-map [latitude]=\"center.lat\" [longitude]=\"center.lng\" [zoom]=\"zoom\"\u003e\n        \u003cagm-marker [latitude]=\"center.lat\" [longitude]=\"center.lng\"\u003e\u003c/agm-marker\u003e\n      \u003c/agm-map\u003e\n      \u003ch4\u003eLocation Alerts\u003c/h4\u003e\n      \u003cdiv class=\"alert\" [hidden]=\"!showAlert\"\u003e\n        \u003cp\u003eThis user has left the ranch\u003c/p\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"location alert\" [hidden]=\"!showLocationUpdate\"\u003e\n        \u003cp\u003e{{message}}\u003c/p\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\nStyle up the component by adding the following styles to the `admin.component.scss` file:\n\n``` scss\n    // admin.component.scss\n    \n    .main {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      margin: auto;\n      h3 {\n        font-size: 15px;\n        font-weight: bold;\n        text-transform: uppercase;\n        margin-bottom: 15px;\n      }\n      .alert {\n        background: #f14343;\n        color: white;\n        padding: 15px;\n        border-radius: 5px;\n        p{\n          margin: 0;\n        }\n      }\n      .location{\n        background: green;\n        margin-top: 20px;\n      }\n    }\n    agm-map {\n      height: 400px;\n      width: 600px;\n    }\n```    \n\nAdd the following content to the `admin``.component.ts` file:\n\n``` typescript\n    // admin.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { MapsAPILoader } from '@agm/core';\n    import { PusherService } from '../pusher.service';\n    declare const google;\n    @Component({\n      selector: 'app-admin',\n      templateUrl: './admin.component.html',\n      styleUrls: ['./admin.component.scss'],\n    })\n    export class AdminComponent implements OnInit {\n      constructor(private loader: MapsAPILoader, private pusher: PusherService) {}\n      theRanchPolygon;\n      username = 'J. Admin';\n      message = '';\n      showAlert = false;\n      showLocationUpdate = false;\n      zoom = 15;\n      // Center of the ranch, where the initial marker will be placed\n      center = {\n        lat: 6.435838,\n        lng: 3.451384,\n      };\n      // This array of latLngs represents the polygon around our ranch\n      polygon = [\n        { lat: 6.436914, lng: 3.451432 },\n        { lat: 6.436019, lng: 3.450917 },\n        { lat: 6.436584, lng: 3.450917 },\n        { lat: 6.435006, lng: 3.450928 },\n        { lat: 6.434953, lng: 3.451808 },\n        { lat: 6.435251, lng: 3.451765 },\n        { lat: 6.435262, lng: 3.451969 },\n        { lat: 6.435518, lng: 3.451958 },\n      ];\n      \n      ngOnInit() {\n        // Wait for the google maps script to be loaded before using the \"google\" keyword\n        this.loader.load().then(() =\u003e {\n          this.theRanchPolygon = new google.maps.Polygon({ paths: this.polygon });\n        });\n        const channel = this.pusher.init();\n        channel.bind('ping', (position) =\u003e {\n          this.center = {\n            ...position,\n          };\n          // Create a LatLng using the position returned from the pusher event\n          const latLng = new google.maps.LatLng(position);\n          this.showLocationUpdate = true;\n          this.message = \"The user's location has changed\";\n          // Check if the location is outside the polygon\n          if (!google.maps.geometry.poly.containsLocation(latLng, this.theRanchPolygon)) {\n            // Show alert if user has left the polygon\n            this.showAlert = true;\n          }else{\n            this.message = 'The user is currently in the ranch';\n          }\n        });\n      }\n    }\n```    \n\n\n- `polygon`:  this is an array of latLngs that represent the polygon around our ranch\n- `MapsApiLoader`: this is a service that provides a method to check if the Google maps script has been loaded.\n\nIn the `OnInit` lifecycle we do a few things:\n\n- We wait for the Google maps script to load; in the promise returned, we create a polygon using the array of LatLng objects.\n- We initialized Pusher and listened for the `ping` event. In the bind callback, we set the `center` property to the position sent through the event.\n- Create a LatLng using the position returned from the event. \n- Finally, we checked if the position is outside the polygon and then we display an alert if it is.\n\nNow that both pages have been created, let’s set up routes for each page. Open the `app-routing.module.ts` file and add routes to the `routes` array.\n\n``` typescript\n    // app-routing.module.ts\n    ...\n    import { HomeComponent } from './home/home.component';\n    import { AdminComponent } from './admin/admin.component';\n    \n    const routes: Routes = [\n      {\n        path: 'admin',\n        component: AdminComponent,\n      },\n      {\n        path: '',\n        component: HomeComponent,\n      },\n    ];\n    \n    ...\n```\n\nNow update the `app.component.html` file to contain just the `route-outlet`\n\n``` html\n    // app.component.html\n    \n    \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n```\n\n At this point, your application should have realtime updates when there’s a location change. The admin user’s should we alerted if the user’s current location is outside “The Ranch” premises.\n \n Navigate to http://localhost:4000 to view the home page and http://localhost:4000/admin to view the admin page.\n \n The home page:\n\n![angular-geofencing-homepage](//images.ctfassets.net/1es3ne0caaid/1ZXKMIgJ3eWYAqieqQEg8E/4aa8ce557a153412ab7b0dc8e8f4c205/angular-geofencing-homepage.png)\n\nThe different states of the admin page:\n  \n![angular-geofencing-outside](//images.ctfassets.net/1es3ne0caaid/6ckCDoBsbKOayQ6C2mIqyk/c8e48fc10d5cc0b7b6598a9a74c3de65/angular-geofencing-outside.png)\n\n![angular-geofencing-inside](//images.ctfassets.net/1es3ne0caaid/67NKKJYD8AeOcEWGigo2ea/847fe6625d1c9a90aa60bbf83571236b/angular-geofencing-inside.png) \n\nTo test the realtime functionality of the application, open two browsers side-by-side and engage the application. Location updates should be in realtime.\n\n## Conclusion\n\nUsing Pusher,  we’ve built out an application using the pub/sub pattern to receive realtime updates. Using geofences, we’ll be able to tell when an active guest is leaving “The Ranch”. You can check out the repo containing the demo on [GitHub](https://github.com/christiannwamba/angular-geolocation).","metaTitle":"Build a geofencing web app using Angular ","metaDescription":"This tutorial will show you how to build a web app featuring geofencing. Track the location of hotel guests using Google Maps. Built with Angular and Node."}}],"defaultValue":"Angular","queryType":"tag","pages":4,"route":"/tutorials","query":{"tag":"Angular","page":"2"}}},"page":"/tutorials","query":{"tag":"Angular","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Angular&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:40:46 GMT -->
</html>