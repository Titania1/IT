<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=9 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:37 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">224</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/android-messenger-presence-kotlin.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Android messenger app with online presence using Kotlin</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with Go</h3><p class="css-k12xad e5jrto45">This brief tutorial helps you create a simple chat application. You will build the backend in Go, and the frontend in va...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-widget-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a chat widget with Go and JavaScript</h3><p class="css-k12xad e5jrto45">This brief tutorial shows you how to quickly create a chat widget with a backend powered by Go, and a frontend and admin...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-widget-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat widget with Python and JavaScript</h3><p class="css-k12xad e5jrto45">This tutorial will guide you through building a simple chat widget in Python and JavaScript. You will build two interfac...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/calendar-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Calendar event scheduling in Vue</h3><p class="css-k12xad e5jrto45">Build a calendar using Vue.js, with a Node.js backend. Users are able to add events to the calendar, with all instances ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-framework7.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using Framework7</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/football-feed-go-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a football results feed with Go and React</h3><p class="css-k12xad e5jrto45">Build a realtime football results feed, using Go for the backend and React for the frontend. Admins will be able to send...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live comments feature with Ionic</h3><p class="css-k12xad e5jrto45">Build a mobile app feature with Ionic, allowing users to add comments to a post, and see updates in realtime. The app fe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live voting app with Ionic</h3><p class="css-k12xad e5jrto45">Build a live voting app using Ionic, with a Node backend. The app replicates the behaviour of a Twitter poll: users can ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials8114.html?product=Channels&amp;tag=JavaScript&amp;page=8" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials013b.html?product=Channels&amp;tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials53c5.html?product=Channels&amp;tag=JavaScript&amp;page=7" class="css-za1ua3 edg0byb1">7</a><a href="tutorials8114.html?product=Channels&amp;tag=JavaScript&amp;page=8" class="css-za1ua3 edg0byb1">8</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials1044.html?product=Channels&amp;tag=JavaScript&amp;page=9" class="css-2wakph edg0byb1">9</a><a href="tutorials7696.html?product=Channels&amp;tag=JavaScript&amp;page=10" class="css-za1ua3 edg0byb1">10</a><a href="tutorials76b6.html?product=Channels&amp;tag=JavaScript&amp;page=11" class="css-za1ua3 edg0byb1">11</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials959a.html?product=Channels&amp;tag=JavaScript&amp;page=25" class="css-5s6711 edg0byb1">25</a><a href="tutorials7696.html?product=Channels&amp;tag=JavaScript&amp;page=10" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":224,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2R3OOdRWOcK8gi8mkcom8i","type":"Entry","createdAt":"2018-07-29T20:22:52.067Z","updatedAt":"2018-07-29T20:22:52.067Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Android messenger app with online presence using Kotlin","url":"android-messenger-presence-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-07-25","description":"This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB to create a simple backend, and Kotlin to program the app. Users will be able to log in and see who is online.","prerequisite":"You will need Android Studio 3+, Node, npm and MongoDB installed on your machine. Some familiarity with Android development is required.","content":"When building a chat application, it is essential to have an online presence feature. It is essential because your users will like to know when their friends are online and are more likely to respond to their messages.\n\nIn this article, we will be building a messenger app with online presence using Pusher Channels, Kotlin and Node.js. \n\nHere is a demo of what we will build:\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n# Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- A Pusher Channel app. You can create one [here](https://pusher.com/channels).\n- Android Studio installed on your machine. You can check [here](https://developer.android.com/studio/index.html) for the latest stable version. A minimum of version 3.0 is recommended.\n- Basic knowledge of Android development and the Android Studio IDE.\n- Basic knowledge of Kotlin. Here are the [official docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM (Node Package Manager) installed on your machine. Download [here](https://nodejs.org/en/).\n- Mongo DB installed on your machine. You can install it following the instructions [here](https://docs.mongodb.com/manual/installation/).\n\n\n## Building the backend server\n\nOur server will be built using Node.js. To start, create a new project directory:\n\n```\n    $ mkdir backend-server\n```\n\nNext, create a new `index.js` file inside the project directory and paste the following code:\n\n``` javascript\n    // File: ./index.js\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    const mongoose = require('mongoose');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER'\n    });\n    \n    mongoose.connect('mongodb://127.0.0.1/db');\n    \n    const Schema = mongoose.Schema;\n    const userSchema = new Schema({\n        name: { type: String, required: true, },\n        count: {type: Number}\n    });\n    \n    var User = mongoose.model('User', userSchema);\n    userSchema.pre('save', function(next) {\n        if (this.isNew) {\n            User.count().then(res =\u003e {\n              this.count = res; // Increment count\n              next();\n            });\n          } else {\n            next();\n          }\n    });\n    \n    module.exports = User;\n    \n    var currentUser;\n    \n    /* \n    =================================\n    We will add our endpoints here!!!\n    =================================\n    */\n    \n    var port = process.env.PORT || 5000;\n    \n    app.listen(port);\n```\n\nIn the snippet above, we initialized Pusher, Express, and MongoDB. We are using [Moongose](http://mongoosejs.com/) to connect to our MongoDB instance.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the ones on your Pusher dashboard.\n  \n\nNow let’s add our endpoints. The first endpoint we will add will be to log a user in. Paste the code below in your `index.js` file below the `currentUser` declaration:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/login', (req,res) =\u003e {\n        User.findOne({name: req.body.name}, (err, user) =\u003e {\n            if (err) {\n                res.send(\"Error connecting to database\");\n            }\n            \n            // User exists\n            if (user) {\n                currentUser = user;\n                return res.status(200).send(user)\n            }\n            \n            let newuser = new User({name: req.body.name});\n    \n            newuser.save(function(err) {\n                if (err) throw err;\n            });\n            \n            currentUser = newuser;\n            res.status(200).send(newuser)\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint receives a `username` with the request, and either create a new user or returns the data of the existing user. \n\nLet’s add the next endpoint below the one above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.get('/users', (req,res) =\u003e {\n        User.find({}, (err, users) =\u003e {\n            if (err) throw err;\n            res.send(users);\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint above fetches all the users from the database and returns them. \n\nSince we will be using a Pusher presence channel, we need an endpoint to authenticate the user. In the same file, paste this code below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/presence', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n      \n        let presenceData = {\n            user_id: currentUser._id,\n            user_info: {count: currentUser.count, name: currentUser.name}\n        };\n      \n        let auth = pusher.authenticate(socketId, channel, presenceData);\n    \n        res.send(auth);\n    });\n    \n    // [...]\n```\n\nSince we are going to be using private channels, we need an endpoint for authentication. Add the following endpoint below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/private', (req, res) =\u003e {\n        res.send(pusher.authenticate(req.body.socket_id, req.body.channel_name));\n    });\n    \n    // [...]\n\nFinally, the last endpoint will be to trigger an event `new-message` to a channel. Add the endpoint below the last one:\n\n\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/send-message', (req, res) =\u003e {\n        let payload = {message: req.body.message, sender_id: req.body.sender_id}\n        pusher.trigger(req.body.channel_name, 'new-message', payload);\n        res.send(200);\n    });\n    \n    // [...]\n```\n\nAfter adding all the endpoints, install the necessary NPM packages by running this command:\n\n```\n    $ npm install express body-parser mongoose pusher\n```\n\nBefore you run your application, make sure MongoDB is running already using this command:\n\n```\n    $ mongod --dbpath C:\\MongoDB\\data\\db # Windows\n    $ mongod --dbpath=/path/to/db/directory # Mac or Linux\n```\n\nNow you can run your application using the command below:\n\n```\n    $ node index.js\n```\n\nYour app will be available here: http://localhost:5000.\n\n\n## Building our Android application\n\nCreate your Android project. In the wizard, enter your project name, let’s say **MessengerApp.**  Next, enter your package name. You can use a minimum SDK of 19 then choose an **Empty Activity**. On the next page, change the **Activity Name** to `LoginActivity`. After this, Android Studio will build your project for you.\n\nNow that we have the project, let’s add the required dependencies for our app. Open your app module `build.gradle` file and add these:\n\n```\n    // File ../app/build.gradle\n    dependencies {\n      // [...]\n      \n      implementation 'com.android.support:design:28+'\n      implementation 'com.pusher:pusher-java-client:1.6.0'\n      implementation \"com.squareup.retrofit2:retrofit:2.4.0\"\n      implementation \"com.squareup.retrofit2:converter-scalars:2.4.0\"\n      implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    }\n```\n\nNotably, we added the dependencies for [Retrofit](http://square.github.io/retrofit/) and Pusher. Retrofit is an HTTP client library used for network calls. We added the design library dependency too as we want to use some classes from it. Sync your gradle files to pull in the dependencies.\n\nNext, let’s prepare our app to make network calls. Retrofit requires an interface to know the endpoints to be accessed. \n\nCreate a new interface named `ApiService` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ApiService.kt\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.GET\n    import retrofit2.http.POST\n    \n    interface ApiService {\n    \n      @POST(\"/login\")\n      fun login(@Body body:RequestBody): Call\u003cUserModel\u003e\n    \n      @POST(\"/send-message\")\n      fun sendMessage(@Body body:RequestBody): Call\u003cString\u003e\n    \n      @GET(\"/users\")\n      fun getUsers(): Call\u003cList\u003cUserModel\u003e\u003e\n    }\n```\n\nHere, we have declared three endpoints. They are for logging in, sending messages and fetching users. Notice that in some of our responses, we return `Call\u003cUserModel\u003e`. Let’s create the `UserModel`. Create a new class called `UserModel` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/UserModel.kt\n    import com.google.gson.annotations.Expose\n    import com.google.gson.annotations.SerializedName\n    \n    data class UserModel(@SerializedName(\"_id\") @Expose var id: String,\n                         @SerializedName(\"name\") @Expose var name: String,\n                         @SerializedName(\"count\") @Expose var count: Int,\n                         var online:Boolean = false)\n```\n\nAbove, we used a data class so that some other functions required for model classes such as `toString`, `hashCode` are added to the class by default. \n\nWe are expecting only the values for the `id` and `name` from the server. We added the `online` property so we can update later on. \n\nNext, create a new class named `RetrofitInstance` and paste the following code:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitInstance {\n    \n      companion object {\n        val retrofit: ApiService by lazy {\n          val httpClient = OkHttpClient.Builder()\n          val builder = Retrofit.Builder()\n              .baseUrl(\"http://10.0.2.2:5000/\")\n              .addConverterFactory(ScalarsConverterFactory.create())\n              .addConverterFactory(GsonConverterFactory.create())\n    \n          val retrofit = builder\n              .client(httpClient.build())\n              .build()\n          retrofit.create(ApiService::class.java)\n        }\n      }\n    }\n```\n\nThis class contains a class variable called `retrofit`. It provides us with an instance for Retrofit that we will reference in more than one class.\n\nFinally, to request for the internet access permission update the `AndroidManifest.xml` file like so:\n\n``` kotlin\n    // File: ./app/src/main/ApiService.kt\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.messengerapp\"\u003e\n    \n      \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n      [...]\n    \n    \u003c/manifest\u003e\n```\n\nNow we can make requests using Retrofit. \n\nThe next feature we will implement is login. Open the already created `LoginActivity` layout file `activity_login.xml` file and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_login.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:layout_margin=\"20dp\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editTextUsername\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/loginButton\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Login\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis layout contains an input field to take the username and a button to make a login request. \n\nNext, open the `LoginActivity.Kt` file and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/LoginActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.util.Log\n    import kotlinx.android.synthetic.main.activity_login.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class LoginActivity : AppCompatActivity() {\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_login)\n        loginButton.setOnClickListener {\n          if (editTextUsername.text.isNotEmpty()) {\n            loginFunction(editTextUsername.text.toString())\n          }\n        }\n      }\n    \n      private fun loginFunction(name:String) {\n        val jsonObject = JSONObject()\n        jsonObject.put(\"name\", name)\n        \n        val jsonBody = RequestBody.create(\n            MediaType.parse(\"application/json; charset=utf-8\"), \n            jsonObject.toString()\n        )\n    \n        RetrofitInstance.retrofit.login(jsonBody).enqueue(object:Callback\u003cUserModel\u003e {\n          override fun onFailure(call: Call\u003cUserModel\u003e?, t: Throwable?) {\n            Log.i(\"LoginActivity\",t!!.localizedMessage)\n          }\n    \n          override fun onResponse(call: Call\u003cUserModel\u003e?, response: Response\u003cUserModel\u003e?) {\n            if (response!!.code() == 200) {\n              Singleton.getInstance().currentUser = response.body()!!\n              startActivity(Intent(this@LoginActivity,ContactListActivity::class.java))\n              finish()\n            }\n          }\n        })\n      }\n    }\n```\n\nIn the file, we set up a listener for our login button so that when it is clicked, we can send the text to the server for authentication. We also stored the logged in user in a singleton class so that we can access the user’s details later. \n\nCreate a new class called `Singleton` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    class Singleton {\n      companion object {\n        private val ourInstance = Singleton()\n        fun getInstance(): Singleton {\n          return ourInstance\n        }\n      }\n      lateinit var currentUser: UserModel\n    }\n```\n\n\nWith this class, we will have access to the `currentUser`, which is the logged in user.\n\nNext, let’s create a new activity named `ContactListActivity`. For now, leave the class empty and open the corresponding layout file named `activity_contact_list` and paste the following:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_contact_list.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ContactListActivity\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:id=\"@+id/recyclerViewUserList\"\n        android:layout_height=\"match_parent\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\n\nThe layout contains a recycler view, which will give us all the list of our contacts fetched from the database. Since we are displaying items in a list, we will need an adapter class to manage how items are inflated to the layout. \n\nCreate a new class named `ContactRecyclerAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactRecyclerAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.ImageView\n    import android.widget.TextView\n    import java.util.*\n    \n    class ContactRecyclerAdapter(private var list: ArrayList\u003cUserModel\u003e, private var listener: UserClickListener)\n      : RecyclerView.Adapter\u003cContactRecyclerAdapter.ViewHolder\u003e() {\n      \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.user_list_row, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun showUserOnline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = true\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n    \n        }\n      }\n    \n      fun showUserOffline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = false\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n        }\n      }\n    \n      fun add(user: UserModel) {\n        list.add(user)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val nameTextView: TextView = itemView.findViewById(R.id.usernameTextView)\n        private val presenceImageView: ImageView = itemView.findViewById(R.id.presenceImageView)\n    \n        fun bind(currentValue: UserModel) = with(itemView) {\n          this.setOnClickListener {\n            listener.onUserClicked(currentValue)\n          }\n          nameTextView.text = currentValue.name\n          if (currentValue.online){\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon_online))\n          } else {\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon))\n    \n          }\n    \n        }\n      }\n    \n      interface UserClickListener {\n        fun onUserClicked(user: UserModel)\n      }\n    }\n```\n\nThis adapter has some overridden methods and some custom methods. \n\nThe `onCreateViewHolder` inflates how each row will look like. `onBindViewHolder` binds the data to each item by calling the `bind` method in the inner `ViewHolder` class. The `getItemCount` gives the size of the list. \n\nFor our custom methods, `showUserOffline` updates the user and shows when they are offline. While `showUserOnline` does the opposite. Finally, we have the `add` method, which adds a new contact to the list and refreshes it.\n\nIn the adapter class above, we used a new layout named `user_list_row`. Create a new layout `user_list_row` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/user_list_row.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\n      android:orientation=\"horizontal\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"20dp\"\n      android:gravity=\"center\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cImageView\n        android:id=\"@+id/presenceImageView\"\n        android:layout_width=\"15dp\"\n        android:layout_height=\"15dp\"\n        app:srcCompat=\"@drawable/presence_icon\" /\u003e\n    \n      \u003cTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"Neo\"\n        android:textSize=\"20sp\"\n        android:layout_marginStart=\"10dp\"\n        android:id=\"@+id/usernameTextView\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\"\n        /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\nThis layout is the visual representation of how each item on the layout will look like. The layout has an image view that shows the users online status. The layout also has a textview that shows the name of the contact beside the icon. The icons are vector drawables. Let’s create the files. \n\nCreate a new drawable named `presence_icon_online` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon_online.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#3FFC3C\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\n\nCreate another drawable named `presence_icon` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#C0C0C6\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\nNext, open the `ContactListActivity` class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactListActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PresenceChannelEventListener\n    import com.pusher.client.channel.User\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_contact_list.*\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class ContactListActivity : AppCompatActivity(),\n        ContactRecyclerAdapter.UserClickListener {\n    \n      private val mAdapter = ContactRecyclerAdapter(ArrayList(), this)\n      \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_contact_list)\n        setupRecyclerView()\n        fetchUsers()\n        subscribeToChannel()\n      }\n    \n    }\n```\n\nIn this class, we initialized the `ContactRecyclerAdapter`, then called three functions in the `onCreate` method. Let’s create these new functions. \n\nIn the same class, add the following methods:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewUserList) {\n        layoutManager = LinearLayoutManager(this@ContactListActivity)\n        adapter = mAdapter\n      }\n    }\n    \n    private fun fetchUsers() {\n      RetrofitInstance.retrofit.getUsers().enqueue(object : Callback\u003cList\u003cUserModel\u003e\u003e {\n        override fun onFailure(call: Call\u003cList\u003cUserModel\u003e\u003e?, t: Throwable?) {}\n        override fun onResponse(call: Call\u003cList\u003cUserModel\u003e\u003e?, response: Response\u003cList\u003cUserModel\u003e\u003e?) {\n          for (user in response!!.body()!!) {\n            if (user.id != Singleton.getInstance().currentUser.id) {\n              mAdapter.add(user)\n            }\n          }\n        }\n      })\n    }\n    \n    private fun subscribeToChannel() {\n    \n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/presence\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      pusher.subscribePresence(\"presence-channel\", object : PresenceChannelEventListener {\n        override fun onUsersInformationReceived(p0: String?, users: MutableSet\u003cUser\u003e?) {\n          for (user in users!!) {\n            if (user.id!=Singleton.getInstance().currentUser.id){\n              runOnUiThread {\n                mAdapter.showUserOnline(user.toUserModel())\n              }\n            }\n          }\n        }\n    \n        override fun onEvent(p0: String?, p1: String?, p2: String?) {}\n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n    \n        override fun userSubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOnline(user.toUserModel())\n          }\n        }\n    \n        override fun userUnsubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOffline(user.toUserModel())\n          }\n        }\n      })\n    }\n    \n    override fun onUserClicked(user: UserModel) {\n      val intent = Intent(this, ChatRoom::class.java)\n      intent.putExtra(ChatRoom.EXTRA_ID,user.id)\n      intent.putExtra(ChatRoom.EXTRA_NAME,user.name)\n      intent.putExtra(ChatRoom.EXTRA_COUNT,user.count)\n      startActivity(intent)\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\n\n- `setupRecyclerView` assigns a layout manager and an adapter to the recycler view. For a recycler view to work, you need these two things. \n- `fetchUsers` fetches all the users from the server and displays on the list. It exempts the current user logged in.\n- `subcribeToChannel` subscribes to a presence channel. When you subscribe to one, the `onUsersInformationReceived` gives you all the users subscribed to the channel including the current user. So, in that callback, we call the `showUserOnline` method in the adapter class so that the icon beside the user can be changed to signify that the user is online.\n- `onUserClicked` is called when a contact is selected. We pass the details of the user to the next activity called `ChatRoom`.\n\nIn the previous snippet, we used an extension function to transform the `User` object we receive from Pusher to our own `UserModel` object. Let’s define this extension.\n\nCreate a new class called `Utils` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/Utils.kt\n    import com.pusher.client.channel.User\n    import org.json.JSONObject\n    \n    fun User.toUserModel():UserModel{\n      val jsonObject = JSONObject(this.info)\n      val name = jsonObject.getString(\"name\")\n      val numb = jsonObject.getInt(\"count\")\n      return UserModel(this.id, name, numb)\n    }\n```\n\nNow, since we referenced a `ChatRoom` activity earlier in the `onUserClicked` method, let’s create it. \n\nCreate a new activity called `ChatRoom`. The activity comes with a layout file `activity_chat_room`, paste this in the layout file:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_chat_room.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ChatRoom\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerViewChat\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" /\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16dp\"\n        android:hint=\"Enter a message\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/sendButton\"\n        app:layout_constraintStart_toStartOf=\"parent\" /\u003e\n    \n      \u003candroid.support.design.widget.FloatingActionButton\n        android:id=\"@+id/sendButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"16dp\"\n        android:src=\"@android:drawable/ic_menu_send\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThe layout above contains a recycler view for the chat messages, an edit text to collect new messages, and a floating action button to send the message. \n\nNext, create a new class called `ChatRoomAdapter` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoomAdapter.kt\n    import android.support.v7.widget.CardView\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.RelativeLayout\n    import android.widget.TextView\n    import java.util.*\n    \n    class ChatRoomAdapter (private var list: ArrayList\u003cMessageModel\u003e)\n      : RecyclerView.Adapter\u003cChatRoomAdapter.ViewHolder\u003e() {\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.chat_item, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun add(message: MessageModel) {\n        list.add(message)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val messageTextView: TextView = itemView.findViewById(R.id.text)\n        private val cardView: CardView = itemView.findViewById(R.id.cardView)\n    \n        fun bind(message: MessageModel) = with(itemView) {\n          messageTextView.text = message.message\n          val params = cardView.layoutParams as RelativeLayout.LayoutParams\n          if (message.senderId==Singleton.getInstance().currentUser.id) {\n            params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n          }\n        }\n      }\n    }\n```\n\nThis adapter works in a similar fashion as the one we created earlier. One difference though is that the show online and offline methods are not needed here.\n\nNext, create another class named `MessageModel` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/MessageModel.kt\n    data class MessageModel(val message: String, val senderId: String)\n```\n\nThe `chat_item` layout used in the `onCreateViewHolder` method of the adapter class represents how each layout will look like. Create a new layout called `chat_item` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/chat_item.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"16dp\"\n      android:orientation=\"vertical\"\u003e\n    \n      \u003candroid.support.v7.widget.CardView\n        android:id=\"@+id/cardView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"start\"\n        app:cardCornerRadius=\"8dp\"\n        app:cardUseCompatPadding=\"true\"\u003e\n    \n        \u003cLinearLayout\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:gravity=\"start\"\n          android:orientation=\"vertical\"\n          android:padding=\"8dp\"\u003e\n    \n          \u003cTextView\n            android:id=\"@+id/text\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_vertical|start\"\n            android:layout_marginBottom=\"4dp\"\n            android:textStyle=\"bold\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n      \u003c/android.support.v7.widget.CardView\u003e\n    \n    \u003c/RelativeLayout\u003e\n```\n\nFinally, open the `ChatRoom` activity class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoom.kt\n    import android.app.Activity\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.View\n    import android.view.inputmethod.InputMethodManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PrivateChannelEventListener\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_chat_room.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import java.lang.Exception\n    import java.util.*\n    \n    class ChatRoom : AppCompatActivity() {\n    \n      companion object {\n        const val EXTRA_ID = \"id\"\n        const val EXTRA_NAME = \"name\"\n        const val EXTRA_COUNT = \"numb\"\n      }\n    \n      private lateinit var contactName: String\n      private lateinit var contactId: String\n      private var contactNumb: Int = -1\n      lateinit var nameOfChannel: String\n      val mAdapter = ChatRoomAdapter(ArrayList())\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chat_room)\n        fetchExtras()\n        setupRecyclerView()\n        subscribeToChannel()\n        setupClickListener()\n      }\n    }\n```\n\nIn this file, we declared constants used to send data to the activity through intents. We also initialized variables we will use later like the adapter the contact details. We then called some additional methods in the `onCreate` method. Let’s add them to the class.\n\nAdd the `fetchExtras` method defined below to the class. The method gets the extras sent from the chatroom activity.\n\n``` kotlin\n    private fun fetchExtras() {\n      contactName = intent.extras.getString(ChatRoom.EXTRA_NAME)\n      contactId = intent.extras.getString(ChatRoom.EXTRA_ID)\n      contactNumb = intent.extras.getInt(ChatRoom.EXTRA_COUNT)\n    }\n```\n\nThe next method is the `setupRecyclerView` method. This initializes the recycler view with an adapter and a layout manager. Paste the function in the same class as before:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewChat) {\n        layoutManager = LinearLayoutManager(this@ChatRoom)\n        adapter = mAdapter\n      }\n    }\n```\n\nThe next method is the `subscribeToChannel` method. This method subscribes the user to a private channel with the selected contact. Paste the following code to the same class as before:\n\n``` kotlin\n    private fun subscribeToChannel() {\n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/private\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      nameOfChannel = if (Singleton.getInstance().currentUser.count \u003e contactNumb) {\n        \"private-\" + Singleton.getInstance().currentUser.id + \"-\" + contactId\n      } else {\n        \"private-\" + contactId + \"-\" + Singleton.getInstance().currentUser.id\n      }\n    \n      Log.i(\"ChatRoom\", nameOfChannel)\n    \n      pusher.subscribePrivate(nameOfChannel, object : PrivateChannelEventListener {\n        override fun onEvent(channelName: String?, eventName: String?, data: String?) {\n          val obj = JSONObject(data)\n          val messageModel = MessageModel(obj.getString(\"message\"), obj.getString(\"sender_id\"))\n    \n          runOnUiThread {\n            mAdapter.add(messageModel)\n          }\n        }\n    \n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n      }, \"new-message\")\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\nThe code above allows a user to subscribe to a private channel. A private channel requires authorization like the presence channel. However, it does not expose a callback that is triggered when other users subscribe. \n\nNext method to be added is the `setupClickListener`. Paste the method to the same class as before:\n\n``` kotlin\n    private fun setupClickListener() {\n      sendButton.setOnClickListener{\n        if (editText.text.isNotEmpty()) {\n          val jsonObject = JSONObject()\n          jsonObject.put(\"message\",editText.text.toString())\n          jsonObject.put(\"channel_name\",nameOfChannel)\n          jsonObject.put(\"sender_id\",Singleton.getInstance().currentUser.id)\n          \n          val jsonBody = RequestBody.create(\n              MediaType.parse(\"application/json; charset=utf-8\"), \n              jsonObject.toString()\n          )\n    \n          RetrofitInstance.retrofit.sendMessage(jsonBody).enqueue(object: Callback\u003cString\u003e{\n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {}\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {}\n          })\n          \n          editText.text.clear()\n          hideKeyBoard()\n        }\n    \n      }\n    }\n```\n\nThe method above assigns a click listener to the floating action button to send the message to the server.  After the message is sent, we clear the text view and hide the keyboard. \n\nAdd a method to the same class for hiding the keyboard like this:\n\n``` kotlin\n    private fun hideKeyBoard() {\n      val imm = getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n      var view = currentFocus\n      \n      if (view == null) {\n        view = View(this)\n      }\n      \n      imm.hideSoftInputFromWindow(view.windowToken, 0)\n    }\n```\n\nThat’s all for the application. Now you can run your application in Android Studio and you should see the application in action.\n\n\n\u003e Make sure the Node.js API we built earlier is running before running the Android application.\n\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n\n## Conclusion\n\nIn this article, you have been introduced yet again to some Pusher’s capabilities such as the private and presence channel. We learned how to authenticate our users for the various channels. We used these channels to implement a private chat between two persons and an online notification for a contact. \n\nThe source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status).","metaTitle":"Build an Android messenger app with online presence","metaDescription":"Use Kotlin, Node.js and MongoDB to build an Android messaging app, featuring online presence. Users are able to log in and see who else is online."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"53e34Sergc88IA8e4AE2aK","type":"Entry","createdAt":"2018-07-26T07:40:42.110Z","updatedAt":"2018-07-26T07:40:42.110Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with Go","url":"chat-app-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-07-25","description":"This brief tutorial helps you create a simple chat application. You will build the backend in Go, and the frontend in vanilla JavaScript. Users will be able to message in realtime.","prerequisite":"You will need Go 0.10.0+ installed on your machine. A basic knowledge of Go and JavaScript will be helpful.","content":"Communication is an important part of the society we live in. Over the years, the forms of communication available have changed and have been refined to be both far-reaching and fast. With communication today, we can talk to people who are on the other side of the globe in an instant.\n\nTo power this sort of communication, there are some platforms that allow instant messaging such as Facebook, Twitter, Slack.\n\nIn this application, we will consider how to build a realtime chat application using [Go](https://golang.org/doc/install), JavaScript and [Pusher](http://pusher.com/). \n\nHere’s a demo of the final application:\n\n![go-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/4VfVpdecD6ackgA08yAwkc/7150bd3d5e452232f7b8839c13c342ed/go-chat-app-demo.gif)\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- An IDE of your choice like Visual Studio Code.\n- Go (version \u003e= 0.10.x) installed on your computer. Here’s how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript.\n\nOnce you have all the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you have already signed up with Pusher and created an application.\n\n\n## Setting up Pusher\n\nThe realtime feature of this chat app will depend on Pusher Channels so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one. After signing up, you will be asked to create a new application. Do so.\n\n### Enabling client events\n\nWe need to enable the Pusher application to trigger events from the client-side (browser) of the chat app. This is important because it is with this feature that users will be able to send private messages without hitting the backend server. Follow the steps below to activate client events from the [dashboard](https://dashboard.pusher.com):\n\n\n- Select the Channel application.\n- Click on **App Setting** from the horizontal options list.\n- Check the **Enable client events** option.\n![chat-app-go-enable-client-events](//images.ctfassets.net/1es3ne0caaid/r2p5Sr6hLq4eeWMoII8YE/78f08355870ee274ed621530d5fd9f16/chat-app-go-enable-client-events.png)\n- Click on the **Update** button.\n\n\n## Setting up the codebase\n\nLet’s write the terminal commands to create a new folder in the `src` directory that is located in the `$GOPATH`, this folder will be the root directory for this project:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-chat-app\n    $ cd go-pusher-chat-app\n```\n\nIn this folder, we will create the main Go file which will be the entry point for the application and call it `chat.go`. We also need to install the Go Pusher library that we will reference in the `chat.go` file.\n\nRun the following code in the terminal to pull in the Go Pusher package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️ If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this GitHub issue.\n\nOpen the `chat.go` file in your IDE and paste the following code:\n\n``` go\n    // File: ./chat.go\n    package main\n    \n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n    \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    type user struct {\n        Name  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    func main() {\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n    \n        http.HandleFunc(\"/new/user\", registerNewUser)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        log.Fatal(http.ListenAndServe(\":8090\", nil))\n    }\n```\n\n\u003e ⚠️ Replace `PUSHER_APP_*` keys with the app credentials found on your Pusher dashboard.\n\nIn the code above, we first imported a list of packages then registered a new Pusher client with the credentials from the app we created earlier on the dashboard.\n\nNext, we defined a user struct and included extra definitions to its properties so that Go knows how to handle incoming payloads and bind their various structures with a new instance of the user struct.\n\nLastly, in the main function, we registered three endpoints:\n\n\n- `/` — returns the static files that define the view of the chat app. The static files will be served from a `public` directory.\n- `/new/user` — creates a new user.\n- `/pusher/auth` — authorizes users from the client-side so they can subscribe to private channels and trigger client events.\n\nEach of the last two endpoints has an associated handler function that we will define below. Add the following code to the `chat.go` file before the `main` function:\n\n``` go\n    // File: ./chat.go\n    \n    // [...]\n    \n    func registerNewUser(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        \n        var newUser user\n        \n        err = json.Unmarshal(body, \u0026newUser)\n        if err != nil {\n            panic(err)\n        }\n        \n        client.Trigger(\"update\", \"new-user\", newUser)\n        \n        json.NewEncoder(rw).Encode(newUser)\n    }\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        response, err := client.AuthenticatePrivateChannel(params)\n        if err != nil {\n            panic(err)\n        }\n        \n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nIn the `registerNewUser` function, we trigger a Pusher event, `new-user`, on the public channel `update`, so that the new user’s details are sent to the subscribed clients.\n\nThe syntax for triggering a Pusher event over a public channel in Go is:\n\n```\n    client.Trigger(channel, event, data)\n```\n\n## Building the frontend\n\nLet’s create the `public` folder in the root directory of our project because this is where all of the static files will live:\n\n```\n    $ mkdir public\n```\n\nNext, we will navigate into the `public` folder and create two sub-folders to hold our CSS and JavaScript files:\n\n```\n    $ cd public\n    $ mkdir css js\n```\n\nLastly, create an `index.html` file in the root of the `public` folder. This is where we will write the markup for our application.\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eChat with friends in realtime\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/app.css\" \u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eWelcome\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"registerScreen\"\u003e\n                    \u003ch3 style=\"text-align: center\"\u003eType in your details to chat\u003c/h3\u003e\n                    \u003chr/\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cform id=\"loginScreenForm\"\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                              \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name\" required\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                              \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address\" required\u003e\n                            \u003c/div\u003e\n                            \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eSubmit\u003c/button\u003e\n                          \u003c/form\u003e\n                      \u003c/div\u003e\n                \u003c/main\u003e\n    \n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" style=\"display: none\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove we have the HTML for the home page. Let’s add some styling. Create a new file `app.css` in the `public/css` directory and add the following code:\n\n``` css\n    /* File: ./public/css.app.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    .chat {\n        max-width: 80%;\n        margin: 0 auto;\n    }\n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    .sidebar .nav-item {\n        width: 100%;\n    }\n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    tr .sender span {\n        color: #676767;\n    }\n    .response {\n        display: none;\n    }\n```\n\nNext, let’s write the JavaScript for the application. Create a new `app.js` file in the `public/js` directory and add the following code:\n\n``` javascript\n    // File: ./public/js/app.js\n    (function () {\n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            name: undefined,\n            email: undefined,\n            endUserName: undefined,\n            currentRoom: undefined,\n            currentChannel: undefined,\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        var publicChannel = pusher.subscribe('update');\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        const helpers = {\n            clearChatMessages: () =\u003e {\n                $('#chat-msgs').html('')\n            },\n            \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.email) {\n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n    \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n                chat.endUserName =  evt.target.dataset.userName\n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text('Write a message to ' + evt.target.dataset.userName+ '.')\n                }\n    \n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n    \n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n                \n                let createdAt = new Date().toLocaleString()            \n                let message = $('#replyMessage input').val().trim()\n                let event = 'client-' + chat.currentRoom\n                \n                chat.subscribedChannels[chat.currentChannel].trigger(event, {\n                    'sender': chat.name,\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n                \n                $('#chat-msgs').prepend(\n                    `\u003ctr\u003e\n                        \u003ctd\u003e\n                            \u003cdiv class=\"sender\"\u003e\n                                ${chat.name} @ \u003cspan class=\"date\"\u003e${createdAt}\u003c/span\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message}\u003c/div\u003e\n                        \u003c/td\u003e\n                    \u003c/tr\u003e`\n                )\n                \n                $('#replyMessage input').val('')\n            },\n    \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n                \n                chat.name = name;\n                chat.email = email;\n    \n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n                \n                let validName = (name !== '' \u0026\u0026 name.length \u003e= 3)\n                let validEmail = (email !== '' \u0026\u0026 email.length \u003e= 5)\n                \n                if (validName \u0026\u0026 validEmail) {\n                    axios.post('/new/user', {name, email}).then(res =\u003e {\n                        chatBody.find('#registerScreen').css(\"display\", \"none\");\n                        chatBody.find('#main').css(\"display\", \"block\");\n                        \n                        chat.myChannel = pusher.subscribe('private-' + res.data.email)\n                        chat.myChannel.bind('client-' + chat.email, data =\u003e {\n                            helpers.displayChatMessage(data)\n                        })\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n                \n                evt.preventDefault()\n            }\n        }\n    \n    \n        publicChannel.bind('new-user', function(data) {\n            if (data.email != chat.email){\n                chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n                chat.subscribedUsers.push(data);\n                \n                $('#rooms').html(\"\");\n        \n                chat.subscribedUsers.forEach((user, index) =\u003e {\n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-user-name=\"${user.name}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n                })\n            }\n        })\n    \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n    }());\n```\n\nIn the script above, we instantiated the Pusher object (replace the `PUSHER_APP_*` keys with the credentials on your Pusher dashboard). \n\nNext, we define some helper methods that will help us interact with the chat window and with the backend API. Some of the methods defined in the `helpers` object are:\n\n\n- `clearChatMessages` - clears the chat message window.\n- `displayChatMessage` - displays a new chat message in the current window.\n- `loadChatRoom` - shows a users chat messages in the general chat window after a room is selected.\n- `replyMessage` - sends a chat message to the current room.\n- `LogIntoChatSession` - creates a new chat session.\n\nAfter defining the `helpers` object, we bind to the `new-user` event on the `publicChannel`. In the callback, we subscribe to private channels so the communication is secure. \n\nAt the bottom of the script, we register all the event listeners and start the chat session.\n\n\n## Running the application\n\nTo test the chat app, we can start the Go backend server with this command:\n\n```\n    $ go run chat.go\n```\n\nTo see the app in action, we will visit this address, http://127.0.0.1:8090, on a web browser in multiple windows and test the instant messaging features. \n\nHere’s a demo of the chat app:\n\n![go-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/4VfVpdecD6ackgA08yAwkc/7150bd3d5e452232f7b8839c13c342ed/go-chat-app-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating a chat application powered by a Go backend server. \n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/go-pusher-chat-app).","metaTitle":"Build a chat app with Go","metaDescription":"Use Go and JavaScript to create a simple realtime messenger application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"181jJdMSpuCIwIE8yaY2YI","type":"Entry","createdAt":"2018-07-25T07:36:17.016Z","updatedAt":"2018-07-25T07:36:17.016Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a chat widget with Go and JavaScript","url":"chat-widget-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-chat-widget","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2018-07-23","description":"This brief tutorial shows you how to quickly create a chat widget with a backend powered by Go, and a frontend and admin dashboard in JavaScript. Users can initiate chat, and admins can see waiting chats and choose which to join.","prerequisite":"You will need Go 0.10.x+ installed. A basic knowledge of Go and JavaScript (ES6 syntax) will be helpful.","content":"## Introduction\n\nThe process of building products for an online demographic should be thorough and follow modern-day trends. One of such trend is making it possible for the customers and support agents to have realtime discussions over some form of two-way message channel. This would ensure that customers do not click away in confusion and switch to competitors in times of frustration.\n\nIn this tutorial, we will see how to build a realtime chat widget with Go, Pusher, and JavaScript. Here’s a demo of the application:\n\n![go-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/3qN7ML2VMcqaMyMaSGWsiw/3bb18095d1042c0708925e2b35667789/go-chat-widget-demo.gif)\n\nIn the above image, we built a website that sells motorcycles and integrates a chat widget. A customer is able to sign up to speak with a support agent and the agent on the other end can manage communication among a number of connected customers.\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- An IDE of your choice like Visual Studio Code.\n- Go (version \u003e= 0.10.x) installed on your computer. Here’s how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6) and jQuery.\n- Once you have all the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you have already signed up with Pusher and created an application.\n\n## Setting up Pusher\n\nThe realtime feature of the chat widget is dependent on Pusher so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one, after the signup process, you will be asked to create a new application. Let’s keep the app credentials nearby because we will need it to integrate Pusher within the cat widget.\n\n### Enabling client events\n\nThe final thing we will do is enable the Pusher application to trigger events from the client (browser) over a private channel. We need this feature because it is what will make it possible for a support agent to securely chat with a customer without having to send the message through the backend server first. Follow the steps below to activate client events from the [dashboard](https://dashboard.pusher.com):\n\n\n- Select the channel application.\n- Click on **App Settings** from the horizontal options list.\n- Check the **Enable client events** option.\n![go-chat-widget-enable-client-events](//images.ctfassets.net/1es3ne0caaid/24nRrulxAEScAs2aScYKAs/c162fb0a4ecaafeb7cad264880b1cbc3/go-chat-widget-enable-client-events.png)\n- Click on the **Update** button.\n\nThat’s all we need to do here.\n\n## Setting up the codebase\n\nLet’s begin by navigating into the `src` directory that is located in the `$GOPATH` and creating a new directory for our app. This will be the root directory for this project:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-chat-widget\n    $ cd go-pusher-chat-widget\n```\n\nLet’s create the main Go file (this is the entry point of the application) here and call it `chat.go`.\nNext, we will install the Go Pusher library that we will reference within the code for the backend server. Run the following code in the terminal to pull in the package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️ If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this GitHub issue.\n\nOpen the `chat.go` file in your favorite IDE and update it with the following code:\n\n``` go\n    // File: ./chat.go\n    package main\n    \n    // Here, we import the required packages (including Pusher)\n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // Here, we register the Pusher client\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // Here, we define a customer as a struct\n    type customer struct {\n        Name  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    func main() {\n    \n        // Serve the static files and templates from the public directory\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n    \n        // -------------------------------------------------------\n        // Listen on these routes for new customer registration and User authorization,\n        // thereafter, handle each request using the matching handler function.\n        // -------------------------------------------------------\n        http.HandleFunc(\"/new/customer\", broadcastCustomerDetails)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        // Start executing the application on port 8070\n        log.Fatal(http.ListenAndServe(\":8070\", nil))\n    }\n```\n\nIn the code above, we registered a new Pusher client with the credentials from the app we created earlier on the dashboard.\n\n\n\u003e ⚠️ Replace `PUSHER_*` keys with your app credentials.\n\nIn the main function, we defined two endpoints, `/new/customer` and `/pusher/auth`. The first will be hit when a new customer signs up and the last will authorize the users so they can subscribe to private channels. \n\nWe will be serving all static files from a `public` directory that we will create shortly.\n\n\n\u003e Note that we did not pull in the `ioutil` and `http` packages because they are already among Go’s standard packages.\n\nWe also defined `customer` as a struct and attached extra definitions to its properties so that Go knows how to handle incoming payloads and bind their various structures with a new instance of the customer struct. \n\nLet’s create the handler functions for the endpoints, add this code to the `chat.go` file just before the main function:\n\n``` go\n    // File: ./chat.go\n    \n    // [...]\n    \n    func broadcastCustomerDetails(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        var newCustomer customer\n        err = json.Unmarshal(body, \u0026newCustomer)\n        if err != nil {\n            panic(err)\n        }\n        client.Trigger(\"one-to-many\", \"new-customer\", newCustomer)\n        json.NewEncoder(rw).Encode(newCustomer)\n    }\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        response, err := client.AuthenticatePrivateChannel(params)\n        if err != nil {\n            panic(err)\n        }\n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nAbove we have two functions. `broadcastCustomerDetails` receives a new customer's details and binds it to an instance of the `customer` struct. We then trigger the received details over to the admin dashboard in an event over the public channel. The `pusherAuth` authorizes users so they can subscribe to private channels.\n\nThis is all the code required for the backend server to work, let’s move on to the frontend.\n\n## Building the frontend\n\nIn this section, we will start building the frontend of the web application. We will create all the static files that are rendered when a browser is pointed to the address of our application. \n\nCreate a new folder in the project directory and call it `public`, this folder is the root directory for all of our frontend files. In this folder, create three folders `css`, `js` and `img`.\n\nNext, create two files in the root of the `public` directory named `index.html` and `support.html`.\n\n### Creating the homepage\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eX-Cycles\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/app.css\" \u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cdiv class=\"site-wrapper\"\u003e\n          \u003cdiv class=\"site-wrapper-inner\"\u003e\n            \u003cdiv class=\"cover-container\"\u003e\n    \n              \u003cheader class=\"masthead clearfix\"\u003e\n                \u003cdiv class=\"inner\"\u003e\n                  \u003ch3 class=\"masthead-brand\"\u003eX-Cycles\u003c/h3\u003e\n                  \u003cnav class=\"nav nav-masthead\"\u003e\n                    \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eFeatures\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eContact\u003c/a\u003e\n                  \u003c/nav\u003e\n                \u003c/div\u003e\n              \u003c/header\u003e\n    \n              \u003cmain role=\"main\" class=\"inner cover\"\u003e\n                \u003ch1 class=\"cover-heading\"\u003eX-cycles\u003c/h1\u003e\n                \u003cp class=\"lead\"\u003eWe sell the best motorcycles around.\u003c/p\u003e\n                \u003cp class=\"lead\"\u003e\n                  \u003ca href=\"#\" class=\"btn btn-lg btn-secondary\"\u003eGALLERY\u003c/a\u003e\n                \u003c/p\u003e\n              \u003c/main\u003e\n    \n              \u003cfooter class=\"mastfoot\"\u003e\n              \u003c/footer\u003e\n    \n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"chatbubble\"\u003e\n            \u003cdiv class=\"unexpanded\"\u003e\n                \u003cdiv class=\"title\"\u003eChat with Support\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"expanded chat-window\"\u003e\n              \u003cdiv class=\"login-screen container\"\u003e\n    \n                \u003cform id=\"loginScreenForm\"\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eStart Chat\u003c/button\u003e\n                \u003c/form\u003e\n    \n              \u003c/div\u003e\n              \u003cdiv class=\"chats\"\u003e\n                \u003cdiv class=\"loader-wrapper\"\u003e\n                  \u003cdiv class=\"loader\"\u003e\n                    \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cul class=\"messages clearfix\"\u003e\n                \u003c/ul\u003e\n                \u003cdiv class=\"input\"\u003e\n                  \u003cform class=\"form-inline\" id=\"messageSupport\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                      \u003cinput type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"newMessage\" placeholder=\"Enter Message\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSend\u003c/button\u003e\n                  \u003c/form\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e    \n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the `css` directory, create an `app.css` file and update it with the following code:\n\n``` css\n    /* File: ./public/css/app.css */\n    a,\n    a:focus,\n    a:hover {\n      color: #fff;\n    }\n    .btn-secondary,\n    .btn-secondary:hover,\n    .btn-secondary:focus {\n      color: #333;\n      text-shadow: none;\n      background-color: #fff;\n      border: .05rem solid #fff;\n    }\n    html,\n    body {\n      height: 100%;\n      background-color: #333;\n    }\n    body {\n      color: #fff;\n      text-align: center;\n      text-shadow: 0 .05rem .1rem rgba(0,0,0,.5);\n    }\n    .site-wrapper {\n      display: table;\n      width: 100%;\n      height: 100%; /* For at least Firefox */\n      min-height: 100%;\n      box-shadow: inset 0 0 5rem rgba(0,0,0,.5);\n      background: url(../img/bg.jpg);\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n    .site-wrapper-inner {\n      display: table-cell;\n      vertical-align: top;\n    }\n    .cover-container {\n      margin-right: auto;\n      margin-left: auto;\n    }\n    .inner {\n      padding: 2rem;\n    }\n    .masthead {\n      margin-bottom: 2rem;\n    }\n    .masthead-brand {\n      margin-bottom: 0;\n    }\n    .nav-masthead .nav-link {\n      padding: .25rem 0;\n      font-weight: 700;\n      color: rgba(255,255,255,.5);\n      background-color: transparent;\n      border-bottom: .25rem solid transparent;\n    }\n    .nav-masthead .nav-link:hover,\n    .nav-masthead .nav-link:focus {\n      border-bottom-color: rgba(255,255,255,.25);\n    }\n    .nav-masthead .nav-link + .nav-link {\n      margin-left: 1rem;\n    }\n    .nav-masthead .active {\n      color: #fff;\n      border-bottom-color: #fff;\n    }\n    @media (min-width: 48em) {\n      .masthead-brand {\n        float: left;\n      }\n    \n      .nav-masthead {\n        float: right;\n      }\n    \n    }\n    /*\n     * Cover\n     */\n    \n    .cover {\n      padding: 0 1.5rem;\n    }\n    .cover .btn-lg {\n      padding: .75rem 1.25rem;\n      font-weight: 700;\n    }\n    .mastfoot {\n      color: rgba(255,255,255,.5);\n    }\n    @media (min-width: 40em) {\n      .masthead {\n        position: fixed;\n        top: 0;\n      }\n    \n      .mastfoot {\n        position: fixed;\n        bottom: 0;\n      }\n      .site-wrapper-inner {\n        vertical-align: middle;\n      }\n    \n      /* Handle the widths */\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 100%;\n      }\n    \n    }\n    @media (min-width: 62em) {\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 42rem;\n      }\n    \n    }\n    .chatbubble {\n        position: fixed;\n        bottom: 0;\n        right: 30px;\n        transform: translateY(300px);\n        transition: transform .3s ease-in-out;\n    }\n    .chatbubble.opened {\n        transform: translateY(0)\n    }\n    .chatbubble .unexpanded {\n        display: block;\n        background-color: #e23e3e;\n        padding: 10px 15px 10px;\n        position: relative;\n        cursor: pointer;\n        width: 350px;\n        border-radius: 10px 10px 0 0;\n    }\n    .chatbubble .expanded {\n        height: 300px;\n        width: 350px;\n        background-color: #fff;\n        text-align: left;\n        padding: 10px;\n        color: #333;\n        text-shadow: none;\n        font-size: 14px;\n    }\n    .chatbubble .chat-window {\n      overflow: auto;\n    }\n    .chatbubble .loader-wrapper {\n        margin-top: 50px;\n        text-align: center;\n    }\n    .chatbubble .messages {\n        display: none;\n        list-style: none;\n        margin: 0 0 50px;\n        padding: 0;\n    }\n    .chatbubble .messages li {\n        width: 85%;\n        float: left;\n        padding: 10px;\n        border-radius: 5px 5px 5px 0;\n        font-size: 14px;\n        background: #c9f1e6;\n        margin-bottom: 10px;\n    }\n    .chatbubble .messages li .sender {\n        font-weight: 600;\n    }\n    .chatbubble .messages li.support {\n        float: right;\n        text-align: right;\n        color: #fff;\n        background-color: #e33d3d;\n        border-radius: 5px 5px 0 5px;\n    }\n    .chatbubble .chats .input {\n        position: absolute;\n        bottom: 0;\n        padding: 10px;\n        left: 0;\n        width: 100%;\n        background: #f0f0f0;\n        display: none;\n    }\n    .chatbubble .chats .input .form-group {\n        width: 80%;\n    }\n    .chatbubble .chats .input input {\n        width: 100%;\n    }\n    .chatbubble .chats .input button {\n        width: 20%;\n    }\n    .chatbubble .chats {\n      display: none;\n    }\n    .chatbubble .login-screen {\n      margin-top: 20px;\n      display: none;\n    }\n    .chatbubble .chats.active,\n    .chatbubble .login-screen.active {\n      display: block;\n    }\n    /* Loader Credit: https://codepen.io/ashmind/pen/zqaqpB */\n    .chatbubble .loader {\n      color: #e23e3e;\n      font-family: Consolas, Menlo, Monaco, monospace;\n      font-weight: bold;\n      font-size: 10vh;\n      opacity: 0.8;\n    }\n    .chatbubble .loader span {\n      display: inline-block;\n      -webkit-animation: pulse 0.4s alternate infinite ease-in-out;\n              animation: pulse 0.4s alternate infinite ease-in-out;\n    }\n    .chatbubble .loader span:nth-child(odd) {\n      -webkit-animation-delay: 0.4s;\n              animation-delay: 0.4s;\n    }\n    @-webkit-keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    \n    }\n    @keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    \n    }\n```\n\n\u003e Above we referenced a `bg.jpg` image. You can download a free picture [here](http://pexels.com) and place it in the `public/img` directory.\n\nNow let's include some JavaScript. In the `js` directory, create an `app.js` file and paste the following code:\n\n``` javascript\n    // File: ./public/js/app.js\n    (function() {\n        'use strict';\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            name:  undefined,\n            email: undefined,\n            myChannel: undefined,\n        }\n    \n        const chatPage   = $(document)\n        const chatWindow = $('.chatbubble')\n        const chatHeader = chatWindow.find('.unexpanded')\n        const chatBody   = chatWindow.find('.chat-window')\n    \n        let helpers = {\n            ToggleChatWindow: function () {\n                chatWindow.toggleClass('opened')\n                chatHeader.find('.title').text(\n                    chatWindow.hasClass('opened') ? 'Minimize Chat Window' : 'Chat with Support'\n                )\n            },\n    \n            ShowAppropriateChatDisplay: function () {\n                (chat.name) ? helpers.ShowChatRoomDisplay() : helpers.ShowChatInitiationDisplay()\n            },\n    \n            ShowChatInitiationDisplay: function () {\n                chatBody.find('.chats').removeClass('active')\n                chatBody.find('.login-screen').addClass('active')\n            },\n    \n            ShowChatRoomDisplay: function () {\n                chatBody.find('.chats').addClass('active')\n                chatBody.find('.login-screen').removeClass('active')\n                setTimeout(function(){\n                    chatBody.find('.loader-wrapper').hide()\n                    chatBody.find('.input, .messages').show()\n                }, 2000)\n            },\n    \n            NewChatMessage: function (message) {\n                if (message !== undefined) {\n                    const messageClass = message.sender !== chat.email ? 'support' : 'user'\n                    chatBody.find('ul.messages').append(\n                        `\u003cli class=\"clearfix message ${messageClass}\"\u003e\n                            \u003cdiv class=\"sender\"\u003e${message.name}\u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                        \u003c/li\u003e`\n                    )\n                    chatBody.scrollTop(chatBody[0].scrollHeight)\n                }\n            },\n    \n            SendMessageToSupport: function (evt) {\n                evt.preventDefault()\n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n                const message = $('#newMessage').val().trim()\n                \n                chat.myChannel.trigger('client-guest-new-message', {\n                    'sender': chat.name,\n                    'email': chat.email,\n                    'text': message,\n                    'createdAt': createdAt \n                });\n    \n                helpers.NewChatMessage({\n                    'text': message,\n                    'name': chat.name,\n                    'sender': chat.email\n                })\n    \n                $('#newMessage').val('')\n            },\n    \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n    \n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n    \n                if ((name !== '' \u0026\u0026 name.length \u003e= 3) \u0026\u0026 (email !== '' \u0026\u0026 email.length \u003e= 5)) {\n                    axios.post('/new/customer', {\"name\":name, \"email\":email}).then(response =\u003e {\n                        chat.name = name\n                        chat.email = email\n                        console.log(response.data.email)\n                        chat.myChannel = pusher.subscribe('private-' + response.data.email);\n                        helpers.ShowAppropriateChatDisplay()\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n                \n                evt.preventDefault()\n            }\n        }\n    \n    \n        pusher.bind('client-support-new-message', function(data){\n            helpers.NewChatMessage(data)\n        })\n    \n    \n        chatPage.ready(helpers.ShowAppropriateChatDisplay)\n        chatHeader.on('click', helpers.ToggleChatWindow)\n        \n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n        chatBody.find('#messageSupport').on('submit', helpers.SendMessageToSupport)\n    }());\n```\n\nAbove, we instantiated a Pusher object instance and then we created a `helpers` object. In this object lies the meat of the script. In the `helpers` object we have a few methods that do specific tasks:\n\n\n- `ToggleChatWindow` - toggles the chat windows display.\n- `ShowAppropriateChatDisplay` - decides which chat display to show depending on the action of the user.\n- `ShowChatInitiationDisplay` - shows the initial display for the chat window for the user to initiate a chat session.\n- `ShowChatRoomDisplay` - shows the chat window after the user has instantiated a new chat session.\n- `NewChatMessage` - adds a new chat message to the chat window UI.\n- `SendMessageToSupport` - sends a chat message to the backend.\n- `LogIntoChatSession` - starts a new chat session.\n\n\n\u003e Replace the `PUSHER_*` keys with the one available on your Pusher dashboard.\n\n### Creating the support dashboard\n\nOpen the `support.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/support.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eX-Cycles | Support \u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/support.css\" \u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n    \n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/support.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nLet’s write the style for the support page. In the `css` directory, create a `support.css` file and paste the following code:\n\n``` css\n    /* File: ./public/css/support.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    .sidebar .nav-item {\n        width: 100%;\n    }\n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    tr .sender span {\n        color: #676767;\n    }\n    .response {\n        display: none;\n    }\n```\n\nNow let's add the JavaScript for the page. In the `js` directory, create a `support.js` file and update it with the following code:\n\n``` javascript\n    // File: ./public/js/support.js\n    (function () {\n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            messages: [],\n            currentRoom: '',\n            currentChannel: '',\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        var generalChannel = pusher.subscribe('one-to-many');\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        const helpers = {\n    \n            clearChatMessages: () =\u003e $('#chat-msgs').html(''),\n    \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.currentRoom) {\n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n    \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text(evt.target.dataset.roomId)\n                }\n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n    \n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n                const message = $('#replyMessage input').val().trim()\n                chat.subscribedChannels[chat.currentChannel].trigger('client-support-new-message', {\n                    'name': 'Admin',\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n                \n                helpers.displayChatMessage({\n                    'email': chat.currentRoom,\n                    'sender': 'Support',\n                    'text': message, \n                    'createdAt': createdAt\n                })\n    \n                $('#replyMessage input').val('')\n            },\n        }\n    \n        generalChannel.bind('new-customer', function(data) {\n            chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n            chat.subscribedUsers.push(data);\n            // render the new list of subscribed users and clear the former\n            $('#rooms').html(\"\");\n            chat.subscribedUsers.forEach(function (user, index) {\n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n            })\n        })\n    \n        pusher.bind('client-guest-new-message', function(data){\n            helpers.displayChatMessage(data)\n        })\n    \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n    }())\n```\n\nAbove, the script looks almost similar to the `app.js` script. The `helpers` object contains the following functions:\n\n\n- `clearChatMessages` - clears the chat message window.\n- `displayChatMessage` - displays a new chat message in the current window.\n- `loadChatRoom` - shows a users chat messages in the general chat window after a room is selected.\n- `replyMessage` - sends a chat message to the current room.\n\nAfter declaring the helpers, we bind to the Pusher channel and register our listeners.\n\n\n\u003e Replace the `PUSHER_*` keys with the one available on your Pusher dashboard.\n\n\n## Running the application\n\nTo test the application, we will run the application by typing this command in the terminal:\n\n```\n    $ go run chat.go\n```\n\nWe can visit these addresses, http://127.0.0.1:8070 and http://127.0.0.1:8070/support.html, on a web browser using different windows to test that the application works correctly. Here’s what we should see:\n\n![go-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/3qN7ML2VMcqaMyMaSGWsiw/3bb18095d1042c0708925e2b35667789/go-chat-widget-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we learned how to create a basic realtime web chat widget using Go and JavaScript. The source code for this project is available [here](https://github.com/neoighodaro/go-pusher-chat-widget) on GitHub.","metaTitle":"Building a chat widget with Go and JavaScript","metaDescription":"Use Go and JavaScript to create a simple chat widget. The app comprises a user panel and an admin panel. Users initiate chats, and admins can see a list of waiting users and choose to join a chat session."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1L0QNgAgZqYoGSmmmqWM4c","type":"Entry","createdAt":"2018-07-25T07:37:09.419Z","updatedAt":"2018-07-25T07:37:09.419Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat widget with Python and JavaScript","url":"chat-widget-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-pusher-chat-widget","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2018-07-23","description":"This tutorial will guide you through building a simple chat widget in Python and JavaScript. You will build two interfaces: a user window where website visitors can initiate chat, and an admin panel where admins can see open chats and choose one to join.","prerequisite":"You will need Python 3+ installed on your machine.","content":"Building quality digital products is a requirement toward acquiring long-term customers, but inefficient communication is an efficient way to lose them just as quickly as you gain them. The internet is currently the world’s largest marketplace and everyone is building something for an online audience to consume, however, it would be a shame if there isn’t a way to receive feedback or interact with customers in realtime.\n\nIn this tutorial, we will look at how we can create a realtime chat widget using Pusher, Python, and JavaScript. When we are done building, the final application will look and work like this:\n\n![python-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/1SVxOwhxqMKyqcAwY4OS6s/c5663259670daaa2e4737f70f70e1bcd/python-chat-widget-demo.gif)\n\nIn the image above, we can see a digital product called “SPIN” and it has a chat widget option for visiting customers to interact with. On the left browser window, a customer visits this website and fills in his/her details before submitting the form. \n\nThere is an admin on the right browser window who can see all connected customers and respond to all their messages accordingly, providing effective and realtime support.\n\n## Prerequisites\n\nTo follow along with this tutorial, a basic knowledge of Python, Flask, JavaScript (ES6 syntax) and jQuery is required. You will also need the following installed:\n\n\n1. [Python](https://www.python.org/) (\u003e= v3.x)\n2. [Virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment, and not pollute our global packages directory.\n\nLet’s install `virtualenv` with this command:\n\n```\n    $ pip install virtualenv\n```\n\n\u003e ⚠️ Virtualenv comes preinstalled with Python 3 so you may not need to install it if you are on this version.\n\n\n## Setting up the app environment\n\nLet’s create our project folder, and activate a virtual environment within it:\n\n```\n    $ mkdir python-pusher-chat-widget\n    $ cd python-pusher-chat-widget\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install [Flask](http://flask.pocoo.org/) and the remaining dependencies with this command:\n\n```\n    $ pip install flask flask-cors simplejson\n```\n\nWe need to install the Pusher library as we will need that for realtime updates.\n\n## Setting up Pusher\n\nThe first step here will be to get a Pusher Channels application. We need the application credentials for our realtime messaging to work.\n\nGo to the [Pusher website](https://pusher.com/) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article:\n\n![python-chat-widget-app-keys](//images.ctfassets.net/1es3ne0caaid/6E2f10XxIWuMgyG0gygMUO/b1786e85e89bcf2412eb7c9c3a13c75c/python-chat-widget-app-keys.png)\n\nThere’s one more thing we need to do here on this dashboard; because we will directly be triggering the message events on the client side of the application, we need to turn on a special feature that is turned off by default for security reasons. To learn more about triggering events on the client side, you can read the documentation [here.](https://pusher.com/docs/client_api_guide/client_events#trigger-events)\n\nOn the dashboard, click on **App settings** and scroll to the bottom of the page then select the option that says **Enable client events**:\n\n![python-chat-widget-enable-client-events](//images.ctfassets.net/1es3ne0caaid/3wWPgt2CbSKaU8q2swqcGY/778bb6e7512b5160b621789f76fbe743/python-chat-widget-enable-client-events.png)\n\nGreat, now let’s install the Pusher Python library,  so that we can use Pusher in the application:\n\n```\n    $ pip install pusher\n```\n\n## File and folder structure\n\nHere’s a representation of the file/folder structure for this app:\n\n```\n    ├── python-pusher-chat-widget\n           ├── app.py\n           ├── static\n           └── templates\n```\n\nThe `static` folder will contain the static files to be used as is defined by [Flask standards.](http://flask.pocoo.org/docs/0.12/tutorial/folders/) The `templates` folder will hold the HTML templates. In our application, `app.py` is the main entry point and will contain our server-side code.\n\nLet’s create the `app.py` file and then the `static` and `templates` folders.\n\n\n## Building the backend\n\nBefore we start writing code to determine how the frontend of our application will be rendered, let’s fully develop the backend and all of its endpoints so that the frontend has something to communicate with when we build it.\n\nLet’s open the `app.py` file and paste the following code:\n\n``` python\n    // File: ./app.py\n    \n    from flask import Flask, render_template, request, jsonify, make_response, json\n    from flask_cors import CORS\n    from pusher import pusher\n    import simplejson\n    \n    app = Flask(__name__)\n    cors = CORS(app)\n    app.config['CORS_HEADERS'] = 'Content-Type'\n    \n    # configure pusher object\n    pusher = pusher.Pusher(\n    app_id='PUSHER_APP_ID',\n    key='PUSHER_APP_KEY',\n    secret='PUSHER_APP_SECRET',\n    cluster='PUSHER_APP_CLUSTER',\n    ssl=True)\n    \n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    \n    @app.route('/admin')\n    def admin():\n        return render_template('admin.html')\n    \n    @app.route('/new/guest', methods=['POST'])\n    def guestUser():\n        data = request.json\n        pusher.trigger(u'general-channel', u'new-guest-details', { \n            'name' : data['name'], \n            'email' : data['email']\n            })\n        return json.dumps(data)\n    \n    @app.route(\"/pusher/auth\", methods=['POST'])\n    def pusher_authentication():\n        auth = pusher.authenticate(channel=request.form['channel_name'],socket_id=request.form['socket_id'])\n        return json.dumps(auth)\n    \n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=5000, debug=True)\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the values on your Pusher dashboard.\n\nThe logic for this application is simple, we will require a Pusher public channel so that whenever a new customer connects with the chat widget, their details are sent over to the admin (using that public channel) and the admin can subscribe to a private channel (the customer will have to subscribe to this private channel too) using the customer’s email as a unique ID. The admin and that customer can further engage in one to one messaging over that private channel.\n\nLet’s go over the code in the `app.py` file to see how it satisfies the logic we just discussed. We first imported all the required packages, then registered a new Pusher instance. Next, we declared four endpoints:\n\n\n- `/` - This endpoint returns the static HTML template that defines the homepage of this app.\n- `/admin` - This endpoint returns the static HTML template that defines the admin dashboard.\n- `/new/guest/` - This endpoint receives a POST request containing the details of a new customer and pushes it to the public channel — general-channel — in a “new-guest-details” event. The admin on the other side responds to this event by subscribing to a private channel using the user’s email as the unique ID.\n\n\n  We used the trigger method on the Pusher instance here, the trigger method has the following syntax: `pusher.trigger(\"a_channel\", \"an_event\", {key: \"data\"})`. You can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python) to get more information on configuring and using Pusher in Python.\n- `/pusher/auth` - This endpoint is responsible for enabling our applications to connect to private channels. Without this `auth` endpoint, we will not be authorized to send client events over private channels. You can learn more about private channels [here](https://pusher.com/docs/client_api_guide/client_private_channels) and about how to authorize users [here.](https://pusher.com/docs/authenticating_users)\n\n\n## Building the frontend\n\nIn this section, we are going to do the following things:\n\n\n- Create two new files, `index.html` and `admin.html` in the `templates` directory.\n- Create an `img` directory in the `static` directory and add a background image called `bg.jpg` inside it. You can find and download free images [here](http://pexels.com).\n- Create a `css` and `js` directory within the `static` directory. In the `css` directory, create a new `admin.css` and `app.css` file. In the `js` directory, create a new `admin.js` and `app.js` file.\n\nWe will be using [Bootstrap](https://getbootstrap.com/docs/4.0/getting-started/introduction/) as a base style for the application. We will also be using other third-party libraries so let’s fetch the source and place them in the appropriate directory inside the `static` directory.\n\nAdd these files in the `static/js` directory:\n\n\n1. `axios.js` - download the source code [here](http://cdn.jsdelivr.net/npm/axios@0.17.0/dist/axios.min.js).\n2. `bootstrap.js` - download the source code [here](https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js).\n3. `jquery.js` - download the source code [here](https://code.jquery.com/jquery-3.2.1.slim.min.js).\n4. `popper.js` - download the source code [here](https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/popper.min.js).\n\nAdd this file in the `static/css` directory:\n\n\n1. `bootstrap.css` - download the source code [here](https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css).\n\nThe new folder structure should be:\n\n```\n    ├── python-pusher-chat-widget\n      ├── app.py\n      ├── static\n        ├── css\n          ├── admin.css\n          ├── app.css\n          ├── bootstrap.css\n        ├── img\n          ├── bg.jpg\n        ├── js\n          ├── admin.js\n          ├── app.js\n          ├── axios.js\n          ├── bootstrap.js\n          ├── jquery.js\n          ├── popper.js\n      ├── templates\n        ├── admin.html\n        ├── index.html\n```\n\nIf you currently have this folder structure then you are good to go!\n\n### Setting up the homepage view\n\nIn the `templates/index.html` file, paste the following code:\n\n``` html\n    \u003c!-- File: ./templates/index.html --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eSpin Spinner Spinnest!\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/bootstrap.css') }}\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/app.css') }}\"\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cdiv class=\"site-wrapper\"\u003e\n          \u003cdiv class=\"site-wrapper-inner\"\u003e\n            \u003cdiv class=\"cover-container\"\u003e\n    \n              \u003cheader class=\"masthead clearfix\"\u003e\n                \u003cdiv class=\"inner\"\u003e\n                  \u003ch3 class=\"masthead-brand\"\u003eSPIN\u003c/h3\u003e\n                  \u003cnav class=\"nav nav-masthead\"\u003e\n                    \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eFeatures\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eContact\u003c/a\u003e\n                  \u003c/nav\u003e\n                \u003c/div\u003e\n              \u003c/header\u003e\n    \n              \u003cmain role=\"main\" class=\"inner cover\"\u003e\n                \u003ch1 class=\"cover-heading\"\u003eSPIN\u003c/h1\u003e\n                \u003cp class=\"lead\"\u003eSPIN is a simple realtime chat widget powered by Pusher.\u003c/p\u003e\n                \u003cp class=\"lead\"\u003e\n                  \u003ca href=\"#\" class=\"btn btn-lg btn-secondary\"\u003eGO for a SPIN?\u003c/a\u003e\n                \u003c/p\u003e\n              \u003c/main\u003e\n    \n              \u003cfooter class=\"mastfoot\"\u003e\n              \u003c/footer\u003e\n    \n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv class=\"chatbubble\"\u003e\n            \u003cdiv class=\"unexpanded\"\u003e\n                \u003cdiv class=\"title\"\u003eChat with Support\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"expanded chat-window\"\u003e\n              \u003cdiv class=\"login-screen container\"\u003e\n                \u003cform id=\"loginScreenForm\"\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eStart Chat\u003c/button\u003e\n                \u003c/form\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"chats\"\u003e\n                \u003cdiv class=\"loader-wrapper\"\u003e\n                  \u003cdiv class=\"loader\"\u003e\n                    \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cul class=\"messages clearfix\"\u003e\n                \u003c/ul\u003e\n                \u003cdiv class=\"input\"\u003e\n                  \u003cform class=\"form-inline\" id=\"messageSupport\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                      \u003cinput type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"newMessage\" placeholder=\"Enter Message\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSend\u003c/button\u003e\n                  \u003c/form\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e    \n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/jquery.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/popper.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/bootstrap.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/axios.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/app.js') }}\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn this file, we have the HTML for the homepage. We also used Flask’s `url_for` function to dynamically link to all the local scripts and styles that we created. \n\nBecause we require our application to send and receive messages in realtime, we imported the official Pusher JavaScript library with this line of code:\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nWe included some custom classes within the HTML elements, however, these classes will be useless if we do not define them in the matching CSS file, open the `static/css/app.css` file and paste the following code:\n\n``` css\n    /* File: static/css/app.css */\n    a,\n    a:focus,\n    a:hover {\n      color: #fff;\n    }\n    \n    .btn-secondary,\n    .btn-secondary:hover,\n    .btn-secondary:focus {\n      color: #333;\n      text-shadow: none;\n      background-color: #fff;\n      border: .05rem solid #fff;\n    }\n    \n    html,\n    body {\n      height: 100%;\n      background-color: #333;\n    }\n    \n    body {\n      color: #fff;\n      text-align: center;\n      text-shadow: 0 .05rem .1rem rgba(0,0,0,.5);\n    }\n    \n    .site-wrapper {\n      display: table;\n      width: 100%;\n      height: 100%; /* For at least Firefox */\n      min-height: 100%;\n      box-shadow: inset 0 0 5rem rgba(0,0,0,.5);\n      background: url(../img/bg.jpg);\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n    \n    .site-wrapper-inner {\n      display: table-cell;\n      vertical-align: top;\n    }\n    \n    .cover-container {\n      margin-right: auto;\n      margin-left: auto;\n    }\n    \n    .inner {\n      padding: 2rem;\n    }\n    \n    .masthead {\n      margin-bottom: 2rem;\n    }\n    \n    .masthead-brand {\n      margin-bottom: 0;\n    }\n    \n    .nav-masthead .nav-link {\n      padding: .25rem 0;\n      font-weight: 700;\n      color: rgba(255,255,255,.5);\n      background-color: transparent;\n      border-bottom: .25rem solid transparent;\n    }\n    \n    .nav-masthead .nav-link:hover,\n    .nav-masthead .nav-link:focus {\n      border-bottom-color: rgba(255,255,255,.25);\n    }\n    \n    .nav-masthead .nav-link + .nav-link {\n      margin-left: 1rem;\n    }\n    \n    .nav-masthead .active {\n      color: #fff;\n      border-bottom-color: #fff;\n    }\n    \n    @media (min-width: 48em) {\n      .masthead-brand {\n        float: left;\n      }\n    \n      .nav-masthead {\n        float: right;\n      }\n    }\n    \n    .cover {\n      padding: 0 1.5rem;\n    }\n    \n    .cover .btn-lg {\n      padding: .75rem 1.25rem;\n      font-weight: 700;\n    }\n    \n    .mastfoot {\n      color: rgba(255,255,255,.5);\n    }\n    \n    @media (min-width: 40em) {\n      .masthead {\n        position: fixed;\n        top: 0;\n      }\n    \n      .mastfoot {\n        position: fixed;\n        bottom: 0;\n      }\n    \n      .site-wrapper-inner {\n        vertical-align: middle;\n      }\n    \n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 100%;\n      }\n    }\n    \n    @media (min-width: 62em) {\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 42rem;\n      }\n    }\n    \n    .chatbubble {\n        position: fixed;\n        bottom: 0;\n        right: 30px;\n        transform: translateY(300px);\n        transition: transform .3s ease-in-out;\n    }\n    \n    .chatbubble.opened {\n        transform: translateY(0)\n    }\n    \n    .chatbubble .unexpanded {\n        display: block;\n        background-color: #e23e3e;\n        padding: 10px 15px 10px;\n        position: relative;\n        cursor: pointer;\n        width: 350px;\n        border-radius: 10px 10px 0 0;\n    }\n    \n    .chatbubble .expanded {\n        height: 300px;\n        width: 350px;\n        background-color: #fff;\n        text-align: left;\n        padding: 10px;\n        color: #333;\n        text-shadow: none;\n        font-size: 14px;\n    }\n    \n    .chatbubble .chat-window {\n      overflow: auto;\n    }\n    \n    .chatbubble .loader-wrapper {\n        margin-top: 50px;\n        text-align: center;\n    }\n    \n    .chatbubble .messages {\n        display: none;\n        list-style: none;\n        margin: 0 0 50px;\n        padding: 0;\n    }\n    \n    .chatbubble .messages li {\n        width: 85%;\n        float: left;\n        padding: 10px;\n        border-radius: 5px 5px 5px 0;\n        font-size: 14px;\n        background: #c9f1e6;\n        margin-bottom: 10px;\n    }\n    \n    .chatbubble .messages li .sender {\n        font-weight: 600;\n    }\n    \n    .chatbubble .messages li.support {\n        float: right;\n        text-align: right;\n        color: #fff;\n        background-color: #e33d3d;\n        border-radius: 5px 5px 0 5px;\n    }\n    \n    .chatbubble .chats .input {\n        position: absolute;\n        bottom: 0;\n        padding: 10px;\n        left: 0;\n        width: 100%;\n        background: #f0f0f0;\n        display: none;\n    }\n    \n    .chatbubble .chats .input .form-group {\n        width: 80%;\n    }\n    \n    .chatbubble .chats .input input {\n        width: 100%;\n    }\n    \n    .chatbubble .chats .input button {\n        width: 20%;\n    }\n    \n    .chatbubble .chats {\n      display: none;\n    }\n    \n    .chatbubble .login-screen {\n      margin-top: 20px;\n      display: none;\n    }\n    \n    .chatbubble .chats.active,\n    .chatbubble .login-screen.active {\n      display: block;\n    }\n    \n    /* Loader Credit: https://codepen.io/ashmind/pen/zqaqpB */\n    .chatbubble .loader {\n      color: #e23e3e;\n      font-family: Consolas, Menlo, Monaco, monospace;\n      font-weight: bold;\n      font-size: 10vh;\n      opacity: 0.8;\n    }\n    \n    .chatbubble .loader span {\n      display: inline-block;\n      -webkit-animation: pulse 0.4s alternate infinite ease-in-out;\n              animation: pulse 0.4s alternate infinite ease-in-out;\n    }\n    \n    .chatbubble .loader span:nth-child(odd) {\n      -webkit-animation-delay: 0.4s;\n              animation-delay: 0.4s;\n    }\n    \n    @-webkit-keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    }\n    \n    @keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    }\n```\n### Setting up the admin dashboard view\n\nIn the `templates/admin.html` file, paste the following code:\n\n``` html\n    \u003c!-- File: templates/admin.html --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eAdmin\u003c/title\u003e\n        \u003clink href=\"{{ url_for('static', filename='css/bootstrap.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"{{ url_for('static', filename='css/admin.css') }}\" rel=\"stylesheet\"\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n    \n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/jquery.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/popper.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/bootstrap.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/axios.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/admin.js') }}\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nOpen the `static/css/admin.css` file and paste the following code:\n\n``` css\n    /* File: static/css/admin.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    \n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    \n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    \n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    \n    .sidebar .nav-item {\n        width: 100%;\n    }\n    \n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    \n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    \n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    \n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    \n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    \n    tr .sender span {\n        color: #676767;\n    }\n    \n    .response {\n        display: none;\n    }\n```\n\n### Writing the app.js script\n\nIn this section, we will write the script that works with the homepage and supports the customers’ functions. This script will define the logic that will enable a customer to submit the form after filling in his/her details and everything else.\n\nWe will define some helper functions within an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) and these functions will run on the occurrence of several DOM events and possibly pass on the execution to other helper functions.\n\nOpen the `app.js` file and paste the following:\n\n``` javascript\n    // File: static/js/app.js\n    (function() {\n        'use strict';\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n          \n        // ----------------------------------------------------\n        // Chat Details\n        // ----------------------------------------------------\n    \n        let chat = {\n            name:  undefined,\n            email: undefined,\n            myChannel: undefined,\n        }\n    \n    \n        // ----------------------------------------------------\n        // Targeted Elements\n        // ----------------------------------------------------\n    \n        const chatPage   = $(document)\n        const chatWindow = $('.chatbubble')\n        const chatHeader = chatWindow.find('.unexpanded')\n        const chatBody   = chatWindow.find('.chat-window')\n    \n    \n        // ----------------------------------------------------\n        // Register helpers\n        // ----------------------------------------------------\n    \n        let helpers = {\n    \n            // ----------------------------------------------------\n            // Toggles the display of the chat window.\n            // ----------------------------------------------------\n        \n            ToggleChatWindow: function () {\n                chatWindow.toggleClass('opened')\n                chatHeader.find('.title').text(\n                    chatWindow.hasClass('opened') ? 'Minimize Chat Window' : 'Chat with Support'\n                )\n            },\n                \n            // --------------------------------------------------------------------\n            // Show the appropriate display screen. Login screen or Chat screen.\n            // --------------------------------------------------------------------\n        \n            ShowAppropriateChatDisplay: function () {\n                (chat.name) ? helpers.ShowChatRoomDisplay() : helpers.ShowChatInitiationDisplay()\n            },\n    \n            // ----------------------------------------------------\n            // Show the enter details form.\n            // ----------------------------------------------------\n        \n            ShowChatInitiationDisplay: function () {\n                chatBody.find('.chats').removeClass('active')\n                chatBody.find('.login-screen').addClass('active')\n            },\n    \n            // ----------------------------------------------------\n            // Show the chat room messages display.\n            // ----------------------------------------------------\n        \n            ShowChatRoomDisplay: function () {\n                chatBody.find('.chats').addClass('active')\n                chatBody.find('.login-screen').removeClass('active')\n    \n                setTimeout(function(){\n                    chatBody.find('.loader-wrapper').hide()\n                    chatBody.find('.input, .messages').show()\n                }, 2000)\n            },\n    \n            // ----------------------------------------------------\n            // Append a message to the chat messages UI.\n            // ----------------------------------------------------\n        \n            NewChatMessage: function (message) {\n                if (message !== undefined) {\n                    const messageClass = message.sender !== chat.email ? 'support' : 'user'\n    \n                    chatBody.find('ul.messages').append(\n                        `\u003cli class=\"clearfix message ${messageClass}\"\u003e\n                            \u003cdiv class=\"sender\"\u003e${message.name}\u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                        \u003c/li\u003e`\n                    )\n    \n    \n                    chatBody.scrollTop(chatBody[0].scrollHeight)\n                }\n            },\n    \n            // ----------------------------------------------------\n            // Send a message to the chat channel.\n            // ----------------------------------------------------\n        \n            SendMessageToSupport: function (evt) {\n                \n                evt.preventDefault()\n    \n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n    \n                const message = $('#newMessage').val().trim()\n    \n                chat.myChannel.trigger('client-guest-new-message', {\n                    'sender': chat.name,\n                    'email': chat.email,\n                    'text': message,\n                    'createdAt': createdAt \n                });\n                \n                helpers.NewChatMessage({\n                    'text': message,\n                    'name': chat.name,\n                    'sender': chat.email\n                })\n                \n                console.log(\"Message added!\")\n    \n                $('#newMessage').val('')\n            },\n    \n            // ----------------------------------------------------\n            // Logs user into a chat session.\n            // ----------------------------------------------------\n        \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n    \n                // Disable the form\n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n    \n                if ((name !== '' \u0026\u0026 name.length \u003e= 3) \u0026\u0026 (email !== '' \u0026\u0026 email.length \u003e= 5)) {\n                    axios.post('/new/guest', {name, email}).then(response =\u003e {\n                        chat.name = name\n                        chat.email = email\n                        chat.myChannel = pusher.subscribe('private-' + response.data.email);\n                        helpers.ShowAppropriateChatDisplay()\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n    \n                evt.preventDefault()\n            }\n        }\n    \n        // ------------------------------------------------------------------\n        // Listen for a new message event from the admin\n        // ------------------------------------------------------------------\n    \n        pusher.bind('client-support-new-message', function(data){\n            helpers.NewChatMessage(data)\n        })\n    \n    \n        // ----------------------------------------------------\n        // Register page event listeners\n        // ----------------------------------------------------\n    \n        chatPage.ready(helpers.ShowAppropriateChatDisplay)\n        chatHeader.on('click', helpers.ToggleChatWindow)\n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n        chatBody.find('#messageSupport').on('submit', helpers.SendMessageToSupport)\n    }())\n```\n\nAbove we have the JavaScript that powers the clients chat widget. In the code, we start by instantiating Pusher (remember to replace the `PUSHER_*` keys with the keys in your Pusher dashboard).\n\nWe have a `helpers` property that has a few functions attached to it. Each function has a comment explaining what it does right before it is defined. At the bottom of the script is where we register all the events and listeners that make the widget function as expected.\n\n**Writing the admin.js script**\nThe code in the `admin.js` is similar to the `app.js` and functions in a similat manner. Open the `admin.js` add paste the following code:\n\n``` javascript\n    // File: static/js/admin.js\n    (function () {\n        'use strict';\n    \n        // ----------------------------------------------------\n        // Configure Pusher instance\n        // ----------------------------------------------------\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n          });\n    \n        // ----------------------------------------------------\n        // Chat Details\n        // ----------------------------------------------------\n    \n        let chat = {\n            messages: [],\n            currentRoom: '',\n            currentChannel: '',\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        // ----------------------------------------------------\n        // Subscribe to the generalChannel\n        // ----------------------------------------------------\n    \n        var generalChannel = pusher.subscribe('general-channel');\n    \n        // ----------------------------------------------------\n        // Targeted Elements\n        // ----------------------------------------------------\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        // ----------------------------------------------------\n        // Register helpers\n        // ----------------------------------------------------\n    \n        const helpers = {\n    \n            // ------------------------------------------------------------------\n            // Clear the chat messages UI\n            // ------------------------------------------------------------------\n    \n            clearChatMessages: () =\u003e $('#chat-msgs').html(''),\n        \n            // ------------------------------------------------------------------\n            // Add a new chat message to the chat window.\n            // ------------------------------------------------------------------\n        \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.currentRoom) {\n    \n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n        \n            // ------------------------------------------------------------------\n            // Select a new guest chatroom\n            // ------------------------------------------------------------------\n        \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n    \n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text(evt.target.dataset.roomId)\n                }\n    \n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n        \n            // ------------------------------------------------------------------\n            // Reply a message\n            // ------------------------------------------------------------------\n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n    \n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n    \n                const message = $('#replyMessage input').val().trim()\n    \n                chat.subscribedChannels[chat.currentChannel].trigger('client-support-new-message', {\n                    'name': 'Admin',\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n    \n                helpers.displayChatMessage({\n                    'email': chat.currentRoom,\n                    'sender': 'Support',\n                    'text': message, \n                    'createdAt': createdAt\n                })\n    \n    \n                $('#replyMessage input').val('')\n            },\n        }\n    \n    \n          // ------------------------------------------------------------------\n          // Listen to the event that returns the details of a new guest user\n          // ------------------------------------------------------------------\n          \n          generalChannel.bind('new-guest-details', function(data) {\n              \n            chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n    \n            chat.subscribedUsers.push(data);\n    \n            // render the new list of subscribed users and clear the former\n            $('#rooms').html(\"\");\n            chat.subscribedUsers.forEach(function (user, index) {\n    \n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n            })\n    \n          })\n    \n      \n          // ------------------------------------------------------------------\n          // Listen for a new message event from a guest\n          // ------------------------------------------------------------------\n          \n          pusher.bind('client-guest-new-message', function(data){\n              helpers.displayChatMessage(data)\n          })\n    \n    \n        // ----------------------------------------------------\n        // Register page event listeners\n        // ----------------------------------------------------\n        \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n    }())\n```\n\nJust like in the `app.js` we have the `helpers` object that holds the meat of the script and towards the bottom, the listeners and events are called and registered.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n  \n## Running the application\n\nWe can test the application using this command:\n\n```\n    $ flask run\n```\n\nNow if we visit [127.0.0.1:5000](http://127.0.0.1:5000/) and [127.0.0.1:5000/admin](http://127.0.0.1:5000/admin) we should test the application:\n\n![python-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/1SVxOwhxqMKyqcAwY4OS6s/c5663259670daaa2e4737f70f70e1bcd/python-chat-widget-demo.gif)\n\n## Conclusion\n\nIn this article, we have learned how we can leverage the power of Pusher in creating a chat widget powered by a Python backend. The entire code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/python-pusher-chat-widget)","metaTitle":"Build a chat widget with Python and JavaScript","metaDescription":"Use Python and JavaScript to create a simple chat widget and admin panel. Users will be able to initiate chat sessions, and admins will be able to view all sessions and choose one to join."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6rpnzMV0e4S0YqSAaEoyCM","type":"Entry","createdAt":"2018-07-22T02:43:42.230Z","updatedAt":"2018-07-22T02:43:42.230Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Calendar event scheduling in Vue","url":"calendar-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/vue-event-scheduler","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-07-12","description":"Build a calendar using Vue.js, with a Node.js backend. Users are able to add events to the calendar, with all instances of the calendar updating in realtime. ","prerequisite":"You will need Node 6+ and npm installed on your machine.","content":"Today, we’ll be creating a realtime event scheduling application. Using our application, users can easily schedule calendar events and receive realtime updates for new calendar events. We’ll be using Pusher’s pub/sub pattern to get realtime updates and Vue.js for creating the user interface.\n\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of Vue and Node.js is required. Please ensure that you have at least Node version 6\u003e= installed before you begin.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Vue](https://vuejs.org)\n\nHere’s a demo of the final product:\n\n![vuejs-calendar-demo](//images.ctfassets.net/1es3ne0caaid/3Kw1VEeU5aAu8SqAU6SUc2/7ba90e92e78be04b42a63a80cb2bc9e3/vuejs-calendar-demo.gif)\n\n## Initializing the application and installing project dependencies\n\nTo get started, we will use the [vue-cli](https://github.com/vuejs/vue-cli/tree/dev) to bootstrap our application. First, we’ll install the CLI by running `npm install -g @vue/cli` in a terminal.\n\nTo create a Vuejs project using the CLI, we’ll run the following command:\n\n```\n    vue create vue-eventapp\n```\n\nAfter running this command, you will be asked by the CLI to pick a preset. Please select the default preset.\n\n\n\u003e **Note:** the @vue/cli 3.0 is still in beta and should not be used in production. \n \n \nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js vue-fullcalendar@latest date-fns vuejs-datepicker\n```\n\nStart the app dev server by running `npm run serve` in a terminal in the root folder of your project.\n\nA browser tab should open on http://localhost:8080. The screenshot below should be similar to what you see in your browser:\n\n![vuejs-default-page](//images.ctfassets.net/1es3ne0caaid/5ARSy5jJjGu4mUAkC6wKYw/eda6e8a37c38fc7ac178627dcc030e06/vuejs-default-page.png)\n\n## Building the server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a [Pusher account](https://dashboard.pusher.com/accounts/sign_in) and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n    PUSHER_CLUSTER=PUSHER_CLUSTER\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\n\n### Draw route\n\nLet’s create a post route named `schedule`, our application will send requests to this route when a user attempts to schedule events. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    app.post('/schedule', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n      };\n      \n      pusher.trigger('schedule', 'new-event', data);\n      res.json(data);\n    });\n    \n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`schedule`), an event name (`new-event`), and a payload.\n\nStart the server by running `node server` in a terminal in the root folder of your project.\n\n\n## Calendar component\n\nWe’ll be creating a component(`Calendar`), this component will display our calendar with the events scheduled by a user.\n\nCreate a file called `Calendar.vue` in the `src/components` folder of your project. Open the file and copy the code below into it:\n\n``` css\n    // src/components/Calendar.vue\n    \n    \u003ctemplate\u003e\n      \u003cfull-calendar :events=\"events\" /\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import FullCalendar from 'vue-fullcalendar';\n    export default {\n      name: 'Calendar',\n      props: ['events'],\n      components: {\n        FullCalendar\n      }\n    }\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n    .red {\n      background: rgb(235, 77, 77) !important;\n      color: whitesmoke !important;\n    }\n    .blue {\n      background: rgb(59, 59, 163) !important;\n      color: whitesmoke !important;\n    }\n    .orange {\n      background: orange !important;\n      color: white !important;\n    }\n    .green {\n      background: rgb(49, 155, 49) !important;\n      color: white !important;\n    }\n    .blue,\n    .orange,\n    .red,\n    .green {\n      font-size: 13px;\n      font-weight: 500;\n      text-transform: capitalize;\n    }\n    .event-item {\n      padding: 2px 0 2px 4px !important;\n    }\n    \u003c/style\u003e\n```\n\nOur component will make use of the [Vue-fullcalendar](https://github.com/Wanderxx/vue-fullcalendar) library. The library provides a `full-calendar` component. Our component will receive an `events`  prop, a list of events to be bound to the `full-calendar` component. \n\nAlso, we’ve added a few styles to the `style` section of the component. These styles will help theme the events that will be bound to the calendar. Later in the tutorial, we’ll make use of these styles.\n\n\n## Event form component\n\nNow that the we’ve set up the calendar component, let’s create an `EventForm` component that will be used for scheduling new events. \n\nCreate a file `EventForm.vue`  in the `src/components` folder. Copy the following into the file. We’ll break it down into three snippets, the `template` snippet, followed by the `script` and finally the `style` snippet. \n\n### Template\n\nThe template will hold the form element that will handle creation of new events.\n\n``` html\n    // /src/components/EventForm.vue\n    \n    \u003ctemplate\u003e\n      \u003cform @submit.prevent=\"handleSubmit\"\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cinput type=\"text\" placeholder=\"Event title\" v-model=\"event.title\"/\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cdate-picker :placeholder=\"'Start date'\" v-model=\"event.start\" /\u003e \n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cdate-picker :placeholder=\"'End date'\" v-model=\"event.end\"/\u003e \n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003ctextarea placeholder=\"Event description\" rows=\"4\" v-model=\"event.data.description\" \u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003ccolor-picker @colorPicked=\"selectColor\" :color=\"event.cssClass\" /\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cbutton type=\"submit\"\u003eSchedule\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/form\u003e\n    \u003c/template\u003e\n```    \n\nIn the template, we made use of the `date-picker` component, [Vuejs-datepicker](https://github.com/charliekassel/vuejs-datepicker). This component will handle `start` and `stop` date selection for our events. Also, we’ll be able to theme our events using a `color-picker`. We haven’t gone about creating the `color-picker` component but that’s coming soon.\n\n### Script\n\nWe’ll handle all the functionality of our component in the script section. Update the `EventForm.vue` file to include the script section.\n\n``` javascript\n    // src/components/EventForm.vue\n    \u003ctemplate\u003e\n      ...\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import DatePicker from 'vuejs-datepicker';\n    import format from 'date-fns/format';\n    import ColorPicker from './ColorPicker';\n    \n    export default {\n      name: 'EventForm',\n      data(){\n        return {\n          event: {\n            title: '',\n            start: '',\n            end: '',\n            cssClass: '',\n            data: {\n              description: ''\n            }\n          }\n        }\n      },\n      methods: {\n        async handleSubmit(){\n          const start = format(this.event.start, 'YYYY-MM-DD');\n          const end = format(this.event.end, 'YYYY-MM-DD');\n          const event = {\n            ...this.event,\n            start,\n            end\n          }\n          const req = await fetch('http://localhost:4000/schedule', {\n            method: 'POST',\n            body: JSON.stringify(event),\n            headers: {\n              'content-type': 'application/json'\n            }\n          });\n          const res = await req.json();\n          this.resetValues();\n        },\n        selectColor(color){\n          this.event = {\n            ...this.event,\n            cssClass: color\n          }\n        },\n        resetValues(){\n          this.event = {\n            title: '',\n            start: '',\n            end: '',\n            cssClass: '',\n            data: {\n              description: ''\n            }\n          }\n        }\n      },\n      components: {\n        DatePicker,\n        ColorPicker\n      }\n    }\n    \u003c/script\u003e\n```\n\nIn our scripts section, we have one `data` property, `event`, this will hold all the data needed to schedule an event. \nThe `methods` property has three methods. The `handleSubmit` method uses the [date-fns](https://date-fns.org/v1.29.0/docs/format) library to format the `start` and `end` dates and then sends the data to the server to schedule an event. When a response is returned, the data in the response is emitted to the parent component. The `resetvalues` method resets the values to their initial state.\n\nThe `selectColor` method will be bound to the `colorPicked` event emitted by the `color-picker` component. This method is triggered whenever a color is selected.\n\n### Styles\n\nUpdate the component with the following styles:\n\n``` css\n    // src/components/EventForm.vue\n    \u003ctemplate\u003e\n      ...\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      ...\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n      form {\n      display: flex;\n      flex-direction: column;\n      margin-left: 30px;\n    }\n    .input-holder {\n      margin: 10px 0;\n      display: flex;\n      justify-content: flex-start;\n    }\n    .vdp-datepicker {\n      width: 100%;\n    }\n    .vdp-datepicker \u003e div \u003e input {\n      width: 77%;\n    }\n    .input-holder \u003e button {\n      justify-self: center;\n      padding: 12px 25px;\n      border-radius: 0;\n      text-transform: uppercase;\n      font-weight: 600;\n      background: orangered;\n      color: white;\n      border: none;\n      font-size: 14px;\n      letter-spacing: -0.1px;\n      cursor: pointer;\n    }\n    input,\n    textarea {\n      padding: 12px 15px;\n      border: 2px solid rgba(0, 0, 0, 0.2);\n      border-radius: 0;\n      width: 70%;\n      opacity: 0.8;\n      font-size: 15px;\n      font-weight: normal;\n    }\n    input:focus,\n    textarea:focus,\n    button:focus {\n      border: 2px solid orangered;\n      outline: none;\n      box-shadow: 0 2px 3px 1px rgba(0, 0, 0, 0.2);\n    }\n    \u003c/style\u003e\n```\n\nNext, let’s create the `color-picker` component.\n\n\n## Color picker component\n\nThe color component will help us theme our event by letting us select a color that suits the event.\nCreate a file named `ColorPicker.vue` in the `src/components/` directory and update it with the code below:\n\n``` html\n    // src/components/ColorPicker.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv class=\"picker-main\"\u003e \n        \u003ch4 class=\"header\"\u003eSelect event theme\u003c/h4\u003e\n        \u003cdiv class=\"color-picker\"\u003e\n          \u003cdiv class=\"color\" v-for=\"(theme, index) in colors\" :key=\"index\" @click=\"selectColor(theme)\" :class=\"{selected: color === theme, [theme]: theme}\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: 'ColorPicker',\n      props: ['color'],\n      data(){\n        return {\n          colors: ['red', 'green', 'blue', 'orange']\n        }\n      },\n      methods: {\n        selectColor(color){\n          this.$emit('colorPicked', color);\n        }\n      }\n    }\n    \u003c/script\u003e\n    \u003cstyle scoped\u003e\n    .picker-main {\n      width: 55%;\n    }\n    .header {\n      font-size: 14px;\n      text-transform: uppercase;\n      color: orangered;\n      letter-spacing: 0.5px;\n      margin: 0 0 6px;\n      text-align: left;\n    }\n    .color-picker {\n      display: flex;\n      justify-content: space-around;\n    }\n    .color-picker \u003e .color {\n      width: 40px;\n      height: 40px;\n      border-radius: 50%;\n      border: 1.5px solid whitesmoke;\n      cursor: pointer;\n    }\n    .color.selected{\n      box-shadow: 0 2px 3px 1px rgba(0, 0, 0, 0.2);\n      border: 3px solid rgba(0, 0, 0, 0.4);\n    }\n    .color.red {\n      background: rgb(235, 77, 77);\n    }\n    .color.blue {\n      background: rgb(59, 59, 163);\n    }\n    .color.orange {\n      background: orange;\n    }\n    .color.green {\n      background: rgb(49, 155, 49);\n    }\n    \u003c/style\u003e\n```\n\nIn the template section, we loop through an array of `colors`, creating a clickable element that emits a `color` when clicked. The component takes a prop `color` from the parent component.\n\n## App component\n\nNow that we’ve built out the components to be used for our application, let’s render them in the `App` component to create a usable application. Open the `App.vue` file and update it to look like the snippet below:\n\n``` html\n    // src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"main\"\u003e\n          \u003cdiv class=\"calendar-holder\"\u003e\n            \u003ccalendar :events=\"events\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-holder\"\u003e\n            \u003ch3\u003eSchedule an event\u003c/h3\u003e\n            \u003cevent-form /\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import Calendar from './components/Calendar.vue'\n    import EventForm from './components/EventForm.vue'\n    import Pusher from 'pusher-js';\n    export default {\n      name: 'app',\n      components: {\n        Calendar,\n        EventForm\n      },\n      data(){\n        return {\n          events: [{\n            title     :  'event1',\n            start     : '2018-07-09',\n            cssClass  : 'blue',\n            YOUR_DATA : {}\n          },\n          {\n            title     : 'event2',\n            start     : '2018-07-10',\n            end       : '2018-07-13',\n            cssClass  : ['orange']\n          }] \n        }\n      }\n    }\n    \u003c/script\u003e\n    \u003cstyle\u003e\n    #app {\n      font-family: 'Avenir', Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n      margin-top: 60px;\n    }\n    .main {\n      display: flex;\n      align-items: center;\n    }\n    .calendar-holder {\n      width: 65%;\n    }\n    .form-holder {\n      width: 35%;\n    }\n    .form-holder \u003e h3 {\n      color: orangered;\n      text-transform: uppercase;\n      font-size: 16px;\n      text-align: left;\n      margin-left: 30px;\n      margin-bottom: 10px;\n    }\n    \u003c/style\u003e\n```\n\n\nWe’ve populated the `data` property with a list of events. There is a method `handleNewEvent`, this method is bound to the `event-form` component. It appends the new event emitted from the `event-form` component to the list of events.\n\nYou can now check out the current look of the application by visiting http://localhost:8080. Make sure both the vue dev server (`yarn serve`) and the server (`node server`) are running in separate terminals in the root folder of your project.\n\n![vuejs-calendar-partial](//images.ctfassets.net/1es3ne0caaid/1SjKyDBdZaoIa8SCU0Y640/795170b2f077b531810b88aaab9243d6/vuejs-calendar-partial.png)\n\n## Introducing Pusher and realtime updates\n\nOur application will update in realtime whenever there’s a new event added. We’ll be using [Pusher](https://pusher.com)’s pub/sub pattern to enable this functionality in our application.\n\nWe’ll update the `App` component to include the `created` lifecycle. It’s in this lifecycle we’ll initialise Pusher and listen for new events. Open the `App.vue` file and update it to match the snippet below:\n\n``` html\n    // /src/App.vue\n    \u003ctemplate\u003e\n      ...\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import Calendar from './components/Calendar.vue'\n    import EventForm from './components/EventForm.vue'\n    import Pusher from 'pusher-js';\n    \n    export default {\n      name: 'app',\n      components: {\n        ...\n      },\n      data(){\n        ...  \n      },\n      created(){\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true,\n        });\n        const channel = pusher.subscribe('schedule');\n        channel.bind('new-event', (data) =\u003e {\n          this.events = [\n            ...this.events,\n            data\n          ];\n        })\n      }\n    }\n    \u003c/script\u003e\n    \u003cstyle\u003e\n      ...\n    \u003c/style\u003e\n```   \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER`  placeholder strings with your actual credentials.\n\nIn the `created` lifecycle, we initialized Pusher, subscribed to the `schedule` channel and listened for  the `new-event` event. In the callback, we appended the data returned from the event to the list of events.\n\n## Test application\n\nOpen two browsers side by side to observe the realtime functionality of the application. Events scheduled on one browser are picked up by the other browser. Here’s a screenshot of two browsers side by side using the application:\n\n\n\u003e **Note:** Ensure both the server and the dev server are up by running `npm run serve` and `node server` on separate terminal sessions.\n\n![vuejs-calendar-demo](//images.ctfassets.net/1es3ne0caaid/3Kw1VEeU5aAu8SqAU6SUc2/7ba90e92e78be04b42a63a80cb2bc9e3/vuejs-calendar-demo.gif)\n \n\n## Conclusion\n\nWe’ve created an event scheduling application using Vue.js, using Pusher to provide realtime functionality.  You can think up new ideas to extend the application.  It’ll be fun to see what you come up with. The source code for this tutorial is available on [GitHub](https://github.com/HackAfro/vue-event-scheduler) here.","metaTitle":"Calendar event scheduling in Vue","metaDescription":"Use Vue.js and Node.js to create a simple calendar application. Users are able to add events to the calendar, with all instances of the calendar updating in realtime. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iJKA5uH6oMMw8GSGM2ko8","type":"Entry","createdAt":"2018-07-12T21:02:54.294Z","updatedAt":"2020-06-19T13:46:49.924Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using Framework7","url":"chat-app-framework7","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/Kennypee/pusher-framework7-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-07-09","description":"Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel.","prerequisite":"You will need Node and npm or Yarn installed on your machine.","content":"## Introduction\n\nRealtime chat functionality has revitalized the way we communicate over the years. In recent times, customers can speak directly with business owners from their mobile applications and websites. This is a huge plus in technology considering how difficult it was in the past.\n\nFramework7 is a free and open source mobile HTML framework to develop hybrid mobile apps with iOS and Android native look and feel. In this tutorial, we'll build a realtime chat application with Framework7 using Pusher channels. Here’s a preview of what we’ll be building. \n\n![framework7-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/5ksbxBpdDyueuymA0OMEae/45c761be2e92c8b19f8eb55ca8a3a9d9/framework7-chat-app-demo.jpeg)\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Framework7**](http://framework7.io) ****- a framework for building native-like mobile applications with HTML\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our chat app.\n\n\n3. [**Vue.js**](https://vuejs.org/) - an open-source JavaScript framework for building user interfaces\n\n\n4. [**Phonegap**](http://phonegap.com/) - an application framework that enables you to build natively installed applications using HTML and JavaScript. \n\n\n## Setting up the project\n\nThe simplest way to set up a Phonegap project is through the command line interface (CLI). Before we create a Phonegap project, ensure that you have Phonegap installed on your machine. To install Phonegap, run:\n\n```\n    $ npm install -g phonegap\n```\n\nThis will install phonegap on your machine and you can confirm the installation by running the command:\n\n```\n    $ phonegap -v\n```\n\nThis should print the version of the currently installed Phonegap. Now that we have that installed let’s create a Phonegap project. Run:\n\n\n```    \n    // create a phonegap project with the framework7 vue template\n    $ phonegap create pusher-chat --template https://github.com/hollyschinsky/phonegap-template-framework7-vue\n    $ cd pusher-chat\n    //start the server\n    $ phonegap serve\n```\n\n\nIf you get any prompts in the process, it is always safe to say yes within the scope of this demo. The `phonegap serve` command will start your project on `localhost:3000`. If you navigate to it on your browser, you should see this.\n\n![framework7-default-page](//images.ctfassets.net/1es3ne0caaid/6peL2Lzl7imkwesSOiAKuM/3d2898faf0d1debba50b40bd9c0ae337/framework7-default-page.jpeg)\n\n## Setting up Pusher\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![framework7-create-pusher](//images.ctfassets.net/1es3ne0caaid/2X2s4DWEt2cQEmAG6iui4k/a4bd9f45baaa63a44ea6c85c8f2cf22f/framework7-create-pusher.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![framework7-create-channels](//images.ctfassets.net/1es3ne0caaid/2reyE709jys2EO6eOIQKgw/12d2a1d82bd74a28a017eba7a441a6cc/framework7-create-channels.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![framework7-pusher-app-config](//images.ctfassets.net/1es3ne0caaid/55C390SQikyEYaY8uwW4Uc/3ddd7e19bd5134635da595a617e22cf1/framework7-pusher-app-config.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![framework7-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/3zxbKtLyysGEWyko8I2MOq/292dc1a265982eee46b7236043cfb6cb/framework7-pusher-app-keys.png)\n\nSave your Pusher credentials somewhere in your editor where you can quickly retrieve it as we’ll be needing it soon.\n\n\n## Server configurations\n\nWe’ll be using a local Node server to establish communications with the client so as to render messages in realtime. Before we create our server, let’s install the packages it’ll need to run effectively. Back in your project root, run:\n\n```\n    $ npm install --save axios body-parser cors express pusher pusher-js\n```\n\nThen in your code editor, create a new file `server.js` and set it up like so:\n\n``` javascript\n        //server.js\n        const Pusher = require('pusher');\n        const express = require('express');\n        const bodyParser = require('body-parser');\n        const cors = require('cors');\n        const app = express();\n        app.use(cors());\n        app.use(bodyParser.urlencoded({extended: false}));\n        app.use(bodyParser.json());\n        \n        var pusher = new Pusher({\n            appId: 'Your-app-Id',\n            key: 'Your-app-Key',\n            secret: 'Your-app-secret',\n            cluster: 'Your-app-cluster',\n            encrypted: true\n          });\n        app.set('PORT', process.env.PORT || 6000);\n        app.post('/message', (req, res) =\u003e {\n          const message = req.body;\n          pusher.trigger('chat', 'message', message);\n          res.send(message)\n      \n        });\n        app.listen(app.get('PORT'), () =\u003e \n          console.log('Listening at ' + app.get('PORT')))\n```\n\n\u003e Do not forget to replace the placeholder values here with your unique keys from Pusher.\n\nHere we loaded all the necessary middlewares for the Express server and then configured Pusher using the credentials we got from our Pusher dashboard.\n\nWe also created the `/``message` endpoint that will receive and process messages sent in from our app. Finally, we trigger an event named `message` to Pusher Channels on a channel called `chat`. The `chat` channel holds a message payload that contains the `message` sent by the user.\n\nTo start the server, run:\n\n```\n    $ node server\n```\n\nThe above command should output this message in your terminal:\n\n\n```    \n    Listening on port 6000\n``` \n\n## Application layout\n\nNow let’s open the `index.html` file and set it up. This is the entrance to our app and we’ll place a form to collect the user’s name and a button to take them to the chat page. Open the `index.html` file, delete all the code in it and update it with this:\n\n``` html\n    // www/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e \n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-capable\" content=\"yes\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"\u003e\n      \u003ctitle\u003eMy App\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.colors.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/app.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cf7-statusbar\u003e\u003c/f7-statusbar\u003e\n        \u003cf7-views\u003e\n          \u003cf7-view id=\"main-view\" navbar-through :dynamic-navbar=\"true\" main\u003e\n            \u003cf7-navbar back-link=\"Back\" sliding\u003e\n              \u003cf7-nav-center sliding\u003ePusher-Framework7 App \u003c/f7-nav-center\u003e\n            \u003c/f7-navbar\u003e\n      \n            \u003cf7-pages\u003e\n              \u003cf7-page\u003e\n                \u003cf7-list\u003e\n                  \u003c/f7-list-item\u003e\n                        \u003cf7-list-item\u003e    \n                          \u003cf7-input type=\"text\" v-model:value=\"name\" placeholder=\"Your name\" clear-button\u003e\u003c/f7-input\u003e\n                        \u003c/f7-list-item\u003e\n                  \u003c/f7-list-item\u003e\n                  \u003cf7-list-button v-on:click=\"enterChat\"\u003eEnter Chat\u003c/f7-list-button\u003e\n                \u003c/f7-list\u003e\n              \u003c/f7-page\u003e\n            \u003c/f7-pages\u003e\n          \u003c/f7-view\u003e\n        \u003c/f7-views\u003e\n      \u003c/div\u003e\n      \u003ctemplate id=\"page-chat\"\u003e\n        \u003cf7-page\u003e\n    \u003c!-- chat page goes here ... --\u003e\n        \u003c/f7-page\u003e\n      \u003c/template\u003e\n      \n    \u003c!-- Add CDN for Pusher and Axios --\u003e\n      \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n      \u003cscript src=\"cordova.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7-vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNotice we added the CDN for both Pusher and Axios in the scripts above. Next, open the `app.js` file and  replace the code there in it with this:\n\n``` javascript\n    // www/js/app.js\n    \n    (function(){\n    function init(){\n    Vue.use(Framework7Vue)\n    Vue.component('page-chat', {\n      template: '#page-chat',\n    \n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n        }\n      },\n      framework7: {\n        root: '#app',\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    document.addEventListener('deviceready', init, false)\n    })();\n```    \n    \n\nAt this point, if you save both edited files and check back on your browser, you should now get this look:\n\n![framework7-chat-app-stage-1](//images.ctfassets.net/1es3ne0caaid/3CjVXRcJT2Q268I2QyiwCG/4da71e4c5139bcf6a0c6470879a578b5/framework7-chat-app-stage-1.jpeg)\n\nHere we can supply a name and click the **Enter Chat** button to enter the chat page, but at this point it won’t work. That is expected, given that we’ve not defined a function to handle the button click event. To fix that, let’s go ahead and do some data binding between our component and our states. Update the `app.js` file like so:\n\n``` javascript\n    // www/js/app.js\n    \n    // init states\n    var states = {\n        name: '',\n        msgs: []\n    };\n      \n    (function(){\n    function init(){\n    \n    Vue.use(Framework7Vue)\n    \n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      // handle onSend\n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n          if( typeof clear == 'function' ) clear()\n        }\n      }\n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      // handle enterChat button\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n        }\n      },\n      framework7: {\n        root: '#app',\n        /* Uncomment to enable Material theme: */\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    \n    document.addEventListener('deviceready', init, false)\n    })();\n```\n\nHere we defined a states object to hold the name of the user and an array of messages. Then we added the missing callbacks that we defined in our HTML file to handle the click events on the buttons. \n\nIf the user supplies a name and clicks the **Enter Chat** button, it’ll open up the chat page, but if that is not the case, it’ll alert the user to a name. Update your `app.js` file with the snippet above and save. Now go back to the browser, enter a name and click **Enter Chat.** This should now open up the empty chat page.\n\nNext, we’ll set up the chat page to have a simple chat form with an input to collect the message and a button to send it. Open the `index.html` file and update the chat page template section with this code:\n\n``` html\n    // www/index.html\n    // ...\n    \u003cf7-messages\u003e\n      \u003cf7-message v-for=\"msg in msgs\" :name=\"msg.name\" :text=\"msg.text\" :type=\"msg.type\"\u003e\n    \u003c/f7-message\u003e\n    \u003c/f7-messages\u003e\n      \u003cf7-messagebar placeholder=\"type message\" send-link=\"Send\" v-on:submit=\"onSend\" \u003e\n    \u003c/f7-messagebar\u003e\n    // ...\n```    \n\nAdd this code in the section where we left a comment to add chat page. Save the `index.html` file and check back on your browser. The chat page should look like this:\n\n![framework7-chat-app-stage-2](//images.ctfassets.net/1es3ne0caaid/5hX0MmKXSEE2KYKo20kUoM/6a2fb2c3fbf42ac5aef29d016d50e115/framework7-chat-app-stage-2.jpeg)\n\n## Realtime updates\n\nAt this point, we can type messages, but nothing happens when you try to send. This is because we haven’t integrated Pusher. At the beginning we set up Pusher and retrieved our app keys, we’ll now use it to configure our project. Open the `app.js`  file and add this code:\n\n``` javascript\n      // www/js/app.js\n      \n       const pusher = new Pusher('YOUR_PUSHER_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true,\n      });\n      const channel = pusher.subscribe('chat');\n      channel.bind('message', data =\u003e {\n          console.log(data)\n        var type = data.name == states.name ? 'sent':'received'\n        var name = type == 'sent'? states.name : data.name;\n        states.msgs.push({name:name, text:data.text, type:type});\n      });\n      \n      // ...\n```\n\nThis sets up Pusher in our client with the credentials from our dashboard. We subscribe to the `chat` channel we defined on the server and bind our response data to the appropriate view objects to display them on screen.\n\nNow to send the chat to the server when the user clicks the **Send button**, let’s update the onSend function in the `app.js`  file:\n\n``` javascript\n      // www/js/app.js\n      ...\n      \n      // Init Page Components\n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      \n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n            var message = {\n                name: this.name,\n                text: text \n            }\n            axios.post('http://localhost:6000/message', message);\n          if( typeof clear == 'function' ) clear()\n          }\n        }\n      });\n      \n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n          \n        }\n      },\n      ...\n```\n\nHere we define a message object that takes the name of the user and text message to send. Then we use Axios to post the message object to the `/messages` endpoint we defined on the server.\n\n\n## Testing\n\nTo test out the application, ensure that both Phonegap server and the Node server is running. If that’s not the case, you can start the Phonegap server in project root with `phonegap serve` and the Node server with `node server`. \n\nBefore testing your application, I recommend you compare your codes with mine to ensure that you did everything right so as not to encounter any blockers. Compare your `index.html`, `server.js` and `app.js`. If everything looks alright, now go ahead and test the application.\n\nOpen two browser windows to `localhost:3000` and send messages:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8xB4rlOXW-A?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n\n\n## Conclusion\n\nThe importance of realtime engagement of users on any platform cannot be overemphasized. As seen in this tutorial, we were able to implement a realtime chat system with Framework7 and Pusher. I hope you found this tutorial helpful.\n\nFeel free to explore the code for this tutorial on [GitHub](https://github.com/Kennypee/pusher-framework7-chat) and add more features as you deem fit.  ","metaTitle":"Build a chat app using Framework7","metaDescription":"Use Framework7, Vue.js and Node.js to build a simple chat app for Android and iOS. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5vdxhGJceAEUQ0AusccaWE","type":"Entry","createdAt":"2018-07-04T14:13:24.457Z","updatedAt":"2020-06-19T11:03:40.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a football results feed with Go and React","url":"football-feed-go-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-football-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-07-02","description":"Build a realtime football results feed, using Go for the backend and React for the frontend. Admins will be able to send match updates out to any subscribed application.","prerequisite":"You will need Go, dep, Node and npm installed on your machine.","content":"## Introduction\n\nThe World Cup is with us once again. In this article we are going to show how you can add a real-time football results feed to your site so that your users can keep up with the latest scores without needing to go elsewhere.\n\nWe are going to build a system where a football pundit can enter details of matches, and other sites can display a live feed of the results as they are entered.\n\n![go-react-football-feed-demo](//images.ctfassets.net/1es3ne0caaid/41013Qn0XmcY8QcWc4Ikas/f842d3de9f3bdfda7610bdb15ea8c146/go-react-football-feed-demo.gif)\n\n## Prerequisites\n\nThis article focuses on using Go and React. As such, it is important that you have Go already installed and configured on your system - including having the `GOPATH` set up correctly. If you do not know how to do this then the [Go documentation](https://golang.org/doc/install) can explain this all. A certain level of understanding of Go is assumed to follow along with this article. The “[A Tour of Go](https://tour.golang.org/welcome/1)” tutorial is a fantastic introduction if you are new to the language.\n\nWe are also going to use the [dep](https://golang.github.io/dep/) tool to manage the dependencies of our backend application, so make sure that this is correctly installed as well.\n\nFinally, in order to develop and run our pundits web UI you will need to have a recent version of [Node.js](https://nodejs.org/en/) installed and correctly set up. A certain level of understanding of JavaScript is also assumed to follow along with this article.\n\n## Create a Pusher account\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Next click on **Channels apps** on the sidebar, followed by **Create Channels app.** \n\n![go-react-football-feed-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/1S9MC94S2gE40S4CK2OEG0/5f2322e334c6fa1e2d5a3cc53a97a7e0/go-react-football-feed-create-pusher-app.png)\n\nFill out this dialog as needed and then click the **Create my app** button. Then click on **App Keys** and note down the credentials for later.\n\n![go-react-football-feed-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/54CJSIa3o4siOcg2wqimEE/48a3e6990bf8f221badf09f8c9c99e98/go-react-football-feed-pusher-app-keys.png)\n\n## Building the backend service\n\nWe are going to write our backend service using the Go language, using the library to power our HTTP service.\n\nOur service is going to offer the following endpoints:\n\n- POST /match - this will trigger events for half time, extra time and full time.\n- POST /goal - this will trigger events to indicate that a goal has been scored.\n- POST /card - this will trigger events to indicate that a yellow or red card has been given.\n\nTo start with, we need to create an area to work with. Create a new directory under your `GOPATH` in which to work:\n\n```\n    # Mac and Linux\n    $ mkdir -p $GOPATH/src/pusher/football-feed\n    $ cd $GOPATH/src/pusher/football-feed\n    \n    # Windows Powershell\n    mkdir -path $env:GOPATH/src/pusher/football-feed\n    cd $env:GOPATH/src/pusher/football-feed\n```\n\nWe can then initialise our work area for this project. This is done using the `dep` tool:\n\n```\n    $ dep init\n```\n\nDoing this will create the **`Gopkg.toml` and `Gopkg.lock` files used to track our dependencies, and the `vendor` **directory which is used to store vendor dependencies.\n\nThe first thing we want is to be able to send Pusher Channels messages. This is the core of our backend application. For this we will be creating a  new directory called `internal/notifier` in the root of rht project area and then writing a file called `internal/notifier/notifier.go`, as follows:\n\n``` go\n    // internal/notifier/notifier.go\n    package notifier\n    import (\n        \"github.com/pusher/pusher-http-go\"\n    )\n    type Message interface{}\n    type MatchMessage struct {\n        Event     string `json:event`\n        HomeTeam  string `json:homeTeam`\n        AwayTeam  string `json:awayTeam`\n        HomeScore uint16 `json:homeScore`\n        AwayScore uint16 `json_awayScore`\n    }\n    type GoalMessage struct {\n        Player    string `json:player`\n        ForTeam   string `json:forTeam`\n        HomeTeam  string `json:homeTeam`\n        AwayTeam  string `json:awayTeam`\n        HomeScore uint16 `json:homeScore`\n        AwayScore uint16 `json_awayScore`\n        OwnGoal   bool   `json:ownGoal`\n    }\n    type CardMessage struct {\n        Team   string `json:team`\n        Player string `json:player`\n        Card   string `json:card`\n    }\n    type Notifier struct {\n        notifyChannel chan\u003c- Message\n    }\n    func notifier(notifyChannel \u003c-chan Message) {\n        client := pusher.Client{\n            AppId:   \"PUSHER_APP_ID\",\n            Key:     \"PUSHER_KEY\",\n            Secret:  \"PUSHER_SECRET\",\n            Cluster: \"PUSHER_CLUSTER\",\n            Secure:  true,\n        }\n        for {\n            message := \u003c-notifyChannel\n            switch payload := message.(type) {\n            case GoalMessage:\n                client.Trigger(\"match\", \"goal\", payload)\n            case CardMessage:\n                client.Trigger(\"match\", \"card\", payload)\n            case MatchMessage:\n                client.Trigger(\"match\", \"match\", payload)\n            }\n        }\n    }\n    func New() Notifier {\n        notifyChannel := make(chan Message)\n        go notifier(notifyChannel)\n        return Notifier{notifyChannel}\n    }\n    func (notifier *Notifier) Notify(msg Message) {\n        notifier.notifyChannel \u003c- msg\n    }\n```    \n\n\n\u003e **Note:** ensure that PUSHER_APP_ID, PUSHER_KEY, PUSHER_SECRET and PUSHER_CLUSTER are all replaced with values obtained from the Pusher Dashboard when you registered your app.\n\nWe start by defining a number of messages that we can handle - `MatchMessage`, `GoalMessage` and `CardMessage`. We then define our `Notifier`  type that will be handling the actual notifications. This works off of a go-routine so that the actual Pusher Channels messages are sent in the background and do not in any way interfere with the performance of the HTTP requests.\n\nWhen processing a message, we determine the Pusher “event” based on the type of the Message received, and we use the message as-is as the payload.\n\nThe next thing we want is the web server. This will be done by writing a file called `internal/webapp/webapp.go` in our project area, as follows:\n\n``` go\n    // internal/webapp/webapp.go\n    package webapp\n    import (\n        \"net/http\"\n        \"pusher/football-feed/internal/notifier\"\n        \"github.com/gin-contrib/cors\"\n        \"github.com/gin-gonic/gin\"\n    )\n    func StartServer(notify *notifier.Notifier) {\n        r := gin.Default()\n        r.Use(cors.Default())\n        r.POST(\"/match\", func(c *gin.Context) {\n            var json notifier.MatchMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.POST(\"/goal\", func(c *gin.Context) {\n            var json notifier.GoalMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.POST(\"/card\", func(c *gin.Context) {\n            var json notifier.CardMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.Run()\n    }\n```\n\nThis gives us our three routes, each of which does essentially the same:\n\n- Parse the request payload as JSON into an appropriate structure\n- Use the Notifier from above to send a Pusher Channels notification for this message\n\nWe also need our main application file. This will be `/football-feed.go` in our project area, as follows:\n\n``` go\n    // football-feed.go\n    package main\n    import (\n        \"pusher/football-feed/internal/notifier\"\n        \"pusher/football-feed/internal/webapp\"\n    )\n    func main() {\n        notifier := notifier.New()\n        webapp.StartServer(\u0026notifier)\n    }\n```\n\nThe final thing to do is to ensure that our dependencies are all available. This is done by executing:\n\n```\n    $ dep ensure\n```\n\nWe can now start the application by executing `go run football-feed.go`:\n\n```\n    $ go run football-feed.go\n    [GIN-debug] [WARNING] Running in \"debug\" mode. Switch to \"release\" mode in production.\n     - using env:        export GIN_MODE=release\n     - using code:        gin.SetMode(gin.ReleaseMode)\n    \n    [GIN-debug] POST   /match                    --\u003e pusher/football-feed/internal/webapp.StartServer.func1 (4 handlers)\n    [GIN-debug] POST   /goal                     --\u003e pusher/football-feed/internal/webapp.StartServer.func2 (4 handlers)\n    [GIN-debug] POST   /card                     --\u003e pusher/football-feed/internal/webapp.StartServer.func3 (4 handlers)\n    [GIN-debug] Environment variable PORT is undefined. Using port :8080 by default\n    [GIN-debug] Listening and serving HTTP on :8080\n```\n\nAlternatively, we can build an executable using `go build football-feed.go`. This executable can then be distributed however we need to do so - for example, copying it into a Docker container or directly onto our production VMs.\n\nIf we were to make calls to this manually - e.g. by using cURL - then we would see the Pusher Channels events in the debug dashboard:\n\n```\n    \u003e $ curl -v -X POST http://localhost:8080/card -H \"Content-Type: application-json\" --data '{\"team\": \"Russia\", \"player\": \"Aleksandr Golovin\", \"card\": \"yellow\"}'\n    *   Trying ::1...\n    * TCP_NODELAY set\n    * Connected to localhost (::1) port 8080 (#0)\n    \u003e POST /card HTTP/1.1\n    \u003e Host: localhost:8080\n    \u003e User-Agent: curl/7.54.0\n    \u003e Accept: */*\n    \u003e Content-Type: application-json\n    \u003e Content-Length: 67\n    \u003e\n    * upload completely sent off: 67 out of 67 bytes\n    \u003c HTTP/1.1 201 Created\n    \u003c Content-Type: application/json; charset=utf-8\n    \u003c Date: Mon, 25 Jun 2018 13:09:21 GMT\n    \u003c Content-Length: 62\n    \u003c\n    * Connection #0 to host localhost left intact\n    {\"Team\":\"Russia\",\"Player\":\"Aleksandr Golovin\",\"Card\":\"yellow\"}\n```\n\n![go-react-football-feed-event-creator](//images.ctfassets.net/1es3ne0caaid/5u8wfHjneEMwCUaUwmMYcc/d37034bf9266e4d1cbf041b8eae23101/go-react-football-feed-event-creator.png)\n\n## Pundit application\n\nNow that we’ve got our backend that is able to react to messages and send Pusher Channels events, we want to write our Football Pundit application that will actually trigger these messages. This is going to be a simple Create React App application, using Semantic UI to give us some structure to the page.\n\nFirstly, we need to actually create the application. This is done by executing:\n\n```\n    $ create-react-app pundit-ui\n    $ cd pundit-ui\n    $ npm install\n```\n\n\u003e **Note:** you can use “yarn” instead of “npm” if you prefer.\n\nWe then want to add some dependencies that we need for the system:\n\n```\n    $ npm add --save uuid semantic-ui-css semantic-ui-react\n```\n\nOur UI is going to consist of a list of games that we are reporting on. These games will either be Started - in which case the match is underway - or Unstarted - in which case we are still entering the match details.\n\nOur Unstarted Matches will be rendered by a component defined in `src/UnstartedGame.js`, as follows:\n\n``` javascript\n    // src/UnstartedGame.js\n    import React from 'react';\n    import { Segment, Grid, Form, Header, Button } from 'semantic-ui-react';\n    export default function UnstartedGame({game, onTeamUpdated, onPlayerUpdated, onCancel, onStart}) {\n        const homePlayers = [];\n        const awayPlayers = [];\n        for (let i = 1; i \u003c= 11; ++i) {\n            homePlayers.push(\u003cinput placeholder={`Home Player ${i}`}\n                value={game.home.players[`player_${i}`] || ''}\n                onChange={(e) =\u003e onPlayerUpdated('home', `player_${i}`, e.target.value)}\n                key={`home.players.player_${i}`} /\u003e);\n            awayPlayers.push(\u003cinput placeholder={`Away Player ${i}`}\n                value={game.away.players[`player_${i}`] || ''}\n                onChange={(e) =\u003e onPlayerUpdated('away', `player_${i}`, e.target.value)}\n                key={`away.players.player_${i}`} /\u003e);\n        }\n        return (\n            \u003cSegment\u003e\n                \u003cForm\u003e\n                    \u003cGrid\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column\u003e\n                                \u003cHeader as='h2' textAlign='center'\u003eNew Match\u003c/Header\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={2}\u003e\n                                \u003cGrid.Column\u003e\n                                    \u003cinput placeholder=\"Home Team\"\n                                        value={game.home.team}\n                                        onChange={(e) =\u003e onTeamUpdated('home', e.target.value)} /\u003e\n                                \u003c/Grid.Column\u003e\n                                \u003cGrid.Column\u003e\n                                    \u003cinput placeholder=\"Away Team\"\n                                        value={game.away.team}\n                                        onChange={(e) =\u003e onTeamUpdated('away', e.target.value)} /\u003e\n                                \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column\u003e\n                                \u003cHeader as='h2' textAlign='center'\u003ePlayers\u003c/Header\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={2}\u003e\n                                \u003cGrid.Column\u003e{homePlayers}\u003c/Grid.Column\u003e\n                                \u003cGrid.Column\u003e{awayPlayers}\u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column textAlign=\"right\"\u003e\n                                \u003cButton.Group\u003e\n                                    \u003cButton primary onClick={onStart}\u003eStart Game\u003c/Button\u003e\n                                    \u003cButton.Or /\u003e\n                                    \u003cButton negative onClick={onCancel}\u003eCancel\u003c/Button\u003e\n                                \u003c/Button.Group\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                    \u003c/Grid\u003e\n                \u003c/Form\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\nThis renders a large form that has fields for: home team, away team, 11 home players and 11 away players.\n\nOur Started Matches will be rendered by a component defined in `src/StartedGame.js`, as follows:\n\n``` javascript\n    // src/StartedGame.js\n    import React from 'react';\n    import { Segment, Grid, Header, Button, Label, Dropdown, Menu } from 'semantic-ui-react';\n    const gameState = {\n        'first half': 'First Half',\n        'second half': 'Second Half',\n        'finished': 'Full Time',\n        'extra time': 'Extra Time'\n    };\n    export default function StartedGame({ game, onGoal, onCard, onGameEvent }) {\n        const homePlayers = [];\n        const awayPlayers = [];\n        for (let i = 1; i \u003c= 11; ++i) {\n            const playerId = `player_${i}`;\n            let homeLabel;\n            if (game.home.cards[playerId]) {\n                homeLabel=\u003cLabel color={game.home.cards[playerId]} ribbon\u003e{game.home.players[playerId]}\u003c/Label\u003e;\n            } else {\n                homeLabel = game.home.players[playerId];\n            }\n            let awayLabel;\n            if (game.away.cards[playerId]) {\n                awayLabel=\u003cLabel color={game.away.cards[playerId]} ribbon\u003e{game.away.players[playerId]}\u003c/Label\u003e;\n            } else {\n                awayLabel = game.away.players[playerId];\n            }\n            homePlayers.push(\n                \u003cDropdown text={homeLabel}\n                    pointing=\"left\"\n                    className=\"link item\"\n                    key={`home.players.${playerId}}`}\u003e\n                    \u003cDropdown.Menu\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onGoal('home', playerId, 'home')}\u003eGoal\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onGoal('home', playerId, 'away')}\u003eOwn Goal\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onCard('home', playerId, 'yellow')}\u003eYellow Card\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onCard('home', playerId, 'red')}\u003eRed Card\u003c/Dropdown.Item\u003e\n                    \u003c/Dropdown.Menu\u003e\n                \u003c/Dropdown\u003e\n            );\n            awayPlayers.push(\n                \u003cDropdown text={awayLabel}\n                    pointing=\"left\"\n                    className=\"link item\"\n                    key={`away.players.${playerId}}`}\u003e\n                    \u003cDropdown.Menu\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onGoal('away', playerId, 'away')}\u003eGoal\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onGoal('away', playerId, 'home')}\u003eOwn Goal\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onCard('away', playerId, 'yellow')}\u003eYellow Card\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onCard('away', playerId, 'red')}\u003eRed Card\u003c/Dropdown.Item\u003e\n                \u003c/Dropdown.Menu\u003e\n                \u003c/Dropdown\u003e\n            );\n        }\n        return (\n            \u003cSegment\u003e\n                \u003cGrid\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cHeader as='h2' textAlign='center'\u003eMatch\u003c/Header\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={2}\u003e\n                        \u003cGrid.Column textAlign=\"right\"\u003e\n                            \u003cLabel\u003e\n                                {game.home.team}\n                                \u003cLabel.Detail\u003e{game.home.score}\u003c/Label.Detail\u003e\n                            \u003c/Label\u003e\n                        \u003c/Grid.Column\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cLabel\u003e\n                                {game.away.team}\n                                \u003cLabel.Detail\u003e{game.away.score}\u003c/Label.Detail\u003e\n                            \u003c/Label\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column textAlign='center'\u003e\n                            {gameState[game.state]}\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cHeader as='h2' textAlign='center'\u003ePlayers\u003c/Header\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={2}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cMenu vertical borderless secondary style={{width: \"100%\"}}\u003e{homePlayers}\u003c/Menu\u003e\n                        \u003c/Grid.Column\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cMenu vertical borderless secondary style={{width: \"100%\"}}\u003e{awayPlayers}\u003c/Menu\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column textAlign=\"right\"\u003e\n                            \u003cButton.Group\u003e\n                                \u003cButton primary onClick={() =\u003e onGameEvent('finished')}\u003eFinish Game\u003c/Button\u003e\n                                \u003cButton onClick={() =\u003e onGameEvent('second half')}\u003eHalf Time\u003c/Button\u003e\n                                \u003cButton onClick={() =\u003e onGameEvent('extra time')}\u003eExtra Time\u003c/Button\u003e\n                            \u003c/Button.Group\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                \u003c/Grid\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\nThis renders a view that is similar to the previous, but instead of being a form that can be entered it is read-only and has buttons to click to indicate that events have happened. These events can be match-level events - half time, extra time and finish game - or player events - goal scored or card received.\n\nWe then have a single component that displays a list of all the games we are currently working with. This is in `src/Games.js` as follows:\n\n``` javascript\n    // src/Games.js\n    import React from 'react';\n    import { Container, Segment, Button } from 'semantic-ui-react';\n    import uuid from 'uuid/v4';\n    import StartedGame from './StartedGame';\n    import UnstartedGame from './UnstartedGame';\n    export default class Games extends React.Component {\n        state = {\n            games: []\n        }\n        newGameHandler = this.newGame.bind(this)\n        updateTeamHandler = this.updateTeam.bind(this)\n        updatePlayerHandler = this.updatePlayer.bind(this)\n        startGameHandler = this.startGame.bind(this)\n        cancelGameHandler = this.cancelGame.bind(this)\n        goalHandler = this.goalScored.bind(this)\n        cardHandler = this.cardGiven.bind(this)\n        gameEventHandler = this.gameEvent.bind(this)\n        render() {\n            const renderedGames = this.state.games\n                .map((game, index) =\u003e {\n                    if (game.state !== 'unstarted') {\n                        return \u003cStartedGame game={game}\n                            key={game.id}\n                            onGoal={(team, player, goalFor) =\u003e this.goalHandler(game.id, team, player, goalFor)}\n                            onCard={(team, player, card) =\u003e this.cardHandler(game.id, team, player, card)}\n                            onGameEvent={(event) =\u003e this.gameEventHandler(game.id, event)} /\u003e;\n                    } else {\n                        return \u003cUnstartedGame game={game}\n                            key={game.id}\n                            onTeamUpdated={(team, value) =\u003e this.updateTeamHandler(game.id, team, value)}\n                            onPlayerUpdated={(team, player, value) =\u003e this.updatePlayerHandler(game.id, team, player, value)}\n                            onCancel={() =\u003e this.cancelGameHandler(game.id)}\n                            onStart={() =\u003e this.startGameHandler(game.id)} /\u003e;\n                    }\n                });\n            return (\n                \u003cContainer\u003e\n                    \u003cSegment.Group\u003e\n                        {renderedGames}\n                    \u003c/Segment.Group\u003e\n                    \u003cButton onClick={this.newGameHandler}\u003eNew Match\u003c/Button\u003e\n                \u003c/Container\u003e\n            )\n        }\n        goalScored(gameId, team, player, goalFor) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[goalFor].score++;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cardGiven(gameId, team, player, card) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[team].cards[player] = card;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        gameEvent(gameId, event) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game.state = event;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        newGame() {\n            const { games } = this.state;\n            const newGames = [\n                ...games,\n                {\n                    id: uuid(),\n                    state: 'unstarted',\n                    home: {\n                        team: '',\n                        score: 0,\n                        players: {},\n                        cards: {}\n                    },\n                    away: {\n                        team: '',\n                        score: 0,\n                        players: {},\n                        cards: {}\n                    }\n                }\n            ];\n            this.setState({\n                games: newGames\n            });\n        }\n        updateTeam(id, team, value) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game[team].team = value;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        updatePlayer(id, team, player, value) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game[team].players[player] = value;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        startGame(id) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game.state = 'first half';\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cancelGame(id) {\n            const { games } = this.state;\n            const newGames = games.filter((game) =\u003e game.id !== id);\n            this.setState({\n                games: newGames\n            });\n        }\n    }\n```\n\nThis simply renders a list of games, using the appropriate component to render it depending on whether the game has started or finished. It also handles all of the events that can happen in the game, updating our state and ensuring that the games are re-rendered as needed.\n\nFinally we can update our map `App` class in `src/App.js` to render this list of games:\n\n``` javascript\n    // src/App.js\n    import React, { Component } from 'react';\n    import Games from './Games';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cGames /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nAnd the main index of the entire page, in `src/index.js`, ensuring that our styles are loaded correctly:\n\n``` javascript\n    // src/index.js\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import 'semantic-ui-css/semantic.min.css';\n    import App from './App';\n    ReactDOM.render(\u003cApp /\u003e, document.getElementById('root'));\n```\n\nAt this point we can run our application using `npm start` and see the Pundit UI that we have built.\n\n### Triggering backend events\n\nNow that we’ve got our pundit UI, we want it to trigger messages on our backend. This will be done using the Axios library to make HTTP calls to the backend.\n\nFirstly we need to install Axios:\n\n```\n    npm install --save axios\n```\n\nThen we make use of it in our application. All of this functionality goes in `src/Games.js`, which is responsible for handling our events.\n\nFirstly we need to actually include Axios and create a client to use. For this, add the following to the top of the file:\n\n``` javascript\n    // src/Games.js\n    import axios from 'axios';\n    \n    const axiosClient = axios.create({\n        baseURL: 'http://localhost:8080'\n    });\n```\n\nThen we need to actually make the API calls to trigger the messages. These are done in the `goalScored`, `cardGiven` and `gameEvent` methods, as follows:\n\n``` javascript\n    // src/Games.js\n        goalScored(gameId, team, player, goalFor) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[goalFor].score++;\n                }\n                axiosClient.post('/goal', {\n                    player: game[team].players[player],\n                    forTeam: goalFor,\n                    homeTeam: game.home.team,\n                    awayTeam: game.away.team,\n                    homeScore: game.home.score,\n                    awayScore: game.away.score,\n                    ownGoal: team !== goalFor\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cardGiven(gameId, team, player, card) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[team].cards[player] = card;\n                }\n                axiosClient.post('/card', {\n                    team: game[team].team,\n                    player: game[team].players[player],\n                    card\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        gameEvent(gameId, event) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game.state = event;\n                }\n                axiosClient.post('/match', {\n                    event,\n                    homeTeam: game.home.team,\n                    awayTeam: game.away.team,\n                    homeScore: game.home.score,\n                    awayScore: game.away.score\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n```\n\nMost of this is simply extracting the data from the current game state to send to the server.\n\nWe can now use this UI and see the events appearing in the Pusher debug dashboard.\n\n![go-react-football-feed-demo-with-event-creator](//images.ctfassets.net/1es3ne0caaid/IYQVADBV8AyCUmwWIgAaI/615e63cde3e4289b035c7b4092a6c2d0/go-react-football-feed-demo-with-event-creator.gif)\n\n## Live feed of events\n\nWe are going to add our live feed to a Bootstrap enabled page using the [Bootstrap Notify](http://bootstrap-notify.remabledesigns.com/) plugin. This can be used on any website that uses Bootstrap, but for our example we are going to use a single static HTML file as follows:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eFootball Feed\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\n            crossorigin=\"anonymous\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cscript src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/mouse0270-bootstrap-notify/3.1.7/bootstrap-notify.js\" integrity=\"sha256-ZfyZUBGHlJunePNMsBqgGX3xHMv4kaCZ5Hj+8Txwd9c=\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n            const pusher = new Pusher('PUSHER_KEY', {\n              cluster: 'PUSHER_CLUSTER'\n            });\n            const channel = pusher.subscribe('match');\n            channel.bind('goal', function(data) {\n                let message = data.Player + ' scored!';\n                if (data.OwnGoal) {\n                    message += ' (OG)';\n                }\n                $.notify({\n                    title: message,\n                    message: `${data.HomeTeam} ${data.HomeScore} - ${data.AwayScore} ${data.AwayTeam}`\n                }, {\n                    type: 'success',\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n            channel.bind('card', function(data) {\n                let message;\n                let type;\n                if (data.Card === 'yellow') {\n                    message = `Yellow card for ${data.Player} (${data.Team})`;\n                    type = 'warning';\n                } else {\n                    message = `Red card for ${data.Player} (${data.Team})`;\n                    type = 'danger';\n                }\n                $.notify({\n                    message: message\n                }, {\n                    type: type,\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n            channel.bind('match', function(data) {\n                let message;\n                if (data.Event === 'finished') {\n                    message = 'Full Time';\n                } else if (data.Event === 'second half') {\n                    message = 'Half Time';\n                } else if (data.Event === 'extra time') {\n                    message = 'Extra Time';\n                }\n                $.notify({\n                    title: message,\n                    message: `${data.HomeTeam} ${data.HomeScore} - ${data.AwayScore} ${data.AwayTeam}`\n                }, {\n                    type: 'info',\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e **Note:** make sure that PUSHER_KEY and PUSHER_CLUSTER are the same values as the backend is using.\n\nThe above code can be used on any website that uses Bootstrap, so you can easily include it in an existing site to give your users live football news without leaving.\n\nEnsure that the backend and pundit UI is running, and then open `index.html` in a web browser to see the messages appearing as you trigger events.\n\n```\n    # run backend\n    $ go run football-feed.go\n    \n    # run pundit UI\n    $ npm start\n```\n\n![go-react-football-feed-demo](//images.ctfassets.net/1es3ne0caaid/41013Qn0XmcY8QcWc4Ikas/f842d3de9f3bdfda7610bdb15ea8c146/go-react-football-feed-demo.gif)\n\n## Summary\n\nThis article shows how to use Pusher Channels to trigger a live feed of events on a website. The full source code can be found on [GitHub](https://github.com/sazzer/pusher-football-feed). Why not try extending it to support more actions, or even different games.","metaTitle":"Create a football results feed with Go and React","metaDescription":"Use Go and React to create a footbal feed web app. Admins will be able to send match updates out to any subscribed application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4QXgSliGogg2OWc0iQGkW6","type":"Entry","createdAt":"2018-07-04T14:12:16.900Z","updatedAt":"2018-07-04T14:12:16.900Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live comments feature with Ionic","url":"live-comments-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/FeezyHendrix/ionic-realtime-comments-with-sentiment-analysis","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-07-02","description":"Build a mobile app feature with Ionic, allowing users to add comments to a post, and see updates in realtime. The app features sentiment analysis, adding upvotes (or downvotes) to the post, depending on the language of the comments.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Ionic development will be helpful.","content":"## Introduction\n\nSentiment analysis is a way to evaluate written or spoken language to determine if the expression is favorable, unfavorable, or neutral, and to what degree. You can read up about it [here](https://www.clarabridge.com/sentiment-analysis/).\n\nLive comments offer a realtime comment experience that doesn’t require a page refresh. You see comments when they’re posted.\n\nUsing [Ionic](https://ionicframework.com/), you can build a mobile app with HTML, CSS/SCSS, and JavaScript. With [Pusher](https://pusher.com/) we can enable realtime messaging in the chat using Pusher’s pub/sub pattern.\n\nWe’ll be building a live comments application using Pusher, Ionic and the [sentiment](https://github.com/thisandagain/sentiment) library for rating suggestions based on the context of messages received.\n\nUsing our application, users can see the rating of each post using sentiment analysis.\n\nHere’s a demo of the final product:\n\n![ionic-comments-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/3TS8YXmOI0umyCGYaCQWg8/234fc8069d0e70c578a148659f4fb393/ionic-comments-sentiment-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), [Ionic](https://ionicframework.com) and [Node.js](https://nodejs.org/en/) is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Ionic, kindly follow the [tutorial here.](https://ionicframework.com/docs/intro/tutorial/) Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build out our application:\n\n1. [Express](https://expressjs.com/)\n2. [Node](https://nodejs.org/en/)\n3. [Pusher](https://pusher.com/)\n4. [Ionic](https://ionicframework.com)\n\n\n## Setup and folder structure\n\nTo get started, we will use the CLI (command line interface) provided by the Ionic team to initialize our project.\n\nFirst, install the CLI by running `npm install -g ionic cordova`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Ionic App using the CLI, open a terminal and run:\n\n```\n    ionic start liveComments blank\n```\n\nThe command is merely telling the CLI to create a new app called `liveComments` and it should make use of the blank starter template.  While the setup is running, you might get a prompt `\"Would you like to integrate your new app with Cordova to target native iOS and Android?\"`. If you want to start running or testing the application on a mobile device or emulator as you build, then choose yes by typing `Y` and pressing Enter on your keyboard, else type `N` and continue. You might get another prompt   `\"If you would like to integrate ionic pro ?\"` ,  we wouldn’t need that in this tutorial so just type `N` and if you would like to extend the project into production with your team choose `Y`.\n\nOpen the newly created `liveComments`. Your folder structure should look something like this:\n\n```\n    liveComments /\n      node_modules /\n      src / \n        app /\n          assets /\n          pages /\n            home /\n              home.html\n              home.ts\n              home.scss\n```\n\nOpen a terminal inside the app folder and start the application by running: \n\n```\n    ionic serve \n```\n\nAutomatically your default browser should open, and you should see the screenshot below if everything went well.\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Building our server\n\nNow that we have our Ionic application running let’s build our server.\nTo do this, we’ll need to install Express. Express is a fast, unopinionated, minimalist web framework for Node.js. We’ll use this to receive requests from our Ionic application.\n\nRun `npm install express` on a terminal inside the root folder of your project to install Express.\nCreate a file called `server.js` at the root of the project and update it with the code snippet below:\n\n``` javascript\n     // server.js   \n        require('dotenv').config();\n        const express = require('express');\n        const bodyParser = require('body-parser');\n    \n        const app = express();\n        const port = process.env.PORT || 4000;\n    \n        app.use(bodyParser.json());\n        app.use(bodyParser.urlencoded({ extended: false }));\n        app.use((req, res, next) =\u003e {\n          res.header('Access-Control-Allow-Origin', '*');\n          res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n          );\n          next();\n        });\n    \n        app.listen(port, () =\u003e {\n          console.log(`Server started on port ${port}`);\n        });\n```\n\nWe referenced three packages that haven’t been installed, `body-parser`, `pusher` and `dotenv`. Install these packages by running the following command in your terminal.\n\n```\n        npm i body-parser pusher dotenv\n```\n\n\n- body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env). This package is used to avoid adding sensitive information like the `appId` and `secret` into our codebase directly.\n- The dotenv package will load the variables provided in our `.env` file into our environment.\n- CORS: The calls to our endpoint will be coming in from a different origin. Therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n- The `dotenv` library should always be initialized at the start of our file because we need to load the variables as early as possible to make them available throughout the application.\n\nWe also installed the [Pusher](https://pusher.com/) library as a dependency. Follow this [link](https://pusher.com) to create a Pusher account if you haven’t done so already.\n\nLet’s create a `.env` file to load the variables we’ll be needing into the Node environment. Create the file in the root folder of your project and update it with the code below.\n\nYour `.env`  file should look something like the snippet below. We’ll add our Pusher `appId`, `key` and `secret` provided here.\n\n```\n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    PUSHER_CLUSTER=\u003cPUSHER_CLUSTER\u003e\n```\n\nIf you noticed, we added the `dotenv` package at the start of our file. This is done because we need to make the variables available throughout the file.\n\n\n### Send comments\n\nTo enable users to send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js` file with the code below:\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_KEY,\n        secret: process.env.PUSHER_SECRET,\n        cluster: process.env.PUSHER_CLUSTER,\n        encrypted: true,\n    });\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n    );\n      next();\n    });\n    app.post('/message', async (req, res) =\u003e {\n      const { body } = req\n      const { comment } = body\n      const data = {\n        comment,\n        timeStamp: new Date(),\n      };\n      try {\n        pusher.trigger('comments', 'message', data);\n      } catch (e) {}\n      res.json(data);\n    })\n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\n\n- We created a `POST /message` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `comment` in the request body sent by the user.\n- The `data` object contains the `text` and `name` sent by the user. It also includes a timestamp.\n- The `trigger` method which takes a trigger identifier, triggers our `chat` channel.\n- The trigger function also takes a second argument, the event name (`message`), and a payload(`data`).\n- We still go ahead to respond with an object containing the `data` variable we created.\n\n\n## Sentiment analysis\n\n\u003e Sentiment analysis uses data mining processes and techniques to extract and capture data for analysis in order to discern the subjective opinion of a document or collection of documents, like blog posts, reviews, news articles, and social media feeds like tweets and status updates. - [Technopedia](https://www.techopedia.com/definition/29695/sentiment-analysis).\n\nUsing sentiment analysis, we’ll analyze the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user.\n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. To install this library, open a terminal in the root folder of your project and run the following command.\n\n```\n        npm install sentiment\n```\n\nWe’ll update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_KEY,\n        secret: process.env.PUSHER_SECRET,\n        cluster: process.env.PUSHER_CLUSTER,\n        encrypted: true,\n    });\n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    const app = express();\n    const port = process.env.PORT || 4000;\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    app.post('/message', async (req, res) =\u003e {\n      const { body } = req\n      const { message } = body\n      const result = sentiment.analyze(message);\n      const comparative = result.comparative;\n      const data = {\n        message,\n        score : result.score,\n        timeStamp: new Date(),\n      };\n      try {\n        pusher.trigger('comments', 'message', data);\n      } catch (e) {}\n      res.json(data);\n    })\n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\n- Include the sentiment library in the project.\n- `result`: here, we analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message.\n- A new property (`score`) is added to the response data containing the message’s score after analysis.\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Building the UI\n\nLet’s begin building the interface, open `home.html` and update with the code below :\n\n``` html\n    // src/pages/home/home.html\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003e\n          Live Comments\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content padding\u003e\n      \u003c!-- example blog post--\u003e\n      \u003ch1 text-center\u003e Interesting Article\u003c/h1\u003e\n      \u003cp\u003e\n        Once you're done creating the quality content, you still have the challenge of presenting it that clearly dictates what your blog is about. Images, text, and links need to be shown off just right -- otherwise, readers might abandon your content if it's not aesthetically showcased in a way that's both appealing and easy to follow. \u003c/p\u003e\n        \u003cdiv class=\"flex-items\"\u003e\n            \u003cion-row\u003e\n                \u003cion-col col-6\u003e\n                      \u003ch1 float-right\u003e{{rating.good}} \u003cion-icon  name=\"arrow-round-up\" style=\"color : #90EE90; font-size: 25px;\"\u003e\u003c/ion-icon\u003e\u003c/h1\u003e\n                \u003c/ion-col\u003e\n                \u003cion-col col-6\u003e\n                    \u003ch1\u003e{{rating.bad}} \u003cion-icon name=\"arrow-round-down\" style=\"color: #FF0000; font-size: 25px;\"\u003e\u003c/ion-icon\u003e\u003c/h1\u003e\n                \u003c/ion-col\u003e\n              \u003c/ion-row\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"comment-box\"\u003e\n          \u003cion-card *ngFor=\"let comment of comments\"\u003e\n            \u003cion-card-content\u003e\n                  \u003cstrong\u003e{{comment.message}}\u003c/strong\u003e\n                  \u003cp\u003e\n                   {{comment.timeStamp | date : 'H:mm a'}}\n                  \u003c/p\u003e\n            \u003c/ion-card-content\u003e\n           \n          \u003c/ion-card\u003e\n        \u003c/div\u003e\n      \u003cion-footer padding\u003e\n        \u003cion-textarea [(ngModel)]=\"message\" type=\"text\" placeholder=\"Comment .... \"\u003e\u003c/ion-textarea\u003e\n        \u003cbutton ion-button small float-right round (click)=\"sendComment()\"\u003eSend\u003c/button\u003e\n      \u003c/ion-footer\u003e\n      \n    \u003c/ion-content\u003e\n```    \n\nIn the code snippet above:\n\n- We have an `ion-input` element for our users’ comments.\n- A send button to send our comment to the server.\n- We also used the `*ngFor` directive to loop through all our comments from the server and render them inside an `ion-card` element.\n\nOpen `Home.ts` file and update it like so:\n\n``` typescript\n    // src/pages/home/home.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    \n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      comments = [];\n      message: string;\n      url: string = 'http://localhost:4000/message'\n      rating = {\n        bad : 0,\n        good : 0,\n      }\n      constructor(public navCtrl: NavController, public http : HttpClient) {}\n    \n      sendComment(){\n        if(this.message != ''){\n          this.http.post(this.url, {message : this.message}).subscribe((res : any) =\u003e {\n            this.message = '';\n          })\n        }\n      }\n    \n      ionViewDidLoad(){}\n    }\n```    \n\n`sendComment()` : this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of comments.\n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Also to make use of form-related directives, we’ll need to import the `FormsModule`. Update your app module file as follows:\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { HttpClientModule } from '@angular/common/http';\n    import { FormsModule } from '@angular/forms';\n    ...\n    imports: [\n    ...\n    FormsModule,\n    HttpClientModule\n    ]\n    ...\n```\n\n## Styling\n\nOpen `home.scss` and update with the code below:\n\n``` scss\n    page-home {\n        ion-textarea {\n            border-bottom: 1px solid #000000;\n            margin: 0px 5px;\n        }\n        p {\n            text-align: justify;\n        }\n        .comment-box {\n            overflow: scroll;\n            height: 220px;\n        }\n    }\n```    \n\n\n## Introducing Pusher\n\nSo far we have an application that allows users to send in comments, but we want to update the comments under the post in realtime. We’ll include the [Pusher](https://pusher.com/) library in our application to enable realtime features like seeing comments as they come in without having to refresh the page.\n\nOpen the `index.html` file and paste the Pusher CDN like so:\n\n``` html\n    ...\n    \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- add to homescreen for ios --\u003e \n    ... \n```\n\nNow that Pusher has been made available in our project, we’ll create a Pusher Provider to be used application wide. The Ionic CLI can aid in the service creation. Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher-service\n```\n\nThis command simply generates a provider named `pusher-service`. Now open `pusher-service.ts` and update with the code below :\n\n``` typescript\n    // src/provider/pusher-service/pusher-service.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherServiceProvider {\n      channel;\n      constructor(public http: HttpClient) {\n      var pusher = new Pusher(\"PUSHER_KEY\", { \n      cluster: 'eu',\n      encrypted: true,\n      });\n      this.channel = pusher.subscribe('comments');\n    }\n    \n      public init(){\n       return this.channel;\n      }\n    }\n```\n\nFirst, we initialize Pusher in the constructor.\nThe `init()` method returns the Pusher property we created.\nEnsure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\nTo make the provider available in the application, import it into the `app.module.ts` file.\n\n``` typescript\n    // ../src/app/app.module.ts\n    \n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    ....\n    providers: [\n    StatusBar,\n    SplashScreen,\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\n    PusherServiceProvider\n    ]\n    ....\n```\n\nWe’ll make use of this provider in our home page, by binding to the message event and add the comment returned in the event and add it to the comments array. This will be done in the `ionViewDidLoad` lifecycle.\n\n``` typescript\n    // ../src/pages/home/home.ts\n    \n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    \n    constructor(public navCtrl: NavController, public http : HttpClient, private pusher : PusherServiceProvider) {}\n    \n    ...\n    \n    ionViewDidLoad(){\n     const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if(data.score \u003e= 1){\n            this.rating.good = this.rating.good + 1;\n          }\n          else{\n            this.rating.bad = this.rating.bad + 1;\n          }\n          this.comments.push(data);\n        });\n    }\n```\n\nAt this point, your application should have realtime updates when comments are placed. Ensure that the server is running alongside the Ionic development server. If not, run `node server` and `ionic serve` in two separate terminals. Both terminals should be opened in the root folder of your project. \n\nTo test the realtime functionality of the application, open two browsers side-by-side and comment. You’ll notice that votes placed on one reflect on the other browser.\n\n## Conclusion\n\nUsing the sentiment analysis, we are able to see the ratio of good comments to bad. Using [Pusher Channels](https://pusher.com/channels), we were able to implement live comments functionality in our application. You can view the source code for the demo [here](https://github.com/FeezyHendrix/ionic-realtime-comments-with-sentiment-analysis).","metaTitle":"Create a live comments feature with Ionic","metaDescription":"Use Ionic, Node and sentiment analysis to create a mobile app with realtime comments, and an automatic upvote/downvote system."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6DAliEpVCgYEcIgOk4aYOu","type":"Entry","createdAt":"2018-07-06T09:15:49.491Z","updatedAt":"2018-07-06T09:15:49.491Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live voting app with Ionic","url":"live-graph-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/ionic-graph-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-07-02","description":"Build a live voting app using Ionic, with a Node backend. The app replicates the behaviour of a Twitter poll: users can vote for who they expect to win the World Cup.","prerequisite":"You should have Node and npm installed on your machine. Familiarity with Ionic development will be helpful.","content":"\u003e **Data visualization** is viewed by many disciplines as a modern equivalent of visual communication. It involves the creation and study of the visual representation of data. \n\u003e - [Wikipedia](https://en.wikipedia.org/wiki/Data_visualization)\n\n An important advantage of data visualization is how it enables users to more effectively see connections as they are occurring between operating conditions and business performance. Adding realtime functionality using [Pusher](https://pusher.com) improves this experience as data changes are witnessed in realtime.\n\nWe’ll be creating an application that will present data about how football fans predict who wins the current running World Cup. Using our application, users will complete a poll and then see the data from the polls in realtime.\n\nHere’s a screenshot of the final product:\n\n![ionic-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/6bQMCuvpks8wsgkOWwAGgq/f7e885b2d2af1dbd1a5dbbbe711d93a3/ionic-live-graph-demo.png)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), Ionic and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Ionic, kindly follow the tutorial [here](https://ionicframework.com/docs/intro/tutorial/). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Ionic](https://ionicframework.com)\n- [Chart.js](http://www.chartjs.org/)\n\nWe’ll be sending data to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive data in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nWe’ll initialize our project using the Ionic CLI (command line interface). First, install the CLI by running `npm install -g ionic` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Ionic project called `chat-app` using the CLI, open a terminal and run:   \n\n```\n    ionic start ionic-polls blank\n```\n\nThe command is simply telling the CLI to create a new project called `ionic-polls` without a template. \n\nFollow the prompt and integrate your app with Cordova to target IOS and Android.\n\n![ionic-geofence-integrate-cordova](//images.ctfassets.net/1es3ne0caaid/1IUUkS2jWEsGkaoC0ImGA0/a4419e24c715605029dc1edc7a6a60d5/ionic-geofence-integrate-cordova.png)\n\n Type **Y** to integrate Cordova into the application. The next prompt will ask if you want to integrate Ionic pro into the application. If you have a pro account type **Y** and **N** if you don’t.\n\nThe Ionic team provides three ready made starter templates. You can check out the rest of the templates [here](https://ionicframework.com/getting-started).\n\nOpen the newly created folder, your folder structure should look something like this:\n\n```\n    chat-app/\n      resources/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.module.ts\n          app.scss\n          ...\n```\n\nOpen a terminal inside the project folder and start the application by running `ionic serve`. A browser window should pop up and you should see a page like this.\n\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Installing dependencies\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install ng2-charts pusher-js\n```\n\nStart the Ionic development server by running `ionic serve` in a terminal in the root folder of your project.\n\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. Create a file in the root folder of the project and name it `.env`. Copy the the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n    PUSHER_CLUSTER=PUSHER_CLUSTER\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initalized as early as possible in the application.\n\n\n### Sending votes\n\nTo let users send requests to the server, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/vote', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n        // set the selected property of the body to true\n        selected: true,\n      };\n      // trigger a new-entry event on the vote-channel\n      pusher.trigger('vote-channel', 'new-entry', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- We added a POST route(`/vote`) to handle incoming requests.\n- Using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment), we got the body of the request.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`vote-channel`), an event name (`new-entry`), and a payload.\n- The payload being sent contains the body of the request sent in. The `selected` property of the payload is set to `true`.\n\nStart the server by running `node server` in a terminal in the root folder of your project.\n\n\n## Home view\n\nThe home view of the project will house both the polling area and the area where the data is visualized. We’ll present the user with options and a submit button to place vote.\n\nOpen the `home.html` file and replace it with the content below. The `home.html` file is in the `src/pages/home/` directory.\n\n``` html\n    \u003c!-- src/pages/home/home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003e\n          Vote\n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cdiv padding\u003e\n        \u003ch1 class=\"header\"\u003eWho will win the world cup?\u003c/h1\u003e\n        \u003cp class=\"sub-header\"\u003e* Place vote to see results\u003c/p\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"vote-area\" *ngIf=\"!voted\"\u003e\n        \u003cdiv class=\"options\"\u003e\n          \u003cbutton ion-button full class=\"option\" color=\"light\" [ngClass]=\"{active: selectedOption === option}\" *ngFor=\"let option of optionsArray\"\n            (click)=\"selectOption(option)\"\u003e{{options[option].name}}\u003c/button\u003e\n        \u003c/div\u003e\n        \u003cdiv\u003e\n          \u003cbutton ion-button block class=\"submit\" (click)=\"vote()\"\u003eSubmit Vote!\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"result-area\" *ngIf=\"voted\"\u003e\n        \u003c!-- Charts area --\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\n\n\n- In the code snippet above, we looped through `optionsArray` to create a view based on the player’s information. \n- The `vote` method will make use of the `HttpClient`  to send the user’s selection as a request to the server.\n- An option is active if the current `selectedOption` is equal to the option’s name.\n\nVariables used will be defined in the component’s TypeScript file.\n\n### Styling\n\nReplace the contents of `home.scss` with the following:\n\n``` scss\n    // src/pages/home/home.scss\n    \n    page-home {\n      .toolbar-background {\n        background: #1cd8d2; /* fallback for old browsers */\n        background: linear-gradient(to right, #93edc7, #1cd8d2);\n      }\n      .toolbar-title {\n        color: white;\n      }\n      .header {\n        font-size: 35px;\n        line-height: 1.1;\n      }\n       .sub-header{\n        margin: 0;\n        opacity: 0.5;\n        font-size: 13px;\n        font-weight: bold;\n      }\n      .options {\n        margin-top: 1.5rem;\n        padding: 0 17px 5px;\n        .option {\n          margin: 15px 0;\n          padding-top: 32px;\n          padding-bottom: 32px;\n          opacity: 0.6;\n          font-size: 17px;\n          font-weight: bold;\n          box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.2);\n          \u0026.active {\n            border-left-width: 5px;\n            border-left-style: solid;\n            border-image: linear-gradient(to right, #93edc7, #1cd8d2) 1 100%;\n            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.2);\n            opacity: 0.9;\n          }\n        }\n      }\n      .submit {\n        background: #1cd8d2; /* fallback for old browsers */\n        background: linear-gradient(to right, #93edc7, #1cd8d2);\n        border-radius: 0;\n        padding-top: 35px;\n        padding-bottom: 35px;\n        margin-bottom: 0;\n        font-size: 19px;\n        font-weight: bold;\n      }\n      .response{\n        @extend .submit;\n        margin-top: 5rem;\n      }\n    }\n```\n\n\nThese styles are meant to add a bit of life to our application. It also helps distinguish between states during application use. \n\n### Home component\n\nIn the HTML snippet, we made reference to some variables that weren’t yet defined, we’ll create the variables here with the logic behind our application. \n\n``` typescript\n    // src/pages/home/home.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { HttpClient } from '@angular/common/http';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private http: HttpClient,\n      ) {}\n      options = {\n        germany: { name: 'Germany', votes: 0 },\n        spain: { name: 'Spain', votes: 0 },\n        france: { name: 'France', votes: 0 },\n        nigeria: { name: 'Nigeria', votes: 0 },\n      };\n      optionsArray = Object.keys(this.options);\n      chartData = this.optionsArray.map((val) =\u003e this.options[val].votes);\n      selectedOption = '';\n      chartType = 'doughnut';\n      voted = false;\n      selectOption(option) {\n        this.selectedOption = this.selectedOption !== option ? option : '';\n      }\n      computeData(option) {\n        this.options = {\n          ...this.options,\n          [option]: {\n            ...this.options[option],\n            votes: ++this.options[option].votes,\n          },\n        };\n        this.chartData = this.optionsArray.map((val) =\u003e this.options[val].votes);\n      }\n      vote() {\n        if (this.selectedOption) {\n          this.http\n            .post('http://localhost:4000/vote', { option: this.selectedOption })\n            .subscribe((res) =\u003e {\n              this.voted = true;\n            });\n        }\n      }\n      ngOnInit() {\n        \n      }\n    }\n```\n\n\n\n- `vote`: this method makes use of the native HttpClient service to make requests to our server. A request is sent, only if the user has made a selection. When a response is returned the `voted` property is set to true.\n\n\n- `computeData`: when a response is returned, this function takes the `option`  and increments the votes for the selected option.  \n\n\n- `selectOption`: this method will be used to set the `selectedOption` property to the `option`  param passed it. \n\nTo make use of the HttpClient service, we’ll need to import the `HttpClientModule` into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { HomePage } from '../pages/home/home';\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule,\n      ],\n      ...\n      providers: [\n        ...\n        HttpClient\n      ]\n    })\n    export class AppModule {}\n```\n\n\nLet’s check how our application looks at this point. Make sure the server(`node server`) and Ionic dev server(`ionic serve`) are both running.\n\n![ionic-live-graph-homepage](//images.ctfassets.net/1es3ne0caaid/vW6xfrCOECykEMyOSum28/7eb2e7362cf2b6de7a182149e1503994/ionic-live-graph-homepage.png)\n\n\n## Introducing Pusher\n\nSo far we have an application that allows users be a part of the polling process but data updates aren’t happening in realtime.  Let’s create a provider that will make it easier to include Pusher in our components.\n\nWe’ll create a Pusher provider to be used application wide. The Ionic CLI can aid in the provider creation. Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher\n```\n\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.ts` file in the `src/providers/pusher/` directory and update it with the code below.\n\n``` typescript\n    // src/providers/pusher/pusher.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherProvider {\n      constructor() {\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n        });\n        this.channel = pusher.subscribe('vote-channel');\n      }\n      channel;\n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER` string with your actual credentials.\n  \n\nTo make the service available application wide, import it into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    import { PusherProvider } from '../providers/pusher/pusher';\n    \n    @NgModule({\n      ...\n      providers: [\n        ...\n        PusherProvider,\n      ]\n    })\n    export class AppModule {}\n```\n\nThe next step is to include the provider in the `home.ts` file. Using the `PusherProvider`, we’ll listen for `vote` events from the server and update our app in real time according to votes placed by users.\n \nOpen the `home.ts` file and update the `ngOnInit` lifecycle to listen for Pusher events.\n \n``` typescript\n    // src/pages/home/home.ts\n    ...\n    import { PusherProvider } from '../../providers/pusher/pusher';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        ...\n        private pusher: PusherProvider\n      ) {}\n      ...\n      \n      ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('new-entry', (data) =\u003e {\n          this.computeData(data.option);\n        });\n    }\n```\n\nNow our application should receive vote updates in realtime. Let’s include a chart component to visualize the data in the application.\n\n## Charts component\n\nTo visualize the data in our application, we’ll be making use of [ng2-charts](https://valor-software.com/ng2-charts/) to create charts and present the data in a graphical format. Let’s make use of the components provided by the [ng2-charts](https://valor-software.com/ng2-charts/) library. Update the `home.html` file to include the `canvas` provided by [ng2-charts](https://valor-software.com/ng2-charts/).\n\nOpen the `home.html` file and update it with the contents below:\n\n``` html\n    // src/pages/home/home.html\n    \n    ...\n    \n    \u003cion-content\u003e\n      ...\n      \u003cdiv class=\"result-area\" *ngIf=\"voted\"\u003e\n        \u003ccanvas baseChart [data]=\"chartData\" [labels]=\"optionsArray\" [chartType]=\"chartType\"\u003e\u003c/canvas\u003e\n        \u003cdiv ion-button block class=\"response\"\u003eThank you for voting!\u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nTo make use of the `ng2-charts` package, we’ll have to import the `ChartsModule` into our module file.\n\nUpdate the `app.module.ts` file like so:\n\n``` typescript\n    // src/app/app.module.ts\n    ...\n    import {HttpClient, HttpClientModule} from '@angular/common/http';\n    import {ChartsModule} from 'ng2-charts';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule,\n        ChartsModule\n      ],\n      ...\n    })\n    ...\n```\n\n At this point, your application should have realtime updates when votes are placed. Ensure that the server is running alongside the Ionic development server. If not, run `node server` and `ionic serve` in two separate terminals. Both terminals should be opened in the root folder of your project.\n  \nTo test the realtime functionality of the application, open two browsers side-by-side and engage the application. Data updates should be in realtime.\n\n\n## Testing on mobile devices\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\n![ionic-geofence-in-app](//images.ctfassets.net/1es3ne0caaid/4Tto6qC43SyoeuuCwWk6kC/10b2fcce68e32c25cb8da5cfe7e635ad/ionic-geofence-in-app.png)\n\nTo view the application, click on it and you should see a similar view to what was in the browser. Sending messages to the server might have worked in the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-geofence-ngrok](//images.ctfassets.net/1es3ne0caaid/5xPwNwr4DmMCA6k0MaaIqo/d569c60667d1da3659409f57b9a52da5/ionic-geofence-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `home.ts` file that previously had `http://localhost:4000/vote`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/pages/home/home.ts\n    ...\n    export class ChatComponent implements OnInit {\n      ...\n      vote() {\n        ...\n        this.http\n            .post('\u003cNGROK_URL\u003e/vote', data)\n            .subscribe((res) =\u003e {\n              this.voted = true;\n            });\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding URL you copied where the placeholder string is\n\nNow you should be receiving messages sent from the phone on the browser. Preferably you can test it with two mobile devices connected to the same network.\n\n\n![ionic-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/6bQMCuvpks8wsgkOWwAGgq/f7e885b2d2af1dbd1a5dbbbe711d93a3/ionic-live-graph-demo.png)\n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n\n## Conclusion\n\nUsing Pusher,  we’ve built out an application using the pub/sub pattern to recieve realtime updates. With the help of Chart.js, our data was well presented using charts. You can check out the repo containing the demo on [GitHub](https://github.com/HackAfro/ionic-graph-app).","metaTitle":"Build a live voting app with Ionic","metaDescription":"Use Ionic and Node to create a live voting app, similar to a Twitter poll. Users can vote for who they expect to win the World Cup."}}],"defaultValue":"Channels \u0026 JavaScript","queryType":"tag","pages":25,"route":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"9"}}},"page":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"9"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=9 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:38 GMT -->
</html>