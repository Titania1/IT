<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Node.js&page=16 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:41:22 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">169</span> tutorials for “<span class="css-npldjc ehwuahf2">Node.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsd3fd.html?product=Beams&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#C223CE" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Node.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/chart-swift.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Realtime Chart</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime chart in Swift</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Create a simple realtime chart in iOS using Swift, Node.js and Pusher.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/user-status-update-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a user status update in Swift</h3><p class="css-k12xad e5jrto45">Create an iOS application with realtime user status updates, similar to WhatsApp.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/read-receipts-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build read receipts using Swift</h3><p class="css-k12xad e5jrto45">Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pwa-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime PWA with React</h3><p class="css-k12xad e5jrto45">Build a realtime PWA displaying the price information about cryptocurrencies using React.js and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with React Native</h3><p class="css-k12xad e5jrto45">Benefit from the powerful frameworks like React Native and build a live chat app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Multiplayer Game<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a multiplayer quiz game with Vue.js</h3><p class="css-k12xad e5jrto45">Build a realtime multiplayer trivia game with Vue.js, Node.js and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-measuring-arkit.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">AR-VR<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime measuring app with ARKit</h3><p class="css-k12xad e5jrto45">Learn the basics of how to integrate ARKit and Pusher in a iOS app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Multiplayer Game<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Angular</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a battleship game with Angular</h3><p class="css-k12xad e5jrto45">Build an online Battleship game with Angular and use Pusher&#x27;s realtime API to enable two players to play against each ot...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/secure-chat-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a secure chat web app with JavaScript and Auth0 </h3><p class="css-k12xad e5jrto45">Build a chat application with Pusher, add user authentication with Auth0 Lock, and  manage users in the dashboard.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsd0d0.html?tag=Node.js&amp;page=15" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials43c6.html?tag=Node.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials3c57.html?tag=Node.js&amp;page=14" class="css-za1ua3 edg0byb1">14</a><a href="tutorialsd0d0.html?tag=Node.js&amp;page=15" class="css-za1ua3 edg0byb1">15</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsb65c.html?tag=Node.js&amp;page=16" class="css-2wakph edg0byb1">16</a><a href="tutorials189b.html?tag=Node.js&amp;page=17" class="css-5s6711 edg0byb1">17</a><a href="tutorials237b.html?tag=Node.js&amp;page=18" class="css-5s6711 edg0byb1">18</a><a href="tutorialsb101.html?tag=Node.js&amp;page=19" class="css-5s6711 edg0byb1">19</a><a href="tutorials189b.html?tag=Node.js&amp;page=17" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":169,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2g7hdVlJWICOksEsWgW8gW","type":"Entry","createdAt":"2018-02-22T15:02:41.356Z","updatedAt":"2018-02-28T11:28:42.463Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime chart in Swift","url":"chart-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Realtime-iOS-Chart","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2017-10-11","description":"Create a simple realtime chart in iOS using Swift, Node.js and Pusher.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"Nowadays, gathering data is one of the keys to understanding how products are perceived. Gathering some data from users can help you build better products and understand your users. However, all the data in the world would be useless without a way to visualize it.  \n\nIn this article, we will explore how to create a simple realtime chart in iOS. The chart will receive data and update in realtime to the screens of everyone currently logged into your application. We will assume this is a chart that monitors how many visitors are using a website. Let’s begin.\n\nFor context, here is a sample of what we will be building:\n\n![realtime-chart-swift-demo](//images.contentful.com/1es3ne0caaid/jZfPcqCZIkYMW2saIqGSE/d3a698f353264b1b64fe76fa7a1bc99b/realtime-chart-swift-demo.gif)\n\n## Requirements for building a realtime chart in iOS\n\nBefore we begin this tutorial, you will need to have the following requirements settled:\n- A MacBook Pro.\n- [Xcode](https://developer.apple.com/xcode/) installed on your machine.\n- Basic knowledge of [Swift](https://developer.apple.com/swift/) and using Xcode. \n- Basic knowledge of JavaScript (Node.js).\n- [Node.js](https://docs.npmjs.com/getting-started/installing-node) and NPM installed on your machine. \n- [Cocoapods](http://www.raywenderlich.com/12139/introduction-to-cocoapods) ****installed on your machine.\n- A [Pusher](https://pusher.com) application.\n\nWhen you have all the requirements, then we can begin.\n\n## Preparing to create our realtime chart application in Xcode\n\nLaunch Xcode on your Mac and create a new project (call it whatever you want). Follow the new application wizard and create a new **Single-page application**. Once the project has been created, close Xcode and launch your terminal application.\n\nIn the terminal, `cd` to the root of the application directory. Then run the command `pod init`. This will generate a **Podfile**. Update the contents of the Podfile to the contents below (replace `PROJECT_NAME` with your project name):\n\n```\n    platform :ios, '9.0'\n    target 'PROJECT_NAME' do\n      use_frameworks!\n      pod 'Charts', '~\u003e 3.0.2'\n      pod 'PusherSwift', '~\u003e 4.1.0'\n      pod 'Alamofire', '~\u003e 4.4.0'\n    end\n```\n\nSave the Podfile and then go to your terminal and run the command: `pod install`. \n\nRunning this command will install all the third-party packages we need to build our realtime iOS chart application. \n\nThe first package it will install is [Charts](https://github.com/danielgindi/Charts), which is a package for making beautiful charts on iOS. The second package is the Pusher swift SDK. The last package is [Alamofire](https://github.com/Alamofire/Alamofire), a package for making HTTP requests on iOS.\n\nOnce the installation is complete, open the `**.xcworkspace**` file in your project directory root. This should launch Xcode. Now we are ready to start creating our iOS application.\n\n## Creating our realtime chart application views in Xcode\n\nTo begin, we will create the necessary views we need for our realtime chart application. Open the **Main.storyboard** file and let’s start designing our view.\n\nFirst, create a rectangular view from edge to edge at the top of the View Controller in the storyboard. In that view, add a button and add the title “Simulate Visits”. Next, create another view that is also a rectangle, spanning from the end of the first view above to the bottom of the screen. This view will be where we will render the realtime chart.\n\nWhen you are done creating the views, you should have something like shown in the image below. \n\n![realtime-chart-swift-ui](//images.contentful.com/1es3ne0caaid/1O88STS0FuocckSk40waUe/1b585fe12cbece8c88e3b5be91c56d84/realtime-chart-swift-ui.png)\n\nAs it currently stands, the views do nothing. Let us connect some functionality to the iOS chart application view.\n\n## Adding basic functionality to our iOS chart application\n\nAs said before, our application’s views and buttons are not connected to our `ViewController` so let’s fix that.\n\nIn Xcode, while the storyboard is still open, click on the “Show the Assistant Editor” button on the top right of the page to split the view into storyboard and code view. Now, click once on the button you created, and while holding `ctrl`, click and drag the link to the code editor. Then create an `@IBaction` as seen in the images below:\n\n![realtime-chart-swift-building-ui](//images.contentful.com/1es3ne0caaid/1D1EaEKqyEUkmWWMI8cmyw/5116f984e303f60879ac8c79e6430947/realtime-chart-swift-building-ui.png)\n\n![realtime-chart-swift-button-pressed](//images.contentful.com/1es3ne0caaid/6A57x8tLIQA0qoy6KOwyWE/58dcc55659a10f164cd364e26cf36fc7/realtime-chart-swift-button-pressed.png)\n\nWhen the link is complete, you should see something like this added to the code editor:\n\n```\n    @IBAction func simulateButtonPressed(_ sender: Any) {\n    }\n```\n\nGreat! Now that you have created the first link, we will have to create one more link to the chart view.\n\nOn your storyboard, click the view and on the “Identity Inspection” tab, make sure the view is connected to `LineChartView`  as seen below.\n\n![realtime-chart-swift-linechartview](//images.contentful.com/1es3ne0caaid/4OGvHi0ILma0S8YACG0qEa/ca3086f6078f88e2a69e9d12cf1e6b3d/realtime-chart-swift-linechartview.png)\n\nNow that the view is connected to a view class, repeat the same as we did before to link the button, only this time instead of creating an `@IBAction` we will create an `@IBOutlet`. Images are shown below:\n\n![realtime-chart-swift-insert-outlet](//images.contentful.com/1es3ne0caaid/UkxSeK3PoqGiUwwgOmCQs/412ba6c5d70f5a770e9211dd39bb74e8/realtime-chart-swift-insert-outlet.png)\n\n![realtime-chart-swift-outlet](//images.contentful.com/1es3ne0caaid/5ZTSOoHCne2GCoOCwSYkAG/745a9f6c6b6d95c29c56359008ff4cb7/realtime-chart-swift-outlet.png)\n\nWhen the link is complete, you should see something like this added to the code editor:\n\n```\n    @IBOutlet weak var chartView: LineChartView!\n```\n\nFinally, at the top of the `ViewController` import the Charts package. You can add the code below right under `import UIKit` in the `ViewController`.\n\n```\n    import Charts\n```\n\nNow that we have linked both elements to our code, every time the **Simulate Visits** button is pressed, the **simulateButtonPressed** function will be called.\n\n\n## Adding realtime functionality to our iOS chart application\n\nThe final piece of the puzzle will be displaying a chart and making it update in realtime across all devices viewing the chart.\n\nTo achieve this, we will do the following:\n- Create a function that updates our chart depending on the numbers.\n- Make our request button call the backend which will in turn send simulated data to Pusher.\n- Create a function that listens for events from Pusher and, when one is received, it triggers the update chart function we created earlier.\n\n### Create a trigger function to update our chart\nLet’s create the function that updates our chart depending on the numbers supplied to it. Open the `ViewController`, and in it declare a class property right under the class declaration. We will use this property to track the visitors:\n\n```\n    var visitors: [Double] = []\n```\n\nNext, we will add the function that will do the actual update to the chart view:\n\n```\n    private func updateChart() {\n        var chartEntry = [ChartDataEntry]()\n        \n        for i in 0..\u003cvisitors.count {\n            let value = ChartDataEntry(x: Double(i), y: visitors[i])\n            chartEntry.append(value)\n        }\n        \n        let line = LineChartDataSet(values: chartEntry, label: \"Visitor\")\n        line.colors = [UIColor.green]\n        \n        let data = LineChartData()\n        data.addDataSet(line)\n        \n        chartView.data = data\n        chartView.chartDescription?.text = \"Visitors Count\"\n    }\n```\n\nIn the code above, we declare `chartEntry` where we intend to store all our chart data. Then we loop through the available `visitors` and, for each of them, we add a new `ChartDataEntry(x: Double(i), y: visitors[i])` that tells the chart the X and Y positions.\n\nWe set the color the line chart will be displayed in. We create the `LineChartData` and add the `line` which contains our data points. Finally, we add the data to the `chartView` and set the chart view description.\n\n### Make our simulate button call an endpoint\nThe next thing we need to do is make our request button trigger a backend which will in turn send simulated data to Pusher. \n\nTo do this, we need to update the view controller one more time. In the `ViewController` import the Alamofire package right under the Charts package:\n\n```\n    import Alamofire\n```\n\nNow replace the `simulateButtonPressed` function with the code below:\n\n```\n    @IBAction func simulateButtonPressed(_ sender: Any) {\n        Alamofire.request(\"http://localhost:4000/simulate\", method: .post).validate().responseJSON { (response) in\n            switch response.result {\n            case .success(_):\n                _ = \"Successful\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nIn the code below, we use Alamofire to send a POST request to http://localhost:4000/simulate which is a local web server (we will create this backend soon). In a real application, this will typically point to a real web server.\n\nThis endpoint does not take any parameters in order to keep the tutorial simple. We also do not need to do anything with the response. We just need the POST request to be sent every time the simulate visits button is pressed.\n\n### Tie in realtime functionality using Pusher\nTo make all this work, we will create a function that listens for events from Pusher and, when one is received, we save the value to `visitors` and then trigger the update chart function we created earlier.\n\nTo do this, open the `ViewController` and import the `PusherSwift` SDK under the Alamofire package at the top:\n\n```\n    import PusherSwift\n```\n\nNext, we will declare a class property for the Pusher instance. We can do this right under the `visitors` declaration line:\n\n```\n    var pusher: Pusher!\n```\n\nThen after declaring the property, we need to add the function below to the class so it can listen to the events:\n\n```\n    private func listenForChartUpdates() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n    \n        let channel = pusher.subscribe(\"visitorsCount\")\n        \n        channel.bind(eventName: \"addNumber\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let count = data[\"count\"] as! Double\n                self.visitors.append(count)\n                self.updateChart()\n            }\n        })\n        \n        pusher.connect()\n    } \n```\n\nIn the code above, we instantiate Pusher and pass in our key and the cluster (you can get your key and cluster from your Pusher application’s dashboard). We then subscribe to the `visitorsChannel` and bind to the event name `addNumber` on that channel.\n\nWhen the event is triggered, we fire the logic in the callback which simply appends the count to `visitors` and then calls the `updateChart` function, which updates the actual Chart in realtime.\n\nFinally we call `pusher.connect()` which forms the connection to Pusher.\n\nIn the `viewDidLoad` function just add a call to the `listenForChartUpdates` method:\n\n```\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        // ...stuff    \n    \n        listenForChartUpdates()\n    }\n```\n\nThat’s all! We have created our application in Xcode and we are ready for testing. However, to test, we need to create the backend that we send a `POST` request to when the button is clicked. To create this backend, we will be using Node.js. Let’s do that now.\n\n\n## Creating the backend service for our realtime iOS chart application\n\nTo get started, create a directory for the web application and then create some new files inside the directory:\n\nFile: **index.js**\n \n```\n    // -------------------------------------------------------\n    // Require Node dependencies\n    // -------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let bodyParser = require('body-parser');\n    let app        = express();\n    \n    // Instantiate Pusher\n    let pusher     = new Pusher(require('./config.js'));\n    \n    // -------------------------------------------------------\n    // Load express middlewares\n    // -------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // -------------------------------------------------------\n    // Simulate multiple changes to the visitor count value,\n    // this way the chart will always update with different\n    // values.\n    // -------------------------------------------------------\n    \n    app.post('/simulate', (req, res, next) =\u003e {\n      var loopCount = 0;\n      let sendToPusher = setInterval(function(){\n        let count = Math.floor((Math.random() * (100 - 1)) + 1)\n        pusher.trigger('visitorsCount', 'addNumber', {count:count})\n        loopCount++;\n        if (loopCount === 20) {\n          clearInterval(sendToPusher);\n        }\n      }, 2000);\n      res.json({success: 200})\n    })\n    \n    \n    // Handle index\n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    // Handle 404's\n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    // -------------------------------------------------------\n    // Serve application\n    // -------------------------------------------------------\n    \n    app.listen(4000, function(){\n        console.log('App listening on port 4000!')\n    });\n```\n\nThe file above is a simple Express application written in JavaScript. We instantiate all the packages we require and configure pusher using a config file we will create soon. Then we create a route `/simulate` and in this route we trigger the `addNumber` event in the `visitorCount` channel. This is the same channel and event the application is listening for.\n\nTo make it a little easier, we use `setInterval` to send a random visitor count to the Pusher backend every 2000 milliseconds. After looping for 20 times, the loop stops. This should be sufficient to test our application.\n\nCreate the next file **config.js**:\n\n``` language-javascript\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n    };\n```\n\nReplace the `PUSHER_APP_*` keys with the credentials from your own Pusher application.\n\nThe next and final file is **package.json**:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nIn this file we simply declare dependencies.\n\nNow open terminal and `cd` to the root of the web application directory and run the commands below to install the NPM dependencies and run the application respectively:\n\n```\n    $ npm install\n    $ node index.js\n```\n\nWhen installation is complete and the application is ready you should see the output below:\n\n![realtime-chart-swift-output](//images.contentful.com/1es3ne0caaid/GOS7Vf8b04SEGowUu40aC/692d59e41b38bf987567d0b34edb9379/realtime-chart-swift-output.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![realtime-chart-swift-arbitrary-loads](//images.contentful.com/1es3ne0caaid/6lABWfuYrCam8Wa2IWAoQ2/b495564400cd813ca96cc8a35007c0d0/realtime-chart-swift-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n## Conclusion\n\nThis article has shown you how you can combine Pusher and the Charts package to create a realtime iOS chart application. There are many other chart types you can create using the package but, for brevity, we have done the easiest. You can explore the other chart types and even pass in multiple data points per request.","metaTitle":"Build a realtime chart in Swift","metaDescription":"Create a realtime chart in iOS using Swift, Node.js and Pusher. Receive data and updates live info on the screens of everyone logged into your application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1BUhApV5HiM4QEssCU2m8s","type":"Entry","createdAt":"2018-02-22T15:02:41.414Z","updatedAt":"2018-02-28T13:05:55.791Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a user status update in Swift","url":"user-status-update-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-ios-status-update","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2017-10-05","description":"Create an iOS application with realtime user status updates, similar to WhatsApp.","prerequisite":"A good knowledge of Swift and a basic understanding of JavaScript are needed to follow this tutorial.","content":"When building chat applications, it is not uncommon to see something like a friends’ list with the status of the friend. Applications like WhatsApp have this feature and it is very useful to check the status of your friend and know if it is wise to send them a message at that point.\n\nWe are going to be building a similar feature in a make-believe iOS chat application. We are going to be using [Pusher](https://pusher.com) to implement realtime features to the application so that when someone posts a new status update you can see it change in realtime.\n\nHere is a screen recording of how our application will look when we are done.\n\n![user-status-update-swift-demo](//images.contentful.com/1es3ne0caaid/45c2mCELhCY0MqasmiEcww/36df51c7c75bc3fa1d80fc98b78c548a/user-status-update-swift-demo.gif)\n\n## Getting our project ready\n\nTo get started, we need to create the iOS project and then install some dependencies that’ll be needed for the application to function correctly. Let us begin.\n\n### Setting up our project in Xcode\n\nLaunch Xcode on your machine and create a new project. Create a single application project and follow the wizard until you get to the main storyboard. Once you are there, exit Xcode.\n\nIn your terminal, `cd` to the Xcode project directory and then run the command below:\n\n```\n    $ pod init\n```\n\nThis will create a `Podfile` inside the root of your application. The Podfile is where we will define Cocoapods dependencies. Open in your text editor and replace with the following:\n\n```\n    platform :ios, '8.4'\n    \n    target 'project_name' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 4.0'\n      pod 'Alamofire', '~\u003e 4.4'\n    end\n```\n\nIn the above, we have just specified the dependencies we want CocoaPods to install into our application. Do not forget to substitute the *project_name*  for your actual project name.\n\nNow go to the terminal and run the command:\n\n```\n    $ pod install\n```\n\nThis should install all of the dependencies and libraries we have specified in our `Podfile`. Great! Finally, open the project directory and double-click the `.xcworkspace` file in the directory to launch your project workspace in Xcode.\n\n## Creating the User Interface of our realtime iOS application\n\nNow that we have created the project in Xcode and have successfully installed all the dependencies, the next thing we will want to do is create the user interface of our iOS application. Open the `main.storyboard` file in Xcode and let’s start designing the UI.\n\nThis is what we want to have at the end of this section:\n\n![user-status-update-swift-ui](//images.contentful.com/1es3ne0caaid/1MXWYD0FhusWmOum0MgASO/d8f41a237a06c6be7cbac1666fa15cc2/user-status-update-swift-ui.png)\n\nAdd a Navigation Controller in your canvas and make it the root view controller. When you have done this, you then need to update the `TableViewController` attached to the Navigation Controller. \n\nFirst, create a new class in Xcode using `ctrl+n`; the class name should be `FriendsViewController` and it should extend `UITableViewController`. Then, in the `main.storyboard` file, make sure you make the `TableViewController`  use the `FriendsViewController` as its custom class.\n\n![user-status-update-swift-customclass](//images.contentful.com/1es3ne0caaid/4FMHQURO52MAecQ0CIeSmG/40a1085f2b4d1fa5b8e202ef35a78f4e/user-status-update-swift-customclass.png)\n\n### Configuring the prototype cells\n\nNow that we have created the table view controller, we need to configure its cells to match what we are trying to achieve. \n\nClick on “Prototype Cells” on the main storyboard file and make the attributes inspector look something close to the image below. \n\n\u003e 💡 **For the image**  `**avatar.png**`**, you can add a 45x45 pixel image to your Xcode project and use that as the image for the cell.**\n\n![user-status-update-swift-table-view-cell](//images.contentful.com/1es3ne0caaid/YpC4JFoP8kKGyk8KigmKE/ea9c7a48bbc1c2a40663a4ed817f5c77/user-status-update-swift-table-view-cell.png)\n\nOne last thing we can do (which is completely optional) is changing the navigation bar color for our application. Let’s do that.\n\nOpen the `AppDelegate` class and in the `application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)` method paste the following:\n\n```\n    UINavigationBar.appearance().barTintColor = UIColor(red: 18.0/255.0, green: 140.0/255.0, blue: 126.0/255.0, alpha: 1.0)\n    UINavigationBar.appearance().tintColor = UIColor.white\n    UINavigationBar.appearance().titleTextAttributes = [NSForegroundColorAttributeName: UIColor.white]\n```\n\nWith this, you have finished creating the UI for the application and all that is left is the functionality to support it. Let us do that now.\n\n\n## Creating the functionality of our realtime iOS application\n\nFor the functionality, we will divide it into two parts. The first part will focus on adding the functionality for updating the status, and the second part will focus on making the updates realtime.\n\n### Creating the initial functionality: Update status\nLets open `FriendsViewController` and make some modifications. The first modification will be adding an update “Status” button to the top right corner of the navigation bar. \n\nInside the `viewDidLoad` method of the controller, add the code below:\n\n```\n    navigationItem.title = \"Friends List\"\n    navigationItem.rightBarButtonItem = UIBarButtonItem(\n        title: \"Status\",\n        style: .plain,\n        target: self,\n        action: #selector(showPopup(_:))\n    )\n```\n\nThe code above simply sets the title of the controller in the navigation bar and adds a button to the right side of the navigation bar. \n\nIf you notice, in the `action` parameter it points to a method `showPopup` so let us create this method. Add this method to the controller:\n\n```\n    public func showPopup(_ sender: Any) {\n        let alertController = UIAlertController(\n            title: \"Update your status\",\n            message: \"What would you like your status to say?\",\n            preferredStyle: .alert\n        )\n        \n        alertController.addTextField(configurationHandler: {(_ textField: UITextField) -\u003e Void in\n            textField.placeholder = \"Status\"\n        })\n    \n        alertController.addAction(UIAlertAction(title: \"Update\", style: .default, handler: {(_ action: UIAlertAction) -\u003e Void in\n            let status = (alertController.textFields?[0].text)! as String\n            self.postStatusUpdate(message: status)\n        }))\n    \n        alertController.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        \n        present(alertController, animated: true, completion: nil)\n    }\n```\n\nSo what we did here is, when the action is called and the `showPopup` method is invoked, the application will display a popup box that asks the user to input their status.\n\nRight now, the popup calls a method `postStatusUpdate` which does not exist in our application. Let us create this method now.\n\nIn the view controller, add the method below:\n\n```\n    public func postStatusUpdate(message: String) {\n        let params: Parameters = [\"username\": username, \"status\": message]\n        \n        Alamofire.request(FriendsViewController.API_ENDPOINT + \"/status\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                _ = \"Updated\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nIn this method, we are using the `Alamofire` library to make a request to an endpoint `FriendsViewController.API_ENDPOINT + \"/status``\"` (which does not yet exist). Right now, because we have not imported the Alamofire library nor defined `FriendsViewController.API_ENDPOINT` we will get errors.\n\nAt the top of the view controller, import the `Alamofire` library:\n\n```\n    import 'Alamofire'\n```\n\nAlso, inside the class, after the class definition, add the following to declare the `API_ENDPOINT` which will point to the remote HTTP server.\n\n```\n    static let API_ENDPOINT = \"http://localhost:4000\";\n```\n\n\u003e 💡  **The endpoint we are using now is a local server which will be created later on in the article. If you are using a remote server, you will need to replace this value with the URL of your server.**\n\nSo, right now, when you run the application and click the “Status” button it will bring a popup and you can enter your update. However, because we have not yet created a backend to respond to this call, it will fail and not do anything. We will get to that later in the article.\n\n### Updating the default table view controller methods\nThe table view controller comes with some methods by default, and we will quickly change them to fit our application.\n\nOpen the view controller and update the method `numberOfSections`. Make the return value 1. This will make sure that the first and only section is displayed.\n\nNext, update the `tableView(tableView: UITableView, numberOfRowsInSection: section)` method and make the return value `friends.count`. This will make sure that the right amount of rows are created for each entry on the `friends` list.\n\nTo make the cells display the details of each friend, update the contents of the `tableView(tableView:UITableView, cellForRowAt indexPath:IndexPath)` method with the code below:\n\n```\n    let cell = tableView.dequeueReusableCell(withIdentifier: \"friends\", for: indexPath)\n    \n    var status   = friends[indexPath.row][\"status\"]\n    \n    if status == \"\" {\n        status = \"User has not updated status!\"\n    }\n    \n    cell.detailTextLabel?.textColor = UIColor.gray\n    \n    cell.imageView?.image = UIImage(named: \"avatar.png\")\n    cell.textLabel?.text = friends[indexPath.row][\"username\"]\n    cell.detailTextLabel?.text = status\n    \n    return cell\n```\n\nThe code above simply gets the current cell and updates the required cell labels with the status, username and image (in case you want to add another image).\n\nFinally, add a new method to the view controller:\n\n```\n    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n        return 75.0\n    }\n```\n\nThis will just increase the row height of the table to be equal to **75.0**. This will make it easier to accommodate the contents of the cell.\n\n## Using Pusher to add a realtime update status to our iOS application\n\nNow, before we add the realtime online status updates using Pusher, we want to add some sort pseudo friends listing.\n\nWe will do the friends listing using Pusher. We will accomplish this by creating a class property that is not persistent, and in this variable, we will store details of anyone that comes online.\n\n### Adding a pseudo friends list\nIn the view controller, add some new properties:\n\n```\n    var friends : [[String:String]] = []\n    var username : String = \"\"\n    var pusher : Pusher!\n```\n\nThe `friends` property will store all the users who come online, the `username` property will store a random username for the current user, and the `pusher` property will store the Pusher library instance.\n\nNow, in the `viewDidLoad` method, add the following code:\n\n```\n    username = \"Anonymous\" + String(Int(arc4random_uniform(1000)))\n    \n    listenForRealtimeEvents()\n    \n    // --- Update online presence at intervals --- //\n    let date = Date().addingTimeInterval(0)\n    let timer = Timer(fireAt: date, interval: 1, target: self, selector: #selector(postOnlinePresence), userInfo: nil, repeats: true)\n    RunLoop.main.add(timer, forMode: RunLoopMode.commonModes)\n```\n\nOn line 1, we just assign the `username` property a random string as a username. \n\nOn line 3, we call a method `listenForRealtimeEvents` that does not yet exist (we will create this later). \n\nAnd on line 6 - 8, we just basically added a looping call to the `postOnlinePresence` (also doesn’t exist yet). This call will basically update your online presence every second.\n\nLet us create the `listenForRealtimeEvents` method now. Add the following code to the view controller:\n\n```\n    private func listenForRealtimeEvents() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n        \n        let channel = pusher.subscribe(\"new_status\")\n        let _ = channel.bind(eventName: \"online\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let username = data[\"username\"] as! String\n                \n                let index = self.friends.index(where: { $0[\"username\"] == username })\n                \n                if username != self.username \u0026\u0026 index == nil {\n                    self.friends.append([\"username\": username, \"status\": \"No Status\"])\n                    self.tableView.reloadData()\n                }\n            }\n        })\n        \n        pusher.connect()\n    }\n```\n\nIn the method we just created, we just instantiated the Pusher library with our Pusher key and application cluster. Then we subscribed to a Pusher channel called **new_status** and, on that channel, we started listening for the event called **online.**\n\nIn the callback, when the event listener is triggered, we get the username from the event. We then check if there is username in the list of `friends` that matches. If there isn’t, we append it to the friends’ list and reload the table data.\n\nSo, in summary, every time someone comes online it appends the name to the friends’ list and reloads the table view.\n\nNext, we will create the method `postOnlinePresence` that will periodically post the current users online presence so others can pick it up. In the view controller add the code below:\n\n```\n    public func postOnlinePresence() {\n        let params: Parameters = [\"username\": username]\n        \n        Alamofire.request(FriendsViewController.API_ENDPOINT + \"/online\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                _ = \"Online\"\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nThe code above simply hits an endpoint and thus marks the user as online.\n\n### Adding status updates to the application with Pusher\nThe final part of our iOS application will be adding the listener for the updates so that every time someone updates their status, the update is added.\n\nTo do this, open the `listenForRealtimeEvents` method and add the following after instantiating the pusher variable:\n\n```\n    let channel = pusher.subscribe(\"new_status\")\n    let _ = channel.bind(eventName: \"update\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let username = data[\"username\"] as! String\n            \n            let status = data[\"status\"] as! String\n            \n            let index = self.friends.index(where: { $0[\"username\"] == username })\n            \n            if index != nil {\n                self.friends[index!][\"status\"] = status\n                self.tableView.reloadData()\n            }\n        }\n    })\n```\n\nThe above code creates a listener for the **update** event to the **new_status** channel. When the event is triggered, the callback checks if the username is part of the friends’ list. If it is, it updates the status of that entry and reloads the table view data.\n\nNow we have successfully added the realtime features to our application. The next thing we want to do is create a backend to help us actually trigger Pusher events that can be picked up by our iOS application.\n\n\n## Creating the NodeJS backend for our realtime iOS status updates app\n\nCreate a directory for the web application and then create some new files:\n\n```\n**index.js**\n\n    // ------------------------------------------------------\n    // Import all required packages and files\n    // ------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let app        = express();\n    let bodyParser = require('body-parser')\n    \n    let pusher     = new Pusher(require('./config.js'));\n    \n    // ------------------------------------------------------\n    // Set up Express middlewares\n    // ------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // ------------------------------------------------------\n    // Define routes and logic\n    // ------------------------------------------------------\n    \n    app.post('/status', (req, res, next) =\u003e {\n      let payload = {username: req.body.username, status: req.body.status};\n      pusher.trigger('new_status', 'update', payload);\n      res.json({success: 200});\n    });\n    \n    app.post('/online', (req, res, next) =\u003e {\n      let payload = {username: req.body.username};\n      pusher.trigger('new_status', 'online', payload);\n      res.json({success: 200});\n    });\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    \n    // ------------------------------------------------------\n    // Catch errors\n    // ------------------------------------------------------\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found: ');\n        err.status = 404;\n        next(err);\n    });\n    \n    \n    // ------------------------------------------------------\n    // Start application\n    // ------------------------------------------------------\n    \n    app.listen(4000, () =\u003e console.log('App listening on port 4000!'));\n```\n\nIn this file, we have created a basic Express application. The application has two important endpoints: `POST /online` and `POST /status`. They both trigger Pusher events with a payload which will be picked up by listeners in our iOS application.\n\nNext create the **config.js** file:\n\n```\n    module.exports = {\n        appId: 'PUSHER_ID',\n        key: 'PUSHER_KEY',\n        secret: 'PUSHER_SECRET',\n        cluster: 'PUSHER_CLUSTER',\n    };\n```\n\nThis is our Pusher configuration file. In here, replace the empty strings with the credentials provided in your Pusher dashboard.\n\nFinally, create a **package.json** file:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThis file contains all the node packages required for the Node app to function properly.\n\nFinally, in the directory of your Node application, run the command below:\n\n```\n    $ npm install \u0026\u0026 node index.js\n```\n\nThe first command will install all the dependencies and the second one will start an Express server in node. When you see the message “***App listening on port 4000!”*** **then you know your backend application is ready.\n\n## Testing our realtime status update application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![user-status-update-swift-arbitrary-loads](//images.contentful.com/1es3ne0caaid/5AjdqxJnck8Wa6MaE2gGIE/02a4de3f1e4ff702a6eb1c47f43a5076/user-status-update-swift-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n![user-status-update-swift-demo](//images.contentful.com/1es3ne0caaid/45c2mCELhCY0MqasmiEcww/36df51c7c75bc3fa1d80fc98b78c548a/user-status-update-swift-demo.gif)\n\n## Conclusion\n\nIn the article, we have been able to create an iOS application with realtime user status updates, similar to what an application like WhatsApp currently has.","metaTitle":"Build a user status update in Swift","metaDescription":"Create an iOS application with realtime user status updates, similar to WhatsApp using Swift and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"pyEmgfpl28CuK4gOGgC2i","type":"Entry","createdAt":"2018-02-22T15:02:43.190Z","updatedAt":"2018-03-01T17:51:09.195Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build read receipts using Swift","url":"read-receipts-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/message-delivery-status-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2017-09-26","description":"Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"When building mobile chat applications, it is not uncommon to see developers adding a delivery status feature that lets you know when the message you sent has been delivered to the recipient. Instant Messaging applications like WhatsApp, Messenger, BBM, Skype and the like all provide this feature.\n\nSome of the tools that we will need to build our application are:\n\n1. [**Xcode**](https://developer.apple.com/xcode/)- The application will be built using Apple’s Swift programming language.\n2. [**NodeJS**](https://nodejs.org/en/download/) **(Express)** - The backend application will be written in NodeJS.\n3. [**Pusher**](https://pusher.com/) - Pusher will provide realtime reporting when the sent messages are delivered. You will need a Pusher application ID, key and secret. Create your free account at [pusher.com](https://pusher.com), then grab your app ID, key and secret from the Pusher dashboard.\n\nBelow is a screen recording of what we’ll be building. As you can see, when a message is sent, it is marked as sent, and the moment it hits the recipient’s phone, it is marked as delivered.\n\n![read-receipts-swift-demo](//images.contentful.com/1es3ne0caaid/57yKLaGkBikEIesQg6gQUu/10ee2f0aedc39b174bfc377031a70666/message-delivery-status-swift-demo.gif)\n\n## Getting started with our iOS application\n\nLaunch Xcode and create a new project. We are calling ours **Anonchat**. Once it has loaded the workspace, close Xcode and then `cd` to the root of your project and run the command `pod init`. This should generate a `Podfile` for you. Change the contents of the `Podfile`:\n\n```\n    # Uncomment the next line to define a global platform for your project\n    platform :ios, '9.0'\n    \n    target 'anonchat' do\n      # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n      use_frameworks!\n    \n      # Pods for anonchat\n      pod 'Alamofire'\n      pod 'PusherSwift'\n      pod 'JSQMessagesViewController'\n    end\n```\n\nNow run the command `pod install` so the Cocoapods package manager can pull in the necessary dependencies. When this is complete, close Xcode (if open) and then open the `.xcworkspace` file that is in the root of your project folder.\n\n\n## Creating the views for our iOS application\n\nWe are going to be creating a couple of views that we will need for the chat application to function properly. The views will look something like the screenshot below:\n\n![read-receipts-swift-app-flow](//images.contentful.com/1es3ne0caaid/4IWwX3XnlCoSwIGCsWuUIg/029a6d6a6d2a854904c4fba4b82ac4b7/message-delivery-status-swift-app-flow.png)\n\nWhat we have done above is create the first ViewController which will serve as our welcome ViewController, and we have added a button which triggers navigation to the next controller which is a `Navigation Controller`. This Navigation Controller in turn has a View Controller set as the root controller.\n\n\n## Coding the message delivery status for our iOS application\n\nNow that we have set up the views using the interface builder on the `MainStoryboard`, let's add some functionality. The first thing we will do is create a `WelcomeViewController` and associate it with the first view on the left. This will be the logic house for that view; we won't add much to it for now though:\n\n```\n    import UIKit\n    \n    class WelcomeViewController: UIViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n    }\n```\n\nNext, we create another controller called the `ChatViewController`, which will be the main power house and where everything will be happening. The controller will extend the `JSQMessagesViewController` so that we automatically get a nice chat interface to work with out of the box, then we have to work on customizing this chat interface to work for us.\n\n```\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    import JSQMessagesViewController\n    \n    class ChatViewController: JSQMessagesViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n    \n            let n = Int(arc4random_uniform(1000))\n    \n            senderId = \"anonymous\" + String(n)\n            senderDisplayName = senderId\n        }\n    }\n```\n\nIf you notice on the `viewDidLoad` method, we are generating a random username and setting that to be the `senderId` and `senderDisplayName` on the controller. This extends the properties set in the parent controller and is required.\n\nBefore we continue working on the chat controller, we want to create a last class called the `AnonMessage` class. This will extend the `JSQMessage` class and we will be using this to extend the default functionality of the class.\n\n\n```\n    import UIKit\n    import JSQMessagesViewController\n    \n    enum AnonMessageStatus {\n        case sending\n        case sent\n        case delivered\n    }\n    \n    class AnonMessage: JSQMessage {\n        var status : AnonMessageStatus\n        var id : Int\n    \n        public init!(senderId: String, status: AnonMessageStatus, displayName: String, text: String, id: Int?) {\n            self.status = status\n            \n            if (id != nil) {\n                self.id = id!\n            } else {\n                self.id = 0\n            }\n            \n            \n    \n            super.init(senderId: senderId, senderDisplayName: displayName, date: Date.init(), text: text)\n        }\n    \n        public required init?(coder aDecoder: NSCoder) {\n            fatalError(\"init(coder:) has not been implemented\")\n        }\n    }\n```\n\nIn the class above we have extended the `JSQMessage` class and we have also added some new properties to track: the `id` and the `status`. We also added an initialisation method so we can specify the new properties before instantiating the `JSQMessage` class properly. We also added an `enum` that contains all the statuses the message could possibly have.\n\nReturning to the `ChatViewController`, let's add a few properties to the class that we will need:\n\n``` language-swift\n    static let API_ENDPOINT = \"http://localhost:4000\";\n    \n    var messages = [AnonMessage]()\n    var pusher: Pusher!\n    \n    var incomingBubble: JSQMessagesBubbleImage!\n    var outgoingBubble: JSQMessagesBubbleImage!\n```\n\nNow that's done, let’s start customizing the controller to suit our needs. First, we will add some logic to the `viewDidLoad` method:\n\n```\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        let n = Int(arc4random_uniform(1000))\n    \n        senderId = \"anonymous\" + String(n)\n        senderDisplayName = senderId\n    \n        inputToolbar.contentView.leftBarButtonItem = nil\n    \n        incomingBubble = JSQMessagesBubbleImageFactory().incomingMessagesBubbleImage(with: UIColor.jsq_messageBubbleBlue())\n        outgoingBubble = JSQMessagesBubbleImageFactory().outgoingMessagesBubbleImage(with: UIColor.jsq_messageBubbleGreen())\n    \n        collectionView!.collectionViewLayout.incomingAvatarViewSize = CGSize.zero\n        collectionView!.collectionViewLayout.outgoingAvatarViewSize = CGSize.zero\n    \n        automaticallyScrollsToMostRecentMessage = true\n    \n        collectionView?.reloadData()\n        collectionView?.layoutIfNeeded()\n    }\n```\n\nIn the above code, we started customizing the way our chat interface will look, using the parent class that has these properties already set. For instance, we are setting the `incomingBubble` to blue, and the `outgoingBubble` to green. We have also eliminated the avatar display because we do not need it right now.\n\nThe next thing we are going to do is override some of the methods that come with the parent controller so that we can display messages, customize the feel and more:\n\n```\n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, messageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageData! {\n        return messages[indexPath.item]\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, attributedTextForCellBottomLabelAt indexPath: IndexPath!) -\u003e NSAttributedString! {\n        if !isAnOutgoingMessage(indexPath) {\n            return nil\n        }\n    \n        let message = messages[indexPath.row]\n    \n        switch (message.status) {\n        case .sending:\n            return NSAttributedString(string: \"Sending...\")\n        case .sent:\n            return NSAttributedString(string: \"Sent\")\n        case .delivered:\n            return NSAttributedString(string: \"Delivered\")\n        }\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, layout collectionViewLayout: JSQMessagesCollectionViewFlowLayout!, heightForCellBottomLabelAt indexPath: IndexPath!) -\u003e CGFloat {\n        return CGFloat(15.0)\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -\u003e Int {\n        return messages.count\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, messageBubbleImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageBubbleImageDataSource! {\n        let message = messages[indexPath.item]\n        if message.senderId == senderId {\n            return outgoingBubble\n        } else {\n            return incomingBubble\n        }\n    }\n    \n    override func collectionView(_ collectionView: JSQMessagesCollectionView!, avatarImageDataForItemAt indexPath: IndexPath!) -\u003e JSQMessageAvatarImageDataSource! {\n        return nil\n    }\n    \n    override func didPressSend(_ button: UIButton, withMessageText text: String, senderId: String, senderDisplayName: String, date: Date) {\n        let message = addMessage(senderId: senderId, name: senderId, text: text, id: nil)\n    \n        if (message != nil) {\n            postMessage(message: message as! AnonMessage)\n        }\n        \n        finishSendingMessage(animated: true)\n    }\n    \n    private func isAnOutgoingMessage(_ indexPath: IndexPath!) -\u003e Bool {\n        return messages[indexPath.row].senderId == senderId\n    }\n```\n\nThe next thing we are going to do is create some new methods on the controller that will help us post a new message. After that, we create a method to hit the remote endpoint which sends the message. Finally, we create a method to append the new message sent (or received) to the messages array:\n\n```\n    private func postMessage(message: AnonMessage) {\n        let params: Parameters = [\"sender\": message.senderId, \"text\": message.text]\n        hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/messages\", parameters: params, message: message)\n    }\n    \n    private func hitEndpoint(url: String, parameters: Parameters, message: AnonMessage? = nil) {\n        Alamofire.request(url, method: .post, parameters: parameters).validate().responseJSON { response in\n            switch response.result {\n            case .success(let JSON):\n                let response = JSON as! NSDictionary\n    \n                if message != nil {\n                    message?.id = (response.object(forKey: \"ID\") as! Int) as Int\n                    message?.status = .sent\n                    self.collectionView.reloadData()\n                }\n    \n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n    \n    private func addMessage(senderId: String, name: String, text: String, id: Int?) -\u003e Any? {\n        let status = AnonMessageStatus.sending\n        \n        let id = id == nil ? nil : id;\n    \n        let message = AnonMessage(senderId: senderId, status: status, displayName: name, text: text, id: id)\n    \n        if (message != nil) {\n            messages.append(message as AnonMessage!)\n        }\n    \n        return message\n    }\n```\n\nGreat. Now every time we send a new message, the `didPressSend` method will be triggered and all the other ones will fall into place nicely!\n\nFor the last piece of the puzzle, we want to create the method that listens for Pusher events and fires a callback when an event trigger is received:\n\n```\n    private func listenForNewMessages() {\n        let options = PusherClientOptions(\n            host: .cluster(\"PUSHER_CLUSTER\")\n        )\n    \n        pusher = Pusher(key: \"PUSHER_KEY\", options: options)\n    \n        let channel = pusher.subscribe(\"chatroom\")\n    \n        channel.bind(eventName: \"new_message\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let messageId = data[\"ID\"] as! Int\n                let author = data[\"sender\"] as! String\n                \n                if author != self.senderId {\n                    let text = data[\"text\"] as! String\n    \n                    let message = self.addMessage(senderId: author, name: author, text: text, id: messageId) as! AnonMessage?\n                    message?.status = .delivered\n                    \n                    let params: Parameters = [\"ID\":messageId]\n                    self.hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/delivered\", parameters: params, message: nil)\n    \n                    self.finishReceivingMessage(animated: true)\n                }\n            }\n        })\n        \n        channel.bind(eventName: \"message_delivered\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let messageId = (data[\"ID\"] as! NSString).integerValue\n                let msg = self.messages.first(where: { $0.id == messageId })\n                \n                msg?.status = AnonMessageStatus.delivered\n                self.finishReceivingMessage(animated: true)\n            }\n        })\n    \n        pusher.connect()\n    }\n```\n\nIn this method, we have created a `Pusher` instance, we have set the cluster and the key. We attach the instance to a `chatroom` channel and then bind to the `new_message` event on the channel. We also bind a `message_delivered` event, this will be the event that is triggered when a message is marked as delivered. It will update the message status to `delivered` so the sender knows the message has indeed been delivered.\n\n\u003e 💡 **Remember to replace the key and cluster with the actual values** **you have gotten from your Pusher dashboard**.\n\nNow we should be done with the application and as it stands, it should work but no messages can be sent just yet as we need a backend application for it to work properly.\n\n### Building the backend Node application\n\nNow that we are done with the iOS and Xcode parts, we can create the NodeJS backend for the application. We are going to use Express so that we can quickly whip something up.\n\nCreate a directory for the web application and then create two new files:\n\nThe **index.js** file…\n\n```\n    // ------------------------------------------------------\n    // Import all required packages and files\n    // ------------------------------------------------------\n    \n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let bodyParser = require('body-parser');\n    let Promise    = require('bluebird');\n    let db         = require('sqlite');\n    let app        = express();\n    let pusher     = new Pusher(require('./config.js')['config']);\n    \n    // ------------------------------------------------------\n    // Set up Express\n    // ------------------------------------------------------\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // ------------------------------------------------------\n    // Define routes and logic\n    // ------------------------------------------------------\n    \n    app.post('/delivered', (req, res, next) =\u003e {\n      let payload = {ID: \"\"+req.body.ID+\"\"}\n      pusher.trigger('chatroom', 'message_delivered', payload)\n      res.json({success: 200})\n    })\n    \n    app.post('/messages', (req, res, next) =\u003e {\n      try {\n        let payload = {\n          text: req.body.text,\n          sender: req.body.sender\n        };\n    \n        db.run(\"INSERT INTO Messages (Sender, Message) VALUES (?,?)\", payload.sender, payload.text)\n          .then(query =\u003e {\n            payload.ID = query.stmt.lastID\n            pusher.trigger('chatroom', 'new_message', payload);\n    \n            payload.success = 200;\n    \n            res.json(payload);\n          });\n    \n      } catch (err) {\n        next(err)\n      }\n    });\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    \n    // ------------------------------------------------------\n    // Catch errors\n    // ------------------------------------------------------\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    \n    // ------------------------------------------------------\n    // Start application\n    // ------------------------------------------------------\n    \n    Promise.resolve()\n      .then(() =\u003e db.open('./database.sqlite', { Promise }))\n      .then(() =\u003e db.migrate({ force: 'last' }))\n      .catch(err =\u003e console.error(err.stack))\n      .finally(() =\u003e app.listen(4000, function(){\n        console.log('App listening on port 4000!')\n      }));\n```\n\nHere we define the entire logic of our backend application. We are also using SQLite to store the chat messages; this is useful to help identify messages. Of course, you can always change the way the application works to suite your needs.\n\nThe `index.js` file also has two routes where it receives messages from the iOS application and triggers the Pusher event which is picked up by the application.\n\nThe next file is the **packages.json** where we define the NPM dependencies:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"bluebird\": \"^3.5.0\",\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\",\n        \"sqlite\": \"^2.8.0\"\n      }\n    }\n```\n\nYou’ll also need a config.js file in the root directory:\n\n```\n    module.exports = {\n        appId: '',\n        key: '',\n        secret: '',\n        cluster: '',\n    };\n```\n\nSubstitute with the actual values from your Pusher application. Now run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see an *App listening on port 4000!* message.\n\n![read-receipts-swift-nodejs](//images.contentful.com/1es3ne0caaid/3x1vWsQRtYKsG2OWGaeuEk/34449477511a92d054ba98fc5fcc13d9/message-delivery-status-swift-nodejs.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![read-receipts-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/64eKCfeNxewSUya2K4qga6/30343ac917a5e28a59bf4b71d976ba41/message-delivery-status-swift-allow-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n\n## Conclusion\n\nIn this article, we have explored how to create an iOS chat application with a message delivery status message after the message is sent to other users. For practice, you can expand the statuses to support more instances.","metaTitle":"Build read receipts using Swift","metaDescription":"Create an iOS chat application with a message delivery status using Swift, Node.js and Pusher for realtime functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5LC6qtO0W4EYSUSKGSeAS4","type":"Entry","createdAt":"2018-02-22T15:04:12.881Z","updatedAt":"2018-02-28T11:02:32.754Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime PWA with React","url":"pwa-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2iE6KIsESkeOEcCmEmCQM8","type":"Entry","createdAt":"2018-02-13T12:06:21.229Z","updatedAt":"2018-02-14T10:08:19.561Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Yomi Eluwande","url":"yomi-eluwande","email":"yomi.eluwande@gmail.com","twitter":"https://twitter.com/yomieluwande","github":"https://github.com/yomete","guestWriter":true}}],"projectRepo":"https://github.com/yomete/pushercoins","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}}],"reviewDate":"2017-09-14","description":"Build a realtime PWA displaying the price information about cryptocurrencies using React.js and Pusher.","prerequisite":"A basic understanding of React, Node.js and PWA are needed to follow this tutorial.","content":"Progressive Web Apps are experiences that combine the best of the web and the best of apps. They use service workers, HTTPS, a manifest file and an app shell architecture to deliver native app experiences to web applications.\n\nIn this tutorial, we’ll build a PWA called PusherCoins. PusherCoins shows the current and past price information about BTC, LTC, and ETH using data from [Cryptocurrency](http://cryptocompare.com). A demo can be seen below. The current Bitcoin, Ether, and Litecoin price will be updated every 10 seconds and the change will be realtime and seen across other connected clients connected via [Pusher](http://pusher.com).\n\n![pwa-react-demo](//images.contentful.com/1es3ne0caaid/1mJC8DNySUW282EAKeIw6C/bf8e90962701acda5f785ee00663cefd/pwa-react-demo.gif)\n\n## Building a PWA with create-react-app\n\nWe’re going to be building a realtime PWA with the help of [create-react-app](https://github.com/facebookincubator/create-react-app). \n\nSome of the common comments made by developers who are just getting into React are that it is hard to set up and there are so many ways to do things.\n`create-react-app` eliminates all of that by allowing developers to build React apps with little or no build configuration. All you have to do to get a working React app is install the npm module and run a single command.\n\nMost importantly, the production build of `create-react-app`  is a fully functional Progressive Web Application. This is done with the help of the `[sw-precache-webpack-plugin](https://github.com/goldhand/sw-precache-webpack-plugin)` which is integrated into the production configuration.\n\nLet’s get started with building the React app. Install the `create-react-app` tool with this command:\n\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process has been completed, you can now create a new React app by using the command `create-react-app pushercoins`.\n\nThis generates a new folder with all the files required to run the React app and a service worker file. A manifest file is also created inside the `public` folder.\n\n![pwa-react-project-directory](//images.contentful.com/1es3ne0caaid/33lQkFdaW46aYOKmEEY6gE/bf8e90962701acda5f785ee00663cefd/pwa-react-project-directory.png)\n\nThe `manifest.json` file in the `public` folder is a simple JSON file that gives you, the ability to control how your app appears to the user and define its appearance at launch.\n\n```\n    {\n      \"short_name\": \"PusherCoins\",\n      \"name\": \"PusherCoins\",\n      \"icons\": [\n        {\n          \"src\": \"favicon.ico\",\n          \"sizes\": \"192x192\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"android-chrome-512x512.png\",\n          \"sizes\": \"512x512\",\n          \"type\": \"image/png\"\n        }\n      ],\n      \"start_url\": \"./index.html\",\n      \"display\": \"standalone\",\n      \"theme_color\": \"#000000\",\n      \"background_color\": \"#ffffff\"\n    }\n```\n\nWe notify the app of the `manifest.json` file by linking to it in line 12 of the `index.html` file.\n\n```\n    \u003clink rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\"\u003e\n```\n\nNext up, let’s go through the `registerServiceWorker.js` file and see how the service worker file works. The service worker file can be seen in the `src` folder on on [GitHub](https://github.com/yomete/pushercoins/blob/master/src/registerServiceWorker.js).\n\nThe service worker code basically registers a service worker for the React app. We first check if the app is being served from localhost via the `isLocalhost` const value that will either return a truthy or falsy value. The `register()` function helps to register the service worker to the React app only if its in a production mode and if the browser supports Service workers. The `unregister()` function helps to unregister the service worker.\n\nLet’s find out if the service worker really works. To do that we’ll need to prepare the React app for production as the Service Worker code only works in production mode. The `npm run build` command helps with that.\n\nThis command builds the app for production to the `build` folder and correctly bundles React in production mode and optimizes the build for the best performance. It also registers the service worker. Run the command and the output from the terminal should look like something below.\n\n![pwa-react-npm-run-output](//images.contentful.com/1es3ne0caaid/RdDPMgk3W6moK48G2SIS6/bf8e90962701acda5f785ee00663cefd/pwa-react-npm-run-output.png)\n\nWe get to see the size of the files in our React app and most importantly how to run the app with the aid of a static server. We are going to use [serve](https://www.npmjs.com/package/serve) npm package to, wait for it, serve(😀) the React app. \nTherefore, use the following commands to install serve on your computer and also setup a static server for the app.\n\n```\n    npm i serve -g\n    \n    serve -s build\n```\n\nYour application should be up and running at http://localhost:5000. So how do we check if a site is a PWA? We can do that by checking the service worker section in the Application tab in the Developer tools.\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2017/09/build-realtime-pwa-react-service-worker-devtools.png\" alt=\"\" width=\"1280\" height=\"219\" class=\"alignnone size-full wp-image-3489\" /\u003e\n\nWe could also check by using the [Lighthouse](https://developers.google.com/web/tools/lighthouse/) tool. Lighthouse is an [open-source](https://github.com/GoogleChrome/lighthouse), automated tool for improving the quality of web pages. It has audits for performance, accessibility and progressive web apps. Lighthouse is currently available as an extension on [Google Chrome](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk) only and as an [npm](https://www.npmjs.com/package/lighthouse) package.\n\nI used the Lighthouse extension to generate a report for the newly created React app in production and got the following result.\n\n![pwa-react-lighthouse](//images.contentful.com/1es3ne0caaid/6w4fXnjeXCe0O0SA4sSAOk/bf8e90962701acda5f785ee00663cefd/pwa-react-lighthouse.png)\n\nThe React app got a score of 91 out of 100 for the PWA section, which isn’t that bad. All audits were passed bar the one about HTTPS, which cannot be implemented right now because the app is still on a local environment.\n\nNow that we know how to check if an app is a PWA, let’s go ahead to build the actual app. \nAs we’ll be building this PWA with React, it’s very important that we think in terms of React components. \n\nTherefore, the React app would be divided into three components.\n\n1. `History.js` houses all the code needed to show the past prices of BTC, ETH, and LTC.\n2. `Today.js` houses all the code needed to show the current price of BTC, ETH and LTC.\n3. `App.js` houses both `History.js` and `Today.js`\n\n![pwa-react-components](//images.contentful.com/1es3ne0caaid/ypI7IqLUhqmAqUgEs4AAy/bf8e90962701acda5f785ee00663cefd/pwa-react-components.png)\n\nAlright, let’s continue with building the app. We’ll need to create two folders inside the `src` folder, `Today` and `History`. In the newly created folders, create the files `Today.js`, `Today.css` and `History.js`, `History.css` respectively. Your project directory should look like the one below.\n\n![pwa-react-components-project-directory](//images.contentful.com/1es3ne0caaid/3cahl0boIESA6c8g2Yskw0/bf8e90962701acda5f785ee00663cefd/pwa-react-components-project-directory.png)\n\nBefore we get started on the `Today` and `History` components, let’s build out the app shell.\n\n\u003e An app shell is the minimal HTML, CSS and JavaScript required to power the user interface and when cached offline can ensure instant**,** reliably good performance to users on repeat visits. You can read more about app shells [here](https://developers.google.com/web/fundamentals/architecture/app-shell).\n\nOpen up the `App.js` file and replace with the following code:\n\n```\n    // Import React and Component\n    import React, { Component } from 'react';\n    // Import CSS from App.css\n    import './App.css';\n    // Import the Today component to be used below\n    import Today from './Today/Today'\n    // Import the History component to be used below\n    import History from './History/History'\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"\"\u003e\n              \u003cdiv className=\"topheader\"\u003e\n                  \u003cheader className=\"container\"\u003e\n                      \u003cnav className=\"navbar\"\u003e\n                          \u003cdiv className=\"navbar-brand\"\u003e\n                              \u003cspan className=\"navbar-item\"\u003ePusherCoins\u003c/span\u003e\n                          \u003c/div\u003e\n                          \u003cdiv className=\"navbar-end\"\u003e\n                              \u003ca className=\"navbar-item\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ePusher.com\u003c/a\u003e\n                          \u003c/div\u003e\n                      \u003c/nav\u003e\n                  \u003c/header\u003e\n              \u003c/div\u003e\n              \u003csection className=\"results--section\"\u003e\n                  \u003cdiv className=\"container\"\u003e\n                      \u003ch1\u003ePusherCoins is a realtime price information about\u003cbr\u003e\u003c/br\u003e BTC, ETH and LTC.\u003c/h1\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"results--section__inner\"\u003e\n                      \u003cToday /\u003e\n                      \u003cHistory /\u003e\n                  \u003c/div\u003e\n              \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nThe `App.css` file should be replaced with the following: \n\n```\n    .topheader {\n      background-color: #174c80;\n    }\n    .navbar {\n      background-color: #174c80;\n    }\n    .navbar-item {\n      color: #fff;\n    }\n    .results--section {\n      padding: 20px 0px;\n      margin-top: 40px;\n    }\n    h1 {\n      text-align: center;\n      font-size: 30px;\n    }\n```\nWe’ll also be using the Bulma CSS framework, so add the line of code below to your `index.html`\nin `public` folder.\n\n```\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.4.3/css/bulma.min.css\"\u003e\n```\n\n## Creating the React components\n\nNext up, open up the `Today.js` file as we’ll soon be writing the code for that component. So what does this component do?\n\nIt’s responsible for getting the current prices of Bitcoin, Ether and Litecoin from the Cryptocurrency API and displaying it on the frontend. Let’s write the code. \n\nThe first thing we do is import React and its Component module using ES6 `import`, we also import axios. axios is used to make API requests to the Cryptocurrency API and can be installed by running `npm install axios` in your terminal\n\n```\n    import React, { Component } from 'react';\n    import './Today.css'\n    import axios from 'axios'\n```\n\nThe next thing to do is create an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes) named `Today` that extends the component module from `react`.\n\n```\n    class Today extends Component {\n        // Adds a class constructor that assigns the initial state values:\n        constructor () {\n            super();\n            this.state = {\n                btcprice: '',\n                ltcprice: '',\n                ethprice: ''\n            };\n        }\n        // This is called when an instance of a component is being created and inserted into the DOM.\n        componentWillMount () {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n                .then(response =\u003e {\n                    // We set the latest prices in the state to the prices gotten from Cryptocurrency.\n                    this.setState({ btcprice: response.data.BTC.USD });\n                    this.setState({ ethprice: response.data.ETH.USD });\n                    this.setState({ ltcprice: response.data.LTC.USD });\n                })\n                // Catch any error here\n                .catch(error =\u003e {\n                    console.log(error)\n                })\n        }\n        // The render method contains the JSX code which will be compiled to HTML.\n        render() {\n            return (\n                \u003cdiv className=\"today--section container\"\u003e\n                    \u003ch2\u003eCurrent Price\u003c/h2\u003e\n                    \u003cdiv className=\"columns today--section__box\"\u003e\n                        \u003cdiv className=\"column btc--section\"\u003e\n                            \u003ch5\u003e${this.state.btcprice}\u003c/h5\u003e\n                            \u003cp\u003e1 BTC\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"column eth--section\"\u003e\n                            \u003ch5\u003e${this.state.ethprice}\u003c/h5\u003e\n                            \u003cp\u003e1 ETH\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"column ltc--section\"\u003e\n                            \u003ch5\u003e${this.state.ltcprice}\u003c/h5\u003e\n                            \u003cp\u003e1 LTC\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            )\n        }\n    }\n    \n    export default Today;\n```\n\nIn the code block above, we imported the `react` and `component` class from react. We also imported `axios` which will be used for API requests. In the `componentWillMount` function, we send an API request to get the current cryptocurrency rate from Cryptocurrency. The response from the API is what will be used to set the value of the state.\n\nLet’s not forget the CSS for the component. Open up `Today.css` and type in the following CSS code.\n\n```\n    .today--section {\n        margin-bottom: 40px;\n        padding: 0 50px;\n    }\n    .today--section h2 {\n        font-size: 20px;\n    }\n    .today--section__box {\n        background-color: white;\n        padding: 20px;\n        margin: 20px 0;\n        border-radius: 4px;\n        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n    }\n    .btc--section {\n        text-align: center;\n        border-right: 1px solid #DAE1E9;\n    }\n    .btc--section h5 {\n        font-size: 30px;\n    }\n    .eth--section {\n        text-align: center;\n        border-right: 1px solid #DAE1E9;\n    }\n    .eth--section h5 {\n        font-size: 30px;\n    }\n    .ltc--section {\n        text-align: center;\n    }\n    .ltc--section h5 {\n        font-size: 30px;\n    }\n    @media (max-width: 480px) {\n        .eth--section {\n            border-right: none;\n        }\n        .btc--section {\n            border-right: none;\n        }\n        .today--section {\n            margin-top:  50px;\n        }\n    }\n```\n\nThe next step, is to write the code for `History.js`. This component is responsible for showing us the prices of BTC, ETH and LTC from the past five days. We’ll be using the `axios` package as well as the `moment` package for formatting dates. Moment.js can be installed by running `npm install moment` in your terminal. Open up the `History.js` file, the first thing we do is import React and its Component module using ES6 `import`, we also import axios and Moment.js.\n\n```\n    import React, { Component } from 'react';\n    import './History.css'\n    import axios from 'axios'\n    import moment from 'moment'\n```\n\nLike we did in the `Today.js` component, we’ll create an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes) named `History` that extends the component module from `react` and also create some functions which will be bound with `this`.\n\n```\n    class History extends Component {\n      constructor () {\n        super();\n        this.state = {\n            todayprice: {},\n            yesterdayprice: {},\n            twodaysprice: {},\n            threedaysprice: {},\n            fourdaysprice: {}\n        }\n        this.getBTCPrices = this.getBTCPrices.bind(this);\n        this.getETHPrices = this.getETHPrices.bind(this);\n        this.getLTCPrices = this.getLTCPrices.bind(this);\n      }\n      // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\n      getETHPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH\u0026tsyms=USD\u0026ts=' + date);\n      }\n      // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n      getBTCPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC\u0026tsyms=USD\u0026ts=' + date);\n      }\n      // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\n      getLTCPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC\u0026tsyms=USD\u0026ts=' + date);\n      }\n    }\n```\n\nAs seen in the code block above, we have defined state values that will hold the price information about BTC, ETH, and LTC for the past five days. We also created functions that returns API requests to Cryptocurrency. Now, let’s write the code that utilizes the functions above and stores the various prices in the state and renders them. \n\nIt’s important to note that Cryptocurrency currently does not have an API endpoint that allows you to get a date range of price information. You’d have to get the timestamp of the past five days and then use them individually to get the required data you want.\nA workaround will be to use moment.js to get the timestamp of the particular day you want using the `.subtract` [method](https://momentjs.com/docs/#/manipulating/subtract/) and `.unix` [method](https://momentjs.com/docs/#/displaying/unix-timestamp/) . So for example, to get a timestamp of two days ago, you’d do something like:\n\n```\n    moment().subtract(2, 'days').unix();\n```\n\nOkay, so let’s continue with the rest of the code and write out the functions that gets the values for the past 5 days.\n\n```\n    // This function gets the prices for the current date.\n    getTodayPrice () {\n        // Get today's date in timestamp\n        let t = moment().unix()\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of todayprice to the content of the object f\n                this.setState({ todayprice: f });\n            }));\n    }\n    // This function gets the prices for the yesterday.\n    getYesterdayPrice () {\n        // Get yesterday's date in timestamp\n        let t = moment().subtract(1, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of yesterdayprice to the content of the object f\n                this.setState({ yesterdayprice: f });\n            }));\n    }\n    // This function gets the prices for the two days ago.\n    getTwoDaysPrice () {\n        // Get the date for two days ago in timestamp\n        let t = moment().subtract(2, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of twodaysprice to the content of the object f\n                this.setState({ twodaysprice: f });\n            }));\n    }\n    // This function gets the prices for the three days ago.\n    getThreeDaysPrice () {\n        // Get the date for three days ago in timestamp\n        let t = moment().subtract(3, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of threedaysprice to the content of the object f\n                this.setState({ threedaysprice: f });\n            }));\n    }\n    // This function gets the prices for the four days ago.\n    getFourDaysPrice () {\n        // Get the date for four days ago in timestamp\n        let t = moment().subtract(4, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of fourdaysprice to the content of the object f\n                this.setState({ fourdaysprice: f });\n            }));\n    }\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount () {\n        this.getTodayPrice();\n        this.getYesterdayPrice();\n        this.getTwoDaysPrice();\n        this.getThreeDaysPrice();\n        this.getFourDaysPrice();\n    }\n```\n\nSo we have five functions above, they basically just use `moment.js` to get the date required and then pass that date into the functions we first created above, to get the price information from Cryptocurrency. We use `axios.all` and `axios.spread` which is a way of of dealing with concurrent requests with callbacks. The functions will be run in the `componentWillMount` function.\n\nFinally, for `History.js`, we’ll write the render function.\n\n```\n    render() {\n            return (\n                \u003cdiv className=\"history--section container\"\u003e\n                    \u003ch2\u003eHistory (Past 5 days)\u003c/h2\u003e\n                    \u003cdiv className=\"history--section__box\"\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.todayprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.todayprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.todayprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.todayprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.yesterdayprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.yesterdayprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.yesterdayprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.yesterdayprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.twodaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.twodaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.twodaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.twodaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.threedaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.threedaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.threedaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.threedaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.fourdaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.fourdaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.fourdaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.fourdaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n    \n                    \u003c/div\u003e\n                \u003c/div\u003e\n            )\n        }\n    }\n    \n    export default History;\n```\n\nWe can now run the `npm start` command to see the app at http://localhost:3000. \n\n![pwa-react-pushercoins](//images.contentful.com/1es3ne0caaid/3IfTKCLwCIky02WK06WW0e/bf8e90962701acda5f785ee00663cefd/pwa-react-pushercoins.png)\n\nWe can quickly check to see how the current state of this app would fare as a PWA. Remember we have a service worker file which currently caches all the resources needed for this application. So you can run the `npm run build` command to put the app in production mode, and check its PWA status with Lighthouse.\n\n![pwa-react-light](//images.contentful.com/1es3ne0caaid/7sc2HDKIfuECq8AuIsOAyw/bf8e90962701acda5f785ee00663cefd/pwa-react-light.png)\n\nWe got a 91/100 score. Whoop! The only audit that failed to pass is the HTTPS audit which cannot be implemented right now because the app is still on a local server. \n\nOur application is looking good and fast apparently (Interactive at \u003c 3s), let’s add realtime functionalities by adding Pusher.\n\n## Make it realtime with Pusher\n\nBy using Pusher, we can easily add realtime functionalities to the app. Pusher makes it simple to bind UI interactions to events that are triggered from any client or server. Let’s setup Pusher.\n\nLog into your [dashboard](http://dashboard.pusher.com) (or [create](http://pusher.com) a new account if you’re a new user) and create a new app. Copy your `app_id`, `key`, `secret` and `cluster` and store them somewhere as we’ll be needing them later.\n\nWe’ll also need to create a server that will help with triggering events to Pusher and we’ll create one with Node.js. In the root of your project directory, create a file named `server.js` and type in the following code:\n\n```\n    // server.js\n    const express = require('express')\n    const path = require('path')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher')\n    \n    //initialize Pusher with your appId, key, secret and cluster\n    const pusher = new Pusher({\n        appId: 'APP_ID',\n        key: 'APP_KEY',\n        secret: 'APP_SECRET',\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true\n    })\n    \n    // Body parser middleware\n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    \n    // CORS middleware\n    app.use((req, res, next) =\u003e {\n        // Website you wish to allow to connect\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        // Request methods you wish to allow\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n        // Request headers you wish to allow\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        // Set to true if you need the website to include cookies in the requests sent\n        // to the API (e.g. in case you use sessions)\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        // Pass to next layer of middleware\n        next()\n    })\n    \n    // Set port to be used by Node.js\n    app.set('port', (5000))\n    \n    app.get('/', (req, res) =\u003e {\n        res.send('Welcome')\n    })\n    \n    // API route in which the price information will be sent to from the clientside\n    app.post('/prices/new', (req, res) =\u003e {\n        // Trigger the 'prices' event to the 'coin-prices' channel\n        pusher.trigger( 'coin-prices', 'prices', {\n            prices: req.body.prices\n        });\n        res.sendStatus(200);\n    })\n    \n    app.listen(app.get('port'), () =\u003e {\n        console.log('Node app is running on port', app.get('port'))\n    })\n```    \n\nThis is a simple Node.js server that uses Express as its web framework. Pusher is initialized with the dashboard credentials, and the various API routes are also defined. Don’t forget to install the packages in use.\n\n```\n    npm install express body-parser pusher\n```\n\nWe’ll also need to add a line of code to the `package.json` file so as to allow API proxying. Since we will be running a backend server, we need to find a way to run the React app and backend server together. API proxying helps with that. \n\nTo tell the development server to proxy any unknown requests (`/prices/new`) to your API server in development, add a `proxy` field to your `package.json` immediately after the `scripts` object.\n\n``` language-bash\n    \"proxy\": \"http://localhost:5000\"\n```\n\nWe only need to make the current price realtime and that means we’ll be working on the `Today` component, so open up the file.  The Pusher Javascript library is needed, so run `npm install pusher-js` to install that.\n\nThe first thing to do is import the `pusher-js` package.\n\n```\n    import Pusher from 'pusher-js'\n```\n\nIn the `componentWillMount` method, we establish a connection to Pusher using the credentials obtained from the dashboard earlier.\n\n```\n    // establish a connection to Pusher\n    this.pusher = new Pusher('APP_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true\n    });\n    // Subscribe to the 'coin-prices' channel\n    this.prices = this.pusher.subscribe('coin-prices');\n```\n\nWe need a way to query the API every 10 seconds so as to get the latest price information. We can use the `setInterval` function to send an API request every 10 seconds and then send the result of that API request to Pusher so that it can be broadcasted to other clients. \n\nBefore we create the setInterval function, let’s create a simple function that takes in an argument and sends it to the backend server API.\n\n```\n    sendPricePusher (data) {\n        axios.post('/prices/new', {\n            prices: data\n        })\n            .then(response =\u003e {\n                console.log(response)\n            })\n            .catch(error =\u003e {\n                console.log(error)\n            })\n    }\n```\n Let’s create the `setInterval` function. We will need to create a `componentDidMount` method so we can put the interval code in it.\n\n```\n    componentDidMount () {\n        setInterval(() =\u003e {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n                .then(response =\u003e {\n                    this.sendPricePusher (response.data)\n                })\n                .catch(error =\u003e {\n                    console.log(error)\n                })\n        }, 10000)\n    }\n```\n\nSo right now, the app queries the API every 10 seconds and sends the data to Pusher, but we still haven’t made the app realtime. We need to implement the realtime functionality so that other clients/users connected to the application can see price change in realtime. That will be done by using Pusher’s [bind method](https://pusher.com/docs/client_api_guide/client_events#bind-events).\n\nInside the `componentDidMount` method, add the code below, immediately after the `setInterval` function.\n\n```\n    // We bind to the 'prices' event and use the data in it (price information) to update the state values, thus, realtime changes \n    this.prices.bind('prices', price =\u003e {\n            this.setState({ btcprice: price.prices.BTC.USD });\n            this.setState({ ethprice: price.prices.ETH.USD });\n            this.setState({ ltcprice: price.prices.LTC.USD });\n        }, this);\n```\n\nThe code block above, listens for data from Pusher, since we already subscribed to that channel and uses the data it gets to update the state values, thus, realtime changes.\nWe now have Progressive Realtime App! See a demo below.\n\n![pwa-react-demo](//images.contentful.com/1es3ne0caaid/1mJC8DNySUW282EAKeIw6C/bf8e90962701acda5f785ee00663cefd/pwa-react-demo.gif)\n\n## Offline Strategies\n\nRight now, if we were to go offline, our application would not be able to make API requests to get the various prices. So how do we make sure that we still able to see some data even when the network fails?\n\nOne way to go about it would be to use Client Side Storage. So how would this work? We’ll simply use localStorage to cache data.\n\nlocalStorage makes it possible to store values in the browser which can survive the browser session. It is one type of the [Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API), which is an API for storing key-value pairs of data within the browser. It has a limitation of only storing strings. That means any data being stored has to be *stringified*  with the use of `JSON.stringify` \n\n It’s important to note that there are other types of client side storage, such as Session Storage, Cookies, IndexedDB, and WebSQL. Local Storage can be used for a demo app like this, but in a production app, it’s advisable to use a solution like IndexedDB which offers more features like better structure, multiple tables and databases, and more storage.\n\nThe goal will be to display the prices from localStorage. That means we’ll have to save the results from various API requests into the localStorage and set the state to the values in the localStorage. This will ensure that when the network is unavailable and API requests are failing, we would still be able to see some data, albeit cached data. Let’s do just that. Open up the `Today.js` file and edit the code inside the callback function of the API request to get prices with the one below.\n\n```\n    axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n        .then(response =\u003e {\n            this.setState({ btcprice: response.data.BTC.USD });\n            localStorage.setItem('BTC', response.data.BTC.USD);\n    \n            this.setState({ ethprice: response.data.ETH.USD });\n            localStorage.setItem('ETH', response.data.ETH.USD);\n    \n            this.setState({ ltcprice: response.data.LTC.USD });\n            localStorage.setItem('LTC', response.data.LTC.USD);\n        })\n        .catch(error =\u003e {\n            console.log(error)\n        })\n```\n\nWe are essentially storing the values gotten from the API request to the localStorage. With our values now in the localStorage, we’ll need to set the state values to the saved values in localStorage. Inside the `componentDidMount` method, before the `setInterval` code, add the following code.\n\n```\n    if (!navigator.onLine) {\n        this.setState({ btcprice: localStorage.getItem('BTC') });\n        this.setState({ ethprice: localStorage.getItem('ETH') });\n        this.setState({ ltcprice: localStorage.getItem('LTC') });\n    }\n```\n\nThe code above is only executed when the browser is offline. We can check for internet connectivity by using `navigator.onLine`. The `navigator.onLine` property returns the online status of the browser. The property returns a boolean value, with `true` meaning online and `false` meaning offline.\n\nLet’s now implement localStorage for `History.js` too. We’ll need to save the values gotten from the API in these functions ( `getTodayPrice(), getYesterdayPrice(), getTwoDaysPrice(), getThreeDaysPrice(), this.getFourDaysPrice()` ) to the localStorage. \n\n```\n    // getTodayPrice()\n    localStorage.setItem('todayprice', JSON.stringify(f));\n    this.setState({ todayprice: f });\n    \n    // getYesterdayPrice()\n    localStorage.setItem('yesterdayprice', JSON.stringify(f));\n    this.setState({ yesterdayprice: f });\n    \n    // getTwoDaysPrice()\n    localStorage.setItem('twodaysprice', JSON.stringify(f));\n    this.setState({ twodaysprice: f });\n    \n    // getThreeDaysPrice()\n    localStorage.setItem('threedaysprice', JSON.stringify(f));\n    this.setState({ threedaysprice: f });\n    \n    // getFourDaysPrice()\n    localStorage.setItem('fourdaysprice', JSON.stringify(f));\n    this.setState({ fourdaysprice: f });\n```\n\nWe are essentially storing the values gotten from the API request to the localStorage. With our values now in the localStorage, we’ll also need to set the state values to the saved values in localStorage like we did in the `Today` component. Create a `componentDidMount` method and add the following code inside the method.\n\n```\n    componentDidMount () {\n        if (!navigator.onLine) {\n            this.setState({ todayprice: JSON.parse(localStorage.getItem('todayprice')) });\n            this.setState({ yesterdayprice: JSON.parse(localStorage.getItem('yesterdayprice')) });\n            this.setState({ twodaysprice: JSON.parse(localStorage.getItem('twodaysprice')) });\n            this.setState({ threedaysprice: JSON.parse(localStorage.getItem('threedaysprice')) });\n            this.setState({ fourdaysprice: JSON.parse(localStorage.getItem('fourdaysprice')) });\n        }\n    }\n```\n\nNow our application will display cached values when there’s no internet connectivity.\n\n![pwa-react-offlinemode](//images.contentful.com/1es3ne0caaid/5SasJ5fSKWiYMkcIKemMa0/bf8e90962701acda5f785ee00663cefd/pwa-react-offlinemode.png)\n\nIt’s important to note that the app is time sensitive. Time sensitive data are not really useful to users when cached. What we can do is, add a status indicator warning the user when they are offline, that the data being shown might be stale and an internet connection is needed to show the latest data.\n\n## Deploy the app to production\n\nNow that we’re done building, let’s deploy the app to production and carry out a final Lighthouse test. We’ll be using [now.sh](http://now.sh) for deployment, `now` allows you to take your JavaScript (Node.js) or Docker powered websites, applications and services to the cloud with ease. You can find installation instructions on the site. You can also use any other deployment solution, I’m using Now because of its simplicity.\n\nPrepare the app for production by running the command below in the terminal\n\n```\n    npm run build\n```\n\nThis builds the app for production to the `build` folder. Alright, so the the next thing to do is to create a server in which the app will be served from. Inside the `build` folder, create a file named `server.js` and type in the following code.\n\n```\n    const express = require('express')\n    const path = require('path')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher')\n    \n    const pusher = new Pusher({\n        appId: 'APP_ID',\n        key: 'YOUR_KEY',\n        secret: 'YOUR SECRET',\n        cluster: 'YOUR CLUSTER',\n        encrypted: true\n    })\n    \n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(express.static(path.join(__dirname)));\n    \n    app.use((req, res, next) =\u003e {\n        // Website you wish to allow to connect\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        // Request methods you wish to allow\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n        // Request headers you wish to allow\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        // Set to true if you need the website to include cookies in the requests sent\n        // to the API (e.g. in case you use sessions)\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        // Pass to next layer of middleware\n        next()\n    })\n    \n    app.set('port', (5000))\n    \n    app.get('/', (req, res) =\u003e {\n        res.sendFile(path.join(__dirname + '/index.html'));\n    });\n    \n    app.post('/prices/new', (req, res) =\u003e {\n        pusher.trigger( 'coin-prices', 'prices', {\n            prices: req.body.prices\n        });\n        res.sendStatus(200);\n    })\n    \n    app.listen(app.get('port'), () =\u003e {\n        console.log('Node app is running on port', app.get('port'))\n    })\n```\n\nThis is basically the same code we wrote in the `server.js` file in the root of the project directory. The only addition here is that we set the home route to serve the `index.html` file in the `public` folder. Next up, run the command `npm init` to create a `package.json` file for us and lastly install the packages needed with the command below.\n\n```\n    npm install express body-parser pusher\n```\n\nYou can now see the application by running `node server.js` inside the `build` folder and your app should be live at http://localhost:5000\n\nDeploying to Now is very easy, all you have to do is run the command `now deploy` and Now takes care of everything, with a live URL automatically generated.\n\nIf everything goes well, your app should be deployed and live now, in this case, https://build-zrxionqses.now.sh/. Now automatically provisions all deployments with SSL, so we can finally generate the Lighthouse report again to check the PWA status. A live Lighthouse report of the site can be seen [here](https://googlechrome.github.io/lighthouse/viewer/?gist=4da584b2d889a4f7ce9e439659ea5441).\n\n![pwa-react-lighthousecomplete](//images.contentful.com/1es3ne0caaid/2Lrip4t3TaU02SAg2emKU4/bf8e90962701acda5f785ee00663cefd/pwa-react-lighthousecomplete.png)\n\n100/100! Whoop! All the PWA audits were passed and we got the site to load under 5s (2.6s).\n\n## App Install\n\nOne of the features of PWAs is the web app install banner. So how does this work? A PWA will install a web app install banner only if the following conditions are met:\n- Has a web app manifest file with:\n  - a `short_name` (used on the home screen)\n  - a `name` (used in the banner)\n  - a 144x144 png icon (the icon declarations must include a mime type of `image/png`)\n  - a `start_url` that loads\n- Has a [service worker](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers) registered on your site.\n- Is served over [HTTPS](https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https) (a requirement for using service worker).\n- Is visited at least twice, with at least five minutes between visits.\n\nThe `manifest.json` file in the `public` folder meets all the requirements above, we have a service worker registered on the site and the app is served over HTTPS at https://build-zrxionqses.now.sh/.\n\n![pwa-react-banner](//images.contentful.com/1es3ne0caaid/5ShDNuOOGW6iQEK0CyggQS/bf8e90962701acda5f785ee00663cefd/pwa-react-banner.png)\n\n## Conclusion\nIn this tutorial, we’ve seen how to use ReactJS, Pusher and Service Workers to build a realtime PWA. We saw how service workers can be used to cache assets and resources so as to reduce the load time and also make sure that the app works even when offline.\n\nWe also saw how to use localStorage to save data locally for cases when the browser looses connectivity to the internet.\n\nThe app can be viewed live \u003ca href=\"https://build-zrxionqses.now.sh/\"\u003ehere\u003c/a\u003e and you can check out the Github repo [here](https://github.com/yomete/pushercoins). See if you can change stuff and perhaps make the app load faster!","metaTitle":"Build a realtime PWA with React","metaDescription":"In this tutorial you'll build a realtime PWA displaying the current and past price information about popular cryptocurrencies like BTC, LTC, and ETH, using React.js and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"QcaDBEoTGoyCkiK8umAiE","type":"Entry","createdAt":"2018-02-22T15:04:12.055Z","updatedAt":"2019-01-02T15:29:48.784Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with React Native","url":"chat-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/react-native-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-09-12","description":"Benefit from the powerful frameworks like React Native and build a live chat app.","prerequisite":"A basic understanding of React and Node.js are needed to follow this tutorial.","content":"Social chat applications are hugely popular these days, allowing people to stay connected on topics they are interested in from all over the world. In this article we’re going to explore creating a simple chat app in the [React Native](https://facebook.github.io/react-native/) framework, which allows us to use the same source code to target both Android and iOS. In order to keep this example simple to follow we’re going to focus only on the basics - a single chat room, and no authentication of the people chatting. \n\n![chat-app-react-native-demo](//images.contentful.com/1es3ne0caaid/5wRZEV2DjqoWk0mWUIQ6aI/fa20729730a5845efe2cadf3a6cf1246/chat-app-react-native-demo.gif)\n\nThe application will work in two parts. The client application will receive events from Pusher informing it of new users and new messages, and there will be a server application that is responsible for sending message to Pusher. \n\nIn order to implement this you need to have the following on your computer:\n\n- A recent version of Node.js\n- A text editor\n\nYou will also need a mobile device with the [Expo](https://expo.io/) tools installed - available from the Android Play Store or the Apple App Store for free. This is used to test the React Native application whilst you are still developing it. It works by allowing you to start and host the application on your workstation, and connect to it remotely from your mobile device as long as you are on the same network.\n\nNote as well that this article assumes some prior experience with writing JavaScript applications, and with the React framework - especially working with the ES6 and JSX versions of the language.\n\n\n## Creating a Pusher application to use\n\nFirstly, we’ll need to create a Pusher application that we can connect our server and client to. This can be done for free [here](https://dashboard.pusher.com/). When you create your application, you will need to make note of your App ID, App Key, App Secret and Cluster:\n\n![chat-app-react-native-create-pusher-app](//images.contentful.com/1es3ne0caaid/6mrD8WM6as0WIEka2AYI6I/0b294d87f2dccd850a508cfc46254d0a/chat-app-react-native-create-pusher-app.png)\n\n## Creating the server application\n\nOur server application is going to be written in Node.js using the Express web framework. We are going to have three RESTful endpoints, and no actual views. The endpoints are:\n\n- PUT /users/\u003cname\u003e - Indicate that a new user has joined\n- DELETE /users/\u003cname\u003e - Indicate that a user has left\n- POST /users/\u003cname\u003e/messages - Send a message to the chatroom\n\nCreating a new Node application is done using the `npm init` call, as follows:\n\n```\n    \u003e npm init\n    This utility will walk you through creating a package.json file.\n    It only covers the most common items, and tries to guess sensible defaults.\n    \n    See `npm help json` for definitive documentation on these fields\n    and exactly what they do.\n    \n    Use `npm install \u003cpkg\u003e --save` afterwards to install a package and\n    save it as a dependency in the package.json file.\n    \n    Press ^C at any time to quit.\n    name: (server) react-native-chat-server\n    version: (1.0.0)\n    description: Server component for our React Native Chat application\n    entry point: (index.js)\n    test command:\n    git repository:\n    keywords:\n    author:\n    license: (ISC)\n    \n    {\n      \"name\": \"react-native-chat-server\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Server component for our React Native Chat application\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"author\": \"\",\n      \"license\": \"ISC\"\n    }\n    \n    \n    Is this ok? (yes)\n```\n\nWe then need to install the modules that we’re going to depend on - `express`, `body-parser` - to allow us to parse incoming JSON bodies - and `pusher`, to talk to the Pusher API.\n\n```\n    \u003e npm install --save express body-parser pusher\n```\n\nThis gives us everything we need to get our server application written. Because it’s so simple we can do it all in one file - `index.js` - which will look like this:\n\n```\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusherConfig = require('./pusher.json'); // (1)\n    const pusherClient = new Pusher(pusherConfig);\n    \n    const app = express(); // (2)\n    app.use(bodyParser.json());\n    \n    app.put('/users/:name', function(req, res) { // (3)\n        console.log('User joined: ' + req.params.name);\n        pusherClient.trigger('chat_channel', 'join', {\n            name: req.params.name\n        });\n        res.sendStatus(204);\n    });\n    \n    app.delete('/users/:name', function(req, res) { // (4)\n        console.log('User left: ' + req.params.name);\n        pusherClient.trigger('chat_channel', 'part', {\n            name: req.params.name\n        });\n        res.sendStatus(204);\n    });\n    \n    app.post('/users/:name/messages', function(req, res) { // (5)\n        console.log('User ' + req.params.name + ' sent message: ' + req.body.message);\n        pusherClient.trigger('chat_channel', 'message', {\n            name: req.params.name,\n            message: req.body.message\n        });\n        res.sendStatus(204);\n    });\n    \n    app.listen(4000, function() { // (6)\n        console.log('App listening on port 4000');\n    });\n```\n\nThis is the entire Server application, which works as follows:\n\n1. Create a new Pusher client and configure it to connect to our Pusher application, as configured above\n2. Create a new Express server\n3. Add a new route - PUT /users/:name. This will send a *join* message to the Pusher application with the name of the user that has joined as the payload\n4. Add a new route - DELETE /users/:name. This will send a *part* message to the Pusher application with the name of the user that has just departed as the payload\n5. Add a third route - POST /users/:name/messages. This will send a *message* message to the Pusher application with the name of the user sending the message and the actual message as the payload\n6. Start the server listening on port 4000\n\nPusher has native support for Join and Leave notification as a part of it’s API, by leveraging the [Presence Channel](https://pusher.com/docs/client_api_guide/client_presence_channels) functionality. This requires [authentication](https://pusher.com/docs/authenticating_users) to be implemented before the client can use it though, which is beyond the scope of this article, but will give a much better experience if you are already implementing authentication.\n\n\n----------\n\n**Note**\nWhy the names *join* and *part*? It’s a throwback to the IRC specification. The names aren’t important at all - as long as they are distinct from each other, and consistent with what the client expects.\n\n----------\n\nBefore we can start the application, we need a Pusher configuration file. This goes in `pusher.json` and looks like this:\n\n```\n    {\n        \"appId\":\"SOME_APP_ID\",\n        \"key\":\"SOME_APP_KEY\",\n        \"secret\":\"SOME_APP_SECRET\",\n        \"cluster\":\"SOME_CLUSTER\",\n        \"encrypted\":true\n    }\n```\n\nThe values used here are exactly the ones taken from the Pusher application config we saw above.\n\n### Starting the server\nWe can now start this up and test it out. Starting it up is simply done by executing `index.js`:\n\n```\n    \u003e node index.js\n    App listening on port 4000\n```\n\nIf we then use a REST Client to interact with the server, by sending the appropriate messages to our server.\n\n![chat-app-react-native-test-server](//images.contentful.com/1es3ne0caaid/9ujxp3oRBC0gk8UkEEKmg/7d8f511d5b6dd85f6d6c237357f22cca/chat-app-react-native-test-server.png)\n\nDoing so will cause the correct messages to appear in the Debug Console in the Pusher Dashboard, proving that they are coming through correctly. \n\n![chat-app-react-native-view-pusher-message](//images.contentful.com/1es3ne0caaid/6EJ1Ea4i1UWcUuSQIsUGUw/e995486f1dd088181401ff6771f2a13b/chat-app-react-native-view-pusher-message.png)\n\nYou can do the same for the other messages, and see how it looks:\n\n![chat-app-react-native-view-pusher-messages](//images.contentful.com/1es3ne0caaid/2D7H9JCTfOuSgmWEgm4AS2/206acafd09cdea2d32f2fb58725d1a92/chat-app-react-native-view-pusher-messages.png)\n\n## Creating the client application\n\nOur client application is going to be built using React Native, and leveraging the `create-react-native-app` scaffolding tool to do a lot of work for us. This first needs to be installed onto the system, as follows:\n\n```\n    \u003e npm install -g create-react-native-app\n```\n\nOnce installed we can then create our application, ready for working on:\n\n```\n    \u003e create-react-native-app client\n    Creating a new React Native app in client.\n    \n    Using package manager as npm with npm interface.\n    Installing packages. This might take a couple minutes.\n    Installing react-native-scripts...\n    \n    npm WARN react-redux@5.0.6 requires a peer of react@^0.14.0 || ^15.0.0-0 || ^16.0.0-0 but none was installed.\n    Installing dependencies using npm...\n    \n    npm WARN react-native-branch@2.0.0-beta.3 requires a peer of react@\u003e=15.4.0 but none was installed.\n    npm WARN lottie-react-native@1.1.1 requires a peer of react@\u003e=15.3.1 but none was installed.    \n    \n    Success! Created client at client\n    Inside that directory, you can run several commands:\n\n      npm start\n        Starts the development server so you can open your app in the Expo\n        app on your phone.\n    \n      npm run ios\n        (Mac only, requires Xcode)\n        Starts the development server and loads your app in an iOS simulator.\n    \n      npm run android\n        (Requires Android build tools)\n        Starts the development server and loads your app on a connected Android\n        device or emulator.\n    \n      npm test\n        Starts the test runner.\n    \n      npm run eject\n        Removes this tool and copies build dependencies, configuration files\n        and scripts into the app directory. If you do this, you can’t go back!\n    \n    We suggest that you begin by typing:\n\n      cd client\n      npm start\n   \n    Happy hacking!\n```\n\nWe can now start up the template application ensure that it works correctly. Starting it is a case of running `npm start` from the project directory:\n\n![chat-app-react-native-start-application](//images.contentful.com/1es3ne0caaid/6lOnR2VsdO44uumQu00KY/05e0a81ced530618fb64bdc21ac39d55/chat-app-react-native-start-application.png)\n\nAmongst other things, this shows a huge QR Code on the screen. This is designed for the Expo app on your mobile device to read in order to connect to the application. If we now load up Expo and scan this code with it, it will load the application for you to see:\n\n![chat-app-react-native-default-homescreen](//images.contentful.com/1es3ne0caaid/5nantNK54AKgCEYaccUOiC/45300e8ddaa41ae0801bb01c70c14424/chat-app-react-native-default-homescreen.png)\n\n### Adding a Login screen\nThe first thing we’re going to need is a screen where the user can enter a name to appear as. This is simply going to be a label and a text input field for now.\n\nTo achieve this, we are going to create a new React component that handles this. This will go in `Login.js` and look like this:\n\n```\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, KeyboardAvoidingView } from 'react-native';\n    \n    export default class Login extends React.Component { // (1)\n      render() {\n        return (\n          \u003cKeyboardAvoidingView style={styles.container} behavior=\"padding\"\u003e // (2)\n            \u003cText\u003eEnter the name to connect as:\u003c/Text\u003e // (3)\n            \u003cTextInput autoCapitalize=\"none\" // (4)\n                       autoCorrect={false}\n                       autoFocus\n                       keyboardType=\"default\"\n                       maxLength={ 20 }\n                       placeholder=\"Username\"\n                       returnKeyType=\"done\"\n                       enablesReturnKeyAutomatically\n                       style={styles.username}\n                       onSubmitEditing={this.props.onSubmitName}\n                       /\u003e\n          \u003c/KeyboardAvoidingView\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({ // (5)\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      username: {\n        alignSelf: 'stretch',\n        textAlign: 'center'\n      }\n    });\n```\n\nThis works as follows:\n\n1. Define our Login component that we are going to use\n2. Render the `KeyboardAvoidingView`. This is a special wrapper that understands the keyboard on the device and shifts things around so that they aren’t hidden underneath it\n3. Render some simple text as a label for the user\n4. Render a text input field that will collect the name the user wants to register as. When the user presses the Submit button this will call a provided callback to handle the fact\n5. Apply some styling to the components so that they look as we want them to\n\nWe then need to make use of this in our application. For now this is a simple case of updating `App.js` as follows:\n\n```\n    import React from 'react';\n    import Login from './Login';\n    \n    export default class App extends React.Component { // (1)\n      constructor(props) {\n        super(props); // (2)\n        this.handleSubmitName = this.onSubmitName.bind(this); // (3)\n        this.state = { // (4)\n          hasName: false\n        };\n      }\n    \n      onSubmitName(e) { // (5)\n        const name = e.nativeEvent.text;\n        this.setState({\n          name,\n          hasName: true\n        });\n      }\n    \n      render() { // (6)\n        return (\n          \u003cLogin onSubmitName={ this.handleSubmitName } /\u003e\n        );\n      }\n    }\n```\n\nThis is how this works:\n\n1. Define our application component\n2. We need a constructor to set up our initial state, so we need to pass the props up to the parent\n3. Add a local binding for handling when a name is submitted. This is so that the correct value for `this` is used\n4. Set the initial state of the component. This is the fact that no name has been selected yet. We’ll be making use of that later\n5. When a name is submitted, update the component state to reflect this\n6. Actually render the component. This only renders the Login view for now\n\nIf you left your application running then it will automatically reload. If not then restart it and you will see it now look like this:\n\n![chat-app-react-native-login-page](//images.contentful.com/1es3ne0caaid/4vaH8gMx2MCyKYKiSGiGMA/8eb74f105ce45bc460776597bc153b40/chat-app-react-native-login-page.png)\n\n### Managing the connection to Pusher\nOnce we’ve got the ability to enter a name, we want to be able to make use of it. This will be a Higher Order Component that manages the connection to Pusher but doesn’t render anything itself.\n\nFirstly we are going to need some more modules to actually support talking to Pusher. For this we are going to use the [pusher-js](https://github.com/pusher/pusher-js/) module, which has React Native support. This is important because React Native is not a full Node compatible environment, so the full [pusher module](https://www.npmjs.com/package/pusher) will not work correctly.\n\n```\n    \u003e npm install --save pusher-js\n```\n\nWe then need our component that will make use of this. Write a file `ChatClient.js`:\n\n```\n    import React from 'react';\n    import Pusher from 'pusher-js/react-native';\n    import { StyleSheet, Text, KeyboardAvoidingView } from 'react-native';\n    \n    import pusherConfig from './pusher.json';\n    \n    export default class ChatClient extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          messages: []\n        };\n        this.pusher = new Pusher(pusherConfig.key, pusherConfig); // (1)\n    \n        this.chatChannel = this.pusher.subscribe('chat_channel'); // (2)\n        this.chatChannel.bind('pusher:subscription_succeeded', () =\u003e { // (3)\n          this.chatChannel.bind('join', (data) =\u003e { // (4)\n            this.handleJoin(data.name);\n          });\n          this.chatChannel.bind('part', (data) =\u003e { // (5)\n            this.handlePart(data.name);\n          });\n          this.chatChannel.bind('message', (data) =\u003e { // (6)\n            this.handleMessage(data.name, data.message);\n          });\n        });\n        \n        this.handleSendMessage = this.onSendMessage.bind(this); // (9)\n      }\n    \n      handleJoin(name) { // (4)\n        const messages = this.state.messages.slice();\n        messages.push({action: 'join', name: name});\n        this.setState({\n          messages: messages\n        });\n      }\n      \n      handlePart(name) { // (5)\n        const messages = this.state.messages.slice();\n        messages.push({action: 'part', name: name});\n        this.setState({\n          messages: messages\n        });\n      }\n      \n      handleMessage(name, message) { // (6)\n        const messages = this.state.messages.slice();\n        messages.push({action: 'message', name: name, message: message});\n        this.setState({\n          messages: messages\n        });\n      }\n    \n      componentDidMount() { // (7)\n        fetch(`${pusherConfig.restServer}/users/${this.props.name}`, {\n          method: 'PUT'\n        });\n      }\n    \n      componentWillUnmount() { // (8)\n        fetch(`${pusherConfig.restServer}/users/${this.props.name}`, {\n          method: 'DELETE'\n        });\n      }\n    \n      onSendMessage(text) { // (9)\n        const payload = {\n            message: text\n        };\n        fetch(`${pusherConfig.restServer}/users/${this.props.name}/messages`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(payload)\n        });\n      }\n    \n      render() { // (10)\n        const messages = this.state.messages;\n    \n        return (\n          \u003cText\u003eMessages: { messages.length }\u003c/Text\u003e\n        );\n      }\n    }\n```\n\nThere’s an awful lot going on here, so let’s go over it all:\n\n1. This is our Pusher client. The configuration for this is read from an almost identical to the one on the server - the only difference is that this file also has the URL to that server, but that’s not used by Pusher\n2. This is where we subscribe to the Pusher channel that our Server is adding all of the messages to\n3. This is a callback when the subscribe has been successful, since it’s an asynchronous event\n4. This is a callback registered whenever we receive a `join` message on the channel, and it adds a message to our list\n5. This is a callback registered whenever we receive a `part` message on the channel, and it adds a message to our list\n6. This is a callback registered whenever we receive a `message` message on the channel, and it adds a message to our list\n7. When the component first mounts, we send a message to the server informing them of the user that has connected\n8. When the component unmounts, we send a message to the server informing them of the usre that has left\n9. This is the handler for sending a message to the server, which will be hooked up soon\n10. For now we just render a counter of the number of messages received\n\nThis isn’t very fancy yet, but it already does all of the communications with both our server and with Pusher to get all of the data flow necessary.\nNote that to communicate with our server we use the [Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API), which is a standard part of the React Native environment. We do need the address of the server, which we put into our `pusher.json` file to configure it. This file then looks as follows here:\n\n```\n    {\n        \"appId\":\"SOME_APP_ID\",\n        \"key\":\"SOME_APP_KEY\",\n        \"secret\":\"SOME_APP_SECRET\",\n        \"cluster\":\"SOME_CLUSTER\",\n        \"encrypted\":true,\n        \"restServer\":\"http://192.168.0.15:4000\"\n    }\n```\n\n----------\n\n**Note**\nWhen you actually deploy this for real, the *restServer* property will need to be changed to the address of the live server.\n\n----------\n\n### Chat Display\nThe next thing that we need is a way to display all of the messages that happen in our chat. This will be a list containing every message, displaying when people join, when they leave and what they said. This will look like this:\n\n\n```\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, FlatList, KeyboardAvoidingView } from 'react-native';\n    import { Constants } from 'expo';\n    \n    export default class ChatView extends React.Component {\n      constructor(props) {\n        super(props);\n    \n        this.handleSendMessage = this.onSendMessage.bind(this);\n      }\n    \n      onSendMessage(e) { // (1)\n        this.props.onSendMessage(e.nativeEvent.text);\n        this.refs.input.clear();\n      }\n    \n      render() { // (2)\n        return (\n          \u003cKeyboardAvoidingView style={styles.container} behavior=\"padding\"\u003e\n            \u003cFlatList data={ this.props.messages } \n                      renderItem={ this.renderItem }\n                      styles={ styles.messages } /\u003e\n            \u003cTextInput autoFocus\n                       keyboardType=\"default\"\n                       returnKeyType=\"done\"\n                       enablesReturnKeyAutomatically\n                       style={ styles.input }\n                       blurOnSubmit={ false }\n                       onSubmitEditing={ this.handleSendMessage }\n                       ref=\"input\"\n                       /\u003e\n          \u003c/KeyboardAvoidingView\u003e\n        );\n      }\n    \n      renderItem({item}) { // (3)\n        const action = item.action;\n        const name = item.name;\n    \n        if (action == 'join') {\n            return \u003cText style={ styles.joinPart }\u003e{ name } has joined\u003c/Text\u003e;\n        } else if (action == 'part') {\n            return \u003cText style={ styles.joinPart }\u003e{ name } has left\u003c/Text\u003e;\n        } else if (action == 'message') {\n            return \u003cText\u003e{ name }: { item.message }\u003c/Text\u003e;\n        }\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'flex-start',\n        justifyContent: 'flex-start',\n        paddingTop: Constants.statusBarHeight\n      },\n      messages: {\n        alignSelf: 'stretch'\n      },\n      input: {\n        alignSelf: 'stretch'\n      },\n      joinPart: {\n        fontStyle: 'italic'\n      }\n    });\n```\n\nThis works as follows:\n\n1. When the user submits a new message, we call the handler we were provided, and then clear the input box so that they can type the next message\n2. Render a *FlatList* of messages, and an input box for the user to type their messages into. Each message is rendered by the *renderItem* function\n3. Actually render the messages in the list into the appropriate components. Every message is in a *Text* component, with the actual text and the styling depending on the type of message.\n\nWe then need to update the *render* method of the *ChatClient.js* component to look as follows:\n\n```\n      render() {\n        const messages = this.state.messages;\n    \n        return (\n            \u003cChatView messages={ messages } onSendMessage={ this.handleSendMessage } /\u003e\n        );\n      }\n```\n\nThis is simply so that it renders our new *ChatView* in place of just the number of messages received.\n\nFinally, we need to update our main view to display the Chat Client when logged in. Update *App.js* to look like this:\n\n```\n      render() {\n        if (this.state.hasName) {\n          return (\n            \u003cChatClient name={ this.state.name } /\u003e\n          );\n        } else {\n          return (\n            \u003cLogin onSubmitName={ this.handleSubmitName } /\u003e\n          );\n        }\n      }\n```\n\nThe end result of this will look something like this:\n\n![chat-app-react-native-demo](//images.contentful.com/1es3ne0caaid/5wRZEV2DjqoWk0mWUIQ6aI/fa20729730a5845efe2cadf3a6cf1246/chat-app-react-native-demo.gif)\n\n## Conclusion\n\nThis article has shown an introduction to the fantastic React Native framework for building universal mobile applications, and shown how it can be used in conjunction with the Pusher service for handling realtime messaging between multiple different clients.\n\nAll of the source code for this application is available at [Github](https://github.com/sazzer/react-native-chat).","metaTitle":"Build a chat app with React Native","metaDescription":"In this tutorial, build a simple chat app with React Native and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2C5JG7QhtqG04gAWegceOu","type":"Entry","createdAt":"2018-02-22T15:02:45.434Z","updatedAt":"2020-06-19T14:22:41.851Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a multiplayer quiz game with Vue.js","url":"game-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2iE6KIsESkeOEcCmEmCQM8","type":"Entry","createdAt":"2018-02-13T12:06:21.229Z","updatedAt":"2018-02-14T10:08:19.561Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Yomi Eluwande","url":"yomi-eluwande","email":"yomi.eluwande@gmail.com","twitter":"https://twitter.com/yomieluwande","github":"https://github.com/yomete","guestWriter":true}}],"projectRepo":"https://github.com/yomete/hamiltonlyrics","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-09-04","description":"Build a realtime multiplayer trivia game with Vue.js, Node.js and Pusher.","prerequisite":"A basic understanding of Vue.js and Node.js are needed to follow this tutorial.","content":"As developers, deploying applications and websites can be a pain point at times and we generally tend to prefer solutions that are easy and scalable. \n\nHosting solutions that require SSHing and having to make configurations and a million things to do before deploying can (and will) get tedious after a while. This is where Firebase Hosting comes in.\n\nWe’ll build a static website and deploy it to the web using Firebase Hosting. We are going to build a realtime multiplayer trivia game, the game is going to work like the popular multiplayer game [QuizUp](https://www.quizup.com/en). \n\nHere’s how the game is going to work. The questions are going to be gotten from the lyrics from [Hamilton: An American Musical](http://www.hamiltonthemusical.co.uk/) and users have to answer correctly the name of the character in the musical who sang that line. The game tests the user’s knowledge of Hamilton and users can play for as long as they like. See a demo below.\n\nhttps://player.vimeo.com/video/230121610\n\nOur game will be built with Vue.js and will use Pusher’s [**Client Events**](https://pusher.com/docs/client_api_guide/client_events) and [**Presence Channels**](https://pusher.com/docs/client_api_guide/client_presence_channels) to make sure a user’s move is shown realtime.\n\n## What are Presence Channels?\n\nPusher’s Presence channels expose the additional feature of an awareness of who is subscribed to that channel. This gives developers the ability to build features like chat rooms, collaborators on a document and multiplayer games.\n\nAll Presence Channels must be subscribed with the prefix of `presence-` and as with private channels a HTTP Request is made to a configurable authentication URL to determine if the current user has permissions to access the channel.\n\n## What are Client Events?\n\nClient events are simply a way in which events can be triggered directly from the client-side as opposed to triggering from the backend server. Client Events are used in instances where some actions may not need validation or persistence and can go directly via the socket to all the other clients connected to the channel.\n\nIn our case, we use the Client Events to update a user on the current score of the other user playing the game.\n\nClient Events have a number of enforced restrictions to ensure that the user subscribing to the channel is an authenticated user:\n\n1. Client events must be enabled for the application. You can do this in the *Settings* tab for your app within the Pusher dashboard.\n2. The user must be subscribed to the channel that the event is being triggered on.\n3. Client events can only be triggered on private and presence channels because they require authentication.\n4. Client events must be prefixed by `client-`. Events with any other prefix will be rejected by the Pusher server, as will events sent to channels to which the client is not subscribed.\n\nYou can read more on Client Events by going through the [documentation](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\n## Setting up Pusher\n\nLog in to your [dashboard](http://dashboard.pusher.com) (or [create a](https://pusher.com/) [free](https://pusher.com/) [account](https://pusher.com/) if you don’t already have one) and create a new app. Copy your `app_id`, `key`, `secret` and `cluster` and store them somewhere as we’ll be needing them later. \nOne more thing. In your dashboard, navigate to the App Settings tab and make sure the **Enable Client Events** checkbox is checked. This lets clients communicate directly with each other.\n\n## Initializing the Vue.js application\nVue.js is the preferred JavaScript framework to build the game because of its popularity and low barrier to getting started. There are some Vue.js tutorials on Pusher which you can read [here](https://blog.pusher.com/build-simple-real-time-app-with-vue-js-2-0-and-pusher/), [here](https://blog.pusher.com/build-realtime-chart-with-vuejs-pusher/) and [here](https://blog.pusher.com/exploring-real-time-apps-with-vuejs-es2016-and-webpack/).\n\nWe’re going to be using the [vue-cli](https://github.com/vuejs/vue-cli) to scaffold a Vue.js project. The `vue-cli` is a simple CLI for scaffolding Vue.js projects. It ships with many templates like [webpack](https://github.com/vuejs-templates/webpack), [browserify](https://github.com/vuejs-templates/browserify), [pwa](https://github.com/vuejs-templates/pwa) and [simple](https://github.com/vuejs-templates/simple).  We’ll install `vue-cli` and then use it to bootstrap the app using the webpack template, with the following commands:\n\n```\n    npm install -g vue-cli\n    vue init webpack hamiltonlyrics\n```\n\nThis creates a Vue.js app inside the a folder titled `hamiltonlyrics`. Navigate into the folder and run the command `npm run dev` to see the Vue.js application.\n\n## Setting up a Node.js Server\nAs explained above, Client Events require authentication to make sure a user is subscribed to the channel. Therefore, we are going to create a Node.js server so that Client Events can have an authentication route.\n\nLet’s install the modules we’ll need for the Node.js server.\n\n```\n    npm i express body-parser pusher\n```\n\nIn the root of the project directory, create a file named `server.js` and type in the following code:\n\n```\n    // server.js\n    const express = require('express')\n    const path = require('path')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher')\n    const crypto = require('crypto')\n    \n    //initialize Pusher with your appId, key and secret\n    const pusher = new Pusher({\n      appId: 'APP_ID',\n      key: 'APP_KEY',\n      secret: 'APP_SECRET',\n      cluster: 'YOUR_CLUSTER',\n      encrypted: true\n    })\n    \n    // Body parser middleware\n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    \n    // The code below helps to fix any potential CORS issue.\n    app.use((req, res, next) =\u003e {\n      // Website you wish to allow to connect\n      res.setHeader('Access-Control-Allow-Origin', '*')\n      // Request methods you wish to allow\n      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n      // Request headers you wish to allow\n      res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n      // Set to true if you need the website to include cookies in the requests sent\n      // to the API (e.g. in case you use sessions)\n      res.setHeader('Access-Control-Allow-Credentials', true)\n      // Pass to next layer of middleware\n      next()\n    })\n    \n    // Index API route for the Express app\n    app.get('/', (req, res) =\u003e {\n      res.send('Welcome')\n    })\n    \n    // API route used by Pusher as a way of authenticating users\n    app.post('/pusher/auth', (req, res) =\u003e {\n      let socketId = req.body.socket_id\n      let channel = req.body.channel_name\n      // Generate a random string and use as presence channel user_id\n      let presenceData = {\n        user_id: crypto.randomBytes(16).toString('hex')\n      }\n      let auth = pusher.authenticate(socketId, channel, presenceData)\n      res.send(auth)\n    })\n    \n    // Set port to be used by Node.js\n    app.set('port', (5000))\n    \n    app.listen(app.get('port'), () =\u003e {\n      console.log('Node app is running on port', app.get('port'))\n    })\n```  \n\nIn the code block above, Pusher is initialized with the dashboard credentials. The `/pusher/auth` route is also created.\n\nNow we can simply run `node server.js` and the Node.js app should be up and running. Before we go on let’s add the command above to the existing `scripts` object in the `package.json` file so we don’t have to type in the command every time. Open up the `package.json` file and edit the `dev` line inside the `scripts` object with the one below.\n\n```\n    \"dev\": \"nodemon server.js \u0026 node build/dev-server.js\"\n```\n\n## Building the game\n\nLet’s get started on building the game. We’ll be working with two files throughout the course of this tutorial, a `Home.vue` file and a `ChannelDetails.vue` file.\n\nNavigate to the `components` folder inside the `src` folder and create a new file called `ChannelDetails.vue`. This will contain the JavaScript code that establishes a connection to Pusher from the client side. Open the file and type in the following code:\n\n```\n    \u003cscript\u003e\n      import Pusher from 'pusher-js'\n      const pusher = new Pusher('APP_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true,\n        authEndpoint: 'http://localhost:5000/pusher/auth'\n      })\n    \n      export default ({\n        getPresenceID () {\n          // This function checks the address bar of the browser for params\n          let getQueryString = (field, url) =\u003e {\n            let href = url ? url : window.location.href\n            let reg = new RegExp('[?\u0026]' + field + '=([^\u0026#]*)', 'i')\n            let string = reg.exec(href)\n            return string ? string[1] : null\n          }\n          // Appends 'presence' to the result\n          let id = getQueryString('id')\n          id = 'presence-' + id\n          return id\n        },\n        subscribeToPusher () {\n          let presenceid = this.getPresenceID()\n          let channel = pusher.subscribe(presenceid)\n          return channel\n        }\n      })\n    \u003c/script\u003e\n```\n\nIf you use ESLint, you should be getting a warning that the Pusher JS library has not been installed. That can be installed by running this command `npm i pusher-js`. So what’s happening up there?\n\nFirstly, Pusher is imported and a connection is established using credentials like APP_KEY, and CLUSTER. An authEndpoint is added to the Pusher instance. The authEndpoint is the endpoint Pusher uses to authenticate users. \n\nSecondly, there are two functions above which are being exported. The first function `getPresenceID()` checks the address bar of the browser for URL parameters and then appends `presence` to the result. This is done so that the channel name will always have a prefix of `presence-` since we are using [Presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels).\n\nThe second function uses the result of the `getPresenceID()` function and uses it to subscribe to a channel (a Presence Channel to be specific).\n\nThe next thing to do is to start writing code for the game itself. Open up the `App.vue` file inside the `src` folder and make sure its content is similar to the code below: \n\n```\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003crouter-view\u003e\u003c/router-view\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: 'app'\n    }\n    \u003c/script\u003e\n    \n    \u003cstyle\u003ea\n      html {\n        background: #7fd4d3;\n      }\n      body {\n        background: #7fd4d3;\n        padding: 20px;\n      }\n      #app {\n        height: 100vh;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-align: center;\n        color: #fff;\n      }\n      .fade-enter-active, .fade-leave-active {\n        transition: opacity .5s\n      }\n      .fade-enter, .fade-leave-to /* .fade-leave-active in \u003c2.1.8 */ {\n        opacity: 0\n      }\n    \u003c/style\u003e\n```\n\nNavigate to the `src/components` directory and you should see a `Hello.vue` file. You can either delete that file or rename to `Home.vue` as we will be needing a `Home.vue` file inside the components folder.  Open up the file and type in/replace with the code below:\n\n```\n    \u003cscript\u003e\n      // Import ChannelDetails component created above\n      import ChannelDetails from '@/components/ChannelDetails'\n      // An array that holds the lyrics questions and their correct answers. All questions can be seen here https://gist.github.com/yomete/2d851c2adc008a9763a0db9f85879083\n      const lyrics = [\n        {\n          lyric: 'When he was ten his father split, full of it, debt-ridden. Two years later, see Alex and his mother bed-ridden. Half-dead sittin\\' in their own sick, the scent thick',\n          options: [{name: 'Aaron Burr', correct: false}, {name: 'James Madison', correct: false}, {name: 'John Laurens', correct: false}, {name: 'Eliza Hamilton', correct: true}],\n          answer: 'Eliza Hamilton'\n        },\n        {\n          lyric: 'I am sailing off to London. I’m accompanied by someone who always pays. I have found a wealthy husband. Who will keep me in comfort for all my days. He is not a lot of fun, but there’s no one',\n          options: [{name: 'Eliza', correct: false}, {name: 'Peggy', correct: false}, {name: 'Angelica', correct: true}, {name: 'Maria', correct: false}],\n          answer: 'Angelica'\n        }\n      ]\n      export default {\n        name: 'home',\n        data () {\n          return {\n            // This holds the current presence-id\n            presenceid: null,\n            // This checks if a question has been answered, default to false\n            hasAnswered: false,\n            // This holds the current question\n            question: null,\n            // This holds the options for the current question\n            options: null,\n            // This holds the correct answer for the current question\n            correctanswer: null,\n            // This is used for a countdown timer\n            count: null,\n            // Number of players in the game\n            players: 1,\n            // This checks if there's a second player, it becomes true when players = 2\n            secondplayer: false,\n            // This holds the player data for both players\n            playerdata: {\n              one: {\n                id: null,\n                score: 0,\n                userid: null\n              },\n              two: {\n                id: null,\n                score: 0,\n                userid: null\n              }\n            },\n            // This holds the userid for the current player\n            userid: null,\n            // This holds the current URL of the game\n            url: null\n          }\n        },\n        created () {\n          this.fetchData()\n        },\n        methods: {\n          fetchData () {},\n          getUniqueId () {}\n          checkPresenceID () {}\n          checkAnswer (item) {}\n          getRandomQuestions (array, count) {}\n          getNewQuestion () {}\n        } \n      }\n    \u003c/script\u003e\n    \n    \u003c!-- Add \"scoped\" attribute to limit CSS to this component only --\u003e\n    \u003cstyle scoped\u003e\n      .home {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 100vh;\n      }\n      h1 {\n        font-size: 3rem;\n        font-weight: bold;\n      }\n      p {\n        font-size: 1.5rem;\n        margin: 0 0 20px 0;\n      }\n      .play--button {\n        background-color: white;\n        color: #7fd4d3;\n        font-weight: bold;\n        border-radius: 20px;\n        letter-spacing: 1px;\n        padding: 20px;\n        transition: all .3s ease;\n        text-shadow: 0 1px 3px rgba(36,180,126,.4);\n        text-transform: uppercase;\n        box-shadow: 0 4px 6px rgba(50,50,93,.11), 0 1px 3px rgba(0,0,0,.08);\n      }\n      .play--button:hover {\n        background-color: white;\n        color: #7fd4d3;\n        transform: translateY(-1px);\n        box-shadow: 0 7px 14px rgba(50,50,93,.1), 0 3px 6px rgba(0,0,0,.08);\n      }\n      .fade-enter-active, .fade-leave-active {\n        transition: opacity .5s\n      }\n      .fade-enter, .fade-leave-to {\n        opacity: 0\n      }\n      a {\n        color: #fff;\n      }\n      p {\n        color: #fff;\n      }\n      h1 {\n        font-size: 3rem;\n        font-weight: bold;\n        text-align: center;\n      }\n      .fade-enter-active, .fade-leave-active {\n        transition: opacity .5s\n      }\n      .fade-enter, .fade-leave-to /* .fade-leave-active in \u003c2.1.8 */ {\n        opacity: 0\n      }\n      .play--button {\n        background-color: white;\n        color: #7fd4d3;\n        font-weight: bold;\n        border-radius: 20px;\n        letter-spacing: 1px;\n        padding: 20px;\n        transition: all .3s ease;\n        text-shadow: 0 1px 3px rgba(36,180,126,.4);\n        text-transform: uppercase;\n        box-shadow: 0 4px 6px rgba(50,50,93,.11), 0 1px 3px rgba(0,0,0,.08);\n        position: absolute;\n        top: 20px;\n        right: 20px;\n        z-index: 5;\n      }\n      .play--button:hover {\n        background-color: white;\n        color: #7fd4d3;\n        transform: translateY(-1px);\n        box-shadow: 0 7px 14px rgba(50,50,93,.1), 0 3px 6px rgba(0,0,0,.08);\n      }\n      .hamilton--header--text {\n        margin-top: 50px;\n      }\n      .hamilton--inner {\n        margin-top: 20px;\n      }\n      .hamilton--inner .left{\n        text-align: left;\n      }\n      .hamilton--inner .right{\n        text-align: right;\n      }\n      .title {\n        font-weight: bold;\n      }\n      .hamilton--lyrics--text {\n        width: 600px;\n        margin: 0 auto;\n      }\n      .hamilton--lyrics--text p {\n        font-weight: bold;\n      }\n      .hamilton--answers a{\n        display: block;\n        border: 3px solid white;\n        border-radius: 50px;\n        margin: 20px auto;\n        width: 500px;\n        padding: 10px;\n      }\n      .wronganswer {\n        background-color: #ec6969;\n        border: none !important;\n        opacity: 0.4;\n        transition: background-color 0.5s ease;\n      }\n      .correctanswer {\n        background-color: #00c4a7;\n        border: none !important;\n        transition: background-color 0.5s ease;\n      }\n    \u003c/style\u003e\n```\n\nIn the code block above, we set up the foundation for the game and how it’s going to work. Inside the `\u003cstyle\u003e` tag and inside the `\u003cscript\u003e` tag, there are a couple of functions that we will need to create and add logic to.\n\nLet’s take a look at the functions we need to create.\n\n### fetchData ()\nThis function is called inside the `created` hook and that means it will always be called whenever the instance has been created. Let’s write the code for this function.\n\n```\n    // Sets the data instance presenceid variable to the result of the getUniqueId function\n    this.presenceid = this.getUniqueId()\n    // This checks if there's no presence ID in the URL via the checkPresenceID function and appends the presenceid to the current URL so that we can have the URL end with a parameter like this https://hamilton-lyrics.firebaseapp.com/#/?id=agbew0gz\n    if (!this.checkPresenceID()) {\n      var separator = (window.location.href.indexOf('?') === -1) ? '?' : '\u0026'\n      window.location.href = window.location.href + separator + this.presenceid\n    }\n    // Sets the data instance url variable to the current URL.\n    this.url = window.location.href\n    // Gets a new question via the getNewQuestion() function\n    this.getNewQuestion()\n    // The channel variable is set to to the subscribeToPusher function in ChannelDetails.\n    let channel = ChannelDetails.subscribeToPusher()\n    \n    // The pusher:member_added event is triggered when a user joins a channel. We increase the number of players by one and also set the secondplayer boolean to true.\n    channel.bind('pusher:member_added', members =\u003e {\n      this.players += 1\n      this.secondplayer = true\n    })\n    \n    // Once a subscription has been made to a presence channel, an event is triggered with a members iterator. \n    channel.bind('pusher:subscription_succeeded', members =\u003e {\n      // This checks if its just one player online and sets them up as player one and the required info for the game\n      if (members.count === 1 \u0026\u0026 !this.playerdata.one.id) {\n        this.playerdata.one.id = members.myID\n        this.playerdata.one.userid = 1\n        this.userid = 1\n      // This checks if there's a player online already and sets the new player as player two.\n      } else if (members.count === 2) {\n        this.secondplayer = true\n        this.playerdata.two.id = members.myID\n        this.playerdata.two.userid = 2\n        this.userid = 2\n      }\n    })\n    // The pusher:member_removed is triggered when a user leaves a channel. We decrease the number of players by one and also set the secondplayer boolean to false.\n    channel.bind('pusher:member_removed', member =\u003e {\n      this.players -= 1\n      if (member.count === 1) {\n        this.secondplayer = false\n      }\n    })\n    // This function receives new data from Pusher and updates the exisiting scores. This is what updates each player's score in realtime.\n    channel.bind('client-send', (data) =\u003e {\n      if (this.userid === 1) {\n        this.playerdata.two.score = data.data.two.score\n      } else if (this.userid === 2) {\n        this.playerdata.one.score = data.data.one.score\n      }\n    })\n```\n\n### getUniqueId ()\nThis function simply generates random alphanumeric characters and adds a prefix of `id=` to the result.\n\n```\n    getUniqueId () {\n      return 'id=' + Math.random().toString(36).substr(2, 8)\n    }\n```\n\n### checkPresenceID ()\nThis function checks the address bar of the browser for URL parameters, in this case, any parameter that starts with `?id=` prefix and then returns the alphanumeric character at the end of the prefix. For example, this URL `https://hamilton-lyrics.firebaseapp.com/#/?id=agbew0gz` will return `agbew0gz`.\n\n```\n    checkPresenceID () {\n      let getQueryString = (field, url) =\u003e {\n        let href = url ? url : window.location.href\n        let reg = new RegExp('[?\u0026]' + field + '=([^\u0026#]*)', 'i')\n        let string = reg.exec(href)\n        return string ? string[1] : null\n      }\n      let id = getQueryString('id')\n      return id\n    }\n```\n\n### checkAnswer ()\nThis function is used to check if the answer chosen is correct or incorrect. If the chosen answer is correct, 10 points will be added to the current score and if the answer is incorrect, 10 points will be deducted. The score is also sent to other subscribers of the channel via the `channel.trigger()` function. At the end of it all, a new question is gotten via the `getNewQuestion()` function.\n\n```\n    checkAnswer (item) {\n      let channel = ChannelDetails.subscribeToPusher()\n      this.hasAnswered = true\n      if (item.name === this.correctanswer) {\n        if (this.userid === 1) {\n          this.playerdata.one.score += 10\n        } else if (this.userid === 2) {\n          this.playerdata.two.score += 10\n        }\n      } else {\n        if (this.userid === 1) {\n          this.playerdata.one.score = Math.max(0, this.playerdata.one.score -= 10)\n        } else if (this.userid === 2) {\n          this.playerdata.two.score = Math.max(0, this.playerdata.two.score -= 10)\n        }\n      }\n      channel.trigger('client-send', {data: this.playerdata})\n      this.count = 3\n      let countdown = setInterval(() =\u003e {\n        this.count -= 1\n        if (this.count === 0) {\n          clearInterval(countdown)\n          this.getNewQuestion()\n        }\n      }, 1000)\n    }\n```\n\n### getRandomQuestions ()\nThis function is used to select questions randomly from the `lyrics` array that holds the various questions. It takes in two arguments, `array` and `count`. \n`array` would be the array we are trying to pick a random item from (`lyrics`) and `count` is the number of item to be chosen (1 item). This function is called in the `getNewQuestion()` function below.\n\n```\n    getRandomQuestions (array, count) {\n      let length = array.length\n      let randomIndexes = []\n      let randomItems = []\n      let index, item\n    \n      count = count | 1\n    \n      while (count) {\n        index = Math.floor(Math.random() * length)\n        if (randomIndexes.indexOf(index) === -1) {\n          count--\n          randomIndexes.push(index)\n        }\n      }\n    \n      randomIndexes.forEach((index) =\u003e {\n        item = array.slice(index, index + 1).pop()\n        randomItems.push(item)\n      })\n    \n      if (randomItems.length === 1) {\n        return randomItems.pop()\n      } else {\n        return randomItems\n      }\n    }\n```\n\n### getNewQuestion ()\nThis function is used to get a new question for the game. It utilizes the `getRandomQuestions()` to get a new random question and sets it to the `question` variable. It also uses the question’s data in the `question` variable to initialize the various data instances.\n\n```\n    getNewQuestion () {\n      let question = this.getRandomQuestions(lyrics, 1)\n      this.question = question\n      this.options = question.options\n      this.correctanswer = question.answer\n      this.hasAnswered = false\n    }\n```\n\nWe are done with the functions. Let’s create the `template` tag and write the HTML code that will display the view for the game.\n\n```\n    \u003ctemplate\u003e\n      \u003ctransition name=\"fade\"\u003e\n        \u003cdiv class=\"home\" v-if=\"!secondplayer\"\u003e\n          \u003cdiv class=\"inner\"\u003e\n            \u003ch1\u003eDo you know your Hamilton Lyrics?\u003c/h1\u003e\n            \u003cp\u003eTest your knowledge of Hamilton: An American Musical by guessing who sang what lyric.\u003c/p\u003e\n            \u003cp\u003eInvite a second player by sending them this link {{url}}.\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"play\" v-if=\"secondplayer\"\u003e\n          \u003cdiv\u003e\n            \u003cdiv class=\"container hamilton--header--text\"\u003e\n              \u003ch1\u003eDo you know your Hamilton Lyrics?\u003c/h1\u003e\n    \n              \u003cdiv class=\"columns hamilton--inner\"\u003e\n                \u003cdiv class=\"column is-half left\"\u003e\n                  \u003cp class=\"title\"\u003eUser 1\u003c/p\u003e\n                  \u003cp class=\"subtitle\"\u003eTotal Score: {{playerdata.one.score}}\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv v-if=\"secondplayer\" class=\"column is-half right\"\u003e\n                  \u003cp class=\"title\"\u003eUser 2\u003c/p\u003e\n                  \u003cp class=\"subtitle\"\u003eTotal Score: {{playerdata.two.score}}\u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"hamilton--lyrics--text\"\u003e\n                \u003cp\u003e{{question.lyric}}\n                \u003c/p\u003e\n                \u003cdiv class=\"hamilton--answers\"\u003e\n                  \u003ca v-bind:class=\"{ 'wronganswer': hasAnswered \u0026\u0026 !item.correct, 'correctanswer': hasAnswered \u0026\u0026 item.correct}\" @click=\"checkAnswer(item)\" v-for=\"(item, index) in options\"\u003e{{item.name}}\u003c/a\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/transition\u003e\n    \u003c/template\u003e\n```\n\nIn the code above, we enclose everything in a `transition` tag with an attribute of `fade`. There are two `div` sections that display conditionally. The `div` tag with a class of `home` is shown when there’s just one player online and the `div` tag with a class of `play` is only shown when two players are online.\n\nAt the end of it all, your `Home.vue` file should look like [this](https://github.com/yomete/hamiltonlyrics/blob/master/src/components/Home.vue).\n\n## Setting up Firebase Hosting\n\nNow that our application is ready and working well, let’s deploy the application using Firebase Hosting. \n\nGetting started with Firebase Hosting is straightforward. Go over to [console.firebase.google.com](http://console.firebase.google.com) and create a new account or sign in if you already have an account.\n\n\u003e Since this is a platform hosted by Google, you’ll need a Gmail account to be able to sign up and use the Firebase Console\n\nYour dashboard should look like this (if you’re a new user). Let’s add a new project by clicking on the Add Project button.\n\n![multiplayer-game-vuejs-welcome-firebase](//images.contentful.com/1es3ne0caaid/EWv8NkPDpeIWkKy8kimIc/9a23d1ca68009da6bddcbb24af1b4e14/multiplayer-game-vuejs-welcome-firebase.png)\n\nThat opens up a modal box that asks you to give your project a name and also choose your region. Once that’s done, you should be redirected to the project’s dashboard which looks like this.\n\n![multiplayer-game-vuejs-firebase-overview](//images.contentful.com/1es3ne0caaid/kgAqSYiE1iYsSicGaqygI/244d9ddde4552fd2e403d5a6dad75b90/multiplayer-game-vuejs-firebase-overview.png)\n\nThe dashboard menu on the left shows all the Firebase services you can use in your application. \nBefore we start deploying apps with Firebase Hosting, we need to install the Firebase CLI using npm.\n\n```\n    npm install -g firebase-tools\n```\n\nIf you've previously installed Firebase command line tools, run the install command again to make sure you have the latest version. Once the Firebase CLI has been successfully installed, we can deploy apps to Firebase Hosting with a single command.\n\nNext step is to sign in to Google from the terminal so Firebase knows which account to use. Run the command `firebase login` in your terminal. This process takes you to a login page in a browser where you enter your Google credentials and you are then logged in. Now Firebase is installed on our computer and we can begin deployment.\n\n## Preparing the Vue.js app for deployment\n\nNow that we are done with the development of the app, it’s time to deploy the application to production via Firebase Hosting. How exactly do we do that? First of all, we need to build the Vue.js app for production and then run the Firebase deploy command. Let’s get started on that by running the command below.\n\n```\n    npm run build\n```\n\nThe command above helps to minify JS, HTML, and CSS. All static assets are also compiled with version hashes for efficient long-term caching, and a production `index.html` is auto-generated with proper URLs to these generated assets.\n\nOnce the command is done with its process, the production-ready app can be found in the `dist` folder. That is where the `firebase deploy` command will be used.\n \n## Deploying to Firebase\nWe’ll need to initiate Firebase for this project, specifically inside the `dist` folder. So run the command `firebase init`. That command prompts the following:\n\n\n1. You’ll be prompted to choose which of the Firebase CLI feature you want to use, choose **Hosting.**\n2. You’ll be prompted to associate the current project directory with a Firebase project. Choose a Firebase project or create a new one.\n3. You’ll be prompted to type in the name of the folder you want to use as a public directory. This public directory is the folder (relative to your project directory) that will contain Hosting assets to be uploaded with firebase deploy. In this case, the name of the folder is `dist`.\n4. You’ll be prompted to choose whether to configure the project as a single-page app. Choose **Y.**\n\nThe initialization process should be completed and we can run the `firebase deploy` command now. When the deploy process is done, a live URL will be generated automatically by Firebase, in this case, [hamilton-lyrics.firebaseapp.com](https://hamilton-lyrics.firebaseapp.com/). Firebase allows you to connect a domain to your Hosting instance so you can use a custom domain for your applications.\n\n## Conclusion\n\nIn this tutorial, we learnt how to deploy static pages to Firebase Hosting and making it realtime by using Pusher. We saw how to implement Pusher’s [Presence Channels](https://pusher.com/docs/client_api_guide/client_presence_channels) by using it to identify two different users online and then using it to build a multiplayer game. We also learnt how [Client Events](https://pusher.com/docs/client_api_guide/client_events#trigger-events) work, how to trigger events from the client side as opposed to triggering from a backend server.\n\nFirebase offers a slew of services that can help you to build apps faster and you can read about them on the [Firebase site](https://firebase.google.com/).\n\nIf you want to go through the source code for the game above, you can do that on [Github](https://github.com/yomete/hamiltonlyrics). You can also see the live demo at [hamilton-lyrics.firebaseapp.com](https://hamilton-lyrics.firebaseapp.com/).","metaTitle":"Build a multiplayer quiz game with Vue.js","metaDescription":"Build a realtime multiplayer trivia game with Vue.js, Node.js and Pusher. Learn how to deploy static pages to Firebase Hosting and make them realtime using Pusher. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1x4kYzxIYQE8Y0ae4WEICs","type":"Entry","createdAt":"2018-03-05T16:14:48.952Z","updatedAt":"2020-06-19T14:35:51.300Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime measuring app with ARKit","url":"realtime-measuring-arkit","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/MeasureARKitPusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4FiKU27gk88US4gKMGI222","type":"Entry","createdAt":"2018-02-12T15:08:02.376Z","updatedAt":"2018-02-26T12:31:12.773Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"AR-VR","url":"ar-vr","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-09-04","description":"Learn the basics of how to integrate ARKit and Pusher in a iOS app.","prerequisite":"A basic understanding of Swift is needed to follow this tutorial.","content":"Augmented reality (AR) is all about modifying our perception of the real world.\n\nInformation about our environment and surrounding objects can be overlaid to enhance your current perception of reality. This information can presented to the user in realtime, like in the case of a news feed in a live event.\n\nBut the flow of information can also go the other way around. We can send the information resulting from the interaction with the augmented reality experience. In both cases, Pusher can help you with sending and receiving data in realtime.\n\nIn this tutorial, we’re going to build an ARKit app to make simple measurements. While measuring, the app will create a 3D box with a width equal to the measured size:\n\nhttps://youtu.be/osby8WfvPQA\n\nIt will also send the measurements in realtime to Pusher:\n\nhttps://youtu.be/gRX3sHiV9Hg\n\nOne note of caution. The measurements are based on the plane detection’s capabilities of ARKit. They are not perfect in some situations, such as in low lighting or when a surface is not entirely flat. The results won’t be completely accurate all the time. They’re close, but they can vary.\n\nFor this tutorial, you’ll need:\n\n* A device with an A9 or later processor (iPhone 6s or better, iPhone SE, any iPad Pro, or the 2017 iPad)\n\n* [iOS 11 beta 5](https://9to5mac.com/2017/06/26/how-to-install-ios-11-public-beta-on-your-eligible-iphone-ipad-or-ipod-touch/)\n\n* [Xcode 9 beta 5](https://developer.apple.com/download/) (or superior)\n\n* A free [Pusher](https://pusher.com/) account\n\nLet’s get started.\n\n## Setting up the Xcode project\n\nOpen Xcode and create a new **Single View App**:\n\n![measuring-app-arkit-single-view-app](//images.contentful.com/1es3ne0caaid/1WsYh62UiIMkuUqO6k0Wie/234eaf20746c396ef328f03eb0707613/measuring-app-arkit-single-view-app.png)\n\nWe choose this option because we are going to manually set up an AR view along with other controls.\n\nEnter the project information, choosing **Swift** as the language:\n\n![measuring-app-arkit-new-project](//images.contentful.com/1es3ne0caaid/2ZbpcxDkSko2U2aC8eocIG/b403eebee3cea2e87ea61b26c3445990/measuring-app-arkit-new-project.png)\n\nCreate the project and close it. We’re going to use [CocoaPods](https://cocoapods.org/) to install the project’s dependencies. Open a terminal window and go to the root directory of your project. If you don’t have CocoaPods installed, execute:\n\n```\nsudo gem install cocoapods\n```\n\nOnce installed, create the file Podfile with the command:\n\n```\npod init\n```\n\nEdit this file to set the platform to iOS 11 and add the project dependencies:\n\n```\n# Uncomment the next line to define a global platform for your project\n\nplatform :ios, '11.0'\n\ntarget 'MeasureARPusher' do\n\n# Comment the next line if you're not using Swift \n# and don't want to use dynamic frameworks\n\nuse_frameworks!\n\n# Pods for MeasureARPusher\n\npod 'PusherSwift', 5.1.0\n\nend\n```\n\nOnce you edit Podfile, execute the following command to install the dependencies:\n\n```\npod install\n```\n\nNow open the Xcode workspace instead of the project file:\n\n```\nopen MeasureARPusher.xcworkspace\n```\n\nSelect the **Information Property List**. add a row of type **Privacy — Camera Usage Description** (NSCameraUsageDescription) and give it a description. This is so ARKit can access the camera:\n\n![measuring-app-arkit-privacy-camera-ar](//images.contentful.com/1es3ne0caaid/1tZ9Ds0AsAU8yuguCgc0yA/6db36c745dc4c45aa50fa925130ca85e/measuring-app-arkit-privacy-camera-ar.png)\n\nFinally, configure a team so you can run the app on your device:\n\n![measuring-app-arkit-team-signing](//images.contentful.com/1es3ne0caaid/632VUJT8hGWgWooOw6AaUY/aa556c455bac776c6868d9def1e3202e/measuring-app-arkit-team-signing.png)\n\nNow let’s start by building the user interface.\n\n## Building the user interface\n\nGo to `Main.storyboard` and drag an *ARKit SceneKit View* to the view:\n\n![measuring-app-arkit-controller-scene](//images.contentful.com/1es3ne0caaid/cPNRUgYiWc4eGKSoYYMYu/7122a52994a18aead2670780417dffc3/measuring-app-arkit-controller-scene.png)\n\nNext, add constraints to all sides of this view so that it fills the entire screen. You do this by pressing the ctrl key while dragging a line to each side and choosing leading, top, trailing, and bottom to the superview, with a value of `0`:\n\nhttps://youtu.be/qTpjmRjlriI\n\nAdd a button. Change its type to **Add Contact** in the **Attributes inspector**. Give it a white color **Tint**, and add a vertical and a horizontal constraint to center it in the middle of the screen:\n\n![measuring-app-arkit-controller-scene-button](//images.contentful.com/1es3ne0caaid/12VP7wMYloWUqU2scU2iCw/38c0a0fd20c0e004f74c935661f49bca/measuring-app-arkit-controller-scene-button.png)\n\nLet’s add a switch to control when the app is in measure mode. Set its initial state to Off in the Attributes inspector. Add a bottom and trailing constraint with a value of `-20` to place the control in the bottom-right part of the screen. You may want to place it in the bottom-center or another part of the screen if you prefer:\n\n![measuring-app-arkit-controller-switch-button](//images.contentful.com/1es3ne0caaid/6Ac4XSZNS0Kw2wMUMOMQgQ/b9dc66589121f1f74f572e7718c93068/measuring-app-arkit-controller-switch-button.png)\n\nNow add a text view. Disable its **Editable** and **Selectable** behaviors in the Attributes inspector*.* Change its background color. I chose a white color with 50% opacity.\n\nAdd a height constraint with a value of `90`. Add leading, top, and trailing constraints with the value 0 so it remains fixed to the top of the screen:\n\n![measuring-app-arkit-controller-text](//images.contentful.com/1es3ne0caaid/2GwELsUGH6GS22MAAWO02e/5ccfe066003d59100949e5d7a62aa5d6/measuring-app-arkit-controller-text.png)\n\nIn ViewController.swift, import the SceneKit and ARKit libraries:\n\n```\nimport SceneKit\nimport ARKit\n```\n\nThen, create two IBOutlets, one to the scene view and another one to the text view:\n\n![measuring-app-arkit-controller-scene-view](//images.contentful.com/1es3ne0caaid/1J5X4PVNFySaqUMyk08OQe/aa42ab71a8d95a657422b388f8a72d2d/measuring-app-arkit-controller-scene-view.png)\n\nFinally, an action on the switch control for the `changeValue` event:\n\n![measuring-app-arkit-controller-switchChanged](//images.contentful.com/1es3ne0caaid/3PToanpNiMOwMki0eOmusU/463581bcfb8493238b932a023d4aadd2/measuring-app-arkit-controller-switchChanged.png)\n\nAnd now we’re ready to start coding the app.\n\n## Building a measurement app\n\nLet’s start by making `ViewController.swift` implement `ARSCNViewDelegate` and defining the variables we’re going to need:\n\n``` swift\nclass ViewController: UIViewController, ARSCNViewDelegate {\n\n  ...\n\n  var box: Box!\n\n  var status: String!\n\n  var startPosition: SCNVector3!\n\n  var distance: Float!\n\n  var trackingState: ARCamera.TrackingState!\n\n  enum Mode {\n\n    case waitingForMeasuring\n\n    case measuring\n\n  }\n\n  ...\n\n}\n```\n\nWhere:\n\n- `box` represents the 3D box that is going to get drawn when measuring. We’ll review this class later on. For now, create it to eliminate the error.\n\n- `status` is a text that tells us if the app is ready or not to take measurements (whether the app has detected planes or not).\n\n- `startPosition` represents the measurement’s start position.\n\n- `distance` is the calculated distance from the start to the current position (the measurement itself).\n\n- `trackingState` holds the current tracking state of the camera.\n\n- `Mode` is an enumeration to indicate the possible states of the app.\n\nLet’s add another property to keep track of the state of the app, and do a few things depending on the set value:\n\n``` swift\nvar mode: Mode = .waitingForMeasuring {\n\n  didSet {\n\n    switch mode {\n\n      case .waitingForMeasuring:\n\n        status = \"NOT READY\"\n\n      case .measuring:\n\n        box.update(\n          minExtents: SCNVector3Zero, maxExtents: SCNVector3Zero)\n\n        box.isHidden = false\n\n        startPosition = nil\n\n        distance = 0.0\n\n        setStatusText()\n\n    }\n\n  }\n\n}\n```\n\nIf `waitingForMeasuring` is set, we’ll assume that the app is not ready. Don’t worry, if it is, the status will change immediately. If the mode is set to measuring, we’ll reset the size of the box. We’ll review the method update later. We’ll show if the box is hidden, reset the `startPosition` and `distance` variables, and call the method that displays the value of those variables.\n\nThis is the definition of the method `setStatusText()`:\n\n``` swift\nfunc setStatusText() {\n\n  var text = \"Status: \\(status!)\\n\"\n\n  text += \"Tracking: \\(getTrackigDescription())\\n\"\n\n  text += \"Distance: \\(String(format:\"%.2f cm\", distance! * 100.0))\"\n\n  statusTextView.text = text\n\n}\n\nfunc getTrackigDescription() -\u003e String {\n\n  var description = \"\"\n\n  if let t = trackingState {\n\n    switch(t) {\n\n      case .notAvailable:\n\n        description = \"TRACKING UNAVAILABLE\"\n\n      case .normal:\n\n        description = \"TRACKING NORMAL\"\n\n      case .limited(let reason):\n\n        switch reason {\n\n          case .excessiveMotion:\n\n            description = \n              \"TRACKING LIMITED - Too much camera movement\"\n\n          case .insufficientFeatures:\n\n            description = \n              \"TRACKING LIMITED - Not enough surface detail\"\n\n          case .initializing:\n\n            description = \"INITIALIZING\"\n\n        }\n\n    }\n\n  }\n\n  return description\n\n}\n```\n\nThis method sets the text of the text view to the measure status of *READY* or *NOT READY*. It shows a description of the tracking status of the AR camera with the help of the method `getTrackingDescription()`. And the (last) calculated distance in centimeters. Notice we have to multiply the value by `100.0`.\n\nNext, we have the method `viewDidLoad()`, where we set initial values, among other things:\n\n``` swift\noverride func viewDidLoad() {\n\n  super.viewDidLoad()\n\n\n  // Set the view's delegate\n\n  sceneView.delegate = self\n\n  // Set a padding in the text view\n\n  statusTextView.textContainerInset = \n      UIEdgeInsetsMake(20.0, 10.0, 10.0, 0.0)\n\n  // Instantiate the box and add it to the scene\n\n  box = Box()\n\n  box.isHidden = true;\n\n  sceneView.scene.rootNode.addChildNode(box)\n\n  // Set the initial mode\n\n  mode = .waitingForMeasuring\n\n  // Set the initial distance\n\n  distance = 0.0\n\n  // Display the initial status\n\n  setStatusText()\n\n}\n```\n\nIn the method `viewWillAppear`, create and run a [session](https://developer.apple.com/documentation/arkit/arsession) with [plane detection](https://developer.apple.com/documentation/arkit/arworldtrackingsessionconfiguration.planedetection). This is important because the points of the plane will be the elements we’ll use to measure things:\n\n``` swift\noverride func viewWillAppear(_ animated: Bool) {\n\n  super.viewWillAppear(animated)\n\n  // Create a session configuration with plane detection\n\n  let configuration = ARWorldTrackingConfiguration()\n\n  configuration.planeDetection = .horizontal\n\n  // Run the view's session\n\n  sceneView.session.run(configuration)\n\n}\n```\n\nAlso, override the method viewWillDisappear to pause the session when necessary:\n\n``` swift\noverride func viewWillDisappear(_ animated: Bool) {\n\n  super.viewWillDisappear(animated)\n\n  // Pause the view's session\n\n  sceneView.session.pause()\n\n}\n```\n\nUse the following method to know when the camera’s tracking state has changed. Save a reference to that state:\n\n``` swift\nfunc session(_ session: ARSession, cameraDidChangeTrackingState camera: ARCamera) {\n\n  trackingState = camera.trackingState\n\n}\n```\n\nThese methods are part of the callbacks that come with the protocol [ARSCNViewDelegate](https://developer.apple.com/documentation/arkit/arscnviewdelegate).\n\nNow, here comes the interesting part.\n\nThe method:\n\n``` swift\n(void)renderer:(id \u003cSCNSceneRenderer\u003e)renderer updateAtTime:(NSTimeInterval)time\n```\n\nIt’s called exactly once per frame, like 60 times per second. So we are going to call another method to use hit-testing to detect a plane we can interact with. When that happens, we’ll change the state from *NOT READY* to *READY*.\n\nThe implementation looks like this:\n\n``` swift\nfunc renderer(_ renderer: SCNSceneRenderer, updateAtTime time: TimeInterval) {\n\n  // Call the method asynchronously to perform\n\n  //  this heavy task without slowing down the UI\n\n  DispatchQueue.main.async {\n\n    self.measure()\n\n  }\n\n}\n\nfunc measure() {\n\n  let screenCenter : CGPoint = CGPoint(\n      x: self.sceneView.bounds.midX, y: self.sceneView.bounds.midY)\n\n  let planeTestResults = sceneView.hitTest(\n      screenCenter, types: [.existingPlaneUsingExtent])\n\n  if let result = planeTestResults.first {\n\n    status = \"READY\"\n\n  } else {\n\n    status = \"NOT READY\"\n\n  }\n\n  ...\n\n}\n```\n\nThe reference point will always be the center of the screen. That’s why we place that button with the plus sign. We’ll get the screen center coordinates to hit-test against an existing plane. If there’s a result, it means we can start measuring.\n\nThere are [four types of objects](https://developer.apple.com/documentation/arkit/arhittestresult.resulttype) we can find in a search:\n\n- [featurePoints](https://developer.apple.com/documentation/arkit/arhittestresult.resulttype/2875708-featurepoint)\n A point automatically identified by ARKit as part of a continuous surface, but without a corresponding anchor.\n\n- [estimatedHorizontalPlane](https://developer.apple.com/documentation/arkit/arhittestresult.resulttype/2887460-estimatedhorizontalplane)\nA real-world planar surface detected by the search and without a corresponding anchor. The orientation is perpendicular to gravity.\n\n- [existingPlane](https://developer.apple.com/documentation/arkit/arhittestresult.resulttype/2875738-existingplane)\nA plane anchor already in the scene, without considering the plane’s size.\n\n- [existingPlaneUsingExtent](https://developer.apple.com/documentation/arkit/arhittestresult.resulttype/2887459-existingplaneusingextent)\nA plane anchor already in the scene, respecting the plane’s limited size.\n\nThe easiest option would be to use feature points. They represent notable features detected in the camera image. They are detected quicker than planes and there are more of them.\n\nBut, this will give us very unstable results. Feature points are intermediate results of the scene analysis that ARKit uses to perform world tracking. So it’s recommended to do a hit test against existing plane anchors first.\n\nIf there’s a hit and the mode is measuring, we need to change the status to *MEASURING. *And extract the position as a vector of three elements (x, y, z) from the transformation matrix of the result:\n\n``` swift\nfunc measure() {\n\n  ...\n\n  if let result = planeTestResults.first {\n\n    status = \"READY\"\n\n    if mode == .measuring {\n\n      status = \"MEASURING\"\n\n      let worldPosition = SCNVector3Make(\n        result.worldTransform.columns.3.x,      \n        result.worldTransform.columns.3.y,\n        result.worldTransform.columns.3.z\n      )\n\n      ...\n\n    }\n\n  } ...\n\n}\n```\n\nIf `startPosition` is `nil` (the first measure), we use `worldPosition` to set its value as well as the box position:\n\n``` swift\nfunc measure() {\n\n  ...\n\n  if let result = planeTestResults.first {\n\n    status = \"READY\"\n\n    if mode == .measuring {\n\n      ...\n\n      let worldPosition = SCNVector3Make(\n        result.worldTransform.columns.3.x, \n        result.worldTransform.columns.3.y, \n        result.worldTransform.columns.3.z\n      )\n\n      if startPosition == nil {\n\n        startPosition = worldPosition\n\n        box.position = worldPosition\n\n      }\n\n      ...\n\n    }\n\n  } ...\n\n}\n```\n\nWe can calculate the distance between `startPosition` and `worldPosition` (the actual position) in a 3D space using the [Pythagorean theorem](https://math.stackexchange.com/questions/42640/calculate-distance-in-3d-space) and resize the box accordingly:\n\n``` swift\nfunc measure() {\n\n  ...\n\n  if let result = planeTestResults.first {\n\n    status = \"READY\"\n\n    if mode == .measuring {\n\n      ...\n\n      distance = calculateDistance(\n          from: startPosition!, to: worldPosition\n      )\n\n\n      box.resizeTo(extent: distance)\n\n      ...\n\n    }\n\n  } ...\n\n}\n\nfunc calculateDistance(from: SCNVector3, to: SCNVector3) -\u003e Float {\n\n  let x = from.x - to.x\n\n  let y = from.y - to.y\n\n  let z = from.z - to.z\n\n  return sqrtf( (x * x) + (y * y) + (z * z))\n\n}\n```\n\nBut the math is not done yet. We won’t be measuring straight lines all the time. To take measures in all directions and have the 3D box to follow, we need to take into account the rotation in the Y-axis.\n\nWe can get the angle (in radians) between two vectors using [atan2](https://en.wikipedia.org/wiki/Atan2) in this way:\n\n``` swift\nfunc measure() {\n\n  ...\n\n  if let result = planeTestResults.first {\n\n    status = \"READY\"\n\n    if mode == .measuring {\n\n      ...\n\n      let angleInRadians = calculateAngleInRadians(\n          from: startPosition!, to: worldPosition\n      )\n\n      box.rotation = SCNVector4(x: 0, y: 1, z: 0, \n          w: -(angleInRadians + Float.pi)\n      )\n\n    }\n\n  } ...\n\n}\n\n...\n\nfunc calculateAngleInRadians(from: SCNVector3, to: SCNVector3) -\u003e Float {\n\n  let x = from.x - to.x\n\n  let z = from.z - to.z\n\n  return atan2(z, x)\n\n}\n```\n\nHowever, the `atan2` function returns an angle from 0º to +/- 180º. Since we’re dealing with radians, we have to add the value of PI for normalization (PI in radians equals to 180º).\n\nAlso, notice that the rotation property of the 3D box takes a vector of four elements. The three first components are the axis (we need to rotate on the Y-axis). The fourth one is the rotation in radians.\n\nLet’s not forget the action for the switch control. It just changes the mode according to its state:\n\n``` swift\n@IBAction func switchChanged(_ sender: UISwitch) {\n\n  if sender.isOn {\n\n    mode = .measuring\n\n  } else {\n\n    mode = .waitingForMeasuring\n\n  }\n\n}\n```\n\nFor the 3D box, if you haven’t already, create the class extending from [SCNNode](https://developer.apple.com/documentation/scenekit/scnnode):\n\n``` swift\nimport SceneKit\n\nclass Box: SCNNode {\n\n}\n```\n\nLet’s also define two static functions outside the class that will help us add and subtract two vectors:\n\n``` swift\nclass Box: SCNNode {\n\n}\n\nfunc + (left: SCNVector3, right: SCNVector3) -\u003e SCNVector3 {\n\n  return SCNVector3Make(\n      left.x + right.x, left.y + right.y, left.z + right.z\n  )\n\n}\n\nfunc - (left: SCNVector3, right: SCNVector3) -\u003e SCNVector3 {\n\n  return SCNVector3Make(\n      left.x - right.x, left.y - right.y, left.z - right.z\n  )\n\n}\n```\n\nAdd the required constructors:\n\n``` swift\nclass Box: SCNNode {\n\n  override init() {\n\n    super.init()\n\n  }\n\n  required init?(coder aDecoder: NSCoder) {\n\n    fatalError(\"init(coder:) has not been implemented\")\n\n  }\n\n}\n```\n\nLet’s add a lazy variable so it’s initialized until the first time it is used. It will hold a reference to the 3D box ([SCNBox](https://developer.apple.com/documentation/scenekit/scnbox)) inside a node of type [SCNNode](https://developer.apple.com/documentation/scenekit/scnnode):\n\n``` swift\nclass Box: SCNNode {\n\n  lazy var box: SCNNode = makeBox()\n\n  ...\n\n  func makeBox() -\u003e SCNNode {\n\n    let box = SCNBox(\n        width: 0.01, height: 0.01, length: 0.01, chamferRadius: 0\n    )\n\n    return convertToNode(geometry: box)\n\n  }\n\n  func convertToNode(geometry: SCNGeometry) -\u003e SCNNode {\n\n    for material in geometry.materials {\n\n      material.lightingModel = .constant\n\n      material.diffuse.contents = UIColor.white\n\n      material.isDoubleSided = false\n\n    }\n\n    let node = SCNNode(geometry: geometry)\n\n      self.addChildNode(node)\n\n      return node\n\n    }\n\n}\n```\n\nIn theory, we could use any primitive shape derived from [SCNGeometry](https://developer.apple.com/documentation/scenekit/scngeometry). But in practice, SCNBox is easier to use because we can define its X, Y, and Z-axis dimensions by setting its width, height, and length properties. In this case, we use small values so the box is shown with a good size.\n\nAlso, notice we’re assigning a uniform white color to the box. You can use textures or configure the material in other ways to give it a more polished look.\n\nIn the resizeTo method, we get elements of the bounding box of the node and set the X-axis to the distance provided:\n\n``` swift\nfunc resizeTo(extent: Float) {\n\n  var (min, max) = boundingBox\n\n  max.x = extent\n\n  update(minExtents: min, maxExtents: max)\n\n}\n```\n\nThe update method takes the min and the modified max element to update the width of the box and the position of the node:\n\n``` swift\nfunc update(minExtents: SCNVector3, maxExtents: SCNVector3) {\n\n  guard let scnBox = box.geometry as? SCNBox else {\n\n    fatalError(\"Geometry is not SCNBox\")\n\n  }\n\n  // Normalize the bounds so that min is always \u003c max\n\n  let absMin = SCNVector3(\n      x: min(minExtents.x, maxExtents.x), \n      y: min(minExtents.y, maxExtents.y), \n      z: min(minExtents.z, maxExtents.z)\n  )\n\n  let absMax = SCNVector3(\n      x: max(minExtents.x, maxExtents.x), \n      y: max(minExtents.y, maxExtents.y), \n      z: max(minExtents.z, maxExtents.z)\n  )\n\n  // Set the new bounding box\n\n  boundingBox = (absMin, absMax)\n\n  // Calculate the size vector\n\n  let size = absMax - absMin\n\n  // Take the absolute distance\n\n  let absDistance = CGFloat(abs(size.x))\n\n  // The new width of the box is the absolute distance\n\n  scnBox.width = absDistance\n\n  // Give it a offset of half the new size so they box remains fixed\n\n  let offset = size.x * 0.5\n\n  // Create a new vector with the min position \n  // of the new bounding box\n\n  let vector = SCNVector3(x: absMin.x, y: absMin.y, z: absMin.z)\n\n  // And set the new position of the node with the offset\n\n  box.position = vector + SCNVector3(x: offset, y: 0, z: 0)\n\n}\n```\n\nAt this point, you’ll have a working AR measurement app. But let’s add the Pusher library to publish those measurements in realtime.\n\n## Sending out the measured data with Pusher\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/). Go to your Dashboard and create an app. Choosing a name, the cluster closest to you location, and *iOS* as your front-end technology:\n\n![measuring-app-arkit-create-app](//images.contentful.com/1es3ne0caaid/4RrIPzs4n6MOcq6sQeqUse/43a2f3fe6650bd4fb35305cff88e2af5/measuring-app-arkit-create-app.png)\n\nThis will give you some sample code to get started:\n\n![measuring-app-arkit-sample-code](//images.contentful.com/1es3ne0caaid/3gp7tJsgIUqIwUESA8iiIS/fe0af335b999b5ef643ae4a759fbe11d/measuring-app-arkit-sample-code.png)\n\nSave your key, secret and cluster values, as we’ll need them later.\n\nFinally, go to the **App Setting** tab, check the option **Enable client events** and click on **Update**:\n\n![measuring-app-arkit-app-settings-enable-client-events](//images.contentful.com/1es3ne0caaid/64NhmsVoKkoUCyeos8Wg66/6c84117b14b4343860b9f7f48650f4bc/measuring-app-arkit-app-settings-enable-client-events.png)\n\nWhat we are going to do is publish a client [event](https://pusher.com/docs/client_api_guide/client_events) to send the calculated measure in realtime.\n\nEvents are the primary way of packaging messages in Pusher. Not all these events need to go to a web server for validation or persistence when using Pusher.\n\nIn some cases, like in this app, events can be sent directly from the client to Pusher, and from there, to all the other clients connected to the channel. However, there are [some things we need to take into account](https://pusher.com/docs/client_api_guide/client_events#trigger-events):\n\n- Client events must be enabled for the application (like we did).\n\n- The user must be subscribed to the channel that the event is being triggered on.\n\n- Client events must be prefixed by client-.\n\n- Don’t publish more than [10 messages per second per client (connection)](https://pusher.com/docs/client_api_guide/client_events#rate_limit). Any events triggered above this rate limit will be rejected.\n\nIn ViewController, let’s import the Pusher library and instantiate the object. We’ll define a variable for the channel and another variable to control the rate of the triggered events:\n\n``` swift\n...\n\nimport PusherSwift\n\nclass ViewController: UIViewController, ARSCNViewDelegate {\n\n  ...\n\n  let pusher = Pusher(\n\n    key: \"\u003cYOUR_PUSHER_APP_KEY\u003e\",\n\n    options: PusherClientOptions(\n\n      authMethod: .inline(secret: \"\u003cYOUR_PUSHER_APP_SECRET\u003e\"),\n\n      host: .cluster(\"YOUR_PUSHER_APP_CLUSTER\")\n\n    )\n\n  )\n\n  var channel: PusherChannel!\n\n  var sendingTime : TimeInterval = 0\n\n  ...\n\n}\n```\n\nWe have to use a private authenticated channel for client events. The Pusher Swift library provides the following methods of authentication with the authMethod option:\n\n- `endpoint(authEndpoint:String)`\nThe client will make a POST request to the endpoint you specify.\n\n- `authRequestBuilder(authRequestBuilder:AuthRequestBuilderProtocol)`\nYou specify an object that conforms to the [AuthRequestBuilderProtocol](https://github.com/pusher/pusher-websocket-swift/blob/master/Source/AuthRequestBuilderProtocol.swift).\n\n- `inline(secret:String)`\nYour app’s secret so that authentication requests do not need to be made to your authentication endpoint. Instead subscriptions can be authenticated directly inside the library and used for development.\n\n- `authorizer(authorizer:Authorizer)` \nYou specify an object that conforms to the [Authorizer](https://github.com/pusher/pusher-websocket-swift/blob/master/Source/Authorizer.swift) protocol to provide the appropriate auth information.\n\n- `noMethod`\nIf you do not need to set an authentication method, this is the default value.\n\nYou can learn how to create an [authentication endpoint on this page](https://pusher.com/docs/authenticating_users#implementing_endpoints). For simplicity, we are using the inline option that doesn’t require a server for authentication.\n\nIn the method `viewDidLoad`, subscribe to a private channel. Remember to use the `private-` prefix and connect to Pusher:\n\n``` swift\noverride func viewDidLoad() {\n\n  ...\n\n  // subscribe to channel and connect\n\n  channel = pusher.subscribe(\"private-channel\")\n\n  pusher.connect()\n\n}\n```\n\nLet’s also add to the class a function to send a client event. Remember to use the client- prefix:\n\n``` swift\nfunc sendPusherEvent() {\n\n  channel.trigger(eventName: \"client-new-measurement\", \n      data: String(format: \"%.2f cm\", distance * 100.0)\n  )\n\n}\n```\n\nRemember that the method renderer and the measure function is executed once per frame. Ideally, this is 60 times per second. To limit the number of client events sent to Pusher, we are going to use the TimeInterval parameter of the renderer method. This tells us the time at which the scene is updated.\n\nModify the method measure to pass the parameter as its argument:\n\n``` swift\nfunc renderer(_ renderer: SCNSceneRenderer, updateAtTime time: TimeInterval) {\n\n  // Call the method asynchronously to perform\n\n  //  this heavy task without slowing down the UI\n\n  DispatchQueue.main.async {\n\n    self.measure(time: time)\n\n  }\n\n}\n\nfunc measure(time: TimeInterval) {\n\n  ...\n\n}\n```\n\nNow add the following if block after setting the box rotation:\n\n``` swift\nfunc measure(time: TimeInterval) {\n\n  ...\n\n  if let result = planeTestResults.first {\n\n    status = \"READY\"\n\n    if mode == .measuring {\n\n      ...\n\n      box.rotation = SCNVector4(x: 0, y: 1, z: 0, \n          w: -(angleInRadians + Float.pi)\n      )\n\n      // Only send the Pusher event after the specified interval\n\n      if time \u003e sendingTime {\n\n        sendPusherEvent();\n\n        sendingTime = time + TimeInterval(0.2)\n\n      }\n\n    }\n\n  } ...\n\n}\n```\n\nAt first run, time will be greater than `sendingTime`. But then, we add 0.2 seconds (or 200 milliseconds) to time to set the new value of sendingTime. This way, we can be sure that the Pusher event will be executed at most 5 times per second.\n\nHowever, due to this time difference, the last measure probably won’t be sent. So we can call the `sendPusherEvent` method when the user finishes measuring:\n\n``` swift\n@IBAction func switchChanged(_ sender: UISwitch) {\n\n  if sender.isOn {\n\n    mode = .measuring\n\n  } else {\n\n    mode = .waitingForMeasuring\n\n    sendPusherEvent()\n\n  }\n\n}\n```\n\nOf course, we could just send the last measure to Pusher to avoid the issue. But what will be the fun of sending only one value?\n\n## Testing the app\n\nLaunch the app:\n\n![measuring-app-arkit-demo](//images.contentful.com/1es3ne0caaid/48B5bcZCpGgweEc6C42mwQ/f4c965f0dfb90de0ffe25c3ba49b313a/measuring-app-arkit-demo.png)\n\nIt may take several seconds to initialize and find a plane so the status can change to *READY*, move around your device slowly and watch for the tracking state of the camera to speed up the process a little bit.\n\nOnce it’s *READY*, you will be able to take measurements and see them in realtime on your device:\n\nhttps://youtu.be/osby8WfvPQA\n\nAnd on the Debug console of your Pusher [dashboard](https://dashboard.pusher.com):\n\n![measuring-app-arkit-debug-console](//images.contentful.com/1es3ne0caaid/67YZpdDCBakcysAWsCAgqw/44b6b59f7ef021422f6a276082780566/measuring-app-arkit-debug-console.png)\n\n## Conclusion\n\nIn this tutorial, you have learned how to create a basic measurement app with ARKit and how to use Pusher to send client events from an *iOS* app.\n\nTracking the features of the real world is an important part of an augmented reality experience. However, sometimes the results are not accurate because the environment can be difficult to measure. In the [ARKit documentation](https://developer.apple.com/documentation/arkit/understanding_augmented_reality), you can find some tips to improve the AR experience.","metaTitle":"Build a realtime measuring app with ARKit","metaDescription":"Find out how you can create an AR measuring app for iOS devices using ARKit, Swift and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6oDIQjSLioGEKmYAg4GkS6","type":"Entry","createdAt":"2018-02-22T15:02:45.002Z","updatedAt":"2020-06-19T11:05:31.105Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a battleship game with Angular","url":"game-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/ng-battleship","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-08-25","description":"Build an online Battleship game with Angular and use Pusher's realtime API to enable two players to play against each other.\n","prerequisite":"A basic understanding of TypeScript and JavaScript is needed to follow this tutorial.","content":"Angular is a great framework for building modern JavaScript applications. In this article, we will be building a simple [Battleship game](https://en.wikipedia.org/wiki/Battleship_(game)) with Angular and will make use of the realtime capabilities of [Pusher](https://pusher.com/) to enable two players to play against each other.\n\nIn this article, you will learn how to:\n\n1. Start an Angular app from scratch with Angular CLI\n2. Generate and make use of Angular classes and services\n3. Create a game view using the main App Component\n4. Connect an Angular app to Pusher and trigger and listen for realtime events.\n\nTo follow along properly, you’ll need some knowledge of TypeScript. I will also be using the ES6 syntax. We will keep things really simple and at the end of the tutorial, we will have learned how to work with both Angular and Pusher to build modern realtime JavaScript applications.\n\nThe final app will look like this:\n\n![game-angular-demo](//images.contentful.com/1es3ne0caaid/343LzrovBeAukWeqWWqQOY/e3ae4f5d8e8f6326a0b6a7b1a88cba4c/game-angular-demo.gif)\n\nThe code for the completed app can be [found on GitHub](https://github.com/olayinkaos/ng-battleship).\n\n## Setting up the application with Angular CLI\n\nFirst, we will install Angular to our game app with Angular CLI.\n\nTo install Angular CLI:\n\n```\n    npm install -g angular-cli\n```\n\nNow we can install Angular to our app (named `ng-battleship`):\n\n```\n    ng new ng-battleship\n```\n\nYou can now navigate to the new directory and start the app on an Angular development server to verify that everything works properly:\n\n```\n    cd ng-battleship\n    ng serve\n```\n\nYou can view the app on http://localhost:4200/. This includes live-reload support, so when a source file changes, your browser automatically reloads the application. This means that you don’t have to restart the app when making changes and adding features during development. Pretty neat.\n\n\n## Importing external libraries\n\nWe will be using a couple of libraries to make our development smoother. We can pull them in with npm:\n\n```\n    npm install -S pusher-js bulma ng2-toastr\n```\n\nThe Pusher JavaScript library is pulled in for interacting with the Pusher service. We also optionally pull in [Bulma](http://bulma.io/), my CSS framework of choice, to take advantage of some quick styles.\n\nWe can now include these libraries in `angular-cli.json`, in the `styles` and `scripts` keys, so they can be loaded for our app:\n\n```\n    {\n      // ...\n      \"apps\": [\n        {\n          // ...\n          \"styles\": [\n            // ...\n            \"../node_modules/bulma/css/bulma.css\",\n            \"../node_modules/ng2-toastr/bundles/ng2-toastr.min.css\"\n          ],\n          \"scripts\": [\n            \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n          ],\n          // ...\n      ],\n      // ...\n    }\n```\n\n### Configuring Toastr\nWe need to add the following lines to `app.module.ts` so we can use Toastr:\n\n```\n    // ./src/app/app.module.ts\n    \n    import { ToastModule } from 'ng2-toastr/ng2-toastr';\n    \n    @NgModule({\n      // ...\n      imports: [\n        // ...\n        ToastModule.forRoot()\n      ],\n      // ...\n    })\n```\n\n## Creating the player boards\n\n### Generating player and board classes\nAngular creates TypeScript files so we can use classes to represent players and the boards for each player. Using Angular CLI to generate the `player` and `board` classes:\n\n```\n    ng generate class Player\n    ng generate class Board\n```\n\nWe can now update the logic for both classes. We will update our `Player` class first, as the `Board` class will depend on it:\n\n```\n    // ./src/app/player.ts\n    \n    export class Player {\n      id: number;\n      score: number = 0;\n    \n      constructor(values: Object = {}) {\n        Object.assign(this, values);\n      }\n    }\n```\n\nIn the `Player` class, we specify two properties: the player `id` and `score`. The `id` is a unique identifier for the player, while the `score` property holds the values of the player’s score in the game (both properties have a type of `number`). We also provide constructor logic that will allow us to create an instance of the class like this:\n\n```\n    let player = Player({\n      id: 1,\n      score: 15\n    })\n```\n\nNow we can update the `Board` class with the appropriate attributes and constructor logic, as we did in the `Player` class:\n\n```\n    // ./src/app/board.ts\n    \n    import { Player } from './player'\n    export class Board {\n      player: Player;\n      tiles: Object[];\n    \n      constructor(values: Object = {}) {\n        Object.assign(this, values);\n      }\n    }\n```\n\nThe `Board` class has two attributes: the `player` attribute which is an instance of the `Player` class, and `tiles` which is an array of objects making up the tiles in the board, each tile being represented by an object.\n\nNow we have separate testable entities for both players and boards and we can begin to build our game’s functionality around these entities.\n\n### Creating the board service\n\nNext, we will create a service to manage the core operations for our board:\n\n```\n    ng generate service Board\n```\n\nThis generates the service and a corresponding unit test file in the `src/app` directory. The generated service will look like this:\n\n```\n    // ./src/app/board.service.ts\n    \n    import { Injectable } from '@angular/core';\n    \n    @Injectable()\n    export class BoardService {\n      constructor() { }\n    }\n```\n\nNow we can update the service with the logic needed for working with the boards:\n\n```\n    // ./src/app/board.service.ts\n    \n    import { Injectable } from '@angular/core';\n    import { Board } from './board'\n    import { Player } from './player'\n    \n    @Injectable()\n    export class BoardService {\n    \n      playerId: number = 1;\n      boards: Board[] = [];\n    \n      constructor() { }\n    \n      // method for creating a board which takes\n      // an optional size parameter that defaults to 5\n      createBoard(size:number = 5) : BoardService {\n        // create tiles for board\n        let tiles = [];\n        for(let i=0; i \u003c size; i++) {\n          tiles[i] = [];\n          for(let j=0; j\u003c size; j++) {\n            tiles[i][j] = { used: false, value: 0, status: '' };\n          }\n        }\n        // generate random ships for the board\n        for (let i = 0; i \u003c size * 2; i++) {\n          tiles = this.randomShips(tiles, size);\n        }\n        // create board\n        let board = new Board({\n          player: new Player({ id: this.playerId++ }),\n          tiles: tiles\n        });\n        // append created board to `boards` property\n        this.boards.push(board);\n        return this;\n      }\n    \n      // function to return the tiles after a value\n      // of 1 (a ship) is inserted into a random tile  \n      // in the array of tiles\n      randomShips(tiles: Object[], len: number) : Object[] {\n        len = len - 1;\n        let ranRow = this.getRandomInt(0, len),\n            ranCol = this.getRandomInt(0, len);\n        if (tiles[ranRow][ranCol].value == 1) {\n          return this.randomShips(tiles, len);\n        } else {\n          tiles[ranRow][ranCol].value = 1;\n          return tiles;\n        }\n      }\n    \n      // helper function to return a random\n      // integer between ${min} and ${max}\n      getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      }\n    \n      // returns all created boards\n      getBoards() : Board[] {\n        return this.boards;\n      }\n    }\n```\n\nThe service contains various methods which help us create and use our battleship boards. The `createBoard()` method creates a board for each player. We can specify the size of the board by passing in the `size` parameter when calling the method. The default size of the board is specified as 5.\n\nWe also define the `randomShips()` and `getRandomInt()` methods to help in creating the boards. The `randomShips()` method is used to assign ships (represented by a value of 1) randomly to the board. The `getRandomInt()` is a helper method used to generate a random integer value between the specified min and max values — ideally this can be moved to a helper service.\n\nFinally, the `getBoards()` method returns all the boards created by the service.\n\nNow that we have created the service to interact with our boards, we can go ahead with building the core game functionality.\n\n\n## Adding core game functionality and views\n\n### Adding the game view\nWe will start by updating our app view. We will add some HTML and CSS, with some Angular directives to display the player boards:\n\n```\n    \u003c!-- ./src/app/app.component.html --\u003e\n    \u003cdiv class=\"section\"\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"content\"\u003e\n          \u003ch1 class=\"title\"\u003eReady to sink some battleships?\u003c/h1\u003e\n          \u003ch6 class=\"subtitle is-6\"\u003e\u003cstrong\u003ePusher Battleship\u003c/strong\u003e\u003c/h6\u003e\n          \u003chr\u003e\n          \n          \u003c!-- shows when a player has won the game --\u003e\n          \u003csection *ngIf=\"winner\" class=\"notification is-success has-text-centered\" style=\"color:white\"\u003e\n            \u003ch1\u003ePlayer {{ winner.player.id }} has won the game!\u003c/h1\u003e\n            \u003ch5\u003eClick \u003ca href=\"{{ gameUrl }}\"\u003ehere\u003c/a\u003e to start a new game.\u003c/h5\u003e\n          \u003c/section\u003e\n    \n          \u003c!-- shows while waiting for 2nd user to join --\u003e\n          \u003cdiv *ngIf=\"players \u003c 2\"\u003e\n            \u003ch2\u003eWaiting for 2nd user to join...\u003c/h2\u003e\n            \u003ch3 class=\"subtitle is-6\"\u003eYou can invite them with this link: {{ gameUrl }}?id={{ gameId }}. You can also open \u003ca href=\"{{ gameUrl }}?id={{ gameId }}\" target=\"_blank\"\u003ethis link\u003c/a\u003e in a new browser, to play all by yourself.\u003c/h3\u003e\n          \u003c/div\u003e\n    \n          \u003c!-- loops through the boards array and displays the player and board tiles --\u003e\n          \u003cdiv class=\"columns\" *ngIf=\"validPlayer\"\u003e\n            \u003cdiv class=\"column has-text-centered\" *ngFor=\"let board of boards; let i = index\"\u003e\n              \u003ch5\u003e\n                PLAYER {{ board.player.id }} \u003cspan class=\"tag is-info\" *ngIf=\"i == player\"\u003eYou\u003c/span\u003e\n                // \u003cstrong\u003eSCORE: {{ board.player.score }}\u003c/strong\u003e\n              \u003c/h5\u003e\n              \u003ctable class=\"is-bordered\" [style.opacity] = \"i == player ? 0.5 : 1\"\u003e\n                \u003ctr *ngFor=\"let row of board.tiles; let j = index\"\u003e\n                  \u003ctd *ngFor=\"let col of row; let k = index\"\n                  (click) = \"fireTorpedo($event)\"\n                  [style.background-color] = \"col.used ? '' : 'transparent'\"\n                  [class.win] = \"col.status == 'win'\" [class.fail] = \"col.status !== 'win'\"\n                  class=\"battleship-tile\" id=\"t{{i}}{{j}}{{k}}\"\u003e\n                  {{ col.value == \"X\" ? \"X\" : \"💀\" }}\n                \u003c/td\u003e\n              \u003c/tr\u003e\n            \u003c/table\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class=\"has-text-centered\"\u003e\n          \u003cspan class=\"tag is-warning\" *ngIf=\"canPlay\"\u003eYour turn!\u003c/span\u003e\n          \u003cspan class=\"tag is-danger\" *ngIf=\"!canPlay\"\u003eOther player's turn.\u003c/span\u003e\n          \u003ch5 class=\"title\"\u003e\u003csmall\u003e{{ players }} player(s) in game\u003c/small\u003e\u003c/h5\u003e\n        \u003c/div\u003e\n        \n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nTake note of the `*ngFor` directive which we use to loop through the boards for each player to display the board’s tiles and player properties. We also specify a `fireTorpedo()`  event handler for click events on each tile.\n\nDon’t worry, most of the properties referred to in the code above have not been defined yet. We will define them below as we add more functionality to our game.\n\n\u003e **Note:** You should check out the [official Angular guide](https://angular.io/guide/template-syntax) to have a better understanding of its template syntax.\n\nAdding some optional styles:\n\n```\n    /* ./src/styles.css */\n    \n    .container {\n      padding: 50px;\n    }\n    .battleship-tile {\n      color: black;\n    }\n    .win {\n      background-color: #23d160;\n      color: #fff;\n    }\n    .fail {\n      background-color: #ff3860;\n      color: #fff;\n    }\n    .content table td, .content table th {\n        border: 1px solid #dbdbdb;\n        padding: 0.5em 0.75em;\n        vertical-align: middle;\n        height: 50px;\n        text-align: center;\n    }\n    .content table {\n      width: 80%;\n      margin: 0 auto;\n    }\n    .content table tr:hover {\n        background-color: transparent;\n    }\n    .battleship-tile:hover {\n      cursor: pointer;\n    }\n```\n\n### Game functionality\n\nNext, we will update our main app component with some logic for the game:\n\n```\n    // ./src/app/app.component.ts\n    \n    // import needed classes and services\n    import { Component, ViewContainerRef } from '@angular/core';\n    import { ToastsManager } from 'ng2-toastr/ng2-toastr';\n    import { BoardService } from './board.service'\n    import { Board } from './board'\n    \n    // set game constants\n    const NUM_PLAYERS: number = 2;\n    const BOARD_SIZE: number = 6;\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css'],\n      providers: [BoardService]\n    })\n    \n    export class AppComponent {\n      canPlay: boolean = true;\n      player: number = 0;\n      players: number = 0;\n      gameId: string;\n      gameUrl: string = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port: '');\n    \n      constructor(\n        private toastr: ToastsManager,\n        private _vcr: ViewContainerRef,\n        private boardService: BoardService\n      ) {\n        this.toastr.setRootViewContainerRef(_vcr);\n        this.createBoards();\n      }\n    \n      // event handler for click event on\n      // each tile - fires torpedo at selected tile\n      fireTorpedo(e:any) : AppComponent {\n        let id = e.target.id,\n          boardId = id.substring(1,2),\n          row = id.substring(2,3), col = id.substring(3,4),\n          tile = this.boards[boardId].tiles[row][col];\n        if (!this.checkValidHit(boardId, tile)) {\n          return;\n        }\n    \n        if (tile.value == 1) {\n          this.toastr.success(\"You got this.\", \"HURRAAA! YOU SANK A SHIP!\");\n          this.boards[boardId].tiles[row][col].status = 'win';\n          this.boards[this.player].player.score++;\n        } else {\n          this.toastr.info(\"Keep trying.\", \"OOPS! YOU MISSED THIS TIME\");\n          this.boards[boardId].tiles[row][col].status = 'fail'\n        }\n        this.canPlay = false;\n        this.boards[boardId].tiles[row][col].used = true;\n        this.boards[boardId].tiles[row][col].value = \"X\";\n        return this;\n      }\n    \n      checkValidHit(boardId: number, tile: any) : boolean {\n        if (boardId == this.player) {\n          this.toastr.error(\"Don't commit suicide.\", \"You can't hit your own board.\")\n          return false;\n        }\n        if (this.winner) {\n          this.toastr.error(\"Game is over\");\n          return false;\n        }\n        if (!this.canPlay) {\n          this.toastr.error(\"A bit too eager.\", \"It's not your turn to play.\");\n          return false;\n        }\n        if(tile.value == \"X\") {\n          this.toastr.error(\"Don't waste your torpedos.\", \"You already shot here.\");\n          return false;\n        }\n        return true;\n      }\n      \n      createBoards() : AppComponent {\n        for (let i = 0; i \u003c NUM_PLAYERS; i++)\n          this.boardService.createBoard(BOARD_SIZE);\n        return this;\n      }\n      \n      // winner property to determine if a user has won the game.\n      // once a user gets a score higher than the size of the game\n      // board, he has won.\n      get winner () : Board {\n        return this.boards.find(board =\u003e board.player.score \u003e= BOARD_SIZE);\n      }\n    \n      // get all boards and assign to boards property\n      get boards () : Board[] {\n        return this.boardService.getBoards()\n      }\n    }\n```\n\nIn the code above, first we import the required objects and declare the game constants. Then, we initialize the component and define some of the properties and functions needed for the game view.\n\nThe `createBoards()` function creates boards for the game using the board service, based on the number of users and the game board size defined by the `NUM_PLAYERS` and `BOARD_SIZE` constants respectively.\n\nThe `fireTorpedo()` function handles every click event on any tile in the game view. It checks if a hit is valid first, using the `checkValidHit()` function, then determines if it was a hit or miss, and provides feedback to the user. \n\n\n## Adding multiplayer functionality using Pusher\n\n### What is Pusher?\nPusher is a service that makes it very easy to add realtime functionality to mobile and web applications. We will be making use of it to provide realtime updates between the two players in our game.\n\n### Pusher setup\nHead over to Pusher and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one. Then create an app on the [dashboard](https://dashboard.pusher.com/), and copy out the app credentials (App ID, Key, Secret and Cluster). It is super straight-forward.\n\nYou also need to **enable** [**client events**](https://pusher.com/docs/client_api_guide/client_events) in the Pusher dashboard for the app you created. This is super important, as we will be using client events for communication.\n\n### Creating the game backend\nTo make use of [presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) in Pusher, we will be need to implement a backend (in our case, we will use [Node.js](https://nodejs.org/en/)). This is as a result of presence channels needing authentication. There are other types of channels in Pusher (Public, Private) — You can read more about them [here](https://pusher.com/docs/client_api_guide/client_channels).\n\nFirst we pull in the required packages for our server:\n\n```\n    npm install -S express body-parser pusher\n```\n\nCreating the server file in the app root folder:\n\n```\n    touch server.js\n```\n\nUpdating with the required logic:\n\n``` language-javascript\n    // ./server.js\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const path = require('path');\n    const Pusher = require('pusher');\n    const crypto = require(\"crypto\");\n    \n    const app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // initialise Pusher.\n    // Replace with your credentials from the Pusher Dashboard\n    const pusher = new Pusher({\n      appId: 'YOUR_APP_ID',\n      key: 'YOUR_APP_KEY',\n      secret: 'YOUR_APP_SECRET',\n      cluster: 'YOUR_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // to serve our JavaScript, CSS and index.html\n    app.use(express.static('./dist/'));\n    \n    // CORS\n    app.all('/*', function(req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"*\");\n      next();\n    });\n    \n    // endpoint for authenticating client\n    app.post('/pusher/auth', function(req, res) {\n      let socketId = req.body.socket_id;\n      let channel = req.body.channel_name;\n      let presenceData = {\n        user_id: crypto.randomBytes(16).toString(\"hex\")\n      };\n      let auth = pusher.authenticate(socketId, channel, presenceData);\n      res.send(auth);\n    });\n    \n    // direct all other requests to the built app view\n    app.get('*', (req, res) =\u003e {\n      res.sendFile(path.join(__dirname, './dist/index.html'));\n    });\n    \n    // start server\n    var port = process.env.PORT || 3000;\n    app.listen(port, () =\u003e console.log('Listening at http://localhost:3000'));\n```\n\nIn the code above, we simply define an endpoint (`/pusher/auth`) for authenticating clients with Pusher, we then serve the app `index.html` file for every other request. See the [Pusher ‘authenticating users’ guide](https://pusher.com/docs/authenticating_users) for more information on the auth process.\n\n\n### Initialising Pusher and listening for changes\nAs a last step, we will initialise Pusher and listen for changes in our game:\n\n``` language-typescript\n    // ./src/app/app.component.ts\n    \n    // declare Pusher const for use\n    declare const Pusher: any;\n    \n    export class AppComponent {\n      pusherChannel: any;\n      //...\n    \n      constructor(\n        private toastr: ToastsManager,\n        private _vcr: ViewContainerRef,\n        private boardService: BoardService,\n      ) {\n        //...\n        this.initPusher();\n        this.listenForChanges();\n      }\n    \n      // initialise Pusher and bind to presence channel\n      initPusher() : AppComponent {\n        // findOrCreate unique channel ID\n        let id = this.getQueryParam('id');\n        if (!id) {\n          id = this.getUniqueId();\n          location.search = location.search ? '\u0026id=' + id : 'id=' + id;\n        }\n        this.gameId = id;\n    \n        // init pusher\n        const pusher = new Pusher('PUSHER_APP_KEY', {\n          authEndpoint: '/pusher/auth',\n          cluster: 'eu'\n        });\n    \n        // bind to relevant Pusher presence channel\n        this.pusherChannel = pusher.subscribe(this.gameId);\n        this.pusherChannel.bind('pusher:member_added', member =\u003e { this.players++ })\n        this.pusherChannel.bind('pusher:subscription_succeeded', members =\u003e {\n          this.players = members.count;\n          this.setPlayer(this.players);\n          this.toastr.success(\"Success\", 'Connected!');\n        })\n        this.pusherChannel.bind('pusher:member_removed', member =\u003e { this.players-- });\n    \n        return this;\n      }\n    \n      // Listen for `client-fire` events.\n      // Update the board object and other properties when \n      // event triggered\n      listenForChanges() : AppComponent {\n        this.pusherChannel.bind('client-fire', (obj) =\u003e {\n          this.canPlay = !this.canPlay;\n          this.boards[obj.boardId] = obj.board;\n          this.boards[obj.player].player.score = obj.score;\n        });\n        return this;\n      }\n    \n      // initialise player and set turn\n      setPlayer(players:number = 0) : AppComponent {\n        this.player = players - 1;\n        if (players == 1) {\n          this.canPlay = true;\n        } else if (players == 2) {\n          this.canPlay = false;\n        }\n        return this;\n      }\n      \n      fireTorpedo(e:any) : AppComponent {\n        // ...\n        \n        // trigger `client-fire` event once a torpedo\n        // is successfully fired\n        this.pusherChannel.trigger('client-fire', {\n          player: this.player,\n          score: this.boards[this.player].player.score,\n          boardId: boardId,\n          board: this.boards[boardId]\n        });\n        return this;\n      }\n      \n      // helper function to get a query param\n      getQueryParam(name) {\n        var match = RegExp('[?\u0026]' + name + '=([^\u0026]*)').exec(window.location.search);\n        return match \u0026\u0026 decodeURIComponent(match[1].replace(/\\+/g, ' '));\n      }\n    \n      // helper function to create a unique presence channel\n      // name for each game\n      getUniqueId () {\n        return 'presence-' + Math.random().toString(36).substr(2, 8);\n      }\n    \n      // check if player is a valid player for the game\n      get validPlayer(): boolean {\n        return (this.players \u003e= NUM_PLAYERS) \u0026\u0026 (this.player \u003c NUM_PLAYERS);\n      }\n      \n      // ...\n    }\n```\n\nThe `initPusher()` function initialises Pusher on the client side and subscribes to the presence channel created by the `getUniqueId()` method. We also make use of some functionality provided by the Pusher presence channel (`member_added`, `subscription_succeeded` and `member_removed` events) to update the players count and set turns.\n\nThe `listenForChanges()` is used to listen for the `client-fire` [client event](https://pusher.com/docs/client_api_guide/client_events), and update the game once it is triggered. The `client-fire` event is triggered in the `fireTorpedo()` function once a torpedo has been fired successfully. The event is broadcast with some data which will be used when updating the game view. The syntax for triggering an event with Pusher is `channelObject.``trigger(eventName, data)` — You can read more about it [here](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\n\n## Generating static files and starting the game\n\nFinally, we can build the app and start the server for the game:\n\n```\n    ng build\n    node server.js\n```\n\nAngular CLI generates the static files to the `./dist` folder, and we can view the game on http://localhost:8000 once the server starts!\n\n\n## Conclusion\n\nIn this tutorial, we have learned how to build a realtime Angular app from scratch, taking advantage of the awesome realtime capabilities of Pusher. There are a lot of improvements that could be made to the base game — the entire code for it is [hosted on Github](https://github.com/olayinkaos/ng-battleship), you’re welcome to make contributions and ask questions.","metaTitle":"Build a battleship game with Angular","metaDescription":"Build an online Battleship game with Angular and use Pusher's realtime API to enable two players to play against each other.Angular, Node.js and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"19Ko1PlZeuYwoee8gUsOqC","type":"Entry","createdAt":"2018-02-22T15:02:44.048Z","updatedAt":"2019-01-02T15:31:21.491Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a secure chat web app with JavaScript and Auth0 ","url":"secure-chat-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6AoCDqsg00U2ueqoaGSCWu","type":"Entry","createdAt":"2018-02-20T14:11:52.427Z","updatedAt":"2018-02-22T15:36:01.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Peter Mbanugo","url":"peter-mbanugo","email":"chuksgerrard@yahoo.com","twitter":"https://twitter.com/p_mbanugo","github":"https://github.com/pmbanugo","guestWriter":true}}],"projectRepo":"https://github.com/pmbanugo/Pusher-Auth0-ChatApp","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-08-22","description":"Build a chat application with Pusher, add user authentication with Auth0 Lock, and  manage users in the dashboard.","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"Security is hard. Often when we build applications we want to allow only registered users to access the application. We want to be able to manage user accounts, see when they last logged in, be able to disable suspicious accounts and have a dashboard to view and manage all this data. We might also decide to support multi-factor authentication and social login. \n\nBut security isn’t just hard, it also takes a while to implement. What if there’s a service that could take away this part of the development hassle from you? Why spend weeks or months rolling your own auth?  This is where Auth0 shines. In this tutorial, I’ll show you how to build a chat application with Pusher, add user authentication with Auth0 Lock, and manage users from the Auth0 dashboard. \n\n## Introduction to Auth0\n\n[Auth0](https://auth0.com/) is an Authentication-as-a-Service (or Identity-as-a-Service) provider focused on encapsulating user authentication and management,  which provides an SDK to allow developers to easily add authentication and manage users. Its user management dashboard allows for breach detection and multifactor authentication, and Passwordless login.\n\n## Building the application\n\nWe will be building a chat application that’ll allow users to communicate with each other where everyone sees every other person’s messages. It’ll work similarly to how channels work in Slack: just one channel for everybody to communicate.\n\nHere’s what we’ll be building:\n\n![secure-chat-javascript-demo](//images.contentful.com/1es3ne0caaid/1FolhPXgDOQAoWIssIkMaM/e52a0c5cd19ce35fedbc71c48437400a/secure-chat-javascript-demo.gif)\n\n### Setting up the backend\nWe’ll start by building the backend which will facilitate receiving and broadcasting chat messages, serving static files, and also setting up Auth0 and Pusher. \n\nFirst, you’ll need to signup for a Pusher and Auth0 account. Go to [pusher.com](https://pusher.com/) and [auth0.com](https://auth0.com) and sign up for an account. To use Pusher API we have to signup and create a Pusher app from the dashboard. We can create as many applications as we want and each one will get an application id and secret key which we’ll use to initialise a Pusher instance on client or server side code. \n\n### Create a new Pusher account\nTo create a new Pusher app, click the **Your apps** side menu, then click the **Create a new app** button below the drawer. This brings up the setup wizard.\n\n1. Enter a name for the application. In this case I’ll call it “chat”.\n2. Select a cluster.\n3. Select the option “Create app for multiple environments” if you want to have different instances for development, staging and production.\n4. Select **Vanilla JS** as the frontend and **NodeJS** as the backend.\n5. Complete the process by clicking `Create App` button to set up your app instance.\n\n![secure-chat-javascript-create-app](//images.contentful.com/1es3ne0caaid/2zeiLGobV2S0c20ka4MeM6/2b0d977350ce32db5e6e9bcd76bd28a5/secure-chat-javascript-create-app.png)\n\nSince we’re building our backend in Node using Express, let’s initialise a new Node app and install the needed dependencies. Run the following command:\n\n1. **npm init** and select the default options\n2. **npm i --save body-parser express pusher** to install express and the Pusher node package\n\nAdd a new file called `server.js` which will contain logic to authenticate the Pusher client and also render the static files we’ll be adding later. This file will contain the content below:\n\n```\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({ appId: APP_ID, key: APP_KEY, secret:  APP_SECRET, cluster: eu });\n    \n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    app.post('/message', function(req, res) {\n      var message = req.body.message;\n      var name = req.body.name;\n      pusher.trigger( 'private-chat', 'message-added', { message, name });\n      res.sendStatus(200);\n    });\n    \n    app.get('/',function(req,res){      \n         res.sendFile('/public/index.html', {root: __dirname });\n    });\n    \n    app.use(express.static(__dirname + '/public'));\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port, function () {\n      console.log(`app listening on port ${port}!`)\n    });\n```\n\nWe instantiate Pusher by passing in an object that contains the details of our app ID and secret key, which can be found on the **App Keys** tab in your Pusher dashboard. Pusher also provides a mechanism for authenticating users to a channel at the point of subscription. To do this, we expose an endpoint on the server that will validate the request and respond with a success or failure. This endpoint will be called by Pusher client libraries and can be named anything. We used the default name for this endpoint on Pusher, which is `/pusher/auth`. The line `var auth = pusher.authenticate(socketId, channel);` authenticates the client with Pusher and returns an authentication code to the calling client. \n\nTo allow this file to run when we start npm, we update **package.json** with the following value:\n\n```\n    \"scripts\": {\n        \"start\": \"node server.js\",\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      }\n```\n\n### Create an Auth0 client\nTo create an Auth0 client\n\n1. Select  **Clients** from the side menu.\n2. On the new page, click the **Create Client** button\n3. Enter a name for the app and select **Single Page App** as an option\n4. Click the **Create** button to create the client.\n\n\n![secure-chat-javascript-auth0-clients](//images.contentful.com/1es3ne0caaid/6bWbdlVChiCQGYkiGAcieQ/773cfaec3f0713c33b78472b4aced418/secure-chat-javascript-auth0-clients.png)\n\n\nAn Auth0 client provides us with Client Id and Secret which we’ll use to interact with Auth0 from the code. On the settings tab, we can see the Name, Client Id, Secret, Client Type and many more. I want to enable CORS for my domain http://localhost:5000, set the log out URL and the URL to redirect to after the user has been authenticated with Auth0. Update the following settings with **http://localhost:5000**\n\n1. Allowed Callback URLs\n2. Allowed Logout URLs\n3. Allowed Origins (CORS)\n\n### Building the frontend\nWith the backend all good to go, we build the web page that will facilitate messaging. Create a folder named **public** which will contain the html and javascript file. Create two new files **style.css and** **index.html** with the following content:\n\n```\n**style.css** \n\n    @import url(\"http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css\");\n    .chat\n    {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n    .chat li\n    {\n        margin-bottom: 10px;\n        padding-bottom: 5px;\n        border-bottom: 1px dotted #B3A9A9;\n    }\n    .chat li.left .chat-body\n    {\n        margin-left: 60px;\n    }\n    .chat li.right .chat-body\n    {\n        margin-right: 60px;\n    }\n    \n    .chat li .chat-body p\n    {\n        margin: 0;\n        color: #777777;\n    }\n    .panel .slidedown .glyphicon, .chat .glyphicon\n    {\n        margin-right: 5px;\n    }\n    .body-panel\n    {\n        overflow-y: scroll;\n        height: 250px;\n    }\n    ::-webkit-scrollbar-track\n    {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n        background-color: #F5F5F5;\n    }\n    ::-webkit-scrollbar\n    {\n        width: 12px;\n        background-color: #F5F5F5;\n    }\n    ::-webkit-scrollbar-thumb\n    {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n        background-color: #555;\n    }\n```\n\n```\n**index.html** \n\n    \u003c!-- template from http://bootsnipp.com/snippets/6eWd --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003c!-- Latest compiled and minified CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n        \u003c!-- Optional theme --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n        \u003cscript\n            src=\"https://code.jquery.com/jquery-2.2.4.min.js\"\n            integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003c!-- Latest compiled and minified JavaScript --\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003clink rel=\"stylesheet\" href=\"style.css\"\u003e\n        \u003cscript src=\"https://cdn.auth0.com/js/lock/10.18.0/lock.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"index.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row form-group\"\u003e\n            \u003cdiv class=\"col-xs-12 col-md-offset-2 col-md-8 col-lg-8 col-lg-offset-2\"\u003e\n                \u003cdiv class=\"panel panel-primary\"\u003e\n                    \u003cdiv class=\"panel-heading\"\u003e\n                        \u003cspan class=\"glyphicon glyphicon-comment\"\u003e\u003c/span\u003e \u003cspan id=\"username\"\u003e\u003c/span\u003e\n                        \u003cdiv class=\"btn-group pull-right\"\u003e\n                            \u003cbutton type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\" data-toggle=\"dropdown\"\u003e\n                                \u003cspan class=\"glyphicon glyphicon-chevron-down\"\u003e\u003c/span\u003e\n                            \u003c/button\u003e\n                            \u003cul class=\"dropdown-menu slidedown\"\u003e\n                                \u003cli\u003e\u003ca\u003e\u003cspan class=\"glyphicon glyphicon-refresh\"\u003e\n                                \u003c/span\u003eRefresh\u003c/a\u003e\u003c/li\u003e\n                                \u003cli\u003e\u003ca\u003e\u003cspan class=\"glyphicon glyphicon-ok-sign\"\u003e\n                                \u003c/span\u003eAvailable\u003c/a\u003e\u003c/li\u003e\n                                \u003cli\u003e\u003ca\u003e\u003cspan class=\"glyphicon glyphicon-remove\"\u003e\n                                \u003c/span\u003eBusy\u003c/a\u003e\u003c/li\u003e\n                                \u003cli\u003e\u003ca\u003e\u003cspan class=\"glyphicon glyphicon-time\"\u003e\u003c/span\u003e\n                                    Away\u003c/a\u003e\u003c/li\u003e\n                                \u003cli class=\"divider\"\u003e\u003c/li\u003e\n                                \u003cli\u003e\u003ca id=\"logout\"\u003e\u003cspan class=\"glyphicon glyphicon-off\"\u003e\u003c/span\u003e\n                                    Sign Out\u003c/a\u003e\u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-body body-panel\"\u003e\n                        \u003cul class=\"chat\"\u003e\n                            \n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-footer clearfix\"\u003e\n                        \u003ctextarea id=\"message\" class=\"form-control\" rows=\"3\"\u003e\u003c/textarea\u003e\n                        \u003cspan class=\"col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-xs-12\" style=\"margin-top: 10px\"\u003e\n                            \u003cbutton class=\"btn btn-warning btn-lg btn-block\" id=\"btn-chat\"\u003eSend\u003c/button\u003e\n                        \u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cscript id=\"new-message\" type=\"text/template\"\u003e\n        \u003cli id=\"{{id}}\" class=\"right clearfix\"\u003e\n            \u003cdiv class=\"chat-body clearfix\"\u003e\n                \u003cdiv class=\"header\"\u003e\n                    \u003csmall class=\"text-muted\"\u003e{{name}}\u003c/small\u003e\n                \u003c/div\u003e\n                \u003cp\u003e\n                    {{body}}\n                \u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/li\u003e\n    \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis file uses template from [bootsnip](http://bootsnipp.com/snippets/6eWd) and also includes a script reference to Auth0 Lock `\u003cscript src=\"https://cdn.auth0.com/js/lock/10.18.0/lock.min.js\"\u003e\u003c/script\u003e`. [Lock](https://auth0.com/docs/libraries#lock-login-signup-widgets) is  a drop-in authentication widget that provides a standard set of behaviours required for  and a customisable user interface. It provides a simple way to integrate with Auth0 with very minimal configuration. \n\nWe want to allow users to sign in when they enter the application and be able to send messages once they’re authenticated. Add a new file **index.js** with the following content:\n\n```\n    $(document).ready(function(){\n        // Initiating our Auth0Lock\n        let lock = new Auth0Lock(\n            'CLIENT_ID',\n            'CLIENT_DOMAIN',//example: lotus.auth0.com\n            {\n                auth: {\n                    params: {\n                        scope: 'openid profile'\n                    }   \n                },\n                autoclose: true,\n                closable: false,\n                rememberLastLogin: true\n            }\n        );\n    \n        let profile = JSON.parse(localStorage.getItem('profile'));\n        let isAuthenticated = localStorage.getItem('isAuthenticated');\n    \n        function updateValues(userProfile, authStatus) {\n            profile = userProfile;\n            isAuthenticated = authStatus;\n        }\n        \n        if(!isAuthenticated \u0026\u0026 !window.location.hash){\n            lock.show();//show Lock widget\n        }\n    \n        // Listening for the authenticated event\n        lock.on(\"authenticated\", function(authResult) {\n            // Use the token in authResult to getUserInfo() and save it to localStorage\n            lock.getUserInfo(authResult.accessToken, function(error, profile) {\n                if (error) {\n                    // Handle error\n                    return;\n                }\n                \n                localStorage.setItem('accessToken', authResult.accessToken);\n                localStorage.setItem('profile', JSON.stringify(profile));\n                localStorage.setItem('isAuthenticated', true);\n                updateValues(profile, true);\n                $(\"#username\").html(profile.name);\n            });\n        });\n    });\n```\n\nWe initialise Lock by passing it the Client Id of the app, your user domain which starts with your username followed by `.auth0.com` or `.{YOUR_SELECTED_REGION}.auth0.com` e.g `lotus.eu.auth0.com`. The widget is configurable and we can send in configuration options like *closable*, *autoClose*, and *auth*. Within the *auth* option we tell it to return the `openid`  and `profile` claims. \n\nWe check if the user is authenticated and show the widget when they’re not. Once the user is authenticated, Lock emits the `authenticated` event which we’ve subscribed to. When it’s raised, we store the user profile and other credentials to localStorage and set the user’s name to be displayed on the page. Once the user is authenticated, we want to connect to Pusher and send messages across. Update index.js with the following code: \n\n```\n    if(!isAuthenticated \u0026\u0026 !window.location.hash){\n        lock.show();\n    }\n    else{\n        \n        // Enable pusher logging - don't include this in production\n        Pusher.logToConsole = true;\n    \n        var pusher = new Pusher('APP_SECRET', {\n            cluster: 'e.g eu',\n            encrypted: false\n        });\n    \n        var channel = pusher.subscribe('private-chat');\n        channel.bind('message-added', onMessageAdded); \n    }\n    \n    function onMessageAdded(data) {\n        let template = $(\"#new-message\").html();\n        template = template.replace(\"{{body}}\", data.message);\n        template = template.replace(\"{{name}}\", data.name);\n    \n        $(\".chat\").append(template);\n    }\n```\n\nPusher is initialised with the **APP_SECRET** and **CLUSTER** which you can get from the app dashboard on Pusher. We subscribe to a channel called `private-chat`. Pusher has 3 types of channels: Public, Private and Presence channel. Private and Presence channels let your server control access to the data you are broadcasting. Presence channels go further to force subscribers to register user information when subscribing. Private channels are named starting with `private-` and authenticated in the server when subscribing. \n\nAnd finally we want to send the message to the user when they click send and also log them out when they select signout. Update **index.js** with the code below\n\n```\n    $('#btn-chat').click(function(){\n        const message = $(\"#message\").val();\n        $(\"#message\").val(\"\");\n            //send message\n        $.post( \"http://localhost:5000/message\", { message, name: profile.name } );\n    }); \n    \n    $(\"#logout\").click((e) =\u003e {\n        e.preventDefault();\n        logout();\n    });\n    \n    function logout(){\n        localStorage.clear();\n        isAuthenticated = false;\n        lock.logout({ \n            returnTo: \"http://localhost:5000\" \n        });\n    }\n```\n\nWhen the user clicks the send button, we take the message and put it in an object with the user’s profile name and send it to the `/message` endpoint on the server. When the logout button is clicked, it calls the logout function which clears the data stored in localStorage and call `lock.logout()` which logs the user out on Auth0 and redirects them back to our website. With all these additions, index.js should have the following content:\n\n```\n    $(document).ready(function(){\n        // Initiating our Auth0Lock\n        let lock = new Auth0Lock(\n            'CLIENT_ID',\n            'CLIENT_DOMAIN',\n            {\n                auth: {\n                    params: {\n                        scope: 'openid profile'\n                    }   \n                },\n                autoclose: true,\n                closable: false,\n                rememberLastLogin: true\n            }\n        );\n    \n        // Listening for the authenticated event\n        lock.on(\"authenticated\", function(authResult) {\n            // Use the token in authResult to getUserInfo() and save it to localStorage\n            lock.getUserInfo(authResult.accessToken, function(error, profile) {\n                if (error) {\n                    // Handle error\n                    console.log(error);\n                    return;\n                }\n                \n                localStorage.setItem('accessToken', authResult.accessToken);\n                localStorage.setItem('profile', JSON.stringify(profile));\n                localStorage.setItem('isAuthenticated', true);\n                updateAuthenticationValues(profile, true);\n                $(\"#username\").html(profile.name);\n            });\n        });\n    \n        let profile = JSON.parse(localStorage.getItem('profile'));\n        let isAuthenticated = localStorage.getItem('isAuthenticated');\n    \n        function updateAuthenticationValues(userProfile, authStatus) {\n            profile = userProfile;\n            isAuthenticated = authStatus;\n        }\n    \n        $(\"#logout\").click((e) =\u003e {\n            e.preventDefault();\n            logout();\n        });\n    \n        function logout(){\n            localStorage.clear();\n            isAuthenticated = false;\n            lock.logout({ \n                returnTo: \"http://localhost:5000\" \n            });\n        }\n        \n        function onMessageAdded(data) {\n            let template = $(\"#new-message\").html();\n            template = template.replace(\"{{body}}\", data.message);\n            template = template.replace(\"{{name}}\", data.name);\n    \n            $(\".chat\").append(template);\n        }\n    \n        if(!isAuthenticated \u0026\u0026 !window.location.hash){\n            lock.show();\n        }\n        else{\n            if(profile){\n                $(\"#username\").html(profile.name);\n            }\n            \n            // Enable pusher logging - don't include this in production\n            Pusher.logToConsole = true;\n    \n            var pusher = new Pusher('APP_SECRET', {\n                cluster: 'eu',\n                encrypted: false\n            });\n    \n            var channel = pusher.subscribe('private-chat');\n            channel.bind('message-added', onMessageAdded);\n    \n            $('#btn-chat').click(function(){\n                const message = $(\"#message\").val();\n                $(\"#message\").val(\"\");\n                 //send message\n                $.post( \"http://localhost:5000/message\", { message, name: profile.name } );\n            });  \n        }\n    });\n```\n\nTo test the app, run `npm start` on the terminal and open `http://localhost:5000` on two separate browsers. Here’s a run through of it:\n\n![secure-chat-javascript-demo](//images.contentful.com/1es3ne0caaid/1FolhPXgDOQAoWIssIkMaM/e52a0c5cd19ce35fedbc71c48437400a/secure-chat-javascript-demo.gif)\n\n## Wrap\n\nThis is an app to show how you can use Pusher to send messages in real-time and secure the channels, add user authentication and account management with Auth0, and easily integrate to Auth0 using Auth0 Lock. On your auth0 [dashboard](https://manage.auth0.com/#/) you can see the total number of users, logins and new signups. \n\n![secure-chat-javascript-stats](//images.contentful.com/1es3ne0caaid/4PRw4w6XgsGgOKqWG6qmYw/a040fac7f88b2deac878accf0e11e816/secure-chat-javascript-stats.png)\n\n![secure-chat-javascript-login-signups](//images.contentful.com/1es3ne0caaid/57ctsrk83YaWCYIQWQK0A6/11807e0d8e92009d4d0bbfda1cf5aaae/secure-chat-javascript-login-signups.png)\n\nYou can also see all your users when you click on the **Users** side menu.  On this page you can see the list of your users and their mode of login. \n\n![secure-chat-javascript-users](//images.contentful.com/1es3ne0caaid/66fytSfiy4soG26mqGKWy8/093174b5645bb84f428b9539b497638b/secure-chat-javascript-users.png)\n\nSelecting a user takes you to a more detailed page where you can take various actions on the account, for example,  blocking an account or sending a verification email. \n\n![secure-chat-javascript-users-details](//images.contentful.com/1es3ne0caaid/4LmCUeA3YAKEiI8gKOGaiW/ae6351dcbefb810250cc3f9e7c408e82/secure-chat-javascript-users-details.png)\n\nAlso on Pusher, you can go to your application dashboard, under the **Stats**, where you’ll see statistics concerning your application, such as connection frequency and how many messages were sent through that app. The combination of these two technologies makes it faster and easier to build real-time secured applications.","metaTitle":"Build a secure chat web app with JavaScript and Auth0 ","metaDescription":"Build a secure chat web application with Vanilla JavaScript, Node.js, Auth0 and Pusher. Create realtime features with Pusher, user authentication with Auth0 Lock, and manage users in the dashboard."}}],"defaultValue":"Node.js","queryType":"tag","pages":19,"route":"/tutorials","query":{"tag":"Node.js","page":"16"}}},"page":"/tutorials","query":{"tag":"Node.js","page":"16"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Node.js&page=16 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:41:25 GMT -->
</html>