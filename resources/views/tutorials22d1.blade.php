<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=11 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:42 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">296</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials.html" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/realtime-blog-kubeless.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kubernetes<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Adding realtime functionality to a blog using Kubeless</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this tutorial you will create a simple blog using serverless architecture for the backend, specifically Kubeless. You...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-python-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player game with Python and Vue</h3><p class="css-k12xad e5jrto45">Build a simple two-player game featuring online presence and realtime interactions. Use Python for the backend, and Vue ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/go-vue-online-presence.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Go application with online presence</h3><p class="css-k12xad e5jrto45">In this tutorial you&#x27;ll build a simple Go application, using Vue.js for the frontend. Users will be able to sign in and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with Go</h3><p class="css-k12xad e5jrto45">This brief tutorial helps you create a simple chat application. You will build the backend in Go, and the frontend in va...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/android-messenger-presence-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Android messenger app with online presence using Kotlin</h3><p class="css-k12xad e5jrto45">This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-widget-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat widget with Python and JavaScript</h3><p class="css-k12xad e5jrto45">This tutorial will guide you through building a simple chat widget in Python and JavaScript. You will build two interfac...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-widget-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a chat widget with Go and JavaScript</h3><p class="css-k12xad e5jrto45">This brief tutorial shows you how to quickly create a chat widget with a backend powered by Go, and a frontend and admin...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/calendar-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Calendar event scheduling in Vue</h3><p class="css-k12xad e5jrto45">Build a calendar using Vue.js, with a Node.js backend. Users are able to add events to the calendar, with all instances ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/push-notifications-kotlin-food-delivery.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement push notifications in Kotlin to create a food delivery app</h3><p class="css-k12xad e5jrto45">This tutorial uses Kotlin and React to create a full-featured food delivery application, with interfaces for admins and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsfcb9.html?product=Channels&amp;page=10" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialse35b.html?product=Channels&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialse8e8.html?product=Channels&amp;page=9" class="css-za1ua3 edg0byb1">9</a><a href="tutorialsfcb9.html?product=Channels&amp;page=10" class="css-za1ua3 edg0byb1">10</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials22d1.html?product=Channels&amp;page=11" class="css-2wakph edg0byb1">11</a><a href="tutorials1798.html?product=Channels&amp;page=12" class="css-za1ua3 edg0byb1">12</a><a href="tutorials3ffc.html?product=Channels&amp;page=13" class="css-za1ua3 edg0byb1">13</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials20e0.html?product=Channels&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorials1798.html?product=Channels&amp;page=12" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":296,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2d4PDsL23OUcUGAYceGw8g","type":"Entry","createdAt":"2018-08-23T18:19:02.151Z","updatedAt":"2018-08-23T19:55:19.188Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Adding realtime functionality to a blog using Kubeless","url":"realtime-blog-kubeless","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-kubeless-blog","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4sfpYwaAdiGWy2gW6Ak2Yc","type":"Entry","createdAt":"2018-08-23T19:44:54.047Z","updatedAt":"2018-08-23T19:53:29.265Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kubernetes","url":"kubernetes","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-08-15","description":"In this tutorial you will create a simple blog using serverless architecture for the backend, specifically Kubeless. You will add basic blogging functionality, including realtime post publishing. You will use React for your frontend.","prerequisite":"You will need a functioning Kubernetes system (1.8+). This tutorial was created and tested using Kubernetes 1.10 inside Docker 18.05 on macOS 10. It assumes you can debug Kubernetes problems on your own system.","content":"## Introduction\n\nIn this article, we are going to examine how to create a simple blog using a serverless architecture - in specific, Kubeless. This will show how we can connect simple handlers together to make everything work, and how we can add new functionality easily to the system without any major upheaval. \n\n![kubeless-realtime-demo](//images.ctfassets.net/1es3ne0caaid/50s0MKQDgAYuAEg44SMOCI/844d2ce62cc17e55ca40e1a8c598095f/kubeless-realtime-demo.gif)\n\n\n### What is a serverless architecture?\n\nServerless development is a relatively recent architectural pattern that separates the business logic from the connectivity and deployment concerns. As a developer, you need only be interested in writing the actual core functionality of your application - for example, the code that will persist a blog post to the data store. You then deploy this small piece of code into the serverless framework and configure it to be triggered by appropriate events - for example, incoming HTTP requests. The framework then takes care of all the orchestration needed to make everything work together correctly.\n\n## Prerequisites\n\nThis article focuses on the use of Kubeless as a serverless architecture. This needs a functioning Kubernetes system (at least version 1.8) in order for it to work, and it is assumed that this is already available. If not then it can be set up on a local system using [Minikube](https://kubernetes.io/docs/setup/minikube/), or the [Edge channel of Docker for Desktop](https://blog.docker.com/2018/02/docker-compose-kubernetes-docker-desktop/). You will also need to install the *kubeless* CLI as described on the [Kubeless Quick Start page](https://github.com/kubeless/kubeless/blob/master/docs/quick-start.md). \n\n\n\u003e **Note:** it is assumed that Kubernetes is already installed and working on your system, and that you are able to work with it to diagnose any system-specific issues that might come up.\n\n\n\u003e **Note:** this article was tested using Kubernetes 1.10 running inside Docker 18.05 on macOS 10.13.5. \n\n\n\u003e **Note:**  you don’t need to actually set up kubeless inside your kubernetes cluster. We will cover that later on in this article.\n\nWe will be using Node.js to develop the serverless functions and Create React App for the user interface. Whilst there is no need to actually run the functions locally, npm is needed to configure their dependencies, and a full Node.js stack is needed for Create React App to be used, so ensure that these are available for use.\n\n### Create a Pusher account\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Then create a new Pusher Channels app and save the keys for later on.\n\n## Creating the blog backend\n\nOur backend architecture will be created using a series of small functions wired up in the Kubeless system. Our overall architecture will eventually look like this:\n\n![kubeless-realtime-architecture](//images.ctfassets.net/1es3ne0caaid/5TNtaKTsKA6ycUs4Uei8ms/b5a453c99e125a2a8ac335fcedc341f6/kubeless-realtime-architecture.png)\n\nThis looks a little daunting at first, but each of the five functions that we are going to write are very simple, and the rest of the system is handled for us by Kubeless.\n\n### Setting up Kubeless\n\nBefore we can do anything, we need to set up the underlying Kubeless architecture. This includes Kubeless itself, Kafka, MongoDB and Nginx for ingress.\n\n\n\u003e **Note:** at the time of writing, the latest version of Kubeless was v1.0.0-alpha.7. \n\n\n\u003e **Note:** ingress is the setup allowing HTTP calls to come in to the Kubeless infrastructure from outside on clean URLs. There are other alternatives available, but Nginx is easy to work with and does everything we need.\n\nIn order to set up Kubeless itself, we need to execute the following:\n\n```\n    $ kubectl create ns kubeless\n    namespace \"kubeless\" created\n    \n    $ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kubeless-non-rbac-v1.0.0-alpha.7.yaml\n    serviceaccount \"controller-acct\" created\n    customresourcedefinition.apiextensions.k8s.io \"functions.kubeless.io\" created\n    customresourcedefinition.apiextensions.k8s.io \"httptriggers.kubeless.io\" created\n    customresourcedefinition.apiextensions.k8s.io \"cronjobtriggers.kubeless.io\" created\n    configmap \"kubeless-config\" created\n    deployment.apps \"kubeless-controller-manager\" created\n```\n\nThis creates a Kubernetes namespace in which Kubeless will live, and creates the Kubeless resources from the specified resource definition. \n\nWe then can set up Kafka in the cluster in a very similar manner:\n\n```\n    $ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kafka-zookeeper-v1.0.0-alpha.7.yaml\n    customresourcedefinition.apiextensions.k8s.io \"kafkatriggers.kubeless.io\" created\n    service \"broker\" created\n    statefulset.apps \"kafka\" created\n    service \"kafka\" created\n    service \"zoo\" created\n    statefulset.apps \"zoo\" created\n    clusterrole.rbac.authorization.k8s.io \"kafka-controller-deployer\" created\n    clusterrolebinding.rbac.authorization.k8s.io \"kafka-controller-deployer\" created\n    service \"zookeeper\" created\n    deployment.apps \"kafka-trigger-controller\" created\n```\n\nAnd the Nginx ingress resources in the same way:\n\n```\n    $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/bc59b7ddeee6e252974853f167c299005c600781/deploy/mandatory.yaml\n    namespace \"ingress-nginx\" created\n    deployment.extensions \"default-http-backend\" created\n    service \"default-http-backend\" created\n    configmap \"nginx-configuration\" created\n    configmap \"tcp-services\" created\n    configmap \"udp-services\" created\n    serviceaccount \"nginx-ingress-serviceaccount\" created\n    clusterrole.rbac.authorization.k8s.io \"nginx-ingress-clusterrole\" created\n    role.rbac.authorization.k8s.io \"nginx-ingress-role\" created\n    rolebinding.rbac.authorization.k8s.io \"nginx-ingress-role-nisa-binding\" created\n    clusterrolebinding.rbac.authorization.k8s.io \"nginx-ingress-clusterrole-nisa-binding\" created\n    deployment.extensions \"nginx-ingress-controller\" created\n    \n    $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/bc59b7ddeee6e252974853f167c299005c600781/deploy/provider/cloud-generic.yaml\n    service \"ingress-nginx\" created\n```\n\n\u003e **Note:** at the time of writing, the current latest release of the ingress-nginx resource files were not working correctly, so this points at the last known commit that did work.\n\nFinally we want to set up MongoDB. There isn’t a convenient kubernetes resource definition for this, so we’ll write our own. Create a new file called `mongodb.yml` under your project directory as follows:\n\n``` yaml\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: mongo\n    spec:\n      ports:\n      - port: 27017\n      selector:\n        app: mongo\n      clusterIP: None\n    ---\n    apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2\n    kind: Deployment\n    metadata:\n      name: mongo\n    spec:\n      selector:\n        matchLabels:\n          app: mongo\n      strategy:\n        type: Recreate\n      template:\n        metadata:\n          labels:\n            app: mongo\n        spec:\n          containers:\n          - image: mongo:3.2.20\n            name: mongo\n            ports:\n            - containerPort: 27017\n              name: mongo\n```\n\nAnd then execute it:\n\n```\n    $ kubectl create -f mongodb.yml\n    service \"mongo\" created\n    deployment.apps \"mongo\" created\n```\n\nAt this point we have all of the infrastructure we need in order to build our application. \n\n### Creating articles\n\nOur first handler is the endpoint that will be called to create an article. This will ensure that we have the appropriate values in our request, and put a message onto the Kafka queue for other handlers to deal with. \n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir create-article\n    $ cd create-article\n    $ npm init -y\n    $ npm install --save uuid kafka-node\n```\n\nThe `uuid` module will be used to generate a new, unique ID for the article, and the `kafka-node` module is used to produce a new message onto the Kafka queue.\n\nOur actual handler is then written in `create-article/index.js` as follows:\n\n``` javascript\n    const uuid = require('uuid/v4');\n    const kafka = require('kafka-node');\n    \n    const kafkaClient = new kafka.KafkaClient({kafkaHost: 'kafka.kubeless:9092'});\n    const kafkaProducer = new kafka.Producer(kafkaClient);\n    \n    module.exports = {\n      createArticle: function (event, context) {\n    \n        return new Promise((resolve, reject) =\u003e {\n            if (!event.data.title) {\n                reject('Missing field: title');\n            } else if (!event.data.body) {\n                reject('Missing field: body');\n            } else {\n                resolve({\n                    id: uuid(),\n                    created: new Date(),\n                    title: event.data.title,\n                    body: event.data.body\n                });\n            }\n        }).then((article) =\u003e {\n            return new Promise((resolve, reject) =\u003e {\n                kafkaProducer.send([\n                    { topic: 'new-article-topic', messages: JSON.stringify(article), partition: 0 }\n                ], (err, data) =\u003e {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(article);\n                    }\n                });\n            });\n        }).then((article) =\u003e {\n            event.extensions.response.statusCode = 201;\n            return article;\n        }).catch((err) =\u003e {\n            event.extensions.response.statusCode = 400;\n            return err;\n        });\n      }\n    }\n```\n\n\u003e **Note:** we’re assuming that Kafka is installed on “kafka.kubeless:9092” and that we’re using a topic called “new-article-topic”. This is the default host and port if using the Kafka that deploys as part of Kubeless, but in a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this location.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy create-article --runtime nodejs8 --dependencies package.json --handler index.createArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `createArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create create-article --function-name create-article --path create --hostname localhost\n```\n\nThis means that calls to http://localhost/create **will trigger the function named `create-article` **- which we’ve just created.\n\nFinally we’ll create the Kafka topic that we are writing to:\n\n```\n    $ kubeless topic create new-article-topic\n```\n\nWe can test this now as well:\n\n```\n    $ curl http://localhost/create --data '{\"title\": \"My first post\", \"body\": \"This is my first post\"}' -H \"Content-type: application/json\"\n    {\"id\":\"6a61513b-06c8-4139-a816-a7188e75728e\",\"created\":\"2018-07-24T07:14:45.561Z\",\"title\":\"My first post\",\"body\":\"This is my first post\"}\n```\n\n### Persisting articles\n\nOnce we can handle the request to create an article, and put the message onto the Kafka topic, we can then handle this message to persist it into the MongoDB store.\n\nHandlers that are triggered by Kafka messages act in the exact same way as HTTP ones, including the fact that they are given an event that looks like an HTTP request. The data of this request is the message from the topic, ready to work with. We can also guarantee the contents of it, since it was put onto the topic by our own code and not by an external party.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir persist-article\n    $ cd persist-article\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `persist-article/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      persistArticle: function (event, context) {\n        const article = event.data;\n        const post = {\n          \"_id\": article.id,\n          \"created\": new Date(article.created),\n          \"title\": article.title,\n          \"body\": article.body\n        };\n    \n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect(\"mongodb://mongo.default:27017\", (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts').insert(post, (err, result) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve(post);\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\n\u003e **Note:** we’re assuming that MongoDB is installed on “mongo.default:27017” and that we’re using a database called “kubeless_blog”. This is the default host and port if using the MongoDB that deploys as part of the earlier deployment resource, but in a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy persist-article --runtime nodejs8 --dependencies package.json --handler index.persistArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `persistArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming Kafka messages on our topic to trigger this function:\n\n```\n    $ kubeless trigger kafka create persist-article --function-selector created-by=kubeless,function=persist-article --trigger-topic new-article-topic\n```\n\nAt this point, we have a setup where all successful calls to our first handler will put messages onto the Kafka topic, and then our second handler will read and process them to write into our MongoDB database.\n\n### Listing articles\n\nNow that we can get articles into our system, we need to get them out again. The first part of this is a handler to get a list of all articles. \n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir list-articles\n    $ cd list-articles\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `list-articles/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      listArticles: function (event, context) {\n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect('mongodb://mongo.default:27017', (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts')\n                    .find({})\n                    .sort({created: -1})\n                    .project({'_id': 1, 'title': 1, 'created': 1})\n                    .toArray((err, docs) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve(docs.map((doc) =\u003e {\n                      return {\n                          id: doc['_id'],\n                          title: doc.title,\n                          created: doc.created\n                      };\n                  }));\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\nThis gets every article, with no pagination or filtering, and returns them in order so that the most recent ones are first. It also only returns the title of each article, not the entire text.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy list-articles --runtime nodejs8 --dependencies package.json --handler index.listArticles --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `listArticles` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create list-articles --function-name list-articles --path list --hostname localhost\n```\n\nThis means that calls to http://localhost/list **will trigger the function named `list-articles` **- which we’ve just created.\n\n### Getting individual articles\n\nFinally, we need to be able to get an individual article out so that we can display it.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir get-article\n    $ cd get-article\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `get-article/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      getArticle: function (event, context) {\n        const url = event.extensions.request.url;\n        const id = url.substring(1);\n    \n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect('mongodb://mongo.default:27017', (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts')\n                    .findOne({'_id': id}, (err, doc) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  if (doc) {\n                    resolve({\n                      id: doc['_id'],\n                      created: doc.created,\n                      title: doc.title,\n                      body: doc.body\n                    });\n                  } else {\n                    event.extensions.response.statusCode = 404;\n                    resolve();\n                  }\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\nThis expects to be called with a URL containing the article ID, and then retrieves that article from the MongoDB store and returns it. If there is no matching article then an HTTP 404 is returned instead.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy get-article --runtime nodejs8 --dependencies package.json --handler index.getArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `getArticles` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create get-article --function-name get-article --path get --hostname localhost\n```\n\n\u003e **Note:** the ingress mechanism does prefix matching, not exact matching. This means that the above actually matches any calls that **start** with “/get”, such as “/get/123”.\n\nThis means that calls to http://localhost/get/123 will trigger the function named `get-article` - which we’ve just created.\n\n## Creating the blog UI\n\nNow that we have our backend functionality, we need a UI to actually drive it. This will be a [React](https://github.com/facebook/create-react-app) application, using [Semantic UI](https://react.semantic-ui.com/) for some structure and styling.\n\nFirstly we’ll create a new application using the Create React App tool:\n\n```\n    $ create-react-app ui\n```\n\nThen we’ll add some dependencies that we need:\n\n```\n    $ npm install --save axios semantic-ui-react semantic-ui-css\n```\n\nWe can now start up the UI, and it will automatically update as we make changes to it:\n\n```\n    $ npm start\n```\n\nOur UI is going to consist of two different parts - the list of articles, and the actual article that we’re looking at.\n\nFirstly, let’s create a component to represent the article list. For this, create a file called `src/ArticleList.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { List } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class ArticleList extends React.Component {\n        state = {\n            articles: []\n        };\n        _showArticle = this._handleShowArticle.bind(this);\n        loadList() {\n            axios.get('http://localhost/list')\n                .then((response) =\u003e {\n                    this.setState({\n                        articles: response.data\n                    });\n                });\n        }\n        _handleShowArticle(article) {\n            this.props.showArticle(article.id);\n        }\n        componentDidMount() {\n            this.loadList();\n        }\n        render() {\n            const articleEntries = this.state.articles.map((article) =\u003e {\n                return (\n                    \u003cList.Item key={article.id} onClick={() =\u003e this._showArticle(article)}\u003e\n                        \u003cList.Content\u003e\n                            \u003cList.Header as='a'\u003e{article.title}\u003c/List.Header\u003e\n                            \u003cList.Description as='a'\u003e{article.created}\u003c/List.Description\u003e\n                        \u003c/List.Content\u003e\n                    \u003c/List.Item\u003e\n                );\n            });\n            return (\n                \u003cList divided relaxed\u003e\n                    {articleEntries}\n                    \u003cList.Item onClick={this.props.newArticle}\u003e\n                        \u003cList.Content\u003e\n                            \u003cList.Header as='a'\u003eNew Article\u003c/List.Header\u003e\n                        \u003c/List.Content\u003e\n                    \u003c/List.Item\u003e\n                \u003c/List\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This gets the list of articles from http://localhost/list, which corresponds to the handler we defined above. \n\nNext we want a component to display a given article. For this, create a new file called `src/Article.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Card, Loader } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class Article extends React.Component {\n        state = {\n            article: undefined\n        };\n        componentDidMount() {\n            const id = this.props.id;\n            axios.get(`http://localhost/get/${id}`)\n                .then((response) =\u003e {\n                    this.setState({\n                        article: response.data\n                    });\n                });\n        }\n        render() {\n            const { article } = this.state;\n            if (!article) {\n                return \u003cLoader /\u003e;\n            }\n            return (\n                \u003cCard fluid\u003e\n                    \u003cCard.Content header={article.title} /\u003e\n                    \u003cCard.Content description={article.body} /\u003e\n                    \u003cCard.Content extra\u003e\n                        {article.created}\n                    \u003c/Card.Content\u003e\n                \u003c/Card\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This gets the article from http://localhost/get, which corresponds to the handler we defined above. \n\nFinally, we want a component to create a new article. This will be in `src/NewArticle.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Form, Button, Message } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class NewArticle extends React.Component {\n        state = {\n            title: '',\n            body: ''\n        };\n        _changeTitle = this._handleChangeTitle.bind(this);\n        _changeBody = this._handleChangeBody.bind(this);\n        _postArticle = this._handlePostArticle.bind(this);\n        _handleChangeTitle(e) {\n            this.setState({\n                title: e.target.value\n            });\n        }\n        _handleChangeBody(e) {\n            this.setState({\n                body: e.target.value\n            });\n        }\n        _handlePostArticle() {\n            const { title, body } = this.state;\n            axios({\n                method: 'post',\n                url: 'http://localhost/create',\n                data: {\n                    title,\n                    body\n                },\n                headers: {\n                    'content-type': 'application/json'\n                }\n            })\n            .then(() =\u003e {\n                this.setState({\n                    title: '',\n                    body: '',\n                    success: true,\n                    error: undefined\n                });\n            }, (e) =\u003e {\n                this.setState({\n                    success: false,\n                    error: e.response.data\n                });\n            });\n        }\n        render() {\n            let message;\n            if (this.state.success) {\n                message = \u003cMessage positive\u003eArticle posted successfully\u003c/Message\u003e;\n            } else if (this.state.error) {\n                message = \u003cMessage error\u003e{this.state.error}\u003c/Message\u003e\n            }\n            return (\n                \u003cForm error={this.state.error} success={this.state.success}\u003e\n                {message}\n                \u003cForm.Field\u003e\n                  \u003clabel\u003eTitle\u003c/label\u003e\n                  \u003cinput placeholder='Title' value={this.state.title} onChange={this._changeTitle} autoFocus /\u003e\n                \u003c/Form.Field\u003e\n                \u003cForm.Field\u003e\n                  \u003clabel\u003eArticle\u003c/label\u003e\n                  \u003ctextarea placeholder=\"Article\" value={this.state.body} onChange={this._changeBody} /\u003e\n                \u003c/Form.Field\u003e\n                \u003cButton type='submit' onClick={this._postArticle} \u003ePost Article\u003c/Button\u003e\n              \u003c/Form\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This creates the article by POSTing to http://localhost/create, which corresponds to the handler we defined above. \n\nNow that we’ve got these components, we need to tie these together. This is done by replacing the existing `src/App.js` to read as follows:\n\n``` javascript\n    import React, { Component } from 'react';\n    import 'semantic-ui-css/semantic.min.css';\n    import { Grid, Header, Container } from 'semantic-ui-react';\n    import { ArticleList } from './ArticleList';\n    import { Article } from './Article';\n    import { NewArticle } from './NewArticle';\n    class App extends Component {\n      state = {\n        currentArticle: undefined\n      };\n      _newArticle = this._handleNewArticle.bind(this);\n      _showArticle = this._handleShowArticle.bind(this);\n      _handleShowArticle(article) {\n        this.setState({\n          currentArticle: article\n        });\n      }\n      _handleNewArticle() {\n        this.setState({\n          currentArticle: undefined\n        });\n      }\n      render() {\n        let body;\n        if (this.state.currentArticle) {\n          body = \u003cArticle id={this.state.currentArticle} /\u003e\n        } else {\n          body = \u003cNewArticle /\u003e;\n        }\n        return (\n          \u003cContainer\u003e\n            \u003cGrid\u003e\n              \u003cGrid.Row\u003e\n                \u003cGrid.Column\u003e\n                  \u003cHeader as=\"h2\"\u003e\n                    Kubeless Blog\n                  \u003c/Header\u003e\n                \u003c/Grid.Column\u003e\n              \u003c/Grid.Row\u003e\n              \u003cGrid.Row\u003e\n                \u003cGrid.Column width={12}\u003e\n                  { body }\n                \u003c/Grid.Column\u003e\n                \u003cGrid.Column width={4}\u003e\n                  \u003cArticleList showArticle={this._showArticle} newArticle={this._newArticle} /\u003e\n                \u003c/Grid.Column\u003e\n              \u003c/Grid.Row\u003e\n            \u003c/Grid\u003e\n          \u003c/Container\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nAt this point, we can use the UI to read and post articles:\n\n![kubeless-realtime-demo-no-realtime](//images.ctfassets.net/1es3ne0caaid/340Y10wn20Gscqc0a4S06g/ee857682c0b51fafe0ddfbd5c0764979/kubeless-realtime-demo-no-realtime.gif)\n\n## Adding realtime functionality to the blog\n\nCurrently, we can post articles to the blog and read ones that are posted. What we don’t get is any indication that a post has been made without refreshing the page. This can be achieved by adding Pusher in to the mix.\n\nWe are going to add a new handler into our Kubeless system that reacts to the same Kafka messages that are used to persist the messages, and which will trigger Pusher to indicate that a new post has been made.\n\n### Broadcasting articles\n\nOur new handler is going to react every time a new article is created, in the exact same way as the `persist-article` handler from above.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir broadcast-article\n    $ cd broadcast-article\n    $ npm init -y\n    $ npm install --save pusher\n```\n\nOur actual handler is then written in `broadcast-article/index.js` as follows:\n\n``` javascript\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n          appId: 'PUSHER_APP_ID',\n          key: 'PUSHER_KEY',\n          secret: 'PUSHER_SECRET',\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true\n    });\n    \n    \n    module.exports = {\n      broadcastArticle: function (event, context) {\n        const article = event.data;\n        const post = {\n          \"_id\": article.id,\n          \"created\": new Date(article.created),\n          \"title\": article.title,\n          \"body\": article.body\n        };\n    \n        pusher.trigger('posts', 'new-post', post);\n      }\n    }\n```\n\n\u003e **Note:** we’re hard-coding the Pusher credentials here, which need to be updated to match those you obtained earlier. In a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy broadcast-article --runtime nodejs8 --dependencies package.json --handler index.broadcastArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `broadcastArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming Kafka messages on our topic to trigger this function:\n\n```\n    $ kubeless trigger kafka create broadcast-article --function-selector created-by=kubeless,function=broadcast-article --trigger-topic new-article-topic\n```\n\nThis is the exact same topic as was used before, so every message that triggers the `persist-article` handler will also trigger the `broadcast-article` one.\n\n### Updating the article list\n\nNow that we’re broadcasting events whenever articles are posted, we can automatically update the UI based on this. For this we want to listen to the Pusher events and react to them.\n\nFirstly, we need our Pusher dependency. From inside the UI project:\n\n```\n    $ npm install --save pusher-js\n```\n\nThen we need to update `src/ArticleList.js` to listen for the events and react accordingly. Firstly add the following to the top of the file:\n\n``` javascript\n    import Pusher from 'pusher-js';\n    \n    const pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_CLUSTER',\n        encrypted: true\n    });\n```\n\n\u003e **Note:** make sure you update this to include the App Key and Cluster from your Pusher Application you created earlier. These should exactly match those used in the `broadcast-article` handler.\n\nFinally, add the following to the `componentDidMount` method:\n\n``` javascript\n    pusher.subscribe('posts').bind('new-post', () =\u003e {\n       this.loadList();\n    });\n```\n\nThis will react to the `new-post` event that we are broadcasting by loading the full list of articles again. This means that whenever anyone posts an article, all active browsers will be told about it and get their article list updated.\n\nRestart your UI and we can see that the posts now appear automatically:\n\n![kubeless-realtime-demo](//images.ctfassets.net/1es3ne0caaid/50s0MKQDgAYuAEg44SMOCI/844d2ce62cc17e55ca40e1a8c598095f/kubeless-realtime-demo.gif)\n\n## Cleaning up\n\nOne thing that needs to be considered with a serverless application is deployment, and tearing it down if needed. We are actually running a large number of components here: five serverless functions, Kafka, Zookeeper, MongoDB, Nginx and the Kubeless framework itself. Each of these needs to be managed, and shut down, individually and correctly otherwise you leave bits hanging around.\n\nCleaning up this application can be done as follows if needed:\n\n```\n    # Broadcast Article Handler\n    kubeless trigger kafka delete broadcast-article\n    kubeless function delete broadcast-article\n    \n    # Get Article Handler\n    kubeless trigger http delete get-article\n    kubeless function delete get-article\n    \n    # List Articles Handler\n    kubeless trigger http delete list-articles\n    kubeless function delete list-articles\n    \n    # Persist Article Handler\n    kubeless trigger kafka delete persist-article\n    kubeless topic delete new-article-topic\n    kubeless function delete persist-article\n    \n    # Create Article Handler\n    kubeless trigger http delete create-article\n    kubeless function delete create-article\n    \n    # Nginx Ingress\n    kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/provider/cloud-generic.yaml\n    kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/mandatory.yaml\n    \n    # MongoDB\n    kubectl delete -f mongodb.yml\n    \n    # Kafka\n    kubectl delete -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kafka-zookeeper-v1.0.0-alpha.7.yaml\n    \n    # Kubeless\n    kubectl delete -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kubeless-non-rbac-v1.0.0-alpha.7.yaml\n    kubectl delete ns kubeless\n```\n\n## Summary\n\nThis article shows a brief introduction to using Kubeless to build a simple application, and then extending it by adding new functionality. We can easily see how adding this new functionality can be done later on, with no impact to the rest of the service. \n\nWhilst not shown here, there’s no reason that all of these handlers need to be written by the same team, or even in the same language. Serverless architectures, in the same way as Microservices, thrive on a disjoint ecosystem where each component is developed in the way that makes the most sense for that one component, rather than forcing a single language on the entire application.\n\nThe full source code for this can be seen on [GitHub](https://github.com/sazzer/pusher-kubeless-blog).","metaTitle":"Adding realtime functionality to a blog using Kubeless","metaDescription":"Create a basic blog using Kubeless to power a serverless backend, and React for the frontend. Learn how to create and deploy serverless functions."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"yJv9gYc9dmUAeyIMAQEw2","type":"Entry","createdAt":"2018-08-16T22:01:51.811Z","updatedAt":"2018-08-16T22:01:51.811Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player game with Python and Vue","url":"game-python-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-pusher-multiplayer-game","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-13","description":"Build a simple two-player game featuring online presence and realtime interactions. Use Python for the backend, and Vue for the frontend. Users will be able to see when another player logs on, challenge them to a game, and interact instantly.","prerequisite":"You will need Python 3+, virtualenv and Flask installed on your machine.","content":"The advent of the PC and the internet has redefined the term “entertainment” and the means by which it can be obtained. While a console or some special hardware would have been required to play games in the past, games are only a click away in today's world of technology.\n\nIn this tutorial, we will create a realtime tic-tac-toe game using Python and Pusher channels. Here’s a demo of how the game will look and behave upon creation:\n\n![python-vue-game-demo](//images.ctfassets.net/1es3ne0caaid/1RGRfjXfgQgYWYy2kqImOs/0c1db39f9371dbb773638ffe57bfd385/python-vue-game-demo.gif)\n\nThis multiplayer game will allow a player to connect using their preferred username (or generate a random username where a player doesn’t connect with a username) and choose to play with another player from a list of other online players.\n\nThe game itself follows the conventional principles of the popular [tic-tac-toe](https://en.wikipedia.org/wiki/Tic-tac-toe) game. The “online player(s)” feature is powered by [Pusher presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) and the realtime updates of a player’s move across multiple windows is powered by [Pusher private channels.](https://pusher.com/docs/client_api_guide/client_private_channels) The source code for this tutorial is available here [GitHub](https://github.com/neoighodaro/python-pusher-multiplayer-game). \n\nLet’s get started.\n\n\n## Prerequisites\n\nTo follow along, a basic knowledge of Python, Flask, JavaScript (ES6 syntax) and Vue is required. You will also need the following installed on your machine:\n\n\n1. [Python (v3.x)](https://www.python.org/)\n2. [Virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment without polluting our global packages directory.\n\n\n## Setting up the app environment\n\nWe will create the project folder and activate a virtual environment within it:\n\n```\n    $ mkdir python-pusher-mutiplayer-game\n    $ cd python-pusher-mutiplayer-game\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nWe will install [Flask](http://flask.pocoo.org/) using this command:\n\n```\n    $ pip install flask\n```\n\n## Setting up Pusher\n\nTo integrate Pusher into the multiplayer game, we need to create a Pusher channels application from the Pusher dashboard. If you don’t already have a Pusher account, head over to the [Pusher website](https://pusher.com/) and create one.\n\nAfter creating an account, create a new channels application and enable client events from the application dashboard. To enable client events, click on **App settings** and scroll to the bottom of the page then select the option that says **Enable client events,** and update the **App settings.**\n\n## Building the backend server\n\nBack in the project directory, let’s install the [Python Pusher library](https://github.com/pusher/pusher-http-python) with this command:\n\n```\n    $ pip install pusher\n```\n\nWe will create a new file and call it `app.py`, this is where we will write all the code for the Flask backend server. We will also create a folder and call it `templates`, this folder will hold the markup files for this application.\n\nLet’s write some code to register the endpoints for the game and serve the view, open the `app.py` file and paste the following code:\n\n``` python\n    // File: ./app.py\n    from flask import Flask, render_template, request, jsonify, make_response, json\n    from pusher import pusher\n    \n    app = Flask(__name__)\n    \n    pusher = pusher_client = pusher.Pusher(\n      app_id='PUSHER_APP_ID',\n      key='PUSHER_APP_KEY',\n      secret='PUSHER_APP_SECRET',\n      cluster='PUSHER_APP_CLUSTER',\n      ssl=True\n    )\n    \n    name = ''\n    \n    @app.route('/')\n    def index():\n      return render_template('index.html')\n      \n    @app.route('/play')\n    def play():\n      global name\n      name = request.args.get('username')\n      return render_template('play.html')\n      \n    @app.route(\"/pusher/auth\", methods=['POST'])\n    def pusher_authentication():\n      auth = pusher.authenticate(\n        channel=request.form['channel_name'],\n        socket_id=request.form['socket_id'],\n        custom_data={\n          u'user_id': name,\n          u'user_info': {\n            u'role': u'player'\n          }\n        }\n      )\n      return json.dumps(auth)\n      \n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=5000, debug=True)\n    \n    name = ''\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the values on your Pusher dashboard.\n\nIn the code above, we defined three endpoints, here’s what they do:\n\n\n- `/` - renders the front page that asks a player to connect with a username.\n- `/play` - renders the game view.\n- `/pusher/auth` - authenticates Pusher’s presence and private channels for connected players.\n\n\n## Building the frontend\n\nIn the `templates` folder, we will create two files:\n\n\n1. `index.html`\n2. `play.html`\n\nThe `index.html` file will render the connection page, so open the `templates/index.html` file and paste the following code:\n\n``` html\n    \u003c!-- File: ./templates/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n            \u003cmeta name=\"description\" content=\"\"\u003e\n            \u003cmeta name=\"author\" content=\"Neo Ighodaro\"\u003e\n            \u003ctitle\u003eTIC-TAC-TOE\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n            \u003cstyle\u003e\n                  :root {\n                    --input-padding-x: .75rem;\n                    --input-padding-y: .75rem;\n                  }\n                  html,\n                  body, body \u003e div {\n                    height: 100%;\n                  }\n                  body \u003e div {\n                    display: -ms-flexbox;\n                    display: flex;\n                    -ms-flex-align: center;\n                    align-items: center;\n                    padding-top: 40px;\n                    padding-bottom: 40px;\n                    background-color: #f5f5f5;\n                  }\n                  .form-signin {\n                    width: 100%;\n                    max-width: 420px;\n                    padding: 15px;\n                    margin: auto;\n                  }\n                  .form-label-group {\n                    position: relative;\n                    margin-bottom: 1rem;\n                  }\n                  .form-label-group \u003e input,\n                  .form-label-group \u003e label {\n                    padding: var(--input-padding-y) var(--input-padding-x);\n                  }\n                  .form-label-group \u003e label {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    display: block;\n                    width: 100%;\n                    margin-bottom: 0; /* Override default `\u003clabel\u003e` margin */\n                    line-height: 1.5;\n                    color: #495057;\n                    cursor: text; /* Match the input under the label */\n                    border: 1px solid transparent;\n                    border-radius: .25rem;\n                    transition: all .1s ease-in-out;\n                  }\n                  .form-label-group input::-webkit-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-moz-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:not(:placeholder-shown) {\n                    padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                  }\n                  .form-label-group input:not(:placeholder-shown) ~ label {\n                    padding-top: calc(var(--input-padding-y) / 3);\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                    font-size: 12px;\n                    color: #777;\n                  }\n            \u003c/style\u003e\n          \u003c/head\u003e\n          \u003cbody\u003e\n            \u003cdiv id=\"app\"\u003e\n              \u003cform class=\"form-signin\"\u003e\n                \u003cdiv class=\"text-center mb-4\"\u003e\n                  \u003cimg class=\"mb-4\" src=\"https://thestore.gameops.com/v/vspfiles/photos/Tic-Tac-Go-14.gif\" alt=\"\" width=\"72\" height=\"72\"\u003e\n                  \u003ch1 class=\"h3 mb-3 font-weight-normal\"\u003eTIC-TAC-TOE\u003c/h1\u003e\n                  \u003cp\u003ePUT IN YOUR DETAILS TO PLAY\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                    \u003cinput type=\"name\" id=\"inputUsername\" ref=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"\" autofocus=\"\"\u003e\n                      \u003clabel for=\"inputUsername\"\u003eUsername\u003c/label\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                  \u003cinput type=\"email\" id=\"inputEmail\" ref=\"email\" class=\"form-control\" placeholder=\"Email address\" autofocus=\"\" required\u003e\n                    \u003clabel for=\"inputEmail\"\u003eEmail address\u003c/label\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" @click.prevent=\"login\"\u003eConnect\u003c/button\u003e\n                \u003cp class=\"mt-5 mb-3 text-muted text-center\"\u003e© 2017-2018\u003c/p\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n            \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n            \u003cscript\u003e\n            var app = new Vue({\n              el: '#app',\n              methods: {\n                login: function () {\n                  let username = this.$refs.username.value\n                  let email = this.$refs.email.value\n                  window.location.replace(`/play?username=${username}\u0026email=${email}`);\n                }\n              }\n            })\n            \u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWhen a player visits the connection page and puts in a username and email, the browser window will be redirected to the game view. \n\nLet’s write the markup for the game view. Open the `play.html` file and paste the following code:\n\n``` html\n    \u003c!-- file: ./templates/play.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n      \u003ctitle\u003eTIC-TAC-TOE\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\" class=\"container-fluid\"\u003e\n        \u003cdiv class=\"container-fluid clearfix mb-3 shadow\"\u003e\n          \u003cimg class=\"float-left my-3\" src=\"https://thestore.gameops.com/v/vspfiles/photos/Tic-Tac-Go-14.gif\" height=\"62px\" width=\"62px\"\n          /\u003e\n          \u003cdiv class=\"float-right w-25 py-3\"\u003e\n            \u003cimg class=\"my-3 mx-3 rounded-circle border\" src=\"http://dfsanonymous.club/wp-content/uploads/2017/11/DFSAnonymous-NewLogo.png\"\n              height=\"62px\" width=\"62px\" /\u003e\n            \u003cp class=\"d-inline\"\u003e {% raw %} {{ username }} {% endraw %} \u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"row mx-5\" style=\"height: 50vh\"\u003e\n          \u003cdiv class=\"col-8 h-50 align-self-center\"\u003e\n            \u003cdiv class=\"row border rounded invisible h-50 w-75 m-auto\" style=\"font-size: 3.6rem\" ref=\"gameboard\" @click=\"playerAction\"\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"1\" ref=\"1\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"2\" ref=\"2\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"3\" ref=\"3\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"4\" ref=\"4\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"5\" ref=\"5\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"6\" ref=\"6\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"7\" ref=\"7\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"8\" ref=\"8\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"9\" ref=\"9\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"col-4 pl-3\"\u003e\n            \u003cdiv class=\"row h-100\"\u003e\n              \u003cdiv class=\"col border h-75 text-center\" style=\"background: rgb(114, 230, 147);\"\u003e\n                \u003cp class=\"my-3\"\u003e {% raw %} {{ players }} {% endraw %} online player(s) \u003c/p\u003e\n                \u003chr/\u003e\n                \u003cli class=\"m-auto py-3 text-dark\" style=\"cursor: pointer;\" v-for=\"member in connectedPlayers\" @click=\"choosePlayer\"\u003e\n                  {% raw %} {{ member }} {% endraw %}\n                \u003c/li\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col text-center py-3 border h-25\" style=\"background: #b6c0ca; font-size: 1em; font-weight: bold\"\u003e\n                {% raw %} {{ status }} {% endraw %}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript\u003e\n      \n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code above defines the layout of the game view but does not contain any interactivity or realtime features. In the scripts section, before the closing `body` tag, we included the Vue and Pusher libraries because they are required for the game to work. \n\nLet’s include the JavaScript code that will drive the entire game process and define its logic.\n\nIn the same file, add the code below in between the `script` tag that is just before the closing `body` tag:\n\n``` javascript\n    var app = new Vue({\n      el: '#app',\n      \n      data: {\n        username: '',\n        players: 0,\n        connectedPlayers: [],\n        status: '',\n        pusher: new Pusher('PUSHER_APP_KEY', {\n          authEndpoint: '/pusher/auth',\n          cluster: 'PUSHER_APP_CLUSTER',\n          encrypted: true\n        }),\n        otherPlayerName: '',\n        mychannel: {},\n        otherPlayerChannel: {},\n        firstPlayer: 0,\n        turn: 0,\n        boxes: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      },\n      \n      created () {\n        let url = new URL(window.location.href);\n        let name = url.searchParams.get(\"username\");\n        \n        if (name) {\n          this.username = name\n          this.subscribe();\n          this.listeners();\n        } else {\n          this.username = this.generateRandomName();\n          location.assign(\"/play?username=\" + this.username);\n        }\n      },\n      \n      methods: {\n        // We will add methods here\n      }\n    });\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nAbove, we create a new instance of Vue and we target the `#app` selector. We define all the defaults in the `data` object and then in the `create()` function which is called automatically when the Vue component is created, we check for a user and assign the user to the username if one was supplied.\n\nWe also make calls to the `subscribe` and `listeners` methods. Let’s define those inside the `methods` object. Inside the `methods` object, paste the following functions:\n\n``` javascript\n    // [...]\n    \n    subscribe: function () {\n      let channel = this.pusher.subscribe('presence-channel');\n      this.myChannel = this.pusher.subscribe('private-' + this.username)\n    \n      channel.bind('pusher:subscription_succeeded', (player) =\u003e {\n        this.players = player.count - 1\n        player.each((player) =\u003e {\n          if (player.id != this.username)\n            this.connectedPlayers.push(player.id)\n        });\n      });\n      \n      channel.bind('pusher:member_added', (player) =\u003e {\n        this.players++;\n        this.connectedPlayers.push(player.id)\n      });\n      \n      channel.bind('pusher:member_removed', (player) =\u003e {\n        this.players--;\n        var index = this.connectedPlayers.indexOf(player.id);\n        if (index \u003e -1) {\n          this.connectedPlayers.splice(index, 1)\n        }\n      });\n    },\n    \n    listeners: function () {\n      this.pusher.bind('client-' + this.username, (message) =\u003e {\n        if (confirm('Do you want to start a game of Tic Tac Toe with ' + message)) {\n          this.otherPlayerName = message\n          this.otherPlayerChannel = this.pusher.subscribe('private-' + this.otherPlayerName)\n          this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n            this.otherPlayerChannel.trigger('client-game-started', this.username)\n          })\n          this.startGame(message)\n        } else {\n          this.otherPlayerChannel = this.pusher.subscribe('private-' + message)\n          this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n            this.otherPlayerChannel.trigger('client-game-declined', \"\")\n          })\n          this.gameDeclined()\n        }\n      }),\n      \n      this.myChannel.bind('client-game-started', (message) =\u003e {\n        this.status = \"Game started with \" + message\n        this.$refs.gameboard.classList.remove('invisible');\n        this.firstPlayer = 1;\n        this.turn = 1;\n      })\n      \n      this.myChannel.bind('client-game-declined', () =\u003e {\n        this.status = \"Game declined\"\n      })\n      \n      this.myChannel.bind('client-new-move', (position) =\u003e {\n        this.$refs[position].innerText = this.firstPlayer ? 'O' : 'X'\n      })\n    \n      this.myChannel.bind('client-your-turn', () =\u003e {\n        this.turn = 1;\n      })\n    \n      this.myChannel.bind('client-box-update', (update) =\u003e {\n        this.boxes = update;\n      })\n      \n      this.myChannel.bind('client-you-lost', () =\u003e {\n        this.gameLost();\n      })\n    },\n    \n    // [...]\n```\n\nIn the `subscribe` method, we subscribe to our Pusher presence channel, and then subscribe to the private channel for the current user. In the `listeners` method we register the listeners for all the events we are expecting to be triggered on the private channel we subscribed to.\n\nNext, we will add other helper methods to our methods class. Inside the methods class, add the following functions to the bottom after the `listeners` method:\n\n``` javascript\n    // Generates a random string we use as a name for a guest user\n    generateRandomName: function () {\n      let text = '';\n      let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      for (var i = 0; i \u003c 6; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n      return text;\n    },\n    \n    // Lets you choose a player to play as.\n    choosePlayer: function (e) {\n      this.otherPlayerName = e.target.innerText\n      this.otherPlayerChannel = this.pusher.subscribe('private-' + this.otherPlayerName)\n      this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n        this.otherPlayerChannel.trigger('client-' + this.otherPlayerName, this.username)\n      });\n    },\n    \n    // Begins the game\n    startGame: function (name) {\n      this.status = \"Game started with \" + name\n      this.$refs.gameboard.classList.remove('invisible');\n    },\n    \n    // User declined to play\n    gameDeclined: function () {\n      this.status = \"Game declined\"\n    },\n    \n    // Game has ended with current user winning\n    gameWon: function () {\n      this.status = \"You WON!\"\n      this.$refs.gameboard.classList.add('invisible');\n      this.restartGame()\n    },\n    \n    // Game has ended with current user losing\n    gameLost: function () {\n      this.turn = 1;\n      this.boxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      this.status = \"You LOST!\"\n      this.$refs.gameboard.classList.add('invisible');\n      this.restartGame()\n    },\n    \n    // Restarts a game\n    restartGame: function () {\n      for (i = 1; i \u003c 10; i++) {\n        this.$refs[i].innerText = \"\"\n      }\n      this.$refs.gameboard.classList.remove('invisible');\n    },\n    \n    // Checks tiles to see if the tiles passed are a match\n    compare: function () {\n      for (var i = 1; i \u003c arguments.length; i++) {\n        if (arguments[i] === 0 || arguments[i] !== arguments[i - 1]) {\n          return false\n        }\n      }\n    \n      return true;\n    },\n    \n    // Checks the tiles and returns true if theres a winning play\n    theresAMatch: function () {\n      return this.compare(this.boxes[0], this.boxes[1], this.boxes[2]) ||\n        this.compare(this.boxes[3], this.boxes[4], this.boxes[5]) ||\n        this.compare(this.boxes[6], this.boxes[7], this.boxes[8]) ||\n        this.compare(this.boxes[0], this.boxes[3], this.boxes[6]) ||\n        this.compare(this.boxes[1], this.boxes[4], this.boxes[7]) ||\n        this.compare(this.boxes[2], this.boxes[5], this.boxes[8]) ||\n        this.compare(this.boxes[2], this.boxes[4], this.boxes[6]) ||\n        this.compare(this.boxes[0], this.boxes[4], this.boxes[8])\n    },\n    \n    // Checks to see if the play was a winning play\n    playerAction: function (e) {\n      let index = e.target.dataset.id - 1\n      let tile = this.firstPlayer ? 'X' : 'O'\n      \n      if (this.turn \u0026\u0026 this.boxes[index] == 0) {\n        this.turn = 0\n        this.boxes[index] = tile\n        e.target.innerText = tile\n        \n        this.otherPlayerChannel.trigger('client-your-turn', \"\")\n        this.otherPlayerChannel.trigger('client-box-update', this.boxes)\n        this.otherPlayerChannel.trigger('client-new-move', e.target.dataset.id)\n        \n        if (this.theresAMatch()) {\n          this.gameWon()\n          this.boxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n          this.otherPlayerChannel.trigger('client-you-lost', '')\n        }\n      }\n    },\n```\n\nAbove, we have added several helper methods that the game needs to function properly and before each method, we have added a comment to show what the method does.\n\nLet’s test the game now.\n\n## Testing the game\n\nWe can test the game by running this command:\n\n```\n    $ flask run\n```\n\nNow if we visit [localhost:5000](http://localhost:5000), we should see the connection page and test the game:\n\n![python-vue-game-demo](//images.ctfassets.net/1es3ne0caaid/1RGRfjXfgQgYWYy2kqImOs/0c1db39f9371dbb773638ffe57bfd385/python-vue-game-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating an online multiplayer game powered by a Python backend server.\n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/python-pusher-multiplayer-game)","metaTitle":"Create a two-player game with Python and Vue","metaDescription":"Use Python and Vue to create a realtime two-player game featuring online presence and instant UI updates."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ixvYc9KQOOcYecWgqi0QU","type":"Entry","createdAt":"2018-08-13T22:46:15.628Z","updatedAt":"2018-08-13T22:46:15.628Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Go application with online presence","url":"go-vue-online-presence","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-presence-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-08","description":"In this tutorial you'll build a simple Go application, using Vue.js for the frontend. Users will be able to sign in and view a video, and see who else is watching.","prerequisite":"You will need Go 0.10+ installed on your machine.","content":"When building applications that allow multiple users to interact with one another, it is essential to display their online presence so that each user gets an idea of how many other users are online.\n\nIn this article, we will build a live streaming application that displays the online presence of the users currently streaming a video. We will use [Go](https://golang.org/doc/install), JavaScript (Vue) and [Pusher](http://pusher.com/) for the development.\n \nHere’s a demo of the final application:\n\n![go-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/1ITW3IU0Vm8wkMS2gMqaGe/fdc44d0a06f09561bb282297f721a7e4/go-online-presence-demo.gif)\n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/go-pusher-presence-app).\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- A code editor like Visual Studio Code.\n- Basic knowledge of the Go programming language.\n- Go (version \u003e= 0.10.x) installed on your computer. [Installation guide.](https://golang.org/doc/install)\n- Basic knowledge of JavaScript (Vue).\n- A Pusher application. Create one [here](https://dashboard.pusher.com/).\n\nOnce you have all the above requirements, we can proceed.\n\n## Building the backend server\n\nWe will build the backend server in Go. Create a new project directory in the `src` directory that is located in the `$GOPATH`, let’s call this directory `go-pusher-presence-app`.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-presence-app\n    $ cd go-pusher-presence-app\n```\n\nNext, create a new Go file and call it `presence.go`, this file will be where our entire backend server logic will be. Now, let’s pull in the official Go Pusher package with this command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nOpen the `presence.go` file and paste the following code:\n\n``` go\n    // File: ./presence.go\n    package main\n    \n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    type user struct {\n        Username  string `json:\"username\" xml:\"username\" form:\"username\" query:\"username\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    var loggedInUser user\n    \n    func main() {\n        // Define our routes\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./static\")))\n        http.HandleFunc(\"/isLoggedIn\", isUserLoggedIn)\n        http.HandleFunc(\"/new/user\", NewUser)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        // Start executing the application on port 8090\n        log.Fatal(http.ListenAndServe(\":8090\", nil))\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nHere’s a breakdown of what we’ve done in the code above:\n\n\n- We imported all the packages that are required for the application to work, including Pusher.\n- We instantiated the Pusher client that we will use to authenticate users from the client-side.\n- We defined a user struct and gave it two the properties — username and email — so that Go knows how to handle incoming payloads and correctly bind it to a user instance.\n- We created a global instance of the user struct so that we can use it to store a user’s name and email. This instance is going to somewhat serve the purpose of a session on a server, we will check that it is set before allowing a user to access the dashboard of this application.\n\nIn the main function, we registered four endpoints:\n\n\n1. `/` - loads all the static files from the static directory.\n2. `/isLoggedIn` - checks if a user is logged in or not and returns a fitting message.\n3. `/new/user` - allows a new user to connect and initializes the global user instance.\n4. `/pusher/auth` — authorizes users from the client-side.\n\nIn the same file, above the `main` function, add the code for the handler function of the `/isLoggedIn` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    func isUserLoggedIn(rw http.ResponseWriter, req *http.Request){\n        if loggedInUser.Username != \"\" \u0026\u0026 loggedInUser.Email != \"\" {\n            json.NewEncoder(rw).Encode(loggedInUser)\n        } else {\n            json.NewEncoder(rw).Encode(\"false\")\n        }\n    }\n    \n    // [...]\n```\n\nAfter the function above, let’s add the handler function for the `/new/user` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    func NewUser(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        err = json.Unmarshal(body, \u0026loggedInUser)\n        if err != nil {\n            panic(err)\n        }\n        json.NewEncoder(rw).Encode(loggedInUser)\n    }\n    \n    // [...]\n```\n\nAbove, we receive a new user's details in a `POST` request and bind it to an instance of the user struct. We further use this user instance to check if a user is logged in or not\n\nLastly, after the function above, let’s add the code for the `/pusher/auth` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    // -------------------------------------------------------\n    // Here, we authorize users so that they can subscribe to \n    // the presence channel\n    // -------------------------------------------------------\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        \n        data := pusher.MemberData{\n            UserId: loggedInUser.Username,\n            UserInfo: map[string]string{\n                \"email\": loggedInUser.Email,\n            },\n        }\n    \n        response, err := client.AuthenticatePresenceChannel(params, data)\n        if err != nil {\n            panic(err)\n        }\n    \n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nTo ensure that every connected user has a unique presence, we used the properties of the global `loggedInUser` variable in setting the `pusher.MemberData` instance.\n \n The syntax for authenticating a Pusher presence channel is:\n \n```\n    client.AuthenticatePresenceChannel(params, presenceData)\n```\n\n## Building the frontend\n\nNext, in the root of the project, create a `static` folder. Create two files the directory named `index.html` and `dashboard.html`. In the `index.html` file, we will write the HTML code that allows users to connect to the live streaming application using their name and email.\n\n### Setting up the connection page\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./static/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n            \u003ctitle\u003eLive streamer\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n            \u003cstyle\u003e\n                  :root {\n                    --input-padding-x: .75rem;\n                    --input-padding-y: .75rem;\n                  }\n                  html,\n                  body, body \u003e div {\n                    height: 100%;\n                  }\n                  body \u003e div {\n                    display: -ms-flexbox;\n                    display: flex;\n                    -ms-flex-align: center;\n                    align-items: center;\n                    padding-top: 40px;\n                    padding-bottom: 40px;\n                    background-color: #f5f5f5;\n                  }\n                  .form-signin {\n                    width: 100%;\n                    max-width: 420px;\n                    padding: 15px;\n                    margin: auto;\n                  }\n                  .form-label-group {\n                    position: relative;\n                    margin-bottom: 1rem;\n                  }\n                  .form-label-group \u003e input,\n                  .form-label-group \u003e label {\n                    padding: var(--input-padding-y) var(--input-padding-x);\n                  }\n                  .form-label-group \u003e label {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    display: block;\n                    width: 100%;\n                    margin-bottom: 0; /* Override default `\u003clabel\u003e` margin */\n                    line-height: 1.5;\n                    color: #495057;\n                    cursor: text; /* Match the input under the label */\n                    border: 1px solid transparent;\n                    border-radius: .25rem;\n                    transition: all .1s ease-in-out;\n                  }\n                  .form-label-group input::-webkit-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-moz-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:not(:placeholder-shown) {\n                    padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                  }\n                  .form-label-group input:not(:placeholder-shown) ~ label {\n                    padding-top: calc(var(--input-padding-y) / 3);\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                    font-size: 12px;\n                    color: #777;\n                  }\n            \u003c/style\u003e\n          \u003c/head\u003e\n    \n          \u003cbody\u003e\n            \u003cdiv id=\"app\"\u003e\n              \u003cform class=\"form-signin\"\u003e\n                \u003cdiv class=\"text-center mb-4\"\u003e\n                  \u003cimg class=\"mb-4\" src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/Fotolia_117855281_Subscription_Monthly_M.jpg\" alt=\"\" width=\"72\" height=\"72\"\u003e\n                  \u003ch1 class=\"h3 mb-3 font-weight-normal\"\u003eLive streamer\u003c/h1\u003e\n                  \u003cp\u003eSTREAM YOUR FAVOURITE VIDEOS FOR FREE\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                    \u003cinput type=\"name\" id=\"inputUsername\" ref=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"\" autofocus=\"\"\u003e\n                      \u003clabel for=\"inputUsername\"\u003eUsername\u003c/label\u003e\n                  \u003c/div\u003e\n    \n                \u003cdiv class=\"form-label-group\"\u003e\n                  \u003cinput type=\"email\" id=\"inputEmail\" ref=\"email\" class=\"form-control\" placeholder=\"Email address\" autofocus=\"\" required\u003e\n                    \u003clabel for=\"inputEmail\"\u003eEmail address\u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cbutton class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" @click.prevent=\"login\"\u003eConnect\u003c/button\u003e\n                \u003cp class=\"mt-5 mb-3 text-muted text-center\"\u003e© 2017-2018\u003c/p\u003e\n              \u003c/form\u003e\n              \u003c/div\u003e\n    \n              \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\nOn line 106, we added Vue using a CDN. Let’s add the Vue script for the page.\n\nBefore the closing `body` tag add the following code:\n\n``` javascript\n    \u003cscript\u003e\n      var app = new Vue({\n        el: '#app',\n        methods: {\n          login: function () {\n            let username = this.$refs.username.value\n            let email = this.$refs.email.value\n    \n            fetch('new/user', {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({username, email})\n            })\n            .then(res =\u003e res.json())\n            .then(data =\u003e window.location.replace('/dashboard.html'))\n          }\n        }\n      })\n    \u003c/script\u003e\n```\n\nThis script above submits user data to the backend Go server and navigates the browser’s location to the dashboard’s URL. \n\nNext, let’s build the dashboard.\n\n### Setting up the dashboard\n\nOpen the `dashboard.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./static/dashboard.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eLive streamer | Dashboard\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n          \u003cdiv class=\"container-fluid row shadow p-1 mb-3\"\u003e\n            \u003cdiv class=\"col-3\"\u003e\n              \u003cimg class=\"ml-3\" src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/Fotolia_117855281_Subscription_Monthly_M.jpg\" height=\"72px\" width=\"72px\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-6 ml-auto mt-3\"\u003e\n              \u003cdiv class=\"input-group\"\u003e\n                \u003cinput type=\"text\" class=\"form-control\" aria-label=\"Text input with dropdown button\"\u003e\n                \u003cdiv class=\"input-group-append\"\u003e\n                  \u003cbutton class=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003eSearch\u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-3 float-right\"\u003e\n              \u003cimg src=\"https://www.seoclerk.com/pics/319222-1IvI0s1421931178.png\"  height=\"72px\" width=\"72px\" class=\"rounded-circle border\"/\u003e\n              \u003cp class=\"mr-auto mt-3 d-inline\"\u003e {{ username }} \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\"\u003e\n              \u003cdiv class=\"col-8\"\u003e\n                \u003cdiv class=\"embed-responsive embed-responsive-16by9\"\u003e\n                  \u003ciframe width=\"854\" height=\"480\" class=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/VYOjWnS4cMY\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"text-center mt-3 p-3 text-muted font-weight-bold border\"\u003e\n                  {{ member }} person(s) is/are currently viewing this video \n                  \u003chr\u003e\n                  \u003cli class=\"m-auto text-success\" v-for=\"member in connectedMembers\"\u003e\n                    {{ member }}\n                  \u003c/li\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"col-4 border text-justify\" style=\"background: #e0e0e0; height: 30em; overflow-y: scroll; position: relative;\"\u003e\n                \u003cdiv class=\"border invisible h-50 w-75 text-center\" ref=\"added\" style=\"font-size: 2rem; position: absolute; right: 0; background: #48cbe0\"\u003e{{ addedMember }} just started watching.\u003c/div\u003e\n                \u003cdiv class=\"border invisible h-50 w-75 text-center\" ref=\"removed\" style=\"font-size: 2rem; position: absolute; right: 0; background: #ff8325\"\u003e{{ removedMember }} just stopped watching.\u003c/div\u003e\n                \u003cdiv class=\"h-75 text-center\"\u003e\n                  \u003ch2 class=\"text-center my-3\"\u003e Lyrics \u003c/h2\u003e\n                  \u003cp class=\"w-75 m-auto\" style=\"font-size: 1.5rem\"\u003e\n                    We just wanna party\u003cbr\u003e\n                    Party just for you\u003cbr\u003e\n                    We just want the money\u003cbr\u003e\n                    Money just for you\u003cbr\u003e\n                    I know you wanna party\u003cbr\u003e\n                    Party just for me\u003cbr\u003e\n                    Girl, you got me dancin' (yeah, girl, you got me dancin')\u003cbr\u003e\n                    Dance and shake the frame\u003cbr\u003e\n                    We just wanna party (yeah)\u003cbr\u003e\n                    Party just for you (yeah)\u003cbr\u003e\n                    We just want the money (yeah)\u003cbr\u003e\n                    Money just for you (you)\u003cbr\u003e\n                    I know you wanna party (yeah)\u003cbr\u003e\n                    Party just for me (yeah)\u003cbr\u003e\n                    Girl, you got me dancin' (yeah, girl, you got me dancin')\u003cbr\u003e\n                    Dance and shake the frame (you)\u003cbr\u003e\n                    This is America\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Look what I'm whippin' up\u003cbr\u003e\n                    This is America (woo)\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Look what I'm whippin' up\u003cbr\u003e\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e ⚠️  Video is an embed from YouTube and may not play depending on your region.\n\nOn line 80 we imported the JavaScript Pusher library so let’s add some code to utilize it. Before the closing `body` tag, add the following code:\n\n``` javascript\n    \u003cscript\u003e\n    var app = new Vue({\n        el: '#app',\n        data: {\n            username: '',\n            member: 0,\n            addedMember: '',\n            removedMember: '',\n            connectedMembers: []\n        },\n    \n        created() {\n            fetch('/isLoggedIn', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(res =\u003e res.json())\n            .then(data =\u003e {\n                if (data != 'false') {\n                    this.username = data.username\n                } else {\n                    window.location.replace('/')\n                }\n            })\n    \n            this.subscribe()\n        },\n    \n        methods: {\n            subscribe: function () {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    authEndpoint: '/pusher/auth',\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n    \n                let channel = pusher.subscribe('presence-channel')\n    \n                channel.bind('pusher:subscription_succeeded', data =\u003e {\n                    this.member = data.count\n                    data.each(member =\u003e this.connectedMembers.push(member.id))\n                })\n    \n                // Display a notification when a member comes online\n                channel.bind('pusher:member_added', data =\u003e {\n                    this.member++\n                    this.connectedMembers.push(data.id)\n                    this.addedMember = data.id\n    \n                    this.$refs.added.classList.add('visible')\n                    this.$refs.added.classList.remove('invisible')\n    \n                    window.setTimeout(() =\u003e {\n                        this.$refs.added.classList.remove('visible');\n                        this.$refs.added.classList.add('invisible');\n                    }, 3000)\n                });\n    \n                // Display a notification when a member goes offline\n                channel.bind('pusher:member_removed', data =\u003e {\n                    this.member--\n                    let index = this.connectedMembers.indexOf(data.id)\n    \n                    if (index \u003e -1) {\n                        this.connectedMembers.splice(index, 1)\n                    }\n    \n                    this.removedMember = data.id\n                    this.$refs.removed.classList.add('visible')\n                    this.$refs.removed.classList.remove('invisible')\n    \n                    window.setTimeout(() =\u003e {\n                        this.$refs.removed.classList.remove('visible')\n                        this.$refs.removed.classList.add('invisible')\n                    }, 3000)\n                })\n            }\n        }\n    })\n    \u003c/script\u003e\n```\n\nIn the snippet above, we created some Vue data variables to display reactive updates on different parts of the DOM. We also registered a `created()` lifecycle hook that checks if a user is connected on the backend server and eligible to view the dashboard before calling the `subscribe()` method.\n\nThe `subscribe()` method first configures a Pusher instance using the keys provided on the dashboard then subscribes to a presence channel. Next, it binds to several events that are available on the returned object of a presence channel subscription.\n\nIn the callback function of these bindings, we are able to update the state of the data variables, this is how we display the visual updates on user presence in this application.\n\n\n## Testing the application\n\nWe can test the application by compiling down the Go source code and running it with this command:\n\n```\n    $ go run presence.go\n```\n\nThe application will be available for testing on this address http://127.0.0.1:8090, here’s a display of how the application should look:\n\n![go-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/1ITW3IU0Vm8wkMS2gMqaGe/fdc44d0a06f09561bb282297f721a7e4/go-online-presence-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating a live streaming application powered by a Go backend server.\n\nThe source code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/go-pusher-presence-app)","metaTitle":"Create a Go application with online presence","metaDescription":"Use Go and Vue.js to create a simple web app with online presence functionality. Users will be able to sign in, view a video and see who else is viewing the same video."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"53e34Sergc88IA8e4AE2aK","type":"Entry","createdAt":"2018-07-26T07:40:42.110Z","updatedAt":"2018-07-26T07:40:42.110Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with Go","url":"chat-app-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-07-25","description":"This brief tutorial helps you create a simple chat application. You will build the backend in Go, and the frontend in vanilla JavaScript. Users will be able to message in realtime.","prerequisite":"You will need Go 0.10.0+ installed on your machine. A basic knowledge of Go and JavaScript will be helpful.","content":"Communication is an important part of the society we live in. Over the years, the forms of communication available have changed and have been refined to be both far-reaching and fast. With communication today, we can talk to people who are on the other side of the globe in an instant.\n\nTo power this sort of communication, there are some platforms that allow instant messaging such as Facebook, Twitter, Slack.\n\nIn this application, we will consider how to build a realtime chat application using [Go](https://golang.org/doc/install), JavaScript and [Pusher](http://pusher.com/). \n\nHere’s a demo of the final application:\n\n![go-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/4VfVpdecD6ackgA08yAwkc/7150bd3d5e452232f7b8839c13c342ed/go-chat-app-demo.gif)\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- An IDE of your choice like Visual Studio Code.\n- Go (version \u003e= 0.10.x) installed on your computer. Here’s how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript.\n\nOnce you have all the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you have already signed up with Pusher and created an application.\n\n\n## Setting up Pusher\n\nThe realtime feature of this chat app will depend on Pusher Channels so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one. After signing up, you will be asked to create a new application. Do so.\n\n### Enabling client events\n\nWe need to enable the Pusher application to trigger events from the client-side (browser) of the chat app. This is important because it is with this feature that users will be able to send private messages without hitting the backend server. Follow the steps below to activate client events from the [dashboard](https://dashboard.pusher.com):\n\n\n- Select the Channel application.\n- Click on **App Setting** from the horizontal options list.\n- Check the **Enable client events** option.\n![chat-app-go-enable-client-events](//images.ctfassets.net/1es3ne0caaid/r2p5Sr6hLq4eeWMoII8YE/78f08355870ee274ed621530d5fd9f16/chat-app-go-enable-client-events.png)\n- Click on the **Update** button.\n\n\n## Setting up the codebase\n\nLet’s write the terminal commands to create a new folder in the `src` directory that is located in the `$GOPATH`, this folder will be the root directory for this project:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-chat-app\n    $ cd go-pusher-chat-app\n```\n\nIn this folder, we will create the main Go file which will be the entry point for the application and call it `chat.go`. We also need to install the Go Pusher library that we will reference in the `chat.go` file.\n\nRun the following code in the terminal to pull in the Go Pusher package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️ If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this GitHub issue.\n\nOpen the `chat.go` file in your IDE and paste the following code:\n\n``` go\n    // File: ./chat.go\n    package main\n    \n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n    \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    type user struct {\n        Name  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    func main() {\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n    \n        http.HandleFunc(\"/new/user\", registerNewUser)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        log.Fatal(http.ListenAndServe(\":8090\", nil))\n    }\n```\n\n\u003e ⚠️ Replace `PUSHER_APP_*` keys with the app credentials found on your Pusher dashboard.\n\nIn the code above, we first imported a list of packages then registered a new Pusher client with the credentials from the app we created earlier on the dashboard.\n\nNext, we defined a user struct and included extra definitions to its properties so that Go knows how to handle incoming payloads and bind their various structures with a new instance of the user struct.\n\nLastly, in the main function, we registered three endpoints:\n\n\n- `/` — returns the static files that define the view of the chat app. The static files will be served from a `public` directory.\n- `/new/user` — creates a new user.\n- `/pusher/auth` — authorizes users from the client-side so they can subscribe to private channels and trigger client events.\n\nEach of the last two endpoints has an associated handler function that we will define below. Add the following code to the `chat.go` file before the `main` function:\n\n``` go\n    // File: ./chat.go\n    \n    // [...]\n    \n    func registerNewUser(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        \n        var newUser user\n        \n        err = json.Unmarshal(body, \u0026newUser)\n        if err != nil {\n            panic(err)\n        }\n        \n        client.Trigger(\"update\", \"new-user\", newUser)\n        \n        json.NewEncoder(rw).Encode(newUser)\n    }\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        response, err := client.AuthenticatePrivateChannel(params)\n        if err != nil {\n            panic(err)\n        }\n        \n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nIn the `registerNewUser` function, we trigger a Pusher event, `new-user`, on the public channel `update`, so that the new user’s details are sent to the subscribed clients.\n\nThe syntax for triggering a Pusher event over a public channel in Go is:\n\n```\n    client.Trigger(channel, event, data)\n```\n\n## Building the frontend\n\nLet’s create the `public` folder in the root directory of our project because this is where all of the static files will live:\n\n```\n    $ mkdir public\n```\n\nNext, we will navigate into the `public` folder and create two sub-folders to hold our CSS and JavaScript files:\n\n```\n    $ cd public\n    $ mkdir css js\n```\n\nLastly, create an `index.html` file in the root of the `public` folder. This is where we will write the markup for our application.\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eChat with friends in realtime\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/app.css\" \u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eWelcome\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"registerScreen\"\u003e\n                    \u003ch3 style=\"text-align: center\"\u003eType in your details to chat\u003c/h3\u003e\n                    \u003chr/\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cform id=\"loginScreenForm\"\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                              \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name\" required\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                              \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address\" required\u003e\n                            \u003c/div\u003e\n                            \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eSubmit\u003c/button\u003e\n                          \u003c/form\u003e\n                      \u003c/div\u003e\n                \u003c/main\u003e\n    \n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" style=\"display: none\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove we have the HTML for the home page. Let’s add some styling. Create a new file `app.css` in the `public/css` directory and add the following code:\n\n``` css\n    /* File: ./public/css.app.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    .chat {\n        max-width: 80%;\n        margin: 0 auto;\n    }\n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    .sidebar .nav-item {\n        width: 100%;\n    }\n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    tr .sender span {\n        color: #676767;\n    }\n    .response {\n        display: none;\n    }\n```\n\nNext, let’s write the JavaScript for the application. Create a new `app.js` file in the `public/js` directory and add the following code:\n\n``` javascript\n    // File: ./public/js/app.js\n    (function () {\n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            name: undefined,\n            email: undefined,\n            endUserName: undefined,\n            currentRoom: undefined,\n            currentChannel: undefined,\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        var publicChannel = pusher.subscribe('update');\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        const helpers = {\n            clearChatMessages: () =\u003e {\n                $('#chat-msgs').html('')\n            },\n            \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.email) {\n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n    \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n                chat.endUserName =  evt.target.dataset.userName\n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text('Write a message to ' + evt.target.dataset.userName+ '.')\n                }\n    \n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n    \n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n                \n                let createdAt = new Date().toLocaleString()            \n                let message = $('#replyMessage input').val().trim()\n                let event = 'client-' + chat.currentRoom\n                \n                chat.subscribedChannels[chat.currentChannel].trigger(event, {\n                    'sender': chat.name,\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n                \n                $('#chat-msgs').prepend(\n                    `\u003ctr\u003e\n                        \u003ctd\u003e\n                            \u003cdiv class=\"sender\"\u003e\n                                ${chat.name} @ \u003cspan class=\"date\"\u003e${createdAt}\u003c/span\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message}\u003c/div\u003e\n                        \u003c/td\u003e\n                    \u003c/tr\u003e`\n                )\n                \n                $('#replyMessage input').val('')\n            },\n    \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n                \n                chat.name = name;\n                chat.email = email;\n    \n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n                \n                let validName = (name !== '' \u0026\u0026 name.length \u003e= 3)\n                let validEmail = (email !== '' \u0026\u0026 email.length \u003e= 5)\n                \n                if (validName \u0026\u0026 validEmail) {\n                    axios.post('/new/user', {name, email}).then(res =\u003e {\n                        chatBody.find('#registerScreen').css(\"display\", \"none\");\n                        chatBody.find('#main').css(\"display\", \"block\");\n                        \n                        chat.myChannel = pusher.subscribe('private-' + res.data.email)\n                        chat.myChannel.bind('client-' + chat.email, data =\u003e {\n                            helpers.displayChatMessage(data)\n                        })\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n                \n                evt.preventDefault()\n            }\n        }\n    \n    \n        publicChannel.bind('new-user', function(data) {\n            if (data.email != chat.email){\n                chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n                chat.subscribedUsers.push(data);\n                \n                $('#rooms').html(\"\");\n        \n                chat.subscribedUsers.forEach((user, index) =\u003e {\n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-user-name=\"${user.name}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n                })\n            }\n        })\n    \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n    }());\n```\n\nIn the script above, we instantiated the Pusher object (replace the `PUSHER_APP_*` keys with the credentials on your Pusher dashboard). \n\nNext, we define some helper methods that will help us interact with the chat window and with the backend API. Some of the methods defined in the `helpers` object are:\n\n\n- `clearChatMessages` - clears the chat message window.\n- `displayChatMessage` - displays a new chat message in the current window.\n- `loadChatRoom` - shows a users chat messages in the general chat window after a room is selected.\n- `replyMessage` - sends a chat message to the current room.\n- `LogIntoChatSession` - creates a new chat session.\n\nAfter defining the `helpers` object, we bind to the `new-user` event on the `publicChannel`. In the callback, we subscribe to private channels so the communication is secure. \n\nAt the bottom of the script, we register all the event listeners and start the chat session.\n\n\n## Running the application\n\nTo test the chat app, we can start the Go backend server with this command:\n\n```\n    $ go run chat.go\n```\n\nTo see the app in action, we will visit this address, http://127.0.0.1:8090, on a web browser in multiple windows and test the instant messaging features. \n\nHere’s a demo of the chat app:\n\n![go-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/4VfVpdecD6ackgA08yAwkc/7150bd3d5e452232f7b8839c13c342ed/go-chat-app-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating a chat application powered by a Go backend server. \n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/go-pusher-chat-app).","metaTitle":"Build a chat app with Go","metaDescription":"Use Go and JavaScript to create a simple realtime messenger application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2R3OOdRWOcK8gi8mkcom8i","type":"Entry","createdAt":"2018-07-29T20:22:52.067Z","updatedAt":"2018-07-29T20:22:52.067Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Android messenger app with online presence using Kotlin","url":"android-messenger-presence-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-07-25","description":"This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB to create a simple backend, and Kotlin to program the app. Users will be able to log in and see who is online.","prerequisite":"You will need Android Studio 3+, Node, npm and MongoDB installed on your machine. Some familiarity with Android development is required.","content":"When building a chat application, it is essential to have an online presence feature. It is essential because your users will like to know when their friends are online and are more likely to respond to their messages.\n\nIn this article, we will be building a messenger app with online presence using Pusher Channels, Kotlin and Node.js. \n\nHere is a demo of what we will build:\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n# Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- A Pusher Channel app. You can create one [here](https://pusher.com/channels).\n- Android Studio installed on your machine. You can check [here](https://developer.android.com/studio/index.html) for the latest stable version. A minimum of version 3.0 is recommended.\n- Basic knowledge of Android development and the Android Studio IDE.\n- Basic knowledge of Kotlin. Here are the [official docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM (Node Package Manager) installed on your machine. Download [here](https://nodejs.org/en/).\n- Mongo DB installed on your machine. You can install it following the instructions [here](https://docs.mongodb.com/manual/installation/).\n\n\n## Building the backend server\n\nOur server will be built using Node.js. To start, create a new project directory:\n\n```\n    $ mkdir backend-server\n```\n\nNext, create a new `index.js` file inside the project directory and paste the following code:\n\n``` javascript\n    // File: ./index.js\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    const mongoose = require('mongoose');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER'\n    });\n    \n    mongoose.connect('mongodb://127.0.0.1/db');\n    \n    const Schema = mongoose.Schema;\n    const userSchema = new Schema({\n        name: { type: String, required: true, },\n        count: {type: Number}\n    });\n    \n    var User = mongoose.model('User', userSchema);\n    userSchema.pre('save', function(next) {\n        if (this.isNew) {\n            User.count().then(res =\u003e {\n              this.count = res; // Increment count\n              next();\n            });\n          } else {\n            next();\n          }\n    });\n    \n    module.exports = User;\n    \n    var currentUser;\n    \n    /* \n    =================================\n    We will add our endpoints here!!!\n    =================================\n    */\n    \n    var port = process.env.PORT || 5000;\n    \n    app.listen(port);\n```\n\nIn the snippet above, we initialized Pusher, Express, and MongoDB. We are using [Moongose](http://mongoosejs.com/) to connect to our MongoDB instance.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the ones on your Pusher dashboard.\n  \n\nNow let’s add our endpoints. The first endpoint we will add will be to log a user in. Paste the code below in your `index.js` file below the `currentUser` declaration:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/login', (req,res) =\u003e {\n        User.findOne({name: req.body.name}, (err, user) =\u003e {\n            if (err) {\n                res.send(\"Error connecting to database\");\n            }\n            \n            // User exists\n            if (user) {\n                currentUser = user;\n                return res.status(200).send(user)\n            }\n            \n            let newuser = new User({name: req.body.name});\n    \n            newuser.save(function(err) {\n                if (err) throw err;\n            });\n            \n            currentUser = newuser;\n            res.status(200).send(newuser)\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint receives a `username` with the request, and either create a new user or returns the data of the existing user. \n\nLet’s add the next endpoint below the one above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.get('/users', (req,res) =\u003e {\n        User.find({}, (err, users) =\u003e {\n            if (err) throw err;\n            res.send(users);\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint above fetches all the users from the database and returns them. \n\nSince we will be using a Pusher presence channel, we need an endpoint to authenticate the user. In the same file, paste this code below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/presence', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n      \n        let presenceData = {\n            user_id: currentUser._id,\n            user_info: {count: currentUser.count, name: currentUser.name}\n        };\n      \n        let auth = pusher.authenticate(socketId, channel, presenceData);\n    \n        res.send(auth);\n    });\n    \n    // [...]\n```\n\nSince we are going to be using private channels, we need an endpoint for authentication. Add the following endpoint below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/private', (req, res) =\u003e {\n        res.send(pusher.authenticate(req.body.socket_id, req.body.channel_name));\n    });\n    \n    // [...]\n\nFinally, the last endpoint will be to trigger an event `new-message` to a channel. Add the endpoint below the last one:\n\n\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/send-message', (req, res) =\u003e {\n        let payload = {message: req.body.message, sender_id: req.body.sender_id}\n        pusher.trigger(req.body.channel_name, 'new-message', payload);\n        res.send(200);\n    });\n    \n    // [...]\n```\n\nAfter adding all the endpoints, install the necessary NPM packages by running this command:\n\n```\n    $ npm install express body-parser mongoose pusher\n```\n\nBefore you run your application, make sure MongoDB is running already using this command:\n\n```\n    $ mongod --dbpath C:\\MongoDB\\data\\db # Windows\n    $ mongod --dbpath=/path/to/db/directory # Mac or Linux\n```\n\nNow you can run your application using the command below:\n\n```\n    $ node index.js\n```\n\nYour app will be available here: http://localhost:5000.\n\n\n## Building our Android application\n\nCreate your Android project. In the wizard, enter your project name, let’s say **MessengerApp.**  Next, enter your package name. You can use a minimum SDK of 19 then choose an **Empty Activity**. On the next page, change the **Activity Name** to `LoginActivity`. After this, Android Studio will build your project for you.\n\nNow that we have the project, let’s add the required dependencies for our app. Open your app module `build.gradle` file and add these:\n\n```\n    // File ../app/build.gradle\n    dependencies {\n      // [...]\n      \n      implementation 'com.android.support:design:28+'\n      implementation 'com.pusher:pusher-java-client:1.6.0'\n      implementation \"com.squareup.retrofit2:retrofit:2.4.0\"\n      implementation \"com.squareup.retrofit2:converter-scalars:2.4.0\"\n      implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    }\n```\n\nNotably, we added the dependencies for [Retrofit](http://square.github.io/retrofit/) and Pusher. Retrofit is an HTTP client library used for network calls. We added the design library dependency too as we want to use some classes from it. Sync your gradle files to pull in the dependencies.\n\nNext, let’s prepare our app to make network calls. Retrofit requires an interface to know the endpoints to be accessed. \n\nCreate a new interface named `ApiService` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ApiService.kt\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.GET\n    import retrofit2.http.POST\n    \n    interface ApiService {\n    \n      @POST(\"/login\")\n      fun login(@Body body:RequestBody): Call\u003cUserModel\u003e\n    \n      @POST(\"/send-message\")\n      fun sendMessage(@Body body:RequestBody): Call\u003cString\u003e\n    \n      @GET(\"/users\")\n      fun getUsers(): Call\u003cList\u003cUserModel\u003e\u003e\n    }\n```\n\nHere, we have declared three endpoints. They are for logging in, sending messages and fetching users. Notice that in some of our responses, we return `Call\u003cUserModel\u003e`. Let’s create the `UserModel`. Create a new class called `UserModel` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/UserModel.kt\n    import com.google.gson.annotations.Expose\n    import com.google.gson.annotations.SerializedName\n    \n    data class UserModel(@SerializedName(\"_id\") @Expose var id: String,\n                         @SerializedName(\"name\") @Expose var name: String,\n                         @SerializedName(\"count\") @Expose var count: Int,\n                         var online:Boolean = false)\n```\n\nAbove, we used a data class so that some other functions required for model classes such as `toString`, `hashCode` are added to the class by default. \n\nWe are expecting only the values for the `id` and `name` from the server. We added the `online` property so we can update later on. \n\nNext, create a new class named `RetrofitInstance` and paste the following code:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitInstance {\n    \n      companion object {\n        val retrofit: ApiService by lazy {\n          val httpClient = OkHttpClient.Builder()\n          val builder = Retrofit.Builder()\n              .baseUrl(\"http://10.0.2.2:5000/\")\n              .addConverterFactory(ScalarsConverterFactory.create())\n              .addConverterFactory(GsonConverterFactory.create())\n    \n          val retrofit = builder\n              .client(httpClient.build())\n              .build()\n          retrofit.create(ApiService::class.java)\n        }\n      }\n    }\n```\n\nThis class contains a class variable called `retrofit`. It provides us with an instance for Retrofit that we will reference in more than one class.\n\nFinally, to request for the internet access permission update the `AndroidManifest.xml` file like so:\n\n``` kotlin\n    // File: ./app/src/main/ApiService.kt\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.messengerapp\"\u003e\n    \n      \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n      [...]\n    \n    \u003c/manifest\u003e\n```\n\nNow we can make requests using Retrofit. \n\nThe next feature we will implement is login. Open the already created `LoginActivity` layout file `activity_login.xml` file and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_login.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:layout_margin=\"20dp\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editTextUsername\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/loginButton\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Login\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis layout contains an input field to take the username and a button to make a login request. \n\nNext, open the `LoginActivity.Kt` file and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/LoginActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.util.Log\n    import kotlinx.android.synthetic.main.activity_login.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class LoginActivity : AppCompatActivity() {\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_login)\n        loginButton.setOnClickListener {\n          if (editTextUsername.text.isNotEmpty()) {\n            loginFunction(editTextUsername.text.toString())\n          }\n        }\n      }\n    \n      private fun loginFunction(name:String) {\n        val jsonObject = JSONObject()\n        jsonObject.put(\"name\", name)\n        \n        val jsonBody = RequestBody.create(\n            MediaType.parse(\"application/json; charset=utf-8\"), \n            jsonObject.toString()\n        )\n    \n        RetrofitInstance.retrofit.login(jsonBody).enqueue(object:Callback\u003cUserModel\u003e {\n          override fun onFailure(call: Call\u003cUserModel\u003e?, t: Throwable?) {\n            Log.i(\"LoginActivity\",t!!.localizedMessage)\n          }\n    \n          override fun onResponse(call: Call\u003cUserModel\u003e?, response: Response\u003cUserModel\u003e?) {\n            if (response!!.code() == 200) {\n              Singleton.getInstance().currentUser = response.body()!!\n              startActivity(Intent(this@LoginActivity,ContactListActivity::class.java))\n              finish()\n            }\n          }\n        })\n      }\n    }\n```\n\nIn the file, we set up a listener for our login button so that when it is clicked, we can send the text to the server for authentication. We also stored the logged in user in a singleton class so that we can access the user’s details later. \n\nCreate a new class called `Singleton` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    class Singleton {\n      companion object {\n        private val ourInstance = Singleton()\n        fun getInstance(): Singleton {\n          return ourInstance\n        }\n      }\n      lateinit var currentUser: UserModel\n    }\n```\n\n\nWith this class, we will have access to the `currentUser`, which is the logged in user.\n\nNext, let’s create a new activity named `ContactListActivity`. For now, leave the class empty and open the corresponding layout file named `activity_contact_list` and paste the following:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_contact_list.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ContactListActivity\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:id=\"@+id/recyclerViewUserList\"\n        android:layout_height=\"match_parent\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\n\nThe layout contains a recycler view, which will give us all the list of our contacts fetched from the database. Since we are displaying items in a list, we will need an adapter class to manage how items are inflated to the layout. \n\nCreate a new class named `ContactRecyclerAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactRecyclerAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.ImageView\n    import android.widget.TextView\n    import java.util.*\n    \n    class ContactRecyclerAdapter(private var list: ArrayList\u003cUserModel\u003e, private var listener: UserClickListener)\n      : RecyclerView.Adapter\u003cContactRecyclerAdapter.ViewHolder\u003e() {\n      \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.user_list_row, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun showUserOnline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = true\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n    \n        }\n      }\n    \n      fun showUserOffline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = false\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n        }\n      }\n    \n      fun add(user: UserModel) {\n        list.add(user)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val nameTextView: TextView = itemView.findViewById(R.id.usernameTextView)\n        private val presenceImageView: ImageView = itemView.findViewById(R.id.presenceImageView)\n    \n        fun bind(currentValue: UserModel) = with(itemView) {\n          this.setOnClickListener {\n            listener.onUserClicked(currentValue)\n          }\n          nameTextView.text = currentValue.name\n          if (currentValue.online){\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon_online))\n          } else {\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon))\n    \n          }\n    \n        }\n      }\n    \n      interface UserClickListener {\n        fun onUserClicked(user: UserModel)\n      }\n    }\n```\n\nThis adapter has some overridden methods and some custom methods. \n\nThe `onCreateViewHolder` inflates how each row will look like. `onBindViewHolder` binds the data to each item by calling the `bind` method in the inner `ViewHolder` class. The `getItemCount` gives the size of the list. \n\nFor our custom methods, `showUserOffline` updates the user and shows when they are offline. While `showUserOnline` does the opposite. Finally, we have the `add` method, which adds a new contact to the list and refreshes it.\n\nIn the adapter class above, we used a new layout named `user_list_row`. Create a new layout `user_list_row` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/user_list_row.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\n      android:orientation=\"horizontal\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"20dp\"\n      android:gravity=\"center\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cImageView\n        android:id=\"@+id/presenceImageView\"\n        android:layout_width=\"15dp\"\n        android:layout_height=\"15dp\"\n        app:srcCompat=\"@drawable/presence_icon\" /\u003e\n    \n      \u003cTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"Neo\"\n        android:textSize=\"20sp\"\n        android:layout_marginStart=\"10dp\"\n        android:id=\"@+id/usernameTextView\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\"\n        /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\nThis layout is the visual representation of how each item on the layout will look like. The layout has an image view that shows the users online status. The layout also has a textview that shows the name of the contact beside the icon. The icons are vector drawables. Let’s create the files. \n\nCreate a new drawable named `presence_icon_online` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon_online.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#3FFC3C\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\n\nCreate another drawable named `presence_icon` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#C0C0C6\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\nNext, open the `ContactListActivity` class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactListActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PresenceChannelEventListener\n    import com.pusher.client.channel.User\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_contact_list.*\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class ContactListActivity : AppCompatActivity(),\n        ContactRecyclerAdapter.UserClickListener {\n    \n      private val mAdapter = ContactRecyclerAdapter(ArrayList(), this)\n      \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_contact_list)\n        setupRecyclerView()\n        fetchUsers()\n        subscribeToChannel()\n      }\n    \n    }\n```\n\nIn this class, we initialized the `ContactRecyclerAdapter`, then called three functions in the `onCreate` method. Let’s create these new functions. \n\nIn the same class, add the following methods:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewUserList) {\n        layoutManager = LinearLayoutManager(this@ContactListActivity)\n        adapter = mAdapter\n      }\n    }\n    \n    private fun fetchUsers() {\n      RetrofitInstance.retrofit.getUsers().enqueue(object : Callback\u003cList\u003cUserModel\u003e\u003e {\n        override fun onFailure(call: Call\u003cList\u003cUserModel\u003e\u003e?, t: Throwable?) {}\n        override fun onResponse(call: Call\u003cList\u003cUserModel\u003e\u003e?, response: Response\u003cList\u003cUserModel\u003e\u003e?) {\n          for (user in response!!.body()!!) {\n            if (user.id != Singleton.getInstance().currentUser.id) {\n              mAdapter.add(user)\n            }\n          }\n        }\n      })\n    }\n    \n    private fun subscribeToChannel() {\n    \n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/presence\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      pusher.subscribePresence(\"presence-channel\", object : PresenceChannelEventListener {\n        override fun onUsersInformationReceived(p0: String?, users: MutableSet\u003cUser\u003e?) {\n          for (user in users!!) {\n            if (user.id!=Singleton.getInstance().currentUser.id){\n              runOnUiThread {\n                mAdapter.showUserOnline(user.toUserModel())\n              }\n            }\n          }\n        }\n    \n        override fun onEvent(p0: String?, p1: String?, p2: String?) {}\n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n    \n        override fun userSubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOnline(user.toUserModel())\n          }\n        }\n    \n        override fun userUnsubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOffline(user.toUserModel())\n          }\n        }\n      })\n    }\n    \n    override fun onUserClicked(user: UserModel) {\n      val intent = Intent(this, ChatRoom::class.java)\n      intent.putExtra(ChatRoom.EXTRA_ID,user.id)\n      intent.putExtra(ChatRoom.EXTRA_NAME,user.name)\n      intent.putExtra(ChatRoom.EXTRA_COUNT,user.count)\n      startActivity(intent)\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\n\n- `setupRecyclerView` assigns a layout manager and an adapter to the recycler view. For a recycler view to work, you need these two things. \n- `fetchUsers` fetches all the users from the server and displays on the list. It exempts the current user logged in.\n- `subcribeToChannel` subscribes to a presence channel. When you subscribe to one, the `onUsersInformationReceived` gives you all the users subscribed to the channel including the current user. So, in that callback, we call the `showUserOnline` method in the adapter class so that the icon beside the user can be changed to signify that the user is online.\n- `onUserClicked` is called when a contact is selected. We pass the details of the user to the next activity called `ChatRoom`.\n\nIn the previous snippet, we used an extension function to transform the `User` object we receive from Pusher to our own `UserModel` object. Let’s define this extension.\n\nCreate a new class called `Utils` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/Utils.kt\n    import com.pusher.client.channel.User\n    import org.json.JSONObject\n    \n    fun User.toUserModel():UserModel{\n      val jsonObject = JSONObject(this.info)\n      val name = jsonObject.getString(\"name\")\n      val numb = jsonObject.getInt(\"count\")\n      return UserModel(this.id, name, numb)\n    }\n```\n\nNow, since we referenced a `ChatRoom` activity earlier in the `onUserClicked` method, let’s create it. \n\nCreate a new activity called `ChatRoom`. The activity comes with a layout file `activity_chat_room`, paste this in the layout file:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_chat_room.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ChatRoom\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerViewChat\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" /\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16dp\"\n        android:hint=\"Enter a message\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/sendButton\"\n        app:layout_constraintStart_toStartOf=\"parent\" /\u003e\n    \n      \u003candroid.support.design.widget.FloatingActionButton\n        android:id=\"@+id/sendButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"16dp\"\n        android:src=\"@android:drawable/ic_menu_send\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThe layout above contains a recycler view for the chat messages, an edit text to collect new messages, and a floating action button to send the message. \n\nNext, create a new class called `ChatRoomAdapter` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoomAdapter.kt\n    import android.support.v7.widget.CardView\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.RelativeLayout\n    import android.widget.TextView\n    import java.util.*\n    \n    class ChatRoomAdapter (private var list: ArrayList\u003cMessageModel\u003e)\n      : RecyclerView.Adapter\u003cChatRoomAdapter.ViewHolder\u003e() {\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.chat_item, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun add(message: MessageModel) {\n        list.add(message)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val messageTextView: TextView = itemView.findViewById(R.id.text)\n        private val cardView: CardView = itemView.findViewById(R.id.cardView)\n    \n        fun bind(message: MessageModel) = with(itemView) {\n          messageTextView.text = message.message\n          val params = cardView.layoutParams as RelativeLayout.LayoutParams\n          if (message.senderId==Singleton.getInstance().currentUser.id) {\n            params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n          }\n        }\n      }\n    }\n```\n\nThis adapter works in a similar fashion as the one we created earlier. One difference though is that the show online and offline methods are not needed here.\n\nNext, create another class named `MessageModel` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/MessageModel.kt\n    data class MessageModel(val message: String, val senderId: String)\n```\n\nThe `chat_item` layout used in the `onCreateViewHolder` method of the adapter class represents how each layout will look like. Create a new layout called `chat_item` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/chat_item.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"16dp\"\n      android:orientation=\"vertical\"\u003e\n    \n      \u003candroid.support.v7.widget.CardView\n        android:id=\"@+id/cardView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"start\"\n        app:cardCornerRadius=\"8dp\"\n        app:cardUseCompatPadding=\"true\"\u003e\n    \n        \u003cLinearLayout\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:gravity=\"start\"\n          android:orientation=\"vertical\"\n          android:padding=\"8dp\"\u003e\n    \n          \u003cTextView\n            android:id=\"@+id/text\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_vertical|start\"\n            android:layout_marginBottom=\"4dp\"\n            android:textStyle=\"bold\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n      \u003c/android.support.v7.widget.CardView\u003e\n    \n    \u003c/RelativeLayout\u003e\n```\n\nFinally, open the `ChatRoom` activity class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoom.kt\n    import android.app.Activity\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.View\n    import android.view.inputmethod.InputMethodManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PrivateChannelEventListener\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_chat_room.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import java.lang.Exception\n    import java.util.*\n    \n    class ChatRoom : AppCompatActivity() {\n    \n      companion object {\n        const val EXTRA_ID = \"id\"\n        const val EXTRA_NAME = \"name\"\n        const val EXTRA_COUNT = \"numb\"\n      }\n    \n      private lateinit var contactName: String\n      private lateinit var contactId: String\n      private var contactNumb: Int = -1\n      lateinit var nameOfChannel: String\n      val mAdapter = ChatRoomAdapter(ArrayList())\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chat_room)\n        fetchExtras()\n        setupRecyclerView()\n        subscribeToChannel()\n        setupClickListener()\n      }\n    }\n```\n\nIn this file, we declared constants used to send data to the activity through intents. We also initialized variables we will use later like the adapter the contact details. We then called some additional methods in the `onCreate` method. Let’s add them to the class.\n\nAdd the `fetchExtras` method defined below to the class. The method gets the extras sent from the chatroom activity.\n\n``` kotlin\n    private fun fetchExtras() {\n      contactName = intent.extras.getString(ChatRoom.EXTRA_NAME)\n      contactId = intent.extras.getString(ChatRoom.EXTRA_ID)\n      contactNumb = intent.extras.getInt(ChatRoom.EXTRA_COUNT)\n    }\n```\n\nThe next method is the `setupRecyclerView` method. This initializes the recycler view with an adapter and a layout manager. Paste the function in the same class as before:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewChat) {\n        layoutManager = LinearLayoutManager(this@ChatRoom)\n        adapter = mAdapter\n      }\n    }\n```\n\nThe next method is the `subscribeToChannel` method. This method subscribes the user to a private channel with the selected contact. Paste the following code to the same class as before:\n\n``` kotlin\n    private fun subscribeToChannel() {\n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/private\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      nameOfChannel = if (Singleton.getInstance().currentUser.count \u003e contactNumb) {\n        \"private-\" + Singleton.getInstance().currentUser.id + \"-\" + contactId\n      } else {\n        \"private-\" + contactId + \"-\" + Singleton.getInstance().currentUser.id\n      }\n    \n      Log.i(\"ChatRoom\", nameOfChannel)\n    \n      pusher.subscribePrivate(nameOfChannel, object : PrivateChannelEventListener {\n        override fun onEvent(channelName: String?, eventName: String?, data: String?) {\n          val obj = JSONObject(data)\n          val messageModel = MessageModel(obj.getString(\"message\"), obj.getString(\"sender_id\"))\n    \n          runOnUiThread {\n            mAdapter.add(messageModel)\n          }\n        }\n    \n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n      }, \"new-message\")\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\nThe code above allows a user to subscribe to a private channel. A private channel requires authorization like the presence channel. However, it does not expose a callback that is triggered when other users subscribe. \n\nNext method to be added is the `setupClickListener`. Paste the method to the same class as before:\n\n``` kotlin\n    private fun setupClickListener() {\n      sendButton.setOnClickListener{\n        if (editText.text.isNotEmpty()) {\n          val jsonObject = JSONObject()\n          jsonObject.put(\"message\",editText.text.toString())\n          jsonObject.put(\"channel_name\",nameOfChannel)\n          jsonObject.put(\"sender_id\",Singleton.getInstance().currentUser.id)\n          \n          val jsonBody = RequestBody.create(\n              MediaType.parse(\"application/json; charset=utf-8\"), \n              jsonObject.toString()\n          )\n    \n          RetrofitInstance.retrofit.sendMessage(jsonBody).enqueue(object: Callback\u003cString\u003e{\n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {}\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {}\n          })\n          \n          editText.text.clear()\n          hideKeyBoard()\n        }\n    \n      }\n    }\n```\n\nThe method above assigns a click listener to the floating action button to send the message to the server.  After the message is sent, we clear the text view and hide the keyboard. \n\nAdd a method to the same class for hiding the keyboard like this:\n\n``` kotlin\n    private fun hideKeyBoard() {\n      val imm = getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n      var view = currentFocus\n      \n      if (view == null) {\n        view = View(this)\n      }\n      \n      imm.hideSoftInputFromWindow(view.windowToken, 0)\n    }\n```\n\nThat’s all for the application. Now you can run your application in Android Studio and you should see the application in action.\n\n\n\u003e Make sure the Node.js API we built earlier is running before running the Android application.\n\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n\n## Conclusion\n\nIn this article, you have been introduced yet again to some Pusher’s capabilities such as the private and presence channel. We learned how to authenticate our users for the various channels. We used these channels to implement a private chat between two persons and an online notification for a contact. \n\nThe source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status).","metaTitle":"Build an Android messenger app with online presence","metaDescription":"Use Kotlin, Node.js and MongoDB to build an Android messaging app, featuring online presence. Users are able to log in and see who else is online."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1L0QNgAgZqYoGSmmmqWM4c","type":"Entry","createdAt":"2018-07-25T07:37:09.419Z","updatedAt":"2018-07-25T07:37:09.419Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat widget with Python and JavaScript","url":"chat-widget-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-pusher-chat-widget","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2018-07-23","description":"This tutorial will guide you through building a simple chat widget in Python and JavaScript. You will build two interfaces: a user window where website visitors can initiate chat, and an admin panel where admins can see open chats and choose one to join.","prerequisite":"You will need Python 3+ installed on your machine.","content":"Building quality digital products is a requirement toward acquiring long-term customers, but inefficient communication is an efficient way to lose them just as quickly as you gain them. The internet is currently the world’s largest marketplace and everyone is building something for an online audience to consume, however, it would be a shame if there isn’t a way to receive feedback or interact with customers in realtime.\n\nIn this tutorial, we will look at how we can create a realtime chat widget using Pusher, Python, and JavaScript. When we are done building, the final application will look and work like this:\n\n![python-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/1SVxOwhxqMKyqcAwY4OS6s/c5663259670daaa2e4737f70f70e1bcd/python-chat-widget-demo.gif)\n\nIn the image above, we can see a digital product called “SPIN” and it has a chat widget option for visiting customers to interact with. On the left browser window, a customer visits this website and fills in his/her details before submitting the form. \n\nThere is an admin on the right browser window who can see all connected customers and respond to all their messages accordingly, providing effective and realtime support.\n\n## Prerequisites\n\nTo follow along with this tutorial, a basic knowledge of Python, Flask, JavaScript (ES6 syntax) and jQuery is required. You will also need the following installed:\n\n\n1. [Python](https://www.python.org/) (\u003e= v3.x)\n2. [Virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment, and not pollute our global packages directory.\n\nLet’s install `virtualenv` with this command:\n\n```\n    $ pip install virtualenv\n```\n\n\u003e ⚠️ Virtualenv comes preinstalled with Python 3 so you may not need to install it if you are on this version.\n\n\n## Setting up the app environment\n\nLet’s create our project folder, and activate a virtual environment within it:\n\n```\n    $ mkdir python-pusher-chat-widget\n    $ cd python-pusher-chat-widget\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install [Flask](http://flask.pocoo.org/) and the remaining dependencies with this command:\n\n```\n    $ pip install flask flask-cors simplejson\n```\n\nWe need to install the Pusher library as we will need that for realtime updates.\n\n## Setting up Pusher\n\nThe first step here will be to get a Pusher Channels application. We need the application credentials for our realtime messaging to work.\n\nGo to the [Pusher website](https://pusher.com/) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article:\n\n![python-chat-widget-app-keys](//images.ctfassets.net/1es3ne0caaid/6E2f10XxIWuMgyG0gygMUO/b1786e85e89bcf2412eb7c9c3a13c75c/python-chat-widget-app-keys.png)\n\nThere’s one more thing we need to do here on this dashboard; because we will directly be triggering the message events on the client side of the application, we need to turn on a special feature that is turned off by default for security reasons. To learn more about triggering events on the client side, you can read the documentation [here.](https://pusher.com/docs/client_api_guide/client_events#trigger-events)\n\nOn the dashboard, click on **App settings** and scroll to the bottom of the page then select the option that says **Enable client events**:\n\n![python-chat-widget-enable-client-events](//images.ctfassets.net/1es3ne0caaid/3wWPgt2CbSKaU8q2swqcGY/778bb6e7512b5160b621789f76fbe743/python-chat-widget-enable-client-events.png)\n\nGreat, now let’s install the Pusher Python library,  so that we can use Pusher in the application:\n\n```\n    $ pip install pusher\n```\n\n## File and folder structure\n\nHere’s a representation of the file/folder structure for this app:\n\n```\n    ├── python-pusher-chat-widget\n           ├── app.py\n           ├── static\n           └── templates\n```\n\nThe `static` folder will contain the static files to be used as is defined by [Flask standards.](http://flask.pocoo.org/docs/0.12/tutorial/folders/) The `templates` folder will hold the HTML templates. In our application, `app.py` is the main entry point and will contain our server-side code.\n\nLet’s create the `app.py` file and then the `static` and `templates` folders.\n\n\n## Building the backend\n\nBefore we start writing code to determine how the frontend of our application will be rendered, let’s fully develop the backend and all of its endpoints so that the frontend has something to communicate with when we build it.\n\nLet’s open the `app.py` file and paste the following code:\n\n``` python\n    // File: ./app.py\n    \n    from flask import Flask, render_template, request, jsonify, make_response, json\n    from flask_cors import CORS\n    from pusher import pusher\n    import simplejson\n    \n    app = Flask(__name__)\n    cors = CORS(app)\n    app.config['CORS_HEADERS'] = 'Content-Type'\n    \n    # configure pusher object\n    pusher = pusher.Pusher(\n    app_id='PUSHER_APP_ID',\n    key='PUSHER_APP_KEY',\n    secret='PUSHER_APP_SECRET',\n    cluster='PUSHER_APP_CLUSTER',\n    ssl=True)\n    \n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    \n    @app.route('/admin')\n    def admin():\n        return render_template('admin.html')\n    \n    @app.route('/new/guest', methods=['POST'])\n    def guestUser():\n        data = request.json\n        pusher.trigger(u'general-channel', u'new-guest-details', { \n            'name' : data['name'], \n            'email' : data['email']\n            })\n        return json.dumps(data)\n    \n    @app.route(\"/pusher/auth\", methods=['POST'])\n    def pusher_authentication():\n        auth = pusher.authenticate(channel=request.form['channel_name'],socket_id=request.form['socket_id'])\n        return json.dumps(auth)\n    \n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=5000, debug=True)\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the values on your Pusher dashboard.\n\nThe logic for this application is simple, we will require a Pusher public channel so that whenever a new customer connects with the chat widget, their details are sent over to the admin (using that public channel) and the admin can subscribe to a private channel (the customer will have to subscribe to this private channel too) using the customer’s email as a unique ID. The admin and that customer can further engage in one to one messaging over that private channel.\n\nLet’s go over the code in the `app.py` file to see how it satisfies the logic we just discussed. We first imported all the required packages, then registered a new Pusher instance. Next, we declared four endpoints:\n\n\n- `/` - This endpoint returns the static HTML template that defines the homepage of this app.\n- `/admin` - This endpoint returns the static HTML template that defines the admin dashboard.\n- `/new/guest/` - This endpoint receives a POST request containing the details of a new customer and pushes it to the public channel — general-channel — in a “new-guest-details” event. The admin on the other side responds to this event by subscribing to a private channel using the user’s email as the unique ID.\n\n\n  We used the trigger method on the Pusher instance here, the trigger method has the following syntax: `pusher.trigger(\"a_channel\", \"an_event\", {key: \"data\"})`. You can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python) to get more information on configuring and using Pusher in Python.\n- `/pusher/auth` - This endpoint is responsible for enabling our applications to connect to private channels. Without this `auth` endpoint, we will not be authorized to send client events over private channels. You can learn more about private channels [here](https://pusher.com/docs/client_api_guide/client_private_channels) and about how to authorize users [here.](https://pusher.com/docs/authenticating_users)\n\n\n## Building the frontend\n\nIn this section, we are going to do the following things:\n\n\n- Create two new files, `index.html` and `admin.html` in the `templates` directory.\n- Create an `img` directory in the `static` directory and add a background image called `bg.jpg` inside it. You can find and download free images [here](http://pexels.com).\n- Create a `css` and `js` directory within the `static` directory. In the `css` directory, create a new `admin.css` and `app.css` file. In the `js` directory, create a new `admin.js` and `app.js` file.\n\nWe will be using [Bootstrap](https://getbootstrap.com/docs/4.0/getting-started/introduction/) as a base style for the application. We will also be using other third-party libraries so let’s fetch the source and place them in the appropriate directory inside the `static` directory.\n\nAdd these files in the `static/js` directory:\n\n\n1. `axios.js` - download the source code [here](http://cdn.jsdelivr.net/npm/axios@0.17.0/dist/axios.min.js).\n2. `bootstrap.js` - download the source code [here](https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js).\n3. `jquery.js` - download the source code [here](https://code.jquery.com/jquery-3.2.1.slim.min.js).\n4. `popper.js` - download the source code [here](https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/popper.min.js).\n\nAdd this file in the `static/css` directory:\n\n\n1. `bootstrap.css` - download the source code [here](https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css).\n\nThe new folder structure should be:\n\n```\n    ├── python-pusher-chat-widget\n      ├── app.py\n      ├── static\n        ├── css\n          ├── admin.css\n          ├── app.css\n          ├── bootstrap.css\n        ├── img\n          ├── bg.jpg\n        ├── js\n          ├── admin.js\n          ├── app.js\n          ├── axios.js\n          ├── bootstrap.js\n          ├── jquery.js\n          ├── popper.js\n      ├── templates\n        ├── admin.html\n        ├── index.html\n```\n\nIf you currently have this folder structure then you are good to go!\n\n### Setting up the homepage view\n\nIn the `templates/index.html` file, paste the following code:\n\n``` html\n    \u003c!-- File: ./templates/index.html --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eSpin Spinner Spinnest!\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/bootstrap.css') }}\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/app.css') }}\"\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cdiv class=\"site-wrapper\"\u003e\n          \u003cdiv class=\"site-wrapper-inner\"\u003e\n            \u003cdiv class=\"cover-container\"\u003e\n    \n              \u003cheader class=\"masthead clearfix\"\u003e\n                \u003cdiv class=\"inner\"\u003e\n                  \u003ch3 class=\"masthead-brand\"\u003eSPIN\u003c/h3\u003e\n                  \u003cnav class=\"nav nav-masthead\"\u003e\n                    \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eFeatures\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eContact\u003c/a\u003e\n                  \u003c/nav\u003e\n                \u003c/div\u003e\n              \u003c/header\u003e\n    \n              \u003cmain role=\"main\" class=\"inner cover\"\u003e\n                \u003ch1 class=\"cover-heading\"\u003eSPIN\u003c/h1\u003e\n                \u003cp class=\"lead\"\u003eSPIN is a simple realtime chat widget powered by Pusher.\u003c/p\u003e\n                \u003cp class=\"lead\"\u003e\n                  \u003ca href=\"#\" class=\"btn btn-lg btn-secondary\"\u003eGO for a SPIN?\u003c/a\u003e\n                \u003c/p\u003e\n              \u003c/main\u003e\n    \n              \u003cfooter class=\"mastfoot\"\u003e\n              \u003c/footer\u003e\n    \n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv class=\"chatbubble\"\u003e\n            \u003cdiv class=\"unexpanded\"\u003e\n                \u003cdiv class=\"title\"\u003eChat with Support\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"expanded chat-window\"\u003e\n              \u003cdiv class=\"login-screen container\"\u003e\n                \u003cform id=\"loginScreenForm\"\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eStart Chat\u003c/button\u003e\n                \u003c/form\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"chats\"\u003e\n                \u003cdiv class=\"loader-wrapper\"\u003e\n                  \u003cdiv class=\"loader\"\u003e\n                    \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cul class=\"messages clearfix\"\u003e\n                \u003c/ul\u003e\n                \u003cdiv class=\"input\"\u003e\n                  \u003cform class=\"form-inline\" id=\"messageSupport\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                      \u003cinput type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"newMessage\" placeholder=\"Enter Message\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSend\u003c/button\u003e\n                  \u003c/form\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e    \n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/jquery.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/popper.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/bootstrap.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/axios.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/app.js') }}\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn this file, we have the HTML for the homepage. We also used Flask’s `url_for` function to dynamically link to all the local scripts and styles that we created. \n\nBecause we require our application to send and receive messages in realtime, we imported the official Pusher JavaScript library with this line of code:\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nWe included some custom classes within the HTML elements, however, these classes will be useless if we do not define them in the matching CSS file, open the `static/css/app.css` file and paste the following code:\n\n``` css\n    /* File: static/css/app.css */\n    a,\n    a:focus,\n    a:hover {\n      color: #fff;\n    }\n    \n    .btn-secondary,\n    .btn-secondary:hover,\n    .btn-secondary:focus {\n      color: #333;\n      text-shadow: none;\n      background-color: #fff;\n      border: .05rem solid #fff;\n    }\n    \n    html,\n    body {\n      height: 100%;\n      background-color: #333;\n    }\n    \n    body {\n      color: #fff;\n      text-align: center;\n      text-shadow: 0 .05rem .1rem rgba(0,0,0,.5);\n    }\n    \n    .site-wrapper {\n      display: table;\n      width: 100%;\n      height: 100%; /* For at least Firefox */\n      min-height: 100%;\n      box-shadow: inset 0 0 5rem rgba(0,0,0,.5);\n      background: url(../img/bg.jpg);\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n    \n    .site-wrapper-inner {\n      display: table-cell;\n      vertical-align: top;\n    }\n    \n    .cover-container {\n      margin-right: auto;\n      margin-left: auto;\n    }\n    \n    .inner {\n      padding: 2rem;\n    }\n    \n    .masthead {\n      margin-bottom: 2rem;\n    }\n    \n    .masthead-brand {\n      margin-bottom: 0;\n    }\n    \n    .nav-masthead .nav-link {\n      padding: .25rem 0;\n      font-weight: 700;\n      color: rgba(255,255,255,.5);\n      background-color: transparent;\n      border-bottom: .25rem solid transparent;\n    }\n    \n    .nav-masthead .nav-link:hover,\n    .nav-masthead .nav-link:focus {\n      border-bottom-color: rgba(255,255,255,.25);\n    }\n    \n    .nav-masthead .nav-link + .nav-link {\n      margin-left: 1rem;\n    }\n    \n    .nav-masthead .active {\n      color: #fff;\n      border-bottom-color: #fff;\n    }\n    \n    @media (min-width: 48em) {\n      .masthead-brand {\n        float: left;\n      }\n    \n      .nav-masthead {\n        float: right;\n      }\n    }\n    \n    .cover {\n      padding: 0 1.5rem;\n    }\n    \n    .cover .btn-lg {\n      padding: .75rem 1.25rem;\n      font-weight: 700;\n    }\n    \n    .mastfoot {\n      color: rgba(255,255,255,.5);\n    }\n    \n    @media (min-width: 40em) {\n      .masthead {\n        position: fixed;\n        top: 0;\n      }\n    \n      .mastfoot {\n        position: fixed;\n        bottom: 0;\n      }\n    \n      .site-wrapper-inner {\n        vertical-align: middle;\n      }\n    \n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 100%;\n      }\n    }\n    \n    @media (min-width: 62em) {\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 42rem;\n      }\n    }\n    \n    .chatbubble {\n        position: fixed;\n        bottom: 0;\n        right: 30px;\n        transform: translateY(300px);\n        transition: transform .3s ease-in-out;\n    }\n    \n    .chatbubble.opened {\n        transform: translateY(0)\n    }\n    \n    .chatbubble .unexpanded {\n        display: block;\n        background-color: #e23e3e;\n        padding: 10px 15px 10px;\n        position: relative;\n        cursor: pointer;\n        width: 350px;\n        border-radius: 10px 10px 0 0;\n    }\n    \n    .chatbubble .expanded {\n        height: 300px;\n        width: 350px;\n        background-color: #fff;\n        text-align: left;\n        padding: 10px;\n        color: #333;\n        text-shadow: none;\n        font-size: 14px;\n    }\n    \n    .chatbubble .chat-window {\n      overflow: auto;\n    }\n    \n    .chatbubble .loader-wrapper {\n        margin-top: 50px;\n        text-align: center;\n    }\n    \n    .chatbubble .messages {\n        display: none;\n        list-style: none;\n        margin: 0 0 50px;\n        padding: 0;\n    }\n    \n    .chatbubble .messages li {\n        width: 85%;\n        float: left;\n        padding: 10px;\n        border-radius: 5px 5px 5px 0;\n        font-size: 14px;\n        background: #c9f1e6;\n        margin-bottom: 10px;\n    }\n    \n    .chatbubble .messages li .sender {\n        font-weight: 600;\n    }\n    \n    .chatbubble .messages li.support {\n        float: right;\n        text-align: right;\n        color: #fff;\n        background-color: #e33d3d;\n        border-radius: 5px 5px 0 5px;\n    }\n    \n    .chatbubble .chats .input {\n        position: absolute;\n        bottom: 0;\n        padding: 10px;\n        left: 0;\n        width: 100%;\n        background: #f0f0f0;\n        display: none;\n    }\n    \n    .chatbubble .chats .input .form-group {\n        width: 80%;\n    }\n    \n    .chatbubble .chats .input input {\n        width: 100%;\n    }\n    \n    .chatbubble .chats .input button {\n        width: 20%;\n    }\n    \n    .chatbubble .chats {\n      display: none;\n    }\n    \n    .chatbubble .login-screen {\n      margin-top: 20px;\n      display: none;\n    }\n    \n    .chatbubble .chats.active,\n    .chatbubble .login-screen.active {\n      display: block;\n    }\n    \n    /* Loader Credit: https://codepen.io/ashmind/pen/zqaqpB */\n    .chatbubble .loader {\n      color: #e23e3e;\n      font-family: Consolas, Menlo, Monaco, monospace;\n      font-weight: bold;\n      font-size: 10vh;\n      opacity: 0.8;\n    }\n    \n    .chatbubble .loader span {\n      display: inline-block;\n      -webkit-animation: pulse 0.4s alternate infinite ease-in-out;\n              animation: pulse 0.4s alternate infinite ease-in-out;\n    }\n    \n    .chatbubble .loader span:nth-child(odd) {\n      -webkit-animation-delay: 0.4s;\n              animation-delay: 0.4s;\n    }\n    \n    @-webkit-keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    }\n    \n    @keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    }\n```\n### Setting up the admin dashboard view\n\nIn the `templates/admin.html` file, paste the following code:\n\n``` html\n    \u003c!-- File: templates/admin.html --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eAdmin\u003c/title\u003e\n        \u003clink href=\"{{ url_for('static', filename='css/bootstrap.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"{{ url_for('static', filename='css/admin.css') }}\" rel=\"stylesheet\"\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n    \n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/jquery.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/popper.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/bootstrap.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/axios.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/admin.js') }}\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nOpen the `static/css/admin.css` file and paste the following code:\n\n``` css\n    /* File: static/css/admin.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    \n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    \n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    \n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    \n    .sidebar .nav-item {\n        width: 100%;\n    }\n    \n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    \n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    \n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    \n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    \n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    \n    tr .sender span {\n        color: #676767;\n    }\n    \n    .response {\n        display: none;\n    }\n```\n\n### Writing the app.js script\n\nIn this section, we will write the script that works with the homepage and supports the customers’ functions. This script will define the logic that will enable a customer to submit the form after filling in his/her details and everything else.\n\nWe will define some helper functions within an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) and these functions will run on the occurrence of several DOM events and possibly pass on the execution to other helper functions.\n\nOpen the `app.js` file and paste the following:\n\n``` javascript\n    // File: static/js/app.js\n    (function() {\n        'use strict';\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n          \n        // ----------------------------------------------------\n        // Chat Details\n        // ----------------------------------------------------\n    \n        let chat = {\n            name:  undefined,\n            email: undefined,\n            myChannel: undefined,\n        }\n    \n    \n        // ----------------------------------------------------\n        // Targeted Elements\n        // ----------------------------------------------------\n    \n        const chatPage   = $(document)\n        const chatWindow = $('.chatbubble')\n        const chatHeader = chatWindow.find('.unexpanded')\n        const chatBody   = chatWindow.find('.chat-window')\n    \n    \n        // ----------------------------------------------------\n        // Register helpers\n        // ----------------------------------------------------\n    \n        let helpers = {\n    \n            // ----------------------------------------------------\n            // Toggles the display of the chat window.\n            // ----------------------------------------------------\n        \n            ToggleChatWindow: function () {\n                chatWindow.toggleClass('opened')\n                chatHeader.find('.title').text(\n                    chatWindow.hasClass('opened') ? 'Minimize Chat Window' : 'Chat with Support'\n                )\n            },\n                \n            // --------------------------------------------------------------------\n            // Show the appropriate display screen. Login screen or Chat screen.\n            // --------------------------------------------------------------------\n        \n            ShowAppropriateChatDisplay: function () {\n                (chat.name) ? helpers.ShowChatRoomDisplay() : helpers.ShowChatInitiationDisplay()\n            },\n    \n            // ----------------------------------------------------\n            // Show the enter details form.\n            // ----------------------------------------------------\n        \n            ShowChatInitiationDisplay: function () {\n                chatBody.find('.chats').removeClass('active')\n                chatBody.find('.login-screen').addClass('active')\n            },\n    \n            // ----------------------------------------------------\n            // Show the chat room messages display.\n            // ----------------------------------------------------\n        \n            ShowChatRoomDisplay: function () {\n                chatBody.find('.chats').addClass('active')\n                chatBody.find('.login-screen').removeClass('active')\n    \n                setTimeout(function(){\n                    chatBody.find('.loader-wrapper').hide()\n                    chatBody.find('.input, .messages').show()\n                }, 2000)\n            },\n    \n            // ----------------------------------------------------\n            // Append a message to the chat messages UI.\n            // ----------------------------------------------------\n        \n            NewChatMessage: function (message) {\n                if (message !== undefined) {\n                    const messageClass = message.sender !== chat.email ? 'support' : 'user'\n    \n                    chatBody.find('ul.messages').append(\n                        `\u003cli class=\"clearfix message ${messageClass}\"\u003e\n                            \u003cdiv class=\"sender\"\u003e${message.name}\u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                        \u003c/li\u003e`\n                    )\n    \n    \n                    chatBody.scrollTop(chatBody[0].scrollHeight)\n                }\n            },\n    \n            // ----------------------------------------------------\n            // Send a message to the chat channel.\n            // ----------------------------------------------------\n        \n            SendMessageToSupport: function (evt) {\n                \n                evt.preventDefault()\n    \n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n    \n                const message = $('#newMessage').val().trim()\n    \n                chat.myChannel.trigger('client-guest-new-message', {\n                    'sender': chat.name,\n                    'email': chat.email,\n                    'text': message,\n                    'createdAt': createdAt \n                });\n                \n                helpers.NewChatMessage({\n                    'text': message,\n                    'name': chat.name,\n                    'sender': chat.email\n                })\n                \n                console.log(\"Message added!\")\n    \n                $('#newMessage').val('')\n            },\n    \n            // ----------------------------------------------------\n            // Logs user into a chat session.\n            // ----------------------------------------------------\n        \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n    \n                // Disable the form\n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n    \n                if ((name !== '' \u0026\u0026 name.length \u003e= 3) \u0026\u0026 (email !== '' \u0026\u0026 email.length \u003e= 5)) {\n                    axios.post('/new/guest', {name, email}).then(response =\u003e {\n                        chat.name = name\n                        chat.email = email\n                        chat.myChannel = pusher.subscribe('private-' + response.data.email);\n                        helpers.ShowAppropriateChatDisplay()\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n    \n                evt.preventDefault()\n            }\n        }\n    \n        // ------------------------------------------------------------------\n        // Listen for a new message event from the admin\n        // ------------------------------------------------------------------\n    \n        pusher.bind('client-support-new-message', function(data){\n            helpers.NewChatMessage(data)\n        })\n    \n    \n        // ----------------------------------------------------\n        // Register page event listeners\n        // ----------------------------------------------------\n    \n        chatPage.ready(helpers.ShowAppropriateChatDisplay)\n        chatHeader.on('click', helpers.ToggleChatWindow)\n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n        chatBody.find('#messageSupport').on('submit', helpers.SendMessageToSupport)\n    }())\n```\n\nAbove we have the JavaScript that powers the clients chat widget. In the code, we start by instantiating Pusher (remember to replace the `PUSHER_*` keys with the keys in your Pusher dashboard).\n\nWe have a `helpers` property that has a few functions attached to it. Each function has a comment explaining what it does right before it is defined. At the bottom of the script is where we register all the events and listeners that make the widget function as expected.\n\n**Writing the admin.js script**\nThe code in the `admin.js` is similar to the `app.js` and functions in a similat manner. Open the `admin.js` add paste the following code:\n\n``` javascript\n    // File: static/js/admin.js\n    (function () {\n        'use strict';\n    \n        // ----------------------------------------------------\n        // Configure Pusher instance\n        // ----------------------------------------------------\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n          });\n    \n        // ----------------------------------------------------\n        // Chat Details\n        // ----------------------------------------------------\n    \n        let chat = {\n            messages: [],\n            currentRoom: '',\n            currentChannel: '',\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        // ----------------------------------------------------\n        // Subscribe to the generalChannel\n        // ----------------------------------------------------\n    \n        var generalChannel = pusher.subscribe('general-channel');\n    \n        // ----------------------------------------------------\n        // Targeted Elements\n        // ----------------------------------------------------\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        // ----------------------------------------------------\n        // Register helpers\n        // ----------------------------------------------------\n    \n        const helpers = {\n    \n            // ------------------------------------------------------------------\n            // Clear the chat messages UI\n            // ------------------------------------------------------------------\n    \n            clearChatMessages: () =\u003e $('#chat-msgs').html(''),\n        \n            // ------------------------------------------------------------------\n            // Add a new chat message to the chat window.\n            // ------------------------------------------------------------------\n        \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.currentRoom) {\n    \n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n        \n            // ------------------------------------------------------------------\n            // Select a new guest chatroom\n            // ------------------------------------------------------------------\n        \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n    \n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text(evt.target.dataset.roomId)\n                }\n    \n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n        \n            // ------------------------------------------------------------------\n            // Reply a message\n            // ------------------------------------------------------------------\n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n    \n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n    \n                const message = $('#replyMessage input').val().trim()\n    \n                chat.subscribedChannels[chat.currentChannel].trigger('client-support-new-message', {\n                    'name': 'Admin',\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n    \n                helpers.displayChatMessage({\n                    'email': chat.currentRoom,\n                    'sender': 'Support',\n                    'text': message, \n                    'createdAt': createdAt\n                })\n    \n    \n                $('#replyMessage input').val('')\n            },\n        }\n    \n    \n          // ------------------------------------------------------------------\n          // Listen to the event that returns the details of a new guest user\n          // ------------------------------------------------------------------\n          \n          generalChannel.bind('new-guest-details', function(data) {\n              \n            chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n    \n            chat.subscribedUsers.push(data);\n    \n            // render the new list of subscribed users and clear the former\n            $('#rooms').html(\"\");\n            chat.subscribedUsers.forEach(function (user, index) {\n    \n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n            })\n    \n          })\n    \n      \n          // ------------------------------------------------------------------\n          // Listen for a new message event from a guest\n          // ------------------------------------------------------------------\n          \n          pusher.bind('client-guest-new-message', function(data){\n              helpers.displayChatMessage(data)\n          })\n    \n    \n        // ----------------------------------------------------\n        // Register page event listeners\n        // ----------------------------------------------------\n        \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n    }())\n```\n\nJust like in the `app.js` we have the `helpers` object that holds the meat of the script and towards the bottom, the listeners and events are called and registered.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n  \n## Running the application\n\nWe can test the application using this command:\n\n```\n    $ flask run\n```\n\nNow if we visit [127.0.0.1:5000](http://127.0.0.1:5000/) and [127.0.0.1:5000/admin](http://127.0.0.1:5000/admin) we should test the application:\n\n![python-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/1SVxOwhxqMKyqcAwY4OS6s/c5663259670daaa2e4737f70f70e1bcd/python-chat-widget-demo.gif)\n\n## Conclusion\n\nIn this article, we have learned how we can leverage the power of Pusher in creating a chat widget powered by a Python backend. The entire code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/python-pusher-chat-widget)","metaTitle":"Build a chat widget with Python and JavaScript","metaDescription":"Use Python and JavaScript to create a simple chat widget and admin panel. Users will be able to initiate chat sessions, and admins will be able to view all sessions and choose one to join."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"181jJdMSpuCIwIE8yaY2YI","type":"Entry","createdAt":"2018-07-25T07:36:17.016Z","updatedAt":"2018-07-25T07:36:17.016Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a chat widget with Go and JavaScript","url":"chat-widget-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-chat-widget","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2018-07-23","description":"This brief tutorial shows you how to quickly create a chat widget with a backend powered by Go, and a frontend and admin dashboard in JavaScript. Users can initiate chat, and admins can see waiting chats and choose which to join.","prerequisite":"You will need Go 0.10.x+ installed. A basic knowledge of Go and JavaScript (ES6 syntax) will be helpful.","content":"## Introduction\n\nThe process of building products for an online demographic should be thorough and follow modern-day trends. One of such trend is making it possible for the customers and support agents to have realtime discussions over some form of two-way message channel. This would ensure that customers do not click away in confusion and switch to competitors in times of frustration.\n\nIn this tutorial, we will see how to build a realtime chat widget with Go, Pusher, and JavaScript. Here’s a demo of the application:\n\n![go-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/3qN7ML2VMcqaMyMaSGWsiw/3bb18095d1042c0708925e2b35667789/go-chat-widget-demo.gif)\n\nIn the above image, we built a website that sells motorcycles and integrates a chat widget. A customer is able to sign up to speak with a support agent and the agent on the other end can manage communication among a number of connected customers.\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- An IDE of your choice like Visual Studio Code.\n- Go (version \u003e= 0.10.x) installed on your computer. Here’s how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6) and jQuery.\n- Once you have all the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you have already signed up with Pusher and created an application.\n\n## Setting up Pusher\n\nThe realtime feature of the chat widget is dependent on Pusher so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one, after the signup process, you will be asked to create a new application. Let’s keep the app credentials nearby because we will need it to integrate Pusher within the cat widget.\n\n### Enabling client events\n\nThe final thing we will do is enable the Pusher application to trigger events from the client (browser) over a private channel. We need this feature because it is what will make it possible for a support agent to securely chat with a customer without having to send the message through the backend server first. Follow the steps below to activate client events from the [dashboard](https://dashboard.pusher.com):\n\n\n- Select the channel application.\n- Click on **App Settings** from the horizontal options list.\n- Check the **Enable client events** option.\n![go-chat-widget-enable-client-events](//images.ctfassets.net/1es3ne0caaid/24nRrulxAEScAs2aScYKAs/c162fb0a4ecaafeb7cad264880b1cbc3/go-chat-widget-enable-client-events.png)\n- Click on the **Update** button.\n\nThat’s all we need to do here.\n\n## Setting up the codebase\n\nLet’s begin by navigating into the `src` directory that is located in the `$GOPATH` and creating a new directory for our app. This will be the root directory for this project:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-chat-widget\n    $ cd go-pusher-chat-widget\n```\n\nLet’s create the main Go file (this is the entry point of the application) here and call it `chat.go`.\nNext, we will install the Go Pusher library that we will reference within the code for the backend server. Run the following code in the terminal to pull in the package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️ If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this GitHub issue.\n\nOpen the `chat.go` file in your favorite IDE and update it with the following code:\n\n``` go\n    // File: ./chat.go\n    package main\n    \n    // Here, we import the required packages (including Pusher)\n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // Here, we register the Pusher client\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // Here, we define a customer as a struct\n    type customer struct {\n        Name  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    func main() {\n    \n        // Serve the static files and templates from the public directory\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n    \n        // -------------------------------------------------------\n        // Listen on these routes for new customer registration and User authorization,\n        // thereafter, handle each request using the matching handler function.\n        // -------------------------------------------------------\n        http.HandleFunc(\"/new/customer\", broadcastCustomerDetails)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        // Start executing the application on port 8070\n        log.Fatal(http.ListenAndServe(\":8070\", nil))\n    }\n```\n\nIn the code above, we registered a new Pusher client with the credentials from the app we created earlier on the dashboard.\n\n\n\u003e ⚠️ Replace `PUSHER_*` keys with your app credentials.\n\nIn the main function, we defined two endpoints, `/new/customer` and `/pusher/auth`. The first will be hit when a new customer signs up and the last will authorize the users so they can subscribe to private channels. \n\nWe will be serving all static files from a `public` directory that we will create shortly.\n\n\n\u003e Note that we did not pull in the `ioutil` and `http` packages because they are already among Go’s standard packages.\n\nWe also defined `customer` as a struct and attached extra definitions to its properties so that Go knows how to handle incoming payloads and bind their various structures with a new instance of the customer struct. \n\nLet’s create the handler functions for the endpoints, add this code to the `chat.go` file just before the main function:\n\n``` go\n    // File: ./chat.go\n    \n    // [...]\n    \n    func broadcastCustomerDetails(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        var newCustomer customer\n        err = json.Unmarshal(body, \u0026newCustomer)\n        if err != nil {\n            panic(err)\n        }\n        client.Trigger(\"one-to-many\", \"new-customer\", newCustomer)\n        json.NewEncoder(rw).Encode(newCustomer)\n    }\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        response, err := client.AuthenticatePrivateChannel(params)\n        if err != nil {\n            panic(err)\n        }\n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nAbove we have two functions. `broadcastCustomerDetails` receives a new customer's details and binds it to an instance of the `customer` struct. We then trigger the received details over to the admin dashboard in an event over the public channel. The `pusherAuth` authorizes users so they can subscribe to private channels.\n\nThis is all the code required for the backend server to work, let’s move on to the frontend.\n\n## Building the frontend\n\nIn this section, we will start building the frontend of the web application. We will create all the static files that are rendered when a browser is pointed to the address of our application. \n\nCreate a new folder in the project directory and call it `public`, this folder is the root directory for all of our frontend files. In this folder, create three folders `css`, `js` and `img`.\n\nNext, create two files in the root of the `public` directory named `index.html` and `support.html`.\n\n### Creating the homepage\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eX-Cycles\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/app.css\" \u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cdiv class=\"site-wrapper\"\u003e\n          \u003cdiv class=\"site-wrapper-inner\"\u003e\n            \u003cdiv class=\"cover-container\"\u003e\n    \n              \u003cheader class=\"masthead clearfix\"\u003e\n                \u003cdiv class=\"inner\"\u003e\n                  \u003ch3 class=\"masthead-brand\"\u003eX-Cycles\u003c/h3\u003e\n                  \u003cnav class=\"nav nav-masthead\"\u003e\n                    \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eFeatures\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eContact\u003c/a\u003e\n                  \u003c/nav\u003e\n                \u003c/div\u003e\n              \u003c/header\u003e\n    \n              \u003cmain role=\"main\" class=\"inner cover\"\u003e\n                \u003ch1 class=\"cover-heading\"\u003eX-cycles\u003c/h1\u003e\n                \u003cp class=\"lead\"\u003eWe sell the best motorcycles around.\u003c/p\u003e\n                \u003cp class=\"lead\"\u003e\n                  \u003ca href=\"#\" class=\"btn btn-lg btn-secondary\"\u003eGALLERY\u003c/a\u003e\n                \u003c/p\u003e\n              \u003c/main\u003e\n    \n              \u003cfooter class=\"mastfoot\"\u003e\n              \u003c/footer\u003e\n    \n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"chatbubble\"\u003e\n            \u003cdiv class=\"unexpanded\"\u003e\n                \u003cdiv class=\"title\"\u003eChat with Support\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"expanded chat-window\"\u003e\n              \u003cdiv class=\"login-screen container\"\u003e\n    \n                \u003cform id=\"loginScreenForm\"\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eStart Chat\u003c/button\u003e\n                \u003c/form\u003e\n    \n              \u003c/div\u003e\n              \u003cdiv class=\"chats\"\u003e\n                \u003cdiv class=\"loader-wrapper\"\u003e\n                  \u003cdiv class=\"loader\"\u003e\n                    \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cul class=\"messages clearfix\"\u003e\n                \u003c/ul\u003e\n                \u003cdiv class=\"input\"\u003e\n                  \u003cform class=\"form-inline\" id=\"messageSupport\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                      \u003cinput type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"newMessage\" placeholder=\"Enter Message\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSend\u003c/button\u003e\n                  \u003c/form\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e    \n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the `css` directory, create an `app.css` file and update it with the following code:\n\n``` css\n    /* File: ./public/css/app.css */\n    a,\n    a:focus,\n    a:hover {\n      color: #fff;\n    }\n    .btn-secondary,\n    .btn-secondary:hover,\n    .btn-secondary:focus {\n      color: #333;\n      text-shadow: none;\n      background-color: #fff;\n      border: .05rem solid #fff;\n    }\n    html,\n    body {\n      height: 100%;\n      background-color: #333;\n    }\n    body {\n      color: #fff;\n      text-align: center;\n      text-shadow: 0 .05rem .1rem rgba(0,0,0,.5);\n    }\n    .site-wrapper {\n      display: table;\n      width: 100%;\n      height: 100%; /* For at least Firefox */\n      min-height: 100%;\n      box-shadow: inset 0 0 5rem rgba(0,0,0,.5);\n      background: url(../img/bg.jpg);\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n    .site-wrapper-inner {\n      display: table-cell;\n      vertical-align: top;\n    }\n    .cover-container {\n      margin-right: auto;\n      margin-left: auto;\n    }\n    .inner {\n      padding: 2rem;\n    }\n    .masthead {\n      margin-bottom: 2rem;\n    }\n    .masthead-brand {\n      margin-bottom: 0;\n    }\n    .nav-masthead .nav-link {\n      padding: .25rem 0;\n      font-weight: 700;\n      color: rgba(255,255,255,.5);\n      background-color: transparent;\n      border-bottom: .25rem solid transparent;\n    }\n    .nav-masthead .nav-link:hover,\n    .nav-masthead .nav-link:focus {\n      border-bottom-color: rgba(255,255,255,.25);\n    }\n    .nav-masthead .nav-link + .nav-link {\n      margin-left: 1rem;\n    }\n    .nav-masthead .active {\n      color: #fff;\n      border-bottom-color: #fff;\n    }\n    @media (min-width: 48em) {\n      .masthead-brand {\n        float: left;\n      }\n    \n      .nav-masthead {\n        float: right;\n      }\n    \n    }\n    /*\n     * Cover\n     */\n    \n    .cover {\n      padding: 0 1.5rem;\n    }\n    .cover .btn-lg {\n      padding: .75rem 1.25rem;\n      font-weight: 700;\n    }\n    .mastfoot {\n      color: rgba(255,255,255,.5);\n    }\n    @media (min-width: 40em) {\n      .masthead {\n        position: fixed;\n        top: 0;\n      }\n    \n      .mastfoot {\n        position: fixed;\n        bottom: 0;\n      }\n      .site-wrapper-inner {\n        vertical-align: middle;\n      }\n    \n      /* Handle the widths */\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 100%;\n      }\n    \n    }\n    @media (min-width: 62em) {\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 42rem;\n      }\n    \n    }\n    .chatbubble {\n        position: fixed;\n        bottom: 0;\n        right: 30px;\n        transform: translateY(300px);\n        transition: transform .3s ease-in-out;\n    }\n    .chatbubble.opened {\n        transform: translateY(0)\n    }\n    .chatbubble .unexpanded {\n        display: block;\n        background-color: #e23e3e;\n        padding: 10px 15px 10px;\n        position: relative;\n        cursor: pointer;\n        width: 350px;\n        border-radius: 10px 10px 0 0;\n    }\n    .chatbubble .expanded {\n        height: 300px;\n        width: 350px;\n        background-color: #fff;\n        text-align: left;\n        padding: 10px;\n        color: #333;\n        text-shadow: none;\n        font-size: 14px;\n    }\n    .chatbubble .chat-window {\n      overflow: auto;\n    }\n    .chatbubble .loader-wrapper {\n        margin-top: 50px;\n        text-align: center;\n    }\n    .chatbubble .messages {\n        display: none;\n        list-style: none;\n        margin: 0 0 50px;\n        padding: 0;\n    }\n    .chatbubble .messages li {\n        width: 85%;\n        float: left;\n        padding: 10px;\n        border-radius: 5px 5px 5px 0;\n        font-size: 14px;\n        background: #c9f1e6;\n        margin-bottom: 10px;\n    }\n    .chatbubble .messages li .sender {\n        font-weight: 600;\n    }\n    .chatbubble .messages li.support {\n        float: right;\n        text-align: right;\n        color: #fff;\n        background-color: #e33d3d;\n        border-radius: 5px 5px 0 5px;\n    }\n    .chatbubble .chats .input {\n        position: absolute;\n        bottom: 0;\n        padding: 10px;\n        left: 0;\n        width: 100%;\n        background: #f0f0f0;\n        display: none;\n    }\n    .chatbubble .chats .input .form-group {\n        width: 80%;\n    }\n    .chatbubble .chats .input input {\n        width: 100%;\n    }\n    .chatbubble .chats .input button {\n        width: 20%;\n    }\n    .chatbubble .chats {\n      display: none;\n    }\n    .chatbubble .login-screen {\n      margin-top: 20px;\n      display: none;\n    }\n    .chatbubble .chats.active,\n    .chatbubble .login-screen.active {\n      display: block;\n    }\n    /* Loader Credit: https://codepen.io/ashmind/pen/zqaqpB */\n    .chatbubble .loader {\n      color: #e23e3e;\n      font-family: Consolas, Menlo, Monaco, monospace;\n      font-weight: bold;\n      font-size: 10vh;\n      opacity: 0.8;\n    }\n    .chatbubble .loader span {\n      display: inline-block;\n      -webkit-animation: pulse 0.4s alternate infinite ease-in-out;\n              animation: pulse 0.4s alternate infinite ease-in-out;\n    }\n    .chatbubble .loader span:nth-child(odd) {\n      -webkit-animation-delay: 0.4s;\n              animation-delay: 0.4s;\n    }\n    @-webkit-keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    \n    }\n    @keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    \n    }\n```\n\n\u003e Above we referenced a `bg.jpg` image. You can download a free picture [here](http://pexels.com) and place it in the `public/img` directory.\n\nNow let's include some JavaScript. In the `js` directory, create an `app.js` file and paste the following code:\n\n``` javascript\n    // File: ./public/js/app.js\n    (function() {\n        'use strict';\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            name:  undefined,\n            email: undefined,\n            myChannel: undefined,\n        }\n    \n        const chatPage   = $(document)\n        const chatWindow = $('.chatbubble')\n        const chatHeader = chatWindow.find('.unexpanded')\n        const chatBody   = chatWindow.find('.chat-window')\n    \n        let helpers = {\n            ToggleChatWindow: function () {\n                chatWindow.toggleClass('opened')\n                chatHeader.find('.title').text(\n                    chatWindow.hasClass('opened') ? 'Minimize Chat Window' : 'Chat with Support'\n                )\n            },\n    \n            ShowAppropriateChatDisplay: function () {\n                (chat.name) ? helpers.ShowChatRoomDisplay() : helpers.ShowChatInitiationDisplay()\n            },\n    \n            ShowChatInitiationDisplay: function () {\n                chatBody.find('.chats').removeClass('active')\n                chatBody.find('.login-screen').addClass('active')\n            },\n    \n            ShowChatRoomDisplay: function () {\n                chatBody.find('.chats').addClass('active')\n                chatBody.find('.login-screen').removeClass('active')\n                setTimeout(function(){\n                    chatBody.find('.loader-wrapper').hide()\n                    chatBody.find('.input, .messages').show()\n                }, 2000)\n            },\n    \n            NewChatMessage: function (message) {\n                if (message !== undefined) {\n                    const messageClass = message.sender !== chat.email ? 'support' : 'user'\n                    chatBody.find('ul.messages').append(\n                        `\u003cli class=\"clearfix message ${messageClass}\"\u003e\n                            \u003cdiv class=\"sender\"\u003e${message.name}\u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                        \u003c/li\u003e`\n                    )\n                    chatBody.scrollTop(chatBody[0].scrollHeight)\n                }\n            },\n    \n            SendMessageToSupport: function (evt) {\n                evt.preventDefault()\n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n                const message = $('#newMessage').val().trim()\n                \n                chat.myChannel.trigger('client-guest-new-message', {\n                    'sender': chat.name,\n                    'email': chat.email,\n                    'text': message,\n                    'createdAt': createdAt \n                });\n    \n                helpers.NewChatMessage({\n                    'text': message,\n                    'name': chat.name,\n                    'sender': chat.email\n                })\n    \n                $('#newMessage').val('')\n            },\n    \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n    \n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n    \n                if ((name !== '' \u0026\u0026 name.length \u003e= 3) \u0026\u0026 (email !== '' \u0026\u0026 email.length \u003e= 5)) {\n                    axios.post('/new/customer', {\"name\":name, \"email\":email}).then(response =\u003e {\n                        chat.name = name\n                        chat.email = email\n                        console.log(response.data.email)\n                        chat.myChannel = pusher.subscribe('private-' + response.data.email);\n                        helpers.ShowAppropriateChatDisplay()\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n                \n                evt.preventDefault()\n            }\n        }\n    \n    \n        pusher.bind('client-support-new-message', function(data){\n            helpers.NewChatMessage(data)\n        })\n    \n    \n        chatPage.ready(helpers.ShowAppropriateChatDisplay)\n        chatHeader.on('click', helpers.ToggleChatWindow)\n        \n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n        chatBody.find('#messageSupport').on('submit', helpers.SendMessageToSupport)\n    }());\n```\n\nAbove, we instantiated a Pusher object instance and then we created a `helpers` object. In this object lies the meat of the script. In the `helpers` object we have a few methods that do specific tasks:\n\n\n- `ToggleChatWindow` - toggles the chat windows display.\n- `ShowAppropriateChatDisplay` - decides which chat display to show depending on the action of the user.\n- `ShowChatInitiationDisplay` - shows the initial display for the chat window for the user to initiate a chat session.\n- `ShowChatRoomDisplay` - shows the chat window after the user has instantiated a new chat session.\n- `NewChatMessage` - adds a new chat message to the chat window UI.\n- `SendMessageToSupport` - sends a chat message to the backend.\n- `LogIntoChatSession` - starts a new chat session.\n\n\n\u003e Replace the `PUSHER_*` keys with the one available on your Pusher dashboard.\n\n### Creating the support dashboard\n\nOpen the `support.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/support.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eX-Cycles | Support \u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/support.css\" \u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n    \n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/support.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nLet’s write the style for the support page. In the `css` directory, create a `support.css` file and paste the following code:\n\n``` css\n    /* File: ./public/css/support.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    .sidebar .nav-item {\n        width: 100%;\n    }\n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    tr .sender span {\n        color: #676767;\n    }\n    .response {\n        display: none;\n    }\n```\n\nNow let's add the JavaScript for the page. In the `js` directory, create a `support.js` file and update it with the following code:\n\n``` javascript\n    // File: ./public/js/support.js\n    (function () {\n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            messages: [],\n            currentRoom: '',\n            currentChannel: '',\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        var generalChannel = pusher.subscribe('one-to-many');\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        const helpers = {\n    \n            clearChatMessages: () =\u003e $('#chat-msgs').html(''),\n    \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.currentRoom) {\n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n    \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text(evt.target.dataset.roomId)\n                }\n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n    \n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n                const message = $('#replyMessage input').val().trim()\n                chat.subscribedChannels[chat.currentChannel].trigger('client-support-new-message', {\n                    'name': 'Admin',\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n                \n                helpers.displayChatMessage({\n                    'email': chat.currentRoom,\n                    'sender': 'Support',\n                    'text': message, \n                    'createdAt': createdAt\n                })\n    \n                $('#replyMessage input').val('')\n            },\n        }\n    \n        generalChannel.bind('new-customer', function(data) {\n            chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n            chat.subscribedUsers.push(data);\n            // render the new list of subscribed users and clear the former\n            $('#rooms').html(\"\");\n            chat.subscribedUsers.forEach(function (user, index) {\n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n            })\n        })\n    \n        pusher.bind('client-guest-new-message', function(data){\n            helpers.displayChatMessage(data)\n        })\n    \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n    }())\n```\n\nAbove, the script looks almost similar to the `app.js` script. The `helpers` object contains the following functions:\n\n\n- `clearChatMessages` - clears the chat message window.\n- `displayChatMessage` - displays a new chat message in the current window.\n- `loadChatRoom` - shows a users chat messages in the general chat window after a room is selected.\n- `replyMessage` - sends a chat message to the current room.\n\nAfter declaring the helpers, we bind to the Pusher channel and register our listeners.\n\n\n\u003e Replace the `PUSHER_*` keys with the one available on your Pusher dashboard.\n\n\n## Running the application\n\nTo test the application, we will run the application by typing this command in the terminal:\n\n```\n    $ go run chat.go\n```\n\nWe can visit these addresses, http://127.0.0.1:8070 and http://127.0.0.1:8070/support.html, on a web browser using different windows to test that the application works correctly. Here’s what we should see:\n\n![go-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/3qN7ML2VMcqaMyMaSGWsiw/3bb18095d1042c0708925e2b35667789/go-chat-widget-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we learned how to create a basic realtime web chat widget using Go and JavaScript. The source code for this project is available [here](https://github.com/neoighodaro/go-pusher-chat-widget) on GitHub.","metaTitle":"Building a chat widget with Go and JavaScript","metaDescription":"Use Go and JavaScript to create a simple chat widget. The app comprises a user panel and an admin panel. Users initiate chats, and admins can see a list of waiting users and choose to join a chat session."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6rpnzMV0e4S0YqSAaEoyCM","type":"Entry","createdAt":"2018-07-22T02:43:42.230Z","updatedAt":"2018-07-22T02:43:42.230Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Calendar event scheduling in Vue","url":"calendar-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/vue-event-scheduler","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-07-12","description":"Build a calendar using Vue.js, with a Node.js backend. Users are able to add events to the calendar, with all instances of the calendar updating in realtime. ","prerequisite":"You will need Node 6+ and npm installed on your machine.","content":"Today, we’ll be creating a realtime event scheduling application. Using our application, users can easily schedule calendar events and receive realtime updates for new calendar events. We’ll be using Pusher’s pub/sub pattern to get realtime updates and Vue.js for creating the user interface.\n\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of Vue and Node.js is required. Please ensure that you have at least Node version 6\u003e= installed before you begin.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Vue](https://vuejs.org)\n\nHere’s a demo of the final product:\n\n![vuejs-calendar-demo](//images.ctfassets.net/1es3ne0caaid/3Kw1VEeU5aAu8SqAU6SUc2/7ba90e92e78be04b42a63a80cb2bc9e3/vuejs-calendar-demo.gif)\n\n## Initializing the application and installing project dependencies\n\nTo get started, we will use the [vue-cli](https://github.com/vuejs/vue-cli/tree/dev) to bootstrap our application. First, we’ll install the CLI by running `npm install -g @vue/cli` in a terminal.\n\nTo create a Vuejs project using the CLI, we’ll run the following command:\n\n```\n    vue create vue-eventapp\n```\n\nAfter running this command, you will be asked by the CLI to pick a preset. Please select the default preset.\n\n\n\u003e **Note:** the @vue/cli 3.0 is still in beta and should not be used in production. \n \n \nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js vue-fullcalendar@latest date-fns vuejs-datepicker\n```\n\nStart the app dev server by running `npm run serve` in a terminal in the root folder of your project.\n\nA browser tab should open on http://localhost:8080. The screenshot below should be similar to what you see in your browser:\n\n![vuejs-default-page](//images.ctfassets.net/1es3ne0caaid/5ARSy5jJjGu4mUAkC6wKYw/eda6e8a37c38fc7ac178627dcc030e06/vuejs-default-page.png)\n\n## Building the server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a [Pusher account](https://dashboard.pusher.com/accounts/sign_in) and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n    PUSHER_CLUSTER=PUSHER_CLUSTER\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\n\n### Draw route\n\nLet’s create a post route named `schedule`, our application will send requests to this route when a user attempts to schedule events. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    app.post('/schedule', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n      };\n      \n      pusher.trigger('schedule', 'new-event', data);\n      res.json(data);\n    });\n    \n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`schedule`), an event name (`new-event`), and a payload.\n\nStart the server by running `node server` in a terminal in the root folder of your project.\n\n\n## Calendar component\n\nWe’ll be creating a component(`Calendar`), this component will display our calendar with the events scheduled by a user.\n\nCreate a file called `Calendar.vue` in the `src/components` folder of your project. Open the file and copy the code below into it:\n\n``` css\n    // src/components/Calendar.vue\n    \n    \u003ctemplate\u003e\n      \u003cfull-calendar :events=\"events\" /\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import FullCalendar from 'vue-fullcalendar';\n    export default {\n      name: 'Calendar',\n      props: ['events'],\n      components: {\n        FullCalendar\n      }\n    }\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n    .red {\n      background: rgb(235, 77, 77) !important;\n      color: whitesmoke !important;\n    }\n    .blue {\n      background: rgb(59, 59, 163) !important;\n      color: whitesmoke !important;\n    }\n    .orange {\n      background: orange !important;\n      color: white !important;\n    }\n    .green {\n      background: rgb(49, 155, 49) !important;\n      color: white !important;\n    }\n    .blue,\n    .orange,\n    .red,\n    .green {\n      font-size: 13px;\n      font-weight: 500;\n      text-transform: capitalize;\n    }\n    .event-item {\n      padding: 2px 0 2px 4px !important;\n    }\n    \u003c/style\u003e\n```\n\nOur component will make use of the [Vue-fullcalendar](https://github.com/Wanderxx/vue-fullcalendar) library. The library provides a `full-calendar` component. Our component will receive an `events`  prop, a list of events to be bound to the `full-calendar` component. \n\nAlso, we’ve added a few styles to the `style` section of the component. These styles will help theme the events that will be bound to the calendar. Later in the tutorial, we’ll make use of these styles.\n\n\n## Event form component\n\nNow that the we’ve set up the calendar component, let’s create an `EventForm` component that will be used for scheduling new events. \n\nCreate a file `EventForm.vue`  in the `src/components` folder. Copy the following into the file. We’ll break it down into three snippets, the `template` snippet, followed by the `script` and finally the `style` snippet. \n\n### Template\n\nThe template will hold the form element that will handle creation of new events.\n\n``` html\n    // /src/components/EventForm.vue\n    \n    \u003ctemplate\u003e\n      \u003cform @submit.prevent=\"handleSubmit\"\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cinput type=\"text\" placeholder=\"Event title\" v-model=\"event.title\"/\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cdate-picker :placeholder=\"'Start date'\" v-model=\"event.start\" /\u003e \n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cdate-picker :placeholder=\"'End date'\" v-model=\"event.end\"/\u003e \n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003ctextarea placeholder=\"Event description\" rows=\"4\" v-model=\"event.data.description\" \u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003ccolor-picker @colorPicked=\"selectColor\" :color=\"event.cssClass\" /\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cbutton type=\"submit\"\u003eSchedule\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/form\u003e\n    \u003c/template\u003e\n```    \n\nIn the template, we made use of the `date-picker` component, [Vuejs-datepicker](https://github.com/charliekassel/vuejs-datepicker). This component will handle `start` and `stop` date selection for our events. Also, we’ll be able to theme our events using a `color-picker`. We haven’t gone about creating the `color-picker` component but that’s coming soon.\n\n### Script\n\nWe’ll handle all the functionality of our component in the script section. Update the `EventForm.vue` file to include the script section.\n\n``` javascript\n    // src/components/EventForm.vue\n    \u003ctemplate\u003e\n      ...\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import DatePicker from 'vuejs-datepicker';\n    import format from 'date-fns/format';\n    import ColorPicker from './ColorPicker';\n    \n    export default {\n      name: 'EventForm',\n      data(){\n        return {\n          event: {\n            title: '',\n            start: '',\n            end: '',\n            cssClass: '',\n            data: {\n              description: ''\n            }\n          }\n        }\n      },\n      methods: {\n        async handleSubmit(){\n          const start = format(this.event.start, 'YYYY-MM-DD');\n          const end = format(this.event.end, 'YYYY-MM-DD');\n          const event = {\n            ...this.event,\n            start,\n            end\n          }\n          const req = await fetch('http://localhost:4000/schedule', {\n            method: 'POST',\n            body: JSON.stringify(event),\n            headers: {\n              'content-type': 'application/json'\n            }\n          });\n          const res = await req.json();\n          this.resetValues();\n        },\n        selectColor(color){\n          this.event = {\n            ...this.event,\n            cssClass: color\n          }\n        },\n        resetValues(){\n          this.event = {\n            title: '',\n            start: '',\n            end: '',\n            cssClass: '',\n            data: {\n              description: ''\n            }\n          }\n        }\n      },\n      components: {\n        DatePicker,\n        ColorPicker\n      }\n    }\n    \u003c/script\u003e\n```\n\nIn our scripts section, we have one `data` property, `event`, this will hold all the data needed to schedule an event. \nThe `methods` property has three methods. The `handleSubmit` method uses the [date-fns](https://date-fns.org/v1.29.0/docs/format) library to format the `start` and `end` dates and then sends the data to the server to schedule an event. When a response is returned, the data in the response is emitted to the parent component. The `resetvalues` method resets the values to their initial state.\n\nThe `selectColor` method will be bound to the `colorPicked` event emitted by the `color-picker` component. This method is triggered whenever a color is selected.\n\n### Styles\n\nUpdate the component with the following styles:\n\n``` css\n    // src/components/EventForm.vue\n    \u003ctemplate\u003e\n      ...\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      ...\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n      form {\n      display: flex;\n      flex-direction: column;\n      margin-left: 30px;\n    }\n    .input-holder {\n      margin: 10px 0;\n      display: flex;\n      justify-content: flex-start;\n    }\n    .vdp-datepicker {\n      width: 100%;\n    }\n    .vdp-datepicker \u003e div \u003e input {\n      width: 77%;\n    }\n    .input-holder \u003e button {\n      justify-self: center;\n      padding: 12px 25px;\n      border-radius: 0;\n      text-transform: uppercase;\n      font-weight: 600;\n      background: orangered;\n      color: white;\n      border: none;\n      font-size: 14px;\n      letter-spacing: -0.1px;\n      cursor: pointer;\n    }\n    input,\n    textarea {\n      padding: 12px 15px;\n      border: 2px solid rgba(0, 0, 0, 0.2);\n      border-radius: 0;\n      width: 70%;\n      opacity: 0.8;\n      font-size: 15px;\n      font-weight: normal;\n    }\n    input:focus,\n    textarea:focus,\n    button:focus {\n      border: 2px solid orangered;\n      outline: none;\n      box-shadow: 0 2px 3px 1px rgba(0, 0, 0, 0.2);\n    }\n    \u003c/style\u003e\n```\n\nNext, let’s create the `color-picker` component.\n\n\n## Color picker component\n\nThe color component will help us theme our event by letting us select a color that suits the event.\nCreate a file named `ColorPicker.vue` in the `src/components/` directory and update it with the code below:\n\n``` html\n    // src/components/ColorPicker.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv class=\"picker-main\"\u003e \n        \u003ch4 class=\"header\"\u003eSelect event theme\u003c/h4\u003e\n        \u003cdiv class=\"color-picker\"\u003e\n          \u003cdiv class=\"color\" v-for=\"(theme, index) in colors\" :key=\"index\" @click=\"selectColor(theme)\" :class=\"{selected: color === theme, [theme]: theme}\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: 'ColorPicker',\n      props: ['color'],\n      data(){\n        return {\n          colors: ['red', 'green', 'blue', 'orange']\n        }\n      },\n      methods: {\n        selectColor(color){\n          this.$emit('colorPicked', color);\n        }\n      }\n    }\n    \u003c/script\u003e\n    \u003cstyle scoped\u003e\n    .picker-main {\n      width: 55%;\n    }\n    .header {\n      font-size: 14px;\n      text-transform: uppercase;\n      color: orangered;\n      letter-spacing: 0.5px;\n      margin: 0 0 6px;\n      text-align: left;\n    }\n    .color-picker {\n      display: flex;\n      justify-content: space-around;\n    }\n    .color-picker \u003e .color {\n      width: 40px;\n      height: 40px;\n      border-radius: 50%;\n      border: 1.5px solid whitesmoke;\n      cursor: pointer;\n    }\n    .color.selected{\n      box-shadow: 0 2px 3px 1px rgba(0, 0, 0, 0.2);\n      border: 3px solid rgba(0, 0, 0, 0.4);\n    }\n    .color.red {\n      background: rgb(235, 77, 77);\n    }\n    .color.blue {\n      background: rgb(59, 59, 163);\n    }\n    .color.orange {\n      background: orange;\n    }\n    .color.green {\n      background: rgb(49, 155, 49);\n    }\n    \u003c/style\u003e\n```\n\nIn the template section, we loop through an array of `colors`, creating a clickable element that emits a `color` when clicked. The component takes a prop `color` from the parent component.\n\n## App component\n\nNow that we’ve built out the components to be used for our application, let’s render them in the `App` component to create a usable application. Open the `App.vue` file and update it to look like the snippet below:\n\n``` html\n    // src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"main\"\u003e\n          \u003cdiv class=\"calendar-holder\"\u003e\n            \u003ccalendar :events=\"events\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-holder\"\u003e\n            \u003ch3\u003eSchedule an event\u003c/h3\u003e\n            \u003cevent-form /\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import Calendar from './components/Calendar.vue'\n    import EventForm from './components/EventForm.vue'\n    import Pusher from 'pusher-js';\n    export default {\n      name: 'app',\n      components: {\n        Calendar,\n        EventForm\n      },\n      data(){\n        return {\n          events: [{\n            title     :  'event1',\n            start     : '2018-07-09',\n            cssClass  : 'blue',\n            YOUR_DATA : {}\n          },\n          {\n            title     : 'event2',\n            start     : '2018-07-10',\n            end       : '2018-07-13',\n            cssClass  : ['orange']\n          }] \n        }\n      }\n    }\n    \u003c/script\u003e\n    \u003cstyle\u003e\n    #app {\n      font-family: 'Avenir', Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n      margin-top: 60px;\n    }\n    .main {\n      display: flex;\n      align-items: center;\n    }\n    .calendar-holder {\n      width: 65%;\n    }\n    .form-holder {\n      width: 35%;\n    }\n    .form-holder \u003e h3 {\n      color: orangered;\n      text-transform: uppercase;\n      font-size: 16px;\n      text-align: left;\n      margin-left: 30px;\n      margin-bottom: 10px;\n    }\n    \u003c/style\u003e\n```\n\n\nWe’ve populated the `data` property with a list of events. There is a method `handleNewEvent`, this method is bound to the `event-form` component. It appends the new event emitted from the `event-form` component to the list of events.\n\nYou can now check out the current look of the application by visiting http://localhost:8080. Make sure both the vue dev server (`yarn serve`) and the server (`node server`) are running in separate terminals in the root folder of your project.\n\n![vuejs-calendar-partial](//images.ctfassets.net/1es3ne0caaid/1SjKyDBdZaoIa8SCU0Y640/795170b2f077b531810b88aaab9243d6/vuejs-calendar-partial.png)\n\n## Introducing Pusher and realtime updates\n\nOur application will update in realtime whenever there’s a new event added. We’ll be using [Pusher](https://pusher.com)’s pub/sub pattern to enable this functionality in our application.\n\nWe’ll update the `App` component to include the `created` lifecycle. It’s in this lifecycle we’ll initialise Pusher and listen for new events. Open the `App.vue` file and update it to match the snippet below:\n\n``` html\n    // /src/App.vue\n    \u003ctemplate\u003e\n      ...\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import Calendar from './components/Calendar.vue'\n    import EventForm from './components/EventForm.vue'\n    import Pusher from 'pusher-js';\n    \n    export default {\n      name: 'app',\n      components: {\n        ...\n      },\n      data(){\n        ...  \n      },\n      created(){\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true,\n        });\n        const channel = pusher.subscribe('schedule');\n        channel.bind('new-event', (data) =\u003e {\n          this.events = [\n            ...this.events,\n            data\n          ];\n        })\n      }\n    }\n    \u003c/script\u003e\n    \u003cstyle\u003e\n      ...\n    \u003c/style\u003e\n```   \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER`  placeholder strings with your actual credentials.\n\nIn the `created` lifecycle, we initialized Pusher, subscribed to the `schedule` channel and listened for  the `new-event` event. In the callback, we appended the data returned from the event to the list of events.\n\n## Test application\n\nOpen two browsers side by side to observe the realtime functionality of the application. Events scheduled on one browser are picked up by the other browser. Here’s a screenshot of two browsers side by side using the application:\n\n\n\u003e **Note:** Ensure both the server and the dev server are up by running `npm run serve` and `node server` on separate terminal sessions.\n\n![vuejs-calendar-demo](//images.ctfassets.net/1es3ne0caaid/3Kw1VEeU5aAu8SqAU6SUc2/7ba90e92e78be04b42a63a80cb2bc9e3/vuejs-calendar-demo.gif)\n \n\n## Conclusion\n\nWe’ve created an event scheduling application using Vue.js, using Pusher to provide realtime functionality.  You can think up new ideas to extend the application.  It’ll be fun to see what you come up with. The source code for this tutorial is available on [GitHub](https://github.com/HackAfro/vue-event-scheduler) here.","metaTitle":"Calendar event scheduling in Vue","metaDescription":"Use Vue.js and Node.js to create a simple calendar application. Users are able to add events to the calendar, with all instances of the calendar updating in realtime. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"ffkxMi1XQA0KmKqOIEg2K","type":"Entry","createdAt":"2018-07-13T16:48:06.187Z","updatedAt":"2018-07-13T16:48:06.187Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement push notifications in Kotlin to create a food delivery app","url":"push-notifications-kotlin-food-delivery","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-takeaway","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-12","description":"This tutorial uses Kotlin and React to create a full-featured food delivery application, with interfaces for admins and customers. Orders update in realtime, and the customer receives status updates with push notifications.","prerequisite":"You will need some experience of Kotlin, and familiarity with Android Studio. You will also need Node and Create React App installed.","content":"## Introduction\n\nMany business need to be very responsive to customer requests in order to be competitive. This works both ways - the business being informed immediately when a new order comes in, and the customer being informed as to the progress of their order.\n\nIn this article we are going to build a simple takeaway application, featuring a web app for the takeaway itself to use, and an Android app for customers. The web app will be updated automatically using Pusher Channels, and the Android app will receive notifications using Pusher Beams so that the customer and staff are always aware of everything going on.\n\n![kotlin-takeaway-demo](//images.ctfassets.net/1es3ne0caaid/35S4CfDJGMgYQayA8Gkumc/00577e26dd50023386f92baed7e4dc0f/kotlin-takeaway-demo.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application, as well as with Android development. \n\nWe are going to be building the web UI that the takeaway uses with [Create React App](https://github.com/facebook/create-react-app), so ensure that this is installed, along with a recent version of Node.js.\n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html). Finally, you will need a free [Pusher Account](https://dash.pusher.com/authenticate/register?ref=pn-landing-page). Sign up now if you haven’t already done so.\n\n## Overall design\n\nOur overall application will have a backend application, a web UI that is to be used by the takeaway company, and an Android application that is targeted to the customers. Customers will order food using the Android application, and the orders will appear in the web UI in real time using Pusher Channels. The takeaway company can then use the web UI to update progress on the orders, which will be sent directly to the customer’s device using Pusher Beams, keeping them updated on the progress of their order. The backend application then acts as orchestration between the two UIs.\n\n## Setting up your Pusher accounts\n\nWe are going to use two different Pusher accounts for this application - a Pusher Channels account for real time updates of the web UI, and a Pusher Beams account for notifying the customers of the status of their orders.\n\n### Registering for Pusher Channels\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Next click on **Channels apps** on the sidebar, followed by **Create Channels app.** \n\n![kotlin-takeaway-channels](//images.ctfassets.net/1es3ne0caaid/4v3D4hmmhqqYCEKioYcaOG/7b9ca3510fc16cc1e8e62e59b04ad768/kotlin-takeaway-channels.png)\n\nFill out this dialog as needed and then click the **Create my app** button. Then click on **App Keys** and note down the credentials for later.\n\n![kotlin-takeaway-keys](//images.ctfassets.net/1es3ne0caaid/84MZCDrD4QY8WAyukqGSK/8e1885c09f71d1acf3c9f6b7bbd9274a/kotlin-takeaway-keys.png)\n\n### Registering for Pusher Beams\n\nIn order to use the Beams API and SDKs from Pusher, you also need to create a new Beams instance in the [Pusher Beta Dashboard](https://dash.pusher.com/authenticate/register?ref=pn-social-network-android).\n\nNext, on your **Overview** for your Beams instance, click **Open Quickstart** to add your Firebase Cloud Messaging (FCM) Server Key to the Beams Instance. \n\nAfter saving your FCM key, you can finish the Quickstart wizard by yourself to send your first push notification, or just continue as we’ll cover this below.\n\nIt’s important to make sure that you download and keep the `google-services.json` file from the Firebase Console as we are going to need this later on. \n\nOnce you have created your Beams instance, you will also need to note down your **Instance Id** and **Secret Key** from the Pusher Dashboard, found under the **CREDENTIALS** section of your Instance settings.\n\n## Backend application\n\nWe are going to build our backend application using Spring Boot and the Kotlin programming language, since this gives us a very simple way to get going whilst still working in the same language as the Android app.\n\nHead over to https://start.spring.io/ to create our project structure. We need to specify that we are building a **Gradle** project with **Kotlin** and Spring Boot **2.0.2** (or newer if available at the time of reading), and we need to include the “Web” component:\n\n![kotlin-takeaway-spring-initializer](//images.ctfassets.net/1es3ne0caaid/6gvlvTIkGk8au0u0ew2sS2/7cf5dff11c4c65e5f2a2836a69174bbc/kotlin-takeaway-spring-initializer.png)\n\nThe **Generate Project** button will give you a zip file containing our application structure. Unpack this somewhere. At any time, you can execute `./gradlew bootRun` to build and start your backend server running.\n\nFirstly though, we need to add some dependencies. Open up the `build.gradle` file and add the following to the `dependencies` section:\n\n``` gradle\n    compile 'com.pusher:pusher-http-java:1.0.0'\n    compile 'com.pusher:push-notifications-server-java:0.9.0'\n    runtime 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'\n```\n\nThe first of these is the Pusher library needed for triggering push notifications. The second is the Jackson module needed for serializing and deserializing Kotlin classes into JSON.\n\nNow, build the project. This will ensure that all of the dependencies are downloaded and made available and that everything compiles and builds correctly:\n\n```\n    $ ./gradlew build\n    Starting a Gradle Daemon (subsequent builds will be faster)\n    \n    \u003e Task :test\n    2018-04-27 07:34:27.548  INFO 43169 --- [       Thread-5] o.s.w.c.s.GenericWebApplicationContext   : Closing org.springframework.web.context.support.GenericWebApplicationContext@c1cf60f: startup date [Fri Apr 27 07:34:25 BST 2018]; root of context hierarchy\n    \n    \n    BUILD SUCCESSFUL in 17s\n    5 actionable tasks: 5 executed\n```\n\n### Required endpoints\n\nOur backend application will have endpoints for the customer and staff UI to work with. The customer endpoints are:\n\n- GET /menu-items\n- POST /orders\n\nWhilst the staff endpoints are:\n\n- GET /orders\n- PUT /orders/{id}/status\n- PUT /orders/{id}/items/{id}/status\n\nAn `orders` resource will contain a number of `menu-items` entries, with the status of them. The customer application will create a new order containing a simple list of these entries, and then the staff application will update the status of each item as is completed. Once they are all completed it will then update the order status to indicate that the food is out for delivery, and that it has been delivered.\n\nThe creation of an order will cause a Pusher Channels message to be sent out, containing the new order. Every time an order is updated will cause a Pusher Beams message to be sent out, containing the status of that order.\n\n### Listing menu items\n\nThe first thing we’ll do is to support listing of menu items. \n\nFirstly we want to actually represent our menu items. In this case we’ll go for something very simple - just an name and an ID - but in reality you could include whatever details are needed. Create a new class called `MenuItem` as follows:\n\n``` kotlin\n    data class MenuItem(\n            val id: String,\n            val name: String\n    )\n```\n\nThen we’ll create a class to represent our DAO layer for loading menu items. This will be entirely hard-coded in this application, but in reality would work in terms of a database. Create a new class called `MenuItemDao` as follows:\n\n``` kotlin\n    @Component\n    class MenuItemDao {\n        private val menuItems = listOf(\n                MenuItem(id = \"cheese_tomato_pizza\", name = \"Cheese \u0026 Tomato Pizza\"),\n                MenuItem(id = \"hot_spicy_pizza\", name = \"Hot \u0026 Spicy Pizza\"),\n                MenuItem(id = \"vegetarian_pizza\", name = \"Vegetarian Supreme Pizza\"),\n                MenuItem(id = \"garlic_bread\", name = \"Garlic Pizza Bread\"),\n                MenuItem(id = \"donner_kebab\", name = \"Donner Kebab\"),\n                MenuItem(id = \"chicken_tikka_kebab\", name = \"Chicken Tikka Kebab\"),\n                MenuItem(id = \"chicken_strips\", name = \"Chicken Strips (7)\"),\n                MenuItem(id = \"beef_burger\", name = \"Beef Burger\"),\n                MenuItem(id = \"cheeseburger\", name = \"Cheeseburger\")\n        )\n        \n        fun listMenuItems() = menuItems\n    }\n```\n\n\u003e **Note:** the `@Component` annotation means that Spring will automatically find this class and make it available for other classes to use.\n\nNow we’ll create a controller to list these menu items. Create a new class called `MenuItemController` as follows:\n\n``` kotlin\n    @RestController\n    @CrossOrigin\n    class MenuItemController(private val dao: MenuItemDao) {\n        @RequestMapping(\"/menu-items\")\n        fun getMenuItems() = dao.listMenuItems()\n    }\n```\n\n\u003e **Note:** the @CrossOrigin annotation makes this controller accessible from web applications running on a different host and/or port.\n\n### Managing orders\n\nThe next part is to manage the orders themselves. For this we want to be able to create, update and list the orders that are being processed.\n\nFirstly we will create a representation of the order itself. For this, create a class called `Order` as follows:\n\n``` kotlin\n    enum class OrderItemStatus {\n        PENDING,\n        STARTED,\n        FINISHED\n    }\n    \n    enum class OrderStatus {\n        PENDING,\n        STARTED,\n        COOKED,\n        OUT_FOR_DELIVERY,\n        DELIVERED\n    }\n    \n    data class OrderItem(\n            val id: String,\n            val menuItem: String,\n            var status: OrderItemStatus\n    )\n    \n    data class Order(\n            val id: String,\n            var status: OrderStatus,\n            val items: List\u003cOrderItem\u003e\n    )\n```\n\nYou’ll note that there are actually 4 classes here. These represent, between them, the entire order. A single order contains a status and a list of order items, where a single order item contains a menu item and the status of that order item. This allows us to update each order item independently of any others, including if one order contains multiples of the same menu item.\n\nNext, create a new class called `OrderDao`. This is going to represent our data storage for orders and order items.\n\n``` kotlin\n    @Component\n    class OrderDao {\n        private val orders = mutableListOf\u003cOrder\u003e()\n    \n        fun createNewOrder(items: List\u003cString\u003e) : Order {\n            val orderId = UUID.randomUUID().toString()\n            val orderItems = items.map { menuItem -\u003e\n                val orderItemId = UUID.randomUUID().toString()\n                OrderItem(id = orderItemId, menuItem = menuItem, status = OrderItemStatus.PENDING)\n            }\n    \n            val order = Order(id = orderId, items = orderItems, status = OrderStatus.PENDING)\n            orders.add(order)\n    \n            return order\n        }\n    \n        fun removeOrder(orderId: String) {\n            orders.removeIf { order -\u003e order.id == orderId }\n        }\n    \n        fun listOrders(): List\u003cOrder\u003e = orders\n    \n        fun getOrderById(id: String) = orders.first { order -\u003e order.id == id }\n    }\n```\n\nFinally, we want a controller that can be used to interact with orders. For this, create a new class called `OrderController` as follows:\n\n``` kotlin\n    @RestController\n    @RequestMapping(\"/orders\")\n    @CrossOrigin\n    class OrderController(private val orderDao: OrderDao) {\n        @RequestMapping(method = [RequestMethod.GET])\n        fun listOrders() = orderDao.listOrders()\n    \n        @RequestMapping(method = [RequestMethod.POST])\n        fun createOrder(@RequestBody items: List\u003cString\u003e): Order {\n            val order = orderDao.createNewOrder(items)\n            \n            // notifier call to go here\n            return order\n        }\n    \n        @RequestMapping(value = [\"/{order}/status\"], method = [RequestMethod.PUT])\n        fun updateOrderStatus(@PathVariable(\"order\") orderId: String,\n                              @RequestBody newStatus: OrderStatus): Order {\n            val order = orderDao.getOrderById(orderId)\n            order.status = newStatus\n    \n            if (order.status == OrderStatus.DELIVERED) {\n                orderDao.removeOrder(orderId)\n            }\n    \n            // notifier call to go here\n            return order\n        }\n    \n        @RequestMapping(value = [\"/{order}/items/{item}/status\"], method = [RequestMethod.PUT])\n        fun updateOrderItemStatus(@PathVariable(\"order\") orderId: String,\n                                  @PathVariable(\"item\") itemId: String,\n                                  @RequestBody newStatus: OrderItemStatus): Order {\n            val order = orderDao.getOrderById(orderId)\n            order.items.first { item -\u003e item.id == itemId }\n                    .status = newStatus\n    \n            if (order.items.all { item -\u003e item.status == OrderItemStatus.FINISHED }) {\n                order.status = OrderStatus.COOKED\n            } else if (order.items.any { item -\u003e item.status != OrderItemStatus.PENDING }) {\n                order.status = OrderStatus.STARTED\n            }\n    \n            // notifier call to go here\n            return order\n        }\n    }\n```\n\nThis has some business logic around when the status of an order or an order item is updated, in order to correctly transition the order through it’s lifecycle.\n\n\n\u003e **Note:** there is no error handling here. Actions such as providing an invalid ID or status will cause a bad error to be returned. In a real application this would need to be handled properly, but for this article we don’t need to worry about it.\n\n### Sending update notifications\n\nOnce we have our backend server able to manage our orders and order items, we need to keep all of our clients updated. This includes both the web UI for the restaurant and the Android UI for the customers. For this, we are going to be sending events using both Pusher Beams and Pusher Channels.\n\nFor this, we will first create a new class called `OrderNotifier` as follows:\n\n```\n    @Component\n    class OrderNotifier(\n            @Value(\"\\${pusher.beams.instance_id}\") beamsInstanceId: String,\n            @Value(\"\\${pusher.beams.secret}\") beamsSecretKey: String,\n            @Value(\"\\${pusher.channels.app_id}\") channelsAppId: String,\n            @Value(\"\\${pusher.channels.key}\") channelsKey: String,\n            @Value(\"\\${pusher.channels.secret}\") channelsSecret: String,\n            @Value(\"\\${pusher.channels.cluster}\") channelsCluster: String\n    ) {\n    \n        private val beams: PushNotifications = PushNotifications(beamsInstanceId, beamsSecretKey)\n        private val channels: Pusher = Pusher(channelsAppId, channelsKey, channelsSecret)\n    \n        init {\n            channels.setCluster(channelsCluster)\n            channels.setEncrypted(true)\n        }\n    \n        fun notify(order: Order) {\n            sendBeamsNotification(order)\n            sendChannelsNotification(order)\n        }\n    \n        private fun sendBeamsNotification(order: Order) {\n            val itemStatusCounts = order.items.groupBy { it.status }\n                    .mapValues { it.value.size }\n    \n            beams.publish(listOf(order.id),\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"order\" to order.id,\n                                            \"status\" to order.status.name,\n                                            \"itemsPending\" to (itemStatusCounts[OrderItemStatus.PENDING] ?: 0).toString(),\n                                            \"itemsStarted\" to (itemStatusCounts[OrderItemStatus.STARTED] ?: 0).toString(),\n                                            \"itemsFinished\" to (itemStatusCounts[OrderItemStatus.FINISHED] ?: 0).toString()\n                                    )\n                            )\n                    ))\n        }\n    \n        private fun sendChannelsNotification(order: Order) {\n            channels.trigger(\"orders\", \"order-update\", mapOf(\n                    \"order\" to order.id,\n                    \"status\" to order.status.name\n            ))\n        }\n    }\n```\n\nThen we will wire this up in our controller. Update the constructor definition of `OrderController` as follows:\n\n``` kotlin\n    class OrderController(private val orderDao: OrderDao, private val orderNotifier: OrderNotifier) {\n```\n\nThen add the following to each of the `createOrder`, `updateOrderStatus` and `updateOrderItemStatus` methods, immediately before the return:\n\n``` kotlin\n    orderNotifier.notify(order)\n```\n\nFinally, we need to actually configure our system. This is done in `application.properties`, as follows:\n\n```\n    pusher.channels.app_id=CHANNELS_APP_ID\n    pusher.channels.key=CHANNELS_KEY\n    pusher.channels.secret=CHANNELS_SECRET\n    pusher.channels.cluster=CHANNELS_CLUSTER\n    \n    pusher.beams.instance_id=BEAMS_INSTANCE_ID\n    pusher.beams.secret=BEAMS_SECRET\n```\n\n\u003e **Note:** remember to replace CHANNELS_APP_ID, CHANNELS_KEY, CHANNELS_SECRET, CHANNELS_CLUSTER, BEAMS_INSTANCE_ID and BEAMS_SECRET with the appropriate values obtained when you registered your Pusher application details.\n\nAt this point, our backend does everything necessary to support this application.\n\n\n## Takeaway web application\n\nThe next part is to build the web application that the takeaway will use to fulfil orders. We’re going to use Create React App for that. Firstly, we’ll create the webapp structure itself:\n\n```\n    $ create-react-app takeaway-webapp\n    $ cd takeaway-webapp\n    $ npm install --save axios pusher-js semantic-ui-react semantic-ui-css\n```\n\nThis also installs the modules for communicating with our backend - `axios` for making HTTP calls and `pusher-js` for receiving the Pusher Channels messages - as well as Semantic UI for our styling.\n\n\n\u003e **Note:** at the time of writing, this also installs babel/runtime version 7.0.0-beta.48, which has a serious bug in it. If this is still the case then you can fix this by running `npm install` `--``save @babel/runtime@7.0.0-beta.47`.\n\nFirstly we’ll create a component for rendering a single order. This is fully self-contained in this example, but in reality you might choose to separate out into smaller components. Create a new file called `src/Order.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Segment, Table, Button } from 'semantic-ui-react'\n    import axios from 'axios';\n    function updateOrderItem(order, item, newStatus) {\n        axios.put(`http://localhost:8080/orders/${order.id}/items/${item.id}/status`,\n            newStatus,\n            {\n                transformRequest: (data) =\u003e `\"${data}\"`,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n    }\n    function updateOrder(order, newStatus) {\n        axios.put(`http://localhost:8080/orders/${order.id}/status`,\n            newStatus,\n            {\n                transformRequest: (data) =\u003e `\"${data}\"`,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n    }\n    function OrderItemButton({ order, item }) {\n        if (item.status === 'PENDING') {\n            return \u003cButton onClick={() =\u003e updateOrderItem(order, item, 'STARTED')}\u003eStart Work\u003c/Button\u003e;\n        } else if (item.status === 'STARTED') {\n            return \u003cButton onClick={() =\u003e updateOrderItem(order, item, 'FINISHED')}\u003eFinish Work\u003c/Button\u003e;\n        } else {\n            return \u003cdiv\u003eFinished\u003c/div\u003e;\n        }\n    }\n    function OrderButton({ order }) {\n        if (order.status === 'COOKED') {\n            return \u003cButton onClick={() =\u003e updateOrder(order, 'OUT_FOR_DELIVERY')}\u003eOut for Delivery\u003c/Button\u003e;\n        } else if (order.status === 'OUT_FOR_DELIVERY') {\n            return \u003cButton onClick={() =\u003e updateOrder(order, 'DELIVERED')}\u003eDelivered\u003c/Button\u003e;\n        } else {\n            return null;\n        }\n    }\n    export default function Order({ order }) {\n        const items = order.items.map((item) =\u003e (\n            \u003cTable.Row key={item.id}\u003e\n                \u003cTable.Cell\u003e\n                    {item.name}\n                \u003c/Table.Cell\u003e\n                \u003cTable.Cell\u003e\n                    \u003cOrderItemButton order={order} item={item} /\u003e\n                \u003c/Table.Cell\u003e\n            \u003c/Table.Row\u003e\n        ));\n        return (\n            \u003cSegment vertical\u003e\n                \u003cTable striped\u003e\n                    \u003cTable.Body\u003e\n                        {items}\n                    \u003c/Table.Body\u003e\n                \u003c/Table\u003e\n                \u003cOrderButton order={order} /\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\n\u003e **Note:** this makes calls to `http://localhost:8080`. In reality you will need to replace this with the real URL to your backend service.\n\nThis will render a table containing all of the order items, each of which has a button next to it to update the status of that item. There will also be a button, if applicable, below the table to update the delivery status of the entire order.\n\nNext we’ll create a simple component to render the complete list of orders. Create `src/OrdersList.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import Order from './Order';\n    export default ({ orders }) =\u003e {\n        const orderElements = orders.map((order) =\u003e \u003cOrder order={order} key={order.id} /\u003e);\n        return (\n            \u003cdiv\u003e\n                {orderElements}\n            \u003c/div\u003e\n        );\n    };\n```\n\nNow we need to actually connect this to our APIs. For this we will create a file called `src/ConnectedOrdersList.js` - so called because it’s not a UI component but a connecting component that makes API calls instead - as follows:\n\n``` javascript\n    import React from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import OrdersList from './OrdersList';\n    const socket = new Pusher('\u003cCHANNELS__KEY\u003e', {\n        cluster: '\u003cCHANNELS_CLUSTER\u003e',\n    });\n    export default class ConnectedOrdersList extends React.Component {\n        state = {\n            orders: []\n        };\n        render() {\n            return (\n                \u003cdiv className=\"ui container\"\u003e\n                    \u003cOrdersList orders={this.state.orders} /\u003e\n                \u003c/div\u003e\n            );\n        }\n        componentDidMount() {\n            this._fetchOrders();\n            socket.subscribe('orders')\n                .bind('order-update', () =\u003e this._fetchOrders());\n        }\n        _fetchOrders() {\n            const ordersPromise = axios.get('http://localhost:8080/orders')\n            const menuItemsPromise = axios.get('http://localhost:8080/menu-items');\n            Promise.all([ordersPromise, menuItemsPromise])\n                .then((values) =\u003e {\n                    const menuItems = {};\n                    values[1].data.forEach((entry) =\u003e {\n                        menuItems[entry.id] = entry.name;\n                    });\n                    const orders = values[0].data.map((order) =\u003e {\n                        return {\n                            id: order.id,\n                            status: order.status,\n                            items: order.items.map((item) =\u003e {\n                                return {\n                                    id: item.id,\n                                    menuItem: item.menuItem,\n                                    status: item.status,\n                                    name: menuItems[item.menuItem]\n                                };\n                            })\n                        };\n                    });\n                    this.setState({\n                        orders: orders\n                    });\n                });\n        }\n    }\n```\n\n\u003e **Note:** ensure you replace \u003cCHANNELS_KEY\u003e and \u003cCHANNELS_CLUSTER\u003e with the same values as used in the backend application.\n\nThis contains a method that will make two API calls - one each to our */menu-items* and */orders* endpoints - and combine the results together. Then it will update the component state with this result, which will cause it to render our `Orders` component with the resultant list. We also register to listen to the Pusher events that we broadcast earlier so that every time we get an indication that the orders have changed we can go and refresh our list.\n\nFinally, replace the contents of `src/App.js` with the following:\n\n``` javascript\n    import React, { Component } from 'react';\n    import 'semantic-ui-css/semantic.min.css';\n    import OrdersList from './ConnectedOrdersList';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cOrdersList /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nThis renders our `ConnectedOrdersList` component that we’ve just defined as the main body of our application.\n\nAt this point, we have a fully functional web UI that the takeaway can use to manage the orders:\n\n![kotlin-takeaway-stage-1](//images.ctfassets.net/1es3ne0caaid/3mmmDudOCkiyGioUYQkC0G/28060805deca056afa072587e139ea6b/kotlin-takeaway-stage-1.gif)\n\n## Building the customers application\n\nThe customers Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n![kotlin-takeaway-create-android](//images.ctfassets.net/1es3ne0caaid/6ByUvVg2xGQW0ou2y0mGGO/30ad4e43657e16edd4e92d18d4f81939/kotlin-takeaway-create-android.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-takeaway-target-devices](//images.ctfassets.net/1es3ne0caaid/5x42W6wam4M2wIoIMcSCy4/aca4503d566684febc2631e1a7fdbacc/kotlin-takeaway-target-devices.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-7](//images.ctfassets.net/1es3ne0caaid/6f2xDO0sTu6AOoguysgYG6/0df9b3e7bf31f00431f60e70f353db1f/kotlin-ridesharing-create-android-7.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-takeaway-main](//images.ctfassets.net/1es3ne0caaid/1nMTsf3zT6SG2EomEWau8O/931743f110908b66dc781f5c633d8106/kotlin-takeaway-main.png)\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\n### Displaying the menu items\n\nThe main screen that we are going to show is a list of menu items, allowing the user to place an order. \n\nFirstly, we need our main application layout. For this, update `app/res/layout/activity_main.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"#fff\"\u003e\n    \n        \u003cScrollView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cLinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"vertical\"\u003e\n    \n                \u003cListView\n                    android:id=\"@+id/records_view\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"500dp\"\n                    android:layout_marginTop=\"16dp\"\u003e\n    \n                \u003c/ListView\u003e\n            \u003c/LinearLayout\u003e\n        \u003c/ScrollView\u003e\n    \n        \u003cButton\n            android:id=\"@+id/button2\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Place Order\" /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\n\u003e **Note:** in order to paste this snippet in, the **Text** tab at the bottom of the screen should be selected.\n\n\n\u003e **Note:** sometimes, copy and paste of the entire file into the **Text** tab will cause a blank line at the very top. This is invalid XML and needs to be removed.\n\nThis gives us a list to show our menu items, and a button with which to place the order.\n\nNow we need a class to represent each entry in this list. Create a new class called `MenuItem` as follows:\n\n``` kotlin\n    data class MenuItem(\n            val id: String,\n            val name: String\n    )\n```\n\nYou’ll notice that this is identical to the `MenuItem` class on the backend. This is unsurprising since it represents the exact same data.\n\nNext we need a layout to represent a single row in our list. For this, create a new layout resource called `app/res/layout/menuitem.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cTextView\n            android:id=\"@+id/item_name\"\n            android:textColor=\"#000\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Name\"/\u003e\n        \u003cSpinner\n            android:id=\"@+id/item_count\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"3\" /\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThis has two entries in it - an item name and a spinner. The spinner control is effectively a dropdown, and will be used to select how many of each item to order.\n\nNow we need to be able to render this new layout for each of our menu items. For this, create a new class called `MenuItemAdapter` as follows:\n\n``` kotlin\n    class MenuItemAdapter(private val recordContext: Context) : BaseAdapter() {\n        var records: List\u003cMenuItem\u003e = listOf()\n            set(value) {\n                field = value\n                notifyDataSetChanged()\n            }\n    \n        override fun getView(i: Int, view: View?, viewGroup: ViewGroup): View {\n            val theView = if (view == null) {\n                val recordInflator = recordContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n    \n                val theView = recordInflator.inflate(R.layout.menuitem, null)\n                val newMenuItemViewHolder = MenuItemViewHolder(\n                        theView.findViewById(R.id.item_name),\n                        theView.findViewById(R.id.item_count)\n                )\n                val countAdapter = ArrayAdapter(\n                        recordContext,\n                        android.R.layout.simple_spinner_dropdown_item,\n                        IntRange(0, 10).toList().toTypedArray()\n                )\n                newMenuItemViewHolder.count.adapter = countAdapter\n                theView.tag = newMenuItemViewHolder\n    \n                theView\n            } else {\n                view\n            }\n    \n            val menuItemViewHolder = theView.tag as MenuItemViewHolder\n    \n            val menuItem = getItem(i)\n            menuItemViewHolder.name.text = menuItem.name\n            menuItemViewHolder.id = menuItem.id\n    \n            return theView\n        }\n    \n        override fun getItem(i: Int) = records[i]\n    \n        override fun getItemId(i: Int) = 1L\n    \n        override fun getCount() = records.size\n    }\n    \n    data class MenuItemViewHolder(\n            val name: TextView,\n            val count: Spinner\n    ) {\n        var id: String? = null\n    }\n```\n\nAmongst other things, this includes a hard-coded list of values for the spinner control - allowing the user to order up to 10 of any single item.\n\nFinally we just need to get the data into this list. Update `MainActivity` by adding the following field to the class:\n\n``` kotlin\n    private lateinit var recordAdapter: MenuItemAdapter\n```\n\nThen initialize this by adding the following to our `MainActivity` class:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n        recordAdapter = MenuItemAdapter(this)\n        val recordsView = findViewById\u003cView\u003e(R.id.records_view) as ListView\n        recordsView.setAdapter(recordAdapter)\n    \n        refreshMenuItems()\n    }\n```\n\nNext we just need to implement the `refreshMenuItems` method, as follows:\n\n``` kotlin\n    private fun refreshMenuItems() {\n        val client = AsyncHttpClient()\n        client.get(\"http://10.0.2.2:8080/menu-items\", object : JsonHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONArray) {\n                super.onSuccess(statusCode, headers, response)\n                runOnUiThread {\n                    val menuItems = IntRange(0, response.length() - 1)\n                            .map { index -\u003e response.getJSONObject(index) }\n                            .map { obj -\u003e\n                                MenuItem(\n                                        id = obj.getString(\"id\"),\n                                        name = obj.getString(\"name\")\n                                )\n                            }\n    \n                    recordAdapter.records = menuItems\n                }\n            }\n        })\n    }\n```\n\n\u003e **Note:** The import for `Header` should be `cz.msebera.android.httpclient.Header`\n\n\n\u003e **Note:** 10.0.2.2 is the IP Address that the host machine appears when running inside the Android emulator. In reality you will want to use the real host of your service.\n\nAt this point we can start up the Android application and see all of the menu choices:\n\n![kotlin-takeaway-stage-2](//images.ctfassets.net/1es3ne0caaid/3qX7X1G7aEAsASgSiU0KSI/d873af999efe1871cb98b02cf4383828/kotlin-takeaway-stage-2.png)\n\n### Placing an order\n\nNow that we can see the list of items that can be ordered, we need to be able to place an order.\n\nFirstly, we need to be able to get the list of items that have been selected to be ordered. This will be coming out of the `MenuItemAdapter` class, as this acts as the interface to the list of items.\n\nFirstly, create a couple of fields in this class as follows:\n\n``` kotlin\n    private val currentOrder = mutableMapOf\u003cString, Int\u003e()\n    \n    val order: List\u003cString\u003e\n        get() = currentOrder.filterValues { it \u003e 0 }\n                .map { orderItem -\u003e List(orderItem.value) { orderItem.key } }\n                .flatten()\n```\n\nThe first of these is a private map that will act as a mapping between each item and the number of that item to order. The second is a computed property that returns a list of the items to order, with one entry for each item. This means that if we order three pizzas, there will be three entries in this list.\n\nNext, add a handler towards the bottom of the `getView` method, immediately before the return statement, to update our map of orders:\n\n``` kotlin\n    menuItemViewHolder.count.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\n        override fun onNothingSelected(parent: AdapterView\u003c*\u003e?) {\n            currentOrder.remove(menuItem.id)\n        }\n    \n        override fun onItemSelected(parent: AdapterView\u003c*\u003e?, view: View?, position: Int, id: Long) {\n            currentOrder[menuItem.id] = position\n        }\n    }\n```\n\nThis is triggered every time a new value is selected for any item, and will cause our map to be updated to match.\n\nNow we can use this to actually make the HTTP call to place our order. For this we need to create a new method called `placeOrder` in the `MainActivity` class, as follows:\n\n``` kotlin\n    fun placeOrder(view: View) {\n        val items = recordAdapter.order\n        if (items.isEmpty()) {\n            Toast.makeText(this, \"No items selected\", Toast.LENGTH_LONG)\n                    .show()\n        } else {\n    \n            val request = JSONArray(items)\n    \n            val client = AsyncHttpClient()\n            client.post(applicationContext, \"http://10.0.2.2:8080/orders\", StringEntity(request.toString()),\n                    \"application/json\", object : JsonHttpResponseHandler() {\n    \n                override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONObject) {\n                    runOnUiThread {\n                        Toast.makeText(this@MainActivity, \"Order placed\", Toast.LENGTH_LONG)\n                                .show()\n                    }\n                }\n            })\n        }\n    }\n```\n\n\u003e **Note:** the “this@MainActivity” syntax means to get the “this” value that refers to the “MainActivity” class, as opposed to the “JsonHttpResponseHandler” inner class that we’re actually executing inside.\n\nThen we can update our `activity_main.xml` file so that the Button element reads as follows:\n\n``` xml\n    \u003cButton\n        android:id=\"@+id/button2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Place Order\"\n        android:onClick=\"placeOrder\" /\u003e\n```\n\nThis now does everything necessary to place an order on the server, including displaying an error message if the user did not select any items to order when pressing the button.\n\n### Receiving order update notifications\n\nNow that we can place orders, we want to be notified as to the progress of the order. This will include a progress bar for the part of the process where the order is being prepared, and then simple strings to indicate that the order is out for delivery.\n\nThe first thing we need to do is enable support for receiving push notifications for our events. Add the following to the end of the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"BEAMS_INSTANCE_ID\")\n```\n\n\u003e **Note:** remember to replace BEAMS_INSTANCE_ID with the appropriate value obtained when you registered your Pusher Beams application details.\n\nNext we want to register to receive notifications for our order. This is done by adding the following in to the `onSuccess` callback method inside the `placeOrder` method:\n\n``` kotlin\n    val id = response.getString(\"id\")\n    PushNotifications.subscribe(id)\n```\n\nAt this point, every time the order changes, the Android app will receive a push notification informing of the changes. We can now display android notifications to inform the user of the current status. Create a new method called `receiveNotification` in the `MainActivity` class as follows:\n\n``` kotlin\n    private fun receiveNotifications() {\n    \n        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n    \n        if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n            val channel = NotificationChannel(\"takeaway\",\n                    \"Pusher Takeaway\",\n                    NotificationManager.IMPORTANCE_DEFAULT)\n            notificationManager.createNotificationChannel(channel)\n        }\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                Log.i(\"Notification\", remoteMessage.data.toString())\n    \n                val pending = remoteMessage.data[\"itemsPending\"]?.toInt() ?: 0\n                val started = remoteMessage.data[\"itemsStarted\"]?.toInt() ?: 0\n                val finished = remoteMessage.data[\"itemsFinished\"]?.toInt() ?: 0\n    \n                val total = pending + started + finished\n    \n                val notification = when(remoteMessage.data[\"status\"]) {\n                    \"STARTED\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is being cooked\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                                .setProgress(total, finished, finished == 0)\n                    }\n                    \"COOKED\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is ready\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                                .setProgress(total, total, false)\n                    }\n                    \"OUT_FOR_DELIVERY\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is out for delivery\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    }\n                    \"DELIVERED\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is outside\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    }\n                    else -\u003e null\n                }\n    \n                notification?.let {\n                    notificationManager.notify(0, it.build())\n                }\n            }\n        })\n    }\n```\n\n\u003e **Note:**  if it is ambiguous, the NotificationCompat import should be for android.support.v4.app.NotificationCompat.\n\nAnd then call this new method from the `onResume` method:\n\n``` kotlin\n    receiveNotifications()\n```\n\nThis gives everything for the customer to keep updated with their order. Ensure that the backend and web UI are running, and then we can test it all out together.\n\n![kotlin-takeaway-demo](//images.ctfassets.net/1es3ne0caaid/35S4CfDJGMgYQayA8Gkumc/00577e26dd50023386f92baed7e4dc0f/kotlin-takeaway-demo.gif)\n\n## Conclusion\n\nThis article has hopefully shown how easy it can be to integrate Pusher technologies into your application to give real time updates to both the customer and staff user interfaces. Even though we use two totally different Pusher technologies - Pusher Channels and Pusher Beams - they work seamlessly together to give a full featured experience.\n\nThe full source code for this article is available on [GitHub](https://github.com/sazzer/pusher-takeaway). Why not try extending it support more functionality - for example, multiple restaurants.","metaTitle":"Use push notifications to build a food delivery app","metaDescription":"Using Kotlin, React and realtime technologies, build a food delivery application. The app features realtime updates and push notifications."}}],"defaultValue":"Channels","queryType":"product","pages":33,"route":"/tutorials","query":{"product":"Channels","page":"11"}}},"page":"/tutorials","query":{"product":"Channels","page":"11"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=11 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:43 GMT -->
</html>