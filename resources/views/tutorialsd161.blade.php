<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Vue.js&page=6 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:55 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">74</span> tutorials for “<span class="css-npldjc ehwuahf2">Vue.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsedf8.html?product=Channels&amp;tag=Vue.js" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsa504.html?product=Beams&amp;tag=Vue.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Vue.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/photo-feed-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed with Go and Vue.js</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a photo feed application using Go, Vue.js and SQLite. Users can post pictures, and see each others&#x27; images appear ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/voting-app-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Polls</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a voting application with Go and Vue.js</h3><p class="css-k12xad e5jrto45">Build a polling app using Echo, the Go framework, Vue.js and SQLite. Users are able to vote on their favorite JavaScript...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-painting-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a collaborative painting app using Vue.js</h3><p class="css-k12xad e5jrto45">Build a collaborative painting app using Vue.js. Two users can work together on one drawing, seeing each other&#x27;s changes...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-nestjs-googlemaps.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geofencing web app using Nest.js and the Google Maps API</h3><p class="css-k12xad e5jrto45">Build a web app using Nest.js and the Google Maps API. The app allows you to select a user and center on their location,...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/desktop-notifications-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implementing desktop notifications in your Laravel app</h3><p class="css-k12xad e5jrto45">Use Laravel and Vue to build a news notification module, which will send a desktop notification to everyone on the websi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-audit-trail-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Add a realtime audit trail to your Laravel project</h3><p class="css-k12xad e5jrto45">Learn how to implement realtime stock updates in a Laravel and VueJS application. Clone a sample app, then walk through ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ussd-food-app-vue-africas-talking.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a food ordering app using Vue and Africa’s Talking</h3><p class="css-k12xad e5jrto45">A tutorial showing how to build a USSD food ordering app using Vue.js and Africa&#x27;s Talking.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-payment-dashboard-stripe.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime payment dashboard with Stripe</h3><p class="css-k12xad e5jrto45">Build a live admin dashboard with Vue.js and Node.js, accepting payments through Stripe.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracker-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Trading<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a cryptocurrency tracker using Vue.js</h3><p class="css-k12xad e5jrto45">In this tutorial, learn how to build a live cryptocurrency tracking view with Progressive Web Apps, Vue.js and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials7b12.html?tag=Vue.js&amp;page=5" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials7118.html?tag=Vue.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsdb36.html?tag=Vue.js&amp;page=4" class="css-za1ua3 edg0byb1">4</a><a href="tutorials7b12.html?tag=Vue.js&amp;page=5" class="css-za1ua3 edg0byb1">5</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsd161.html?tag=Vue.js&amp;page=6" class="css-2wakph edg0byb1">6</a><a href="tutorialsacf8.html?tag=Vue.js&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorials4217.html?tag=Vue.js&amp;page=8" class="css-5s6711 edg0byb1">8</a><a href="tutorials27ac.html?tag=Vue.js&amp;page=9" class="css-5s6711 edg0byb1">9</a><a href="tutorialsacf8.html?tag=Vue.js&amp;page=7" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":74,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"34QrjBOqpOcEcGQCssMcsS","type":"Entry","createdAt":"2018-06-06T10:51:18.709Z","updatedAt":"2020-06-19T12:51:14.059Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed with Go and Vue.js","url":"photo-feed-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-photofeed-pusher-go","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-06-04","description":"Build a photo feed application using Go, Vue.js and SQLite. Users can post pictures, and see each others' images appear in realtime.","prerequisite":"You will need Go and SQLite installed on your machine, as well as basic knowledge of Go and JavaScript.","content":"Many social media based applications allow users to upload photos and these photos are usually displayed in a timeline for their followers and others to see. In the past, you would have had to refresh your feed manually to see new photos uploaded to the timeline. However, with modern web technologies, you can see the updates in realtime without having to refresh the page manually.\n\nIn this article, we will consider how you can build a realtime photo feed using Pusher Channels, GO and a little Vue.js. [Pusher Channels](https://pusher.com) helps you “easily build scalable in-app notifications, chat, realtime graphs, geotracking and more in your web \u0026 mobile apps with our hosted pub/sub messaging API.”\n\nThis is a preview of what we will be building:\n\n![go-photo-feed-demo](//images.ctfassets.net/1es3ne0caaid/5vVy2T7aY8qoOiCuA8oGQK/abdfe10038a2935fa4a894296db6630d/go-photo-feed-demo.gif)\n\n## Prerequisites\n\nBefore we start building our application, make sure you have:\n\n- Basic knowledge of the [Go](https://golang.org/) programming language.\n- Basic JavaScript (Vue.js) knowledge.\n- Go (version \u003e= 0.10.x) installed on your machine. Check out the [installation guide](https://golang.org/doc/install).\n- SQLite (version \u003e= 3.x) installed on your machine.\n\nLet’s get started.\n\n\n## Getting a Pusher Channels application\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the Pusher website and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![go-photo-feed-app-keys](//images.ctfassets.net/1es3ne0caaid/5mwD9r7FFmWugK6AyY08Ga/fdff5e30849724654dd10c6a5f3de29a/go-photo-feed-app-keys.png)\n\nNow that we have our application, let’s move on to the next step\n\n## Creating our Go application\n\nThe next thing we want to do is create the Go application. In your terminal, `cd` to your `$GOPATH` and create a new directory there.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir gofoto\n    $ cd gofoto\n```\n\n\u003e 💡  It is recommended that you place the source code for your project in the `src` subdirectory (e.g., `$GOPATH/src/your_project` or `$GOPATH/src/github.com/your_github_username/your_project`.\n\nNext, we will create some directories to organize our application a little:\n\n```\n    $ mkdir database\n    $ mkdir public\n    $ mkdir public/uploads\n```\n\nThis will create a `database` and `public` directory, and also an `uploads` directory inside the public directory. We will store our database file inside the `database` directory, we will keep our public files: HTML and images, inside the `public` and `uploads` directory. Create a new `index.html` file in the `public` directory that was created.\n\nNow let’s create our first (and only) Go file for this article. We will try to keep everything simple by placing all our source code in a single file. Create a `main.go` file in the project root.\n\nIn the file paste the following:\n\n``` go\n    package main\n    \n    import (\n        \"database/sql\"\n        \"io\"\n        \"net/http\"\n        \"os\"\n        \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        _ \"github.com/mattn/go-sqlite3\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n\nAbove we have imported some packages we will be needing to work on our photo feed. We need the `database/sql` to run SQL queries, the `io` and `os` package for our file uploading process, and the `net/http` for our HTTP status codes.\n\nWe have some other external packages we imported. The `labstack/echo` package is the [Echo framework](https://github.com/labstack/echo) that we will be using. We also have the `mattn/go-sqlite3` package which is for SQLite. Finally, we imported the `pusher/pusher-http-go` package which we will use to trigger events to Pusher Channels.\n\n### Importing external Go packages\nBefore we continue, let’s pull in these packages using our terminal. Run the following commands below to pull the packages in:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e Note that the commands above will not return any confirmation output when it finishes installing the packages. If you want to confirm the packages were indeed installed you can just check the `$GOPATH/src/github.com` directory.\n\nNow that we have pulled in our packages, let’s create the `main` function. This is the function that will be the entry point of our application. In this function, we will set up our applications database, middleware, and routes.\n\nOpen the `main,go` file and paste the following code:\n\n``` go\n    func main() {\n        db := initialiseDatabase(\"database/database.sqlite\")\n        migrateDatabase(db)\n        \n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        e.File(\"/\", \"public/index.html\")\n        e.GET(\"/photos\", getPhotos(db))\n        e.POST(\"/photos\", uploadPhoto(db))\n        e.Static(\"/uploads\", \"public/uploads\")\n    \n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nIn the code above, we instantiated our database using the file path to the database file. This will create the SQLite file if it did not already exist. We then run the `migrateDatabase` function which migrates the database.\n\nNext, we instantiate Echo and then register some middlewares. The [logger middleware](https://echo.labstack.com/middleware/logger) is helpful for logging information about the HTTP request while the [recover middleware](https://echo.labstack.com/middleware/recover) “recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized [HTTPErrorHandler](https://echo.labstack.com/guide/customization#http-error-handler).”\n\nWe then set up some routes to handle our requests. The first handler is the `File` handler. We use this to serve the `index.html` file. This will be the entry point to the application from the frontend. We also have the `/photos` route which accepts a `POST` and `GET` request. We need these routes to act like API endpoints that are used for uploading and displaying the photos. The final handler is `Static`. We use this to return static files that are stored in the `/uploads` directory.\n\nWe finally use `e.Start` to start our Go web server running on port 9000. The port is not set in stone and you can choose any available and unused port you feel like.\n\nAt this point, we have not created most of the functions we referenced in the `main` function so let’s do so now.\n\n### Creating our database management functions\n\nIn the `main` function we referenced an `initialiseDatabase` and `migrateDatabase` function. Let’s create them now. In the `main.go` file, paste the following functions above the `main` function:\n\n``` go\n    func initialiseDatabase(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n        if err != nil || db == nil {\n            panic(\"Error connecting to database\")\n        }\n     \n        return db\n    }\n    \n    func migrateDatabase(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS photos(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    src VARCHAR NOT NULL\n            );\n       `\n       \n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nIn the `initialiseDatabase` function, we create an instance of the SQLite database using the database file and return that instance. In the `migrateDatabase` function, we use the instance of the database returned in the previous function to execute the migration SQL.\n\nLet’s create the data structure for our photo and photo collection.\n\n### Creating our data structures\n\nThe next thing we will do is create the data structure for our object types. We will create a `Photo` structure and a `PhotoCollection` structure. The `Photo` struct will define how a typical photo will be represented while the `PhotoCollection` will define how a collection of photos will be represented.\n\nOpen the `main.go` file and paste the following code above the `initialiseDatabase` function:\n\n``` go\n    type Photo struct {\n        ID  int64  `json:\"id\"`\n        Src string `json:\"src\"`\n    }\n    \n    type PhotoCollection struct {\n        Photos []Photo `json:\"items\"`\n    }\n```\n\n### Creating our route handler functions\n\nNext let’s create the functions for our routes. Open the `main.go` file and paste the following file inside it:\n\n```go\n    func getPhotos(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            rows, err := db.Query(\"SELECT * FROM photos\")\n            if err != nil {\n                panic(err)\n            }\n            \n            defer rows.Close()\n    \n            result := PhotoCollection{}\n    \n            for rows.Next() {\n                photo := Photo{}\n                \n                err2 := rows.Scan(\u0026photo.ID, \u0026photo.Src)\n                if err2 != nil {\n                    panic(err2)\n                }\n    \n                result.Photos = append(result.Photos, photo)\n            }\n    \n            return c.JSON(http.StatusOK, result)\n        }\n    }\n    \n    func uploadPhoto(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            file, err := c.FormFile(\"file\")\n            if err != nil {\n                return err\n            }\n            \n            src, err := file.Open()\n            if err != nil {\n                return err\n            }\n    \n            defer src.Close()\n    \n            filePath := \"./public/uploads/\" + file.Filename\n            fileSrc := \"http://127.0.0.1:9000/uploads/\" + file.Filename\n    \n            dst, err := os.Create(filePath)\n            if err != nil {\n                panic(err)\n            }\n    \n            defer dst.Close()\n    \n            if _, err = io.Copy(dst, src); err != nil {\n                panic(err)\n            }\n    \n            stmt, err := db.Prepare(\"INSERT INTO photos (src) VALUES(?)\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer stmt.Close()\n    \n            result, err := stmt.Exec(fileSrc)\n            if err != nil {\n                panic(err)\n            }\n    \n            insertedId, err := result.LastInsertId()\n            if err != nil {\n                panic(err)\n            }\n    \n            photo := Photo{\n                Src: fileSrc,\n                ID:  insertedId,\n            }\n    \n            return c.JSON(http.StatusOK, photo)\n        }\n    }\n```\n\nIn the `getPhotos` method, we are simply running the query to fetch all the photos from the database and returning them as a JSON response to the client. In the `uploadPhoto` method we first get the file to be uploaded then upload them to the server and then we run the query to insert a new record in the `photos` table with the newly uploaded photo. We also return a JSON response from that function.\n\n### Adding realtime support to our Go application\n\nThe next thing we want to do is trigger an event when a new photo is uploaded to the server. For this, we will be using the [Pusher Go HTTP library](https://github.com/pusher/pusher-http-go). \n\nIn the `main.go` file paste the following above the type definitions for the `Photo` and `PhotoCollection`:\n\n``` go\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n```\n\nThis will create a new Pusher client instance. We can then use this instance to trigger notifications to different channels we want. Remember to replace the `PUSHER_APP_*` keys with the keys provided when you created your Pusher application earlier.\n\nNext, go to the `uploadPhoto` function in the `main.go` file and right before the `return` statement at the bottom of the function, paste the following code:\n\n``` go\n    client.Trigger(\"photo-stream\", \"new-photo\", photo)\n```\n\nThis is the code that triggers a new event when a new photo is uploaded to our application.\n\nThat will be all for our Go application. At this point, you can build your application and compile it into a binary using the `go build` command. However, for this tutorial we will just run the binary temporarily:\n\n``` \n    $ go run main.go\n```\n\n![go-photo-feed-go-run](//images.ctfassets.net/1es3ne0caaid/3DPeaIV05GMOGMSUouAaO/ce811f6f30da4b86c8c659f8637fdc3e/go-photo-feed-go-run.png)\n\n## Building our frontend\n\nThe next thing we want to do is build out our frontend. We will be using the [Vue.js framework](https://vuejs.org/) and the [Axios library](https://github.com/axios/axios) to send requests.\n\nOpen the `index.html` file and in there paste the following code:\n\n``` html\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003ePhoto Feed\u003c/title\u003e\n        \u003cstyle type=\"text/css\"\u003e\n            #photoFile { display: none; }\n            #app img { max-width: 100%; }\n            .image-row { margin: 20px 0; }\n            .image-row .thumbnail { padding: 2px; border: 1px solid #d9d9d9; }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n        \n            \u003cnav class=\"navbar navbar-expand-lg navbar-light bg-light\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eGoFoto\u003c/a\u003e\n                \u003cdiv\u003e\n                    \u003cul class=\"navbar-nav mr-auto\"\u003e\n                        \u003cli class=\"nav-item active\"\u003e\n                            \u003ca class=\"nav-link\" v-on:click=\"filePicker\" href=\"#\"\u003eUpload\u003c/a\u003e\n                            \u003cinput type=\"file\" id=\"photoFile\" ref=\"myFiles\" @change=\"upload\" name=\"file\" /\u003e\n                        \u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n            \u003c/nav\u003e\n            \n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"row justify-content-md-center\" id=\"loading\" v-if=\"loading\"\u003e\n                    \u003cdiv class=\"col-xs-12\"\u003e\n                        Loading photos...\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"row justify-content-md-center image-row\" v-for=\"photo in photos\"\u003e\n                    \u003cdiv class=\"col col-lg-4 col-md-6 col-xs-12\"\u003e\n                        \u003cimg class=\"thumbnail\" :src=\"photo.src\" alt=\"\" /\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \n        \u003c/div\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the HTML file above we have defined the design for our photostream. We are using Bootstrap 4 and we included the CSS in the HTML above. We are also using the Axios library, Pusher library, and Vue framework. We included the links to the scripts at the bottom of the HTML document.\n\nNext let’s add the Vue.js code. In the HTML file, add the following code right before the closing `body` tag:\n\n``` javascript\n    \u003cscript type=\"text/javascript\"\u003e\n        new Vue({\n            el: '#app',\n            data: {\n                photos: [],\n                loading: true,\n            },\n            mounted() {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n                \n                let channel = pusher.subscribe('photo-stream')\n                \n                channel.bind('new-photo', data =\u003e this.photos.unshift(data));\n                \n                axios.get('/photos').then(res =\u003e {\n                    this.loading = false\n                    this.photos = res.data.items ? res.data.items : []\n                })\n            },\n            methods: {\n                filePicker: function () {\n                    let elem = document.getElementById('photoFile');\n                    \n                    if (elem \u0026\u0026 document.createEvent) {\n                        let evt = document.createEvent(\"MouseEvents\");\n                        evt.initEvent(\"click\", true, false);\n                        elem.dispatchEvent(evt);\n                    }\n                },\n                upload: function () {\n                    let data = new FormData();\n                    data.append('file', this.$refs.myFiles.files[0]);\n    \n                    axios.post('/photos', data).then(res =\u003e console.log(res))\n                }\n            }\n        });\n    \u003c/script\u003e\n```\n\nAbove we created a Vue instance and stored the properties `photos` and `loading`. The `photos` property stores the photo list and the `loading` just holds a boolean that indicates if the photos are loading or not.\n\nIn the `mounted` method we create an instance of our Pusher library. We then listen on the `photo-stream` channel for the `new-photo` event. When the event is triggered we append the new photo from the event to the `photos` list. We also send a GET request to `/photos` to fetch all the photos from the API. Replace the `PUSHER_APP_*` keys with the one from your Pusher dashboard.\n\nIn the `methods` property, we added a few methods. The `filePicker` is triggered when the ‘Upload’ button is pressed on the UI. It triggers a file picker that allows the user to upload photos. The `upload` method takes the uploaded file and sends a POST request with the file to the API for processing. \n\nThat’s all for the frontend, you can save the file and head over to your web browser. Visit http://127.0.0.1:9000 to see your application in action.\n\nHere’s how it will look again:\n\n![go-photo-feed-demo](//images.ctfassets.net/1es3ne0caaid/5vVy2T7aY8qoOiCuA8oGQK/abdfe10038a2935fa4a894296db6630d/go-photo-feed-demo.gif)\n\n## Conclusion\n\nIn this article, we have been able to demonstrate how you can use Pusher Channels in your Go application to provide realtime features for your application. As seen from the code samples above, it is very easy to get started with Pusher Channels. Check the [documentation](https://pusher.com/docs) to see other ways you can use Pusher Channels to provide realtime features to your users.\n\nThe source code for this application is available on [GitHub](https://github.com/neoighodaro/realtime-photofeed-pusher-go).","metaTitle":"Build a photo feed with Go and Vue.js","metaDescription":"This short tutorial shows how to add realtime functionality to a Go web app. Use Go, Vue.js and SQLite to create a simple photo feed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5kd5NYciXeUsoa4ogwCWu6","type":"Entry","createdAt":"2018-05-29T09:13:20.560Z","updatedAt":"2018-05-29T09:13:20.560Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a voting application with Go and Vue.js","url":"voting-app-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-poll-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-05-28","description":"Build a polling app using Echo, the Go framework, Vue.js and SQLite. Users are able to vote on their favorite JavaScript frameworks. Results update instantly.","prerequisite":"You will need Go installed on your machine, and a basic knowledge of Go and JavaScript.","content":"Digital polls are a great way for an online crowd to express their opinions towards a set of items on the list. In the past, to participate in voting, voters would have to physically be present at the elected place of vote so that they can cast their ballots. Such a drag right?\n\n## What we will be building\n\nIn this tutorial we will demonstrate how to build a realtime voting poll application. We will write the backend API for handling the HTTP requests and saving updates to the database ([SQLite](https://www.sqlite.org/)) in [Go](https://golang.org/). \n\nWe will be using the Go framework, [Echo](https://echo.labstack.com/), to keep boilerplate to a minimum. You can think of Echo to be to Go what [Laravel](https://laravel.com/) is to PHP. If you have prior experience using web frameworks to create routes and handle HTTP requests, the code in this tutorial should look somewhat familiar.\n\nFor the frontend section of this project, we’ll use [Vue.js](https://vuejs.org/). With its reactive properties, Vue.js will re-render the DOM whenever there is an update to the `upvotes` or `downvotes` of a vote member. We’ll also require a bit of [jQuery](https://jquery.com/) to handle some functionality.\n\nTo make things work in realtime, we’ll integrate Pusher into the application. [Pusher](https://pusher.com) makes it very easy to create realtime applications.\n\nWhen we are done with our application, here’s what we will have:\n\n![voting-app-go-demo-1](//images.ctfassets.net/1es3ne0caaid/6aAc9s9C9OkIMCIs88o2Sg/47c72b8039deedd5e655159bb8d61b86/voting-app-go-demo-1.gif)\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n\n- An IDE of your choice like [Visual Studio Code](https://code.visualstudio.com/).\n- [Go](https://golang.org/doc/install) (version \u003e= 0.10.x) installed on your computer. [Heres how you can install Go](https://golang.org/doc/install#install).\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6).\n- Basic knowledge of Vue.js and jQuery.\n\nOnce you have all the above requirements, we can proceed.\n\n## Setting up our codebase\n\nTo get started create a new directory in our `$GOPATH` and launching that directory with an IDE. We can do this by running the commands below:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir gopoll \n    $ cd gopoll\n```\n\nThe directory above will be our project directory. Next create our first `.go` file where our main function will go, we will call it `poll.go`.\n\nLet’s import some useful Go packages that we’ll be using within our project. For a start, we have to fetch the Echo and SQLite packages from GitHub. Run the following commands to pull in the packages:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n```\n\n\u003e ⚠️  If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also see this [GitHub issue](https://github.com/mattn/go-sqlite3/issues/297).\n\nOpen the `poll.go` file and paste in the following code:\n\n``` go\n    package main\n    \n    import (\n        // \"database/sql\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        // _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\nAbove we also imported the `database/sql` library but we don’t have to use `go get` because this is a part of the standard Go library.\n\n## Setting up the routes and database\n\nTo enable Go to run our application, we need a `main` function, so lets create that before we think of creating the routes and setting up the database.\n\nOpen the `poll.go` file and in there add the following code to the file:\n\n``` go\n    func main() {\n        e := echo.New()\n    \n        // Middleware\n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        // Define the HTTP routes\n        e.GET(\"/polls\", func(c echo.Context) error { \n            return c.JSON(200, \"GET Polls\") \n        })\n    \n        e.PUT(\"/polls\", func(c echo.Context) error { \n            return c.JSON(200, \"PUT Polls\") \n        })\n    \n        e.PUT(\"/polls/:id\", func(c echo.Context) error {\n            return c.JSON(200, \"UPDATE Poll \" + c.Param(\"id\"))    \n        })\n    \n        // Start server\n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nAwesome, we’ve created some basic routes and even if they don’t do more than echo ‘static’ text, they should be able to handle matching URL requests.\n\nWe included the final line because we want to instruct Go to start the application using Echo’s `Start` method. This will start Go’s standard HTTP server and listen for requests on the port `9000`.\n\nWe can test the routes in our application as it is now by compiling it down, running it and making requests to the port `9000` of our local host with [Postman](https://www.getpostman.com/).\n\n```\n    $ go run poll.go\n```\n\nNow we can head over to Postman and point the address to `localhost:9000/polls` with a `GET` HTTP verb. To try the PUT request, we can use an address such as `localhost:9000/polls/3`.\nAssuming that everything works as we planned, you should get the following screens:\n\n### GET request\n\n![voting-app-go-GET](//images.ctfassets.net/1es3ne0caaid/50FAIAIQzukai0yCaIwGie/bc264375d33faa2621d121dc0ab0f5b8/voting-app-go-GET.png)\n\n### PUT request\n\n![voting-app-go-PUT](//images.ctfassets.net/1es3ne0caaid/3kGQb7GcHmCasScCWA0Ica/cebb54775deb8809c8651c9a435edaf1/voting-app-go-PUT.png)\n\nIn the `poll.go` file, we will write some code to initialize a database with a filename of `Storage.db` on application run. The `Sql` driver can create this file for us if it doesn’t already exist. After the database has been created, we will run a function to migrate and seed the database for us if it hasn’t already been migrated and seeded.\n\nOpen the `poll.go` file and add the following functions to the file:\n\n``` go\n    func initDB(filepath string) *sql.DB {\n            db, err := sql.Open(\"sqlite3\", filepath)\n    \n            if err != nil {\n                panic(err)\n            }\n    \n            if db == nil {\n                panic(\"db nil\")\n            }\n            \n            return db\n    }\n    \n    func migrate(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS polls(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    name VARCHAR NOT NULL,\n                    topic VARCHAR NOT NULL,\n                    src VARCHAR NOT NULL,\n                    upvotes INTEGER NOT NULL,\n                    downvotes INTEGER NOT NULL,\n                    UNIQUE(name)\n            );\n        \n            INSERT OR IGNORE INTO polls(name, topic, src, upvotes, downvotes) VALUES('Angular','Awesome Angular', 'https://cdn.colorlib.com/wp/wp-content/uploads/sites/2/angular-logo.png', 1, 0);\n        \n            INSERT OR IGNORE INTO polls(name, topic, src, upvotes, downvotes) VALUES('Vue', 'Voguish Vue','https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Vue.js_Logo.svg/400px-Vue.js_Logo.svg.png', 1, 0);\n        \n            INSERT OR IGNORE INTO polls(name, topic, src, upvotes, downvotes) VALUES('React','Remarkable React','https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/1200px-React-icon.svg.png', 1, 0);\n        \n            INSERT OR IGNORE INTO polls(name, topic, src, upvotes, downvotes) VALUES('Ember','Excellent Ember','https://cdn-images-1.medium.com/max/741/1*9oD6P0dEfPYp3Vkk2UTzCg.png', 1, 0);\n        \n            INSERT OR IGNORE INTO polls(name, topic, src, upvotes, downvotes) VALUES('Knockout','Knightly Knockout','https://images.g2crowd.com/uploads/product/image/social_landscape/social_landscape_1489710848/knockout-js.png', 1, 0);\n       `\n        _, err := db.Exec(sql)\n    \n        if err != nil {\n                panic(err)\n        }\n    }\n```\n\nThe first function, `initDB` is pretty straightforward with its task, it makes an attempt to open a database file, or creates it when it doesn’t exist. In a case where it is unable to read the database file or create it, the program exits because the database is crucial to the logic of the application.\n\nThe `migrate` function, does exactly what its name suggests. It runs an SQL statement against the database to ensure that the `polls` table is created if it isn’t already created, and seeded with some initial values for this example.\n\nFor our example, we will be seeding the database with some values for a few JavaScript frameworks. Each framework will have a column for registering the state of `upvotes` and `downvotes`. Like the `initDB` function, if the `migrate` function fails to migrate and seed the database, the program will return an error.\n\nNext open the `poll.go` file and add the following into the `main` function right after the middleware definitions:\n\n``` go\n    // [...]\n    \n    // Initialize the database\n    db := initDB(\"storage.db\")\n    migrate(db)\n    \n    // [...]\n```\n\nNext, uncomment the imports in the `poll.go` file. Now we can test to see if our application works. Run the following command to build and run the application:\n\n```\n    $ go run poll.go\n```\n\nIf we look at the project directory, there should be a `storage.db` file there. This means that our code executed correctly.\n\nGreat, now let’s create the handlers.\n\n## Creating the handlers\n\nWe’ve already created the endpoints with which the frontend can interact with the backend. Now we need to build the backend logic that will handle the received requests on specific routes. We can achieve this by registering several handler functions of our own.\n\nLet’s begin by creating and navigating into a new directory called `handlers`:\n\n```\n    $ mkdir handlers\n    $ cd handlers\n```\n\nLet’s create a new `handlers.go` file in this `handlers` directory and paste the following code into the file:\n\n``` go\n    package handlers\n    \n    import (\n        \"database/sql\"\n        \"net/http\"\n        \"strconv\"\n        \"github.com/labstack/echo\"\n    )\n```\n\nNext, open the `poll.go` file and import the `handlers.go` package in there:\n\n``` go\n    import (\n        // [...]\n    \n        \"gopoll/handlers\"\n    \n        // [...]\n    )\n```\n\nIn the same file, replace the route definitions from earlier with the ones below:\n\n``` go\n    // [...]\n    \n    // Define the HTTP routes\n    e.File(\"/\", \"public/index.html\")\n    e.GET(\"/polls\", handlers.GetPolls(db))\n    e.PUT(\"/poll/:index\", handlers.UpdatePoll(db))\n    \n    // [...]\n```\n\nYou may have noticed that we included an extra route above:\n\n```\n    e.File(\"/\", \"public/index.html\")\n```\n\nThis is the route that will process requests sent to the `/` endpoint. We need this route to serve a static `HTML` file that we are yet to create, this file will hold our client-side code and live in the public directory.\n\nNow back to the `handlers.go` file. In order for us to return arbitrary JSON as responses in our handler, we need to register a map just below our import statements:\n\n```\n    type H map[string]interface{}\n```\n\nThis maps strings as keys and anything else as values. In Go, the \"interface\" keyword represents anything from a primitive datatype to a user defined type or struct.\n\nLet’s create our handlers. We will make it so they receive an instance of the database we’ll be passing from the routes. They’ll also need to implement the [Echo.HandlerFunc](https://godoc.org/github.com/labstack/echo#HandlerFunc) interface so they can be used by the routes. \n\nOpen the `handlers.go` file and paste the following:\n\n``` go\n    func GetPolls(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            return c.JSON(http.StatusOK, models.GetPolls(db))\n        }\n    }\n    \n    func UpdatePoll(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            var poll models.Poll\n    \n            c.Bind(\u0026poll)\n    \n            index, _ := strconv.Atoi(c.Param(\"index\"))\n    \n            id, err := models.UpdatePoll(db, index, poll.Name, poll.Upvotes, poll.Downvotes)\n    \n            if err == nil {\n                return c.JSON(http.StatusCreated, H{\n                    \"affected\": id,\n                })\n            }\n    \n            return err\n        }\n    }\n```\n\nThe `GetPolls` function returns the `StatusOK` status code and passes the received instance of the database to a model function that we will create soon. In the next section, we’ll create the models package, define its functions and import it into the handlers package.\n\nThe `UpdatePoll` function is defined to work on a single poll, it calls `c.Bind` on an instance of `models.Poll`; this call is responsible for taking a `JSON` formatted body sent in a `PUT` request and mapping it to a Poll struct. The Poll struct will be defined in the models package. \n\nSince this handler will be receiving an `index` parameter from the route, we are using the `strconv` package and the `Atoi` (alpha to integer) function to make sure the index is cast to an integer. This will ensure that we can correctly point to a row when we query the database. We have also done a bit of error checking in this function, we want to ensure that the application terminates properly if there is ever an error.\n\nLet’s move on to the creation of the models package.\n\n## Creating the models\n\nIt is a good practice to keep codebases as modular as possible so we have avoided making direct calls to the database in the `handlers` package. Instead, we will abstract the database logic into the models package so that the interactions are performed by the models.\n\nLet’s create a new directory in the working directory of our application. This is where the models package will go, we can run this command:\n\n```\n    $ mkdir models\n```\n\nIn the `models` directory create a new `models.go` file and paste the following into the code:\n\n``` go\n    package models\n    \n    import (\n        \"database/sql\"\n        _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\nNext import the models package into the `handlers.go` file:\n\n``` go\n    package handlers\n    \n    import (\n        // [...]\n    \n        \"gopoll/models\"\n        \n        // [...]\n    )\n```\n\nIn the models package, let’s create a Poll `type` which is a struct with six fields:\n\n- `ID` -  the id of the poll.\n- `Name` - the name of the poll.\n- `Topic` - the topic of the poll.\n- `Src` - the link to an image  for the poll.\n- `Upvotes` - the number of upvotes on the poll.\n- `Downvotes` - the number of downvotes on the poll.\n\nIn Go, we can add metadata to variables by putting them within backticks. We can use this feature to define what each field should look like when converted to `JSON`. This will also help the `c.Bind` function in the `handlers.go` file to know how to map `JSON` data when registering a new Poll.\n\nWe will also use the `type` keyword to define a collection of Polls, this is required for when there is a request to return all the Polls in the database. We’d simply aggregate them into an instance of this collection and return them.\n\n``` go\n    type Poll struct {\n        ID        int     `json:\"id\"`\n        Name      string  `json:\"name\"`\n        Topic     string  `json:\"topic\"`\n        Src       string  `json:\"src\"`\n        Upvotes   int     `json:\"upvotes\"`\n        Downvotes int     `json:\"downvotes\"`\n    }\n    \n    type PollCollection struct {\n        Polls []Poll `json:\"items\"`\n    }\n```\n\nNow let’s define the `GetPolls` function. This function will be responsible for getting the polls from the database, returning them as an instance of a Poll collection and returning them to the function that invoked it. This function doesn’t use any new features and is pretty straight forward:\n\n``` go\n    func GetPolls(db *sql.DB) PollCollection {\n        sql := \"SELECT * FROM polls\"\n        \n        rows, err := db.Query(sql)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        defer rows.Close()\n    \n        result := PollCollection{}\n    \n        for rows.Next() {\n            poll := Poll{}\n            \n            err2 := rows.Scan(\u0026poll.ID, \u0026poll.Name, \u0026poll.Topic, \u0026poll.Src, \u0026poll.Upvotes, \u0026poll.Downvotes)\n    \n            if err2 != nil {\n                panic(err2)\n            }\n            \n            result.Polls = append(result.Polls, poll)\n        }\n        \n        return result\n    }\n```\n\nWe also need to define an `UpdatePoll` method that will update the state of the `upvotes` and `downvotes` of a Poll. In the same file paste the following code:\n\n``` go\n    func UpdatePoll(db *sql.DB, index int, name string, upvotes int, downvotes int) (int64, error) {\n        sql := \"UPDATE polls SET (upvotes, downvotes) = (?, ?) WHERE id = ?\"\n    \n        // Create a prepared SQL statement\n        stmt, err := db.Prepare(sql)\n    \n        // Exit if we get an error\n        if err != nil {\n            panic(err)\n        }\n    \n        // Make sure to cleanup after the program exits\n        defer stmt.Close()\n    \n        // Replace the '?' in our prepared statement with 'upvotes, downvotes, index'\n        result, err2 := stmt.Exec(upvotes, downvotes, index)\n    \n        // Exit if we get an error\n        if err2 != nil {\n            panic(err2)\n        }\n        \n        return result.RowsAffected()\n    }\n```\n\nYou might have noticed we are using [prepared SQL statements](https://en.wikipedia.org/wiki/Prepared_statement) in the `UpdatePoll` function. There are several benefits to doing this. We ensure SQL statements are always cleaned up and safe from [SQL injection](https://en.wikipedia.org/wiki/SQL_injection) attacks. Prepared SQL statements also help our program execute faster since the statements will be compiled and cached for multiple uses.\n\n## Building out our frontend\n\nNow that we are done with the backend, lets add some frontend code. Create a `public` directory in the root directory of your project. In this directory create an `index.html` file. This is where we will add most of the frontend magic.\n\nBecause we want to keep things simple, we will include the Vue.js and jQuery code in the `index.html` file. Open the file and paste the following HTML code into it:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\"\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003ctitle\u003eA GO Voting Poll Application With Pusher \u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"msg\" style=\"display: none; padding: 1em; position: fixed; margin: 0px 5px;\"\u003e\u003c/div\u003e\n        \u003cdiv id=\"app\" class=\"container\"\u003e\n            \u003cdiv class=\"row\" style=\"margin: 1em 0em\" v-for=\"(poll, index) in polls\"\u003e\n            \u003cdiv class=\"card col-md-4\" style=\"margin: 20px auto; width: 25rem; background: rgb(93, 95, 104)\"\u003e\n                \u003cimg class=\"card-img-top\" :src=\"poll.src\" alt=\"Card image\"\u003e\n                \u003cdiv class=\"card-body\" \u003e\n                  \u003cp class=\"card-text text-center\" style=\"font-size: 1.5em; color: white; font-weight: bold\"\u003e {{ poll.topic }} as the best JS framework \u003c/p\u003e\n                    \u003cform\u003e\n                        \u003cdiv style=\"background: white; color: black; padding: 1em; border-radius: 5px;\"\u003e \u003cinput type=\"radio\" :value=\"poll.name\" :name=\"poll.name\" @change=\"upvote(index)\"\u003e Yes \u003cspan style=\"padding-left: 60%;\"\u003e\u003ci class=\"fas fa-thumbs-up\"\u003e\u003c/i\u003e ({{ poll.upvotes }}) \u003c/span\u003e\u003c/div\u003e\n                        \u003chr\u003e\n                        \u003cdiv style=\"background: white; color: black; padding: 1em; border-radius: 5px;\"\u003e \u003cinput type=\"radio\" :value=\"poll.name\" :name=\"poll.name\" @change=\"downvote(index)\" \u003e No \u003cspan style=\"padding-left: 60%;\"\u003e\u003ci class=\"fas fa-thumbs-down\"\u003e\u003c/i\u003e ({{ poll.downvotes }}) \u003c/span\u003e\u003c/div\u003e\n                    \u003c/form\u003e\n                    \u003cbutton class=\"btn btn-block\" style=\"margin: 1em 0; background: #1bff8b; cursor: pointer; font-weight: bold\" v-on:click=\"UpdatePoll(index)\"\u003e Vote \u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNext in the same file, paste the following code before the closing `body` tag of the HTML:\n\n``` javascript\n    \u003cscript\u003e\n    var app = new Vue({\n        el: '#app',\n        data: {\n            polls: [],\n            click: [],\n        },\n        created: function () {\n            axios.get('/polls')\n                .then(res =\u003e this.polls = res.data.items ? res.data.items : [])\n                .catch(e =\u003e this.failed('Unsuccesful'))\n        },\n        methods: {\n            upvote: function (n) {\n                if (this.click[n] == true) {\n                    this.polls[n].downvotes -= 1;\n                    this.polls[n].upvotes += 1;\n                } else {\n                    this.polls[n].upvotes += 1;\n                    this.click[n] = true;\n                }\n            },\n            downvote: function (n) {\n                if (this.click[n] == true) {\n                    this.polls[n].upvotes -= 1;\n                    this.polls[n].downvotes += 1;\n                } else {\n                    this.polls[n].downvotes += 1;\n                    this.click[n] = true;\n                }\n            },\n            UpdatePoll: function (index) {\n                let targetPoll = index + 1;\n                axios.put('/poll/' + targetPoll, this.polls[index])\n                    .then(res =\u003e this.approved('Successful'))\n                    .catch(e =\u003e this.failed('Unsuccesful'))\n            },\n            approved: function (data) {\n                $(\"#msg\").css({\n                    \"background-color\": \"rgb(94, 248, 94)\",\n                    \"border-radius\": \"20px\"\n                });\n                $('#msg').html(data).fadeIn('slow');\n                $('#msg').delay(3000).fadeOut('slow');\n            },\n            failed: function (data) {\n                $(\"#msg\").css({ \"background-color\": \"rgb(248, 66, 66)\", \"border-radius\": \"20px\" });\n                $('#msg').html(data).fadeIn('slow');\n                $('#msg').delay(3000).fadeOut('slow');\n            }\n        }\n    })\n    \u003c/script\u003e\n```\n\nAbove we have our Vue code. We added the `created()` life cycle hook so that [Axios](https://www.npmjs.com/package/axios) can make a `GET` request to the backend API.\n\nWe’ve also defined two functions to keep track of the clicks on `upvotes` or `downvotes` to any members of the poll. These functions call another function, `UpdatePoll`, which takes the index of the affected poll member as argument and makes a PUT request to the backend API for an update.\n\nLastly, we used jQuery to display matching `divs`  depending on if the update request was successful or unsuccessful.\n\nHere’s a display of the application at the current level:\n\n![voting-app-go-stage-1](//images.ctfassets.net/1es3ne0caaid/3E8smWapTOSuska6mm0mgw/7e961cac0db5b12ec2a0994c9deaaa11/voting-app-go-stage-1.png)\n\nNext, head over to [Pusher](https://pusher.com), you can [create a free account](https://pusher.com/signup?plan=sandbox) if you don’t already have one. On the [dashboard](https://dashboard.pusher.com/), create a new app and copy out the app credentials (App ID, Key, Secret, and Cluster). We will use these credentials shortly.\n\n### Sending realtime data from the backend\n\nTo make sure our application is realtime, our backend must trigger an event when the poll is voted on. \n\nTo do this let’s pull in the [Pusher Go library](https://github.com/pusher/pusher-http-go), which we will use to trigger events. Run the command below to pull in the package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nIn the `models.go` file, let’s import the Pusher Go library:\n \n``` go\n    package models\n    \n    import (\n        // [...]\n    \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n \nThen initialize the Pusher client. In the same file before the type definitions paste in the following:\n\n``` go\n    // [...]\n    \n    var client = pusher.Client{\n            AppId:   \"PUSHER_APP_ID\",\n            Key:     \"PUSHER_APP_KEY\",\n            Secret:  \"PUSHER_APP_SECRET\",\n            Cluster: \"PUSHER_APP_CLUSTER\",\n            Secure:  true,\n    }\n    \n    // [...]\n```\n\nHere, we have initialized the Pusher client using the credentials from our earlier created app.\n\n\u003e ⚠️  Replace `PUSHER_*`  keys with your app credentials.\n\nNext, we will use our Pusher client to trigger an event, which will include the updates on the specific row in the database to be displayed as an update to the votes in our view. We will do this in the `UpdatePoll` method, which updates the state of `upvotes` and `downvotes` in the database.\n\nReplace the `UpdatePoll` function with the following code:\n\n``` go\n    func UpdatePoll(db *sql.DB, index int, name string, upvotes int, downvotes int) (int64, error) {\n        sql := \"UPDATE polls SET (upvotes, downvotes) = (?, ?) WHERE id = ?\"\n    \n        stmt, err := db.Prepare(sql)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        defer stmt.Close()\n    \n        result, err2 := stmt.Exec(upvotes, downvotes, index)\n    \n        if err2 != nil {\n            panic(err2)\n        }\n    \n        pollUpdate := Poll{\n            ID:        index,\n            Name:      name,\n            Upvotes:   upvotes,\n            Downvotes: downvotes,\n        }\n    \n        client.Trigger(\"poll-channel\", \"poll-update\", pollUpdate)\n        return result.RowsAffected()\n    }\n```\n\nAbove, we create a `pollUpdate` object that holds the data for the most recent update to a row in the `polls` table. This `pollUpdate` object has all the data required for a realtime update on the client-side of our application, so will be passed to Pusher for transmission.\n\n### Displaying data in realtime on the client\nTo display the realtime updates on votes, we will use the Pusher JavaScript client. Open your `index.html` file and include the Pusher JavaScript library inside the `head` tag like this:\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nNext, we want to go to the `created()` method and create a Pusher instance using our app’s credentials:\n\n``` go\n    created: function() {\n        const pusher = new Pusher('PUSHER_APP_KEY', {\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n        \n        // [...]\n    }\n```\n\n\u003e ⚠️  Replace `PUSHER_APP_*` with values from your applications credentials.\n\nNext, let’s subscribe to the `poll-channel` and listen for the `poll-update` event, where our votes updates will be transmitted. Right after the code we added above, paste the following:\n\n``` go\n    const channel = pusher.subscribe('poll-channel');\n    \n    channel.bind('poll-update', data =\u003e {\n        this.polls[data.id - 1].upvotes = data.upvotes;\n        this.polls[data.id - 1].downvotes = data.downvotes;\n    });\n```\n\n\u003e **Note**:  We are subtracting from the `polls` array index because we need it to match the data received from Pusher. JavaScript arrays begin their index at 0, while SQL id starts at 1.  \n\nNow we can build our application and see that the realtime functionality in action.\n\n```\n    $ go run poll.go\n```\n\nOnce the application is running, we can point our browser to this address [http://localhost:9000](http://localhost:9000/)\n\n![voting-app-go-demo-1](//images.ctfassets.net/1es3ne0caaid/5ZJDwcs6Zig28MsWIoqoMM/7b1fed4d80b0e15f596adde3027bcc9c/voting-app-go-demo-1.gif)\n\n## Conclusion\n\nIn this article, we were able to trigger realtime updates on new votes and demonstrate how Pusher works with Go applications. We also learnt, on an unrelated note, how to consume API’s using Vue.js.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/realtime-poll-go-pusher).","metaTitle":"Build a voting application with Go and Vue.js","metaDescription":"This short tutorial will show you how to build a simple web app with Go and Vue.js. You will create a polling app. Users will be able to vote on their favorite JavaScript frameworks, and see responses update instantly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"66SrBNJDiMuUoCoWG2626Y","type":"Entry","createdAt":"2018-05-28T11:19:00.399Z","updatedAt":"2018-05-28T11:19:00.399Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a collaborative painting app using Vue.js","url":"collaborative-painting-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/vue-paintapp","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-05-27","description":"Build a collaborative painting app using Vue.js. Two users can work together on one drawing, seeing each other's changes update instantly.","prerequisite":"Ensure you have Node 6+ installed. A basic understanding of Node and Vue will be helpful.","content":"Today, we’ll be creating a realtime paint application. Using our application, users can easily collaborate while using the application and receive changes in realtime. We’ll be using Pusher’s pub/sub pattern to get realtime updates and Vue.js for creating the user interface.\n\nTo follow this tutorial a basic understanding of Vue and Node.js is required. Please ensure that you have at least Node version 6\u003e= installed before you begin.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Vue](https://vuejs.org)\n\nHere’s a screenshot of the final product:\n\n![paint-app-vue-preview](//images.ctfassets.net/1es3ne0caaid/3hXHKZdF2gMeCmMC04aE0S/9c05dff7291313e9d156646685fdaade/paint-app-vue-preview.png)\n\n## Initializing the application and installing project dependencies\n\nTo get started, we will use the [vue-cli](https://github.com/vuejs/vue-cli/tree/dev) to bootstrap our application. First, we’ll install the CLI by running `npm install -g @vue/cli` in a terminal.\n\nTo create a Vuejs project using the CLI, we’ll run the following command:\n\n```\n    vue create vue-paintapp\n```\n\nAfter running this command, you will be asked by the CLI to pick a preset. Please select the default preset.\n\n\u003e **Note:** the @vue/cli 3.0 is still in beta and should not be used in production.  \n \nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js uuid\n```\n\nStart the app dev server by running `npm run serve` in a terminal in the root folder of your project.\n\nA browser tab should open on http://localhost:8080. The screenshot below should be similar to what you see in your browser:\n\n![paint-app-vue-start-page](//images.ctfassets.net/1es3ne0caaid/OaF6f8rd8kMAck28Iyyy6/ef1c29fe20e4d5ff560b74f3244a850d/paint-app-vue-start-page.png)\n\n## Building the server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\nStart the server by running `node server` in a terminal inside the root folder of your project.\n\n### Draw route\n\nLet’s create a post route named `draw`, the frontend of the application will send a request to this route containing the mouse events needed to show the updates of a guest user. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/paint', (req, res) =\u003e {\n      pusher.trigger('painting', 'draw', req.body);\n      res.json(req.body);\n    });\n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`painting`), an event name (`draw`), and a payload.\n\n## Canvas directive\n\nWe’ll be creating and attaching a Vue [directive](https://vuejs.org/v2/guide/custom-directive.html) to the `canvas` element. Using the directive, we’ll listen for events on the host element and also bind attributes to it\n\nCreate a file called `canvas.directive.js` in the `src` folder of your project. Open the file and copy the code below into it:\n\n``` javascript\n    // canvas.directive.js\n    \n    import { v4 } from 'uuid';\n    \n    function inserted(el) {\n      const canvas = el;\n      const ctx = canvas.getContext('2d');\n      \n      canvas.width = 1000;\n      canvas.height = 800;\n      \n      ctx.lineJoin = 'round';\n      ctx.lineCap = 'round';\n      ctx.lineWidth = 5;\n      \n      let prevPos = { offsetX: 0, offsetY: 0 };\n      let line = [];\n      let isPainting = false;\n      const userId = v4();\n      const USER_STROKE = 'red';\n      const GUEST_STROKE = 'greenyellow';\n      \n      function handleMouseDown(e) {\n        const { offsetX, offsetY } = e;\n        isPainting = true;\n        prevPos = { offsetX, offsetY };\n      }\n      function endPaintEvent() {\n        if (isPainting) {\n          isPainting = false;\n          sendPaintData();\n        }\n      }\n      function handleMouseMove(e) {\n        if (isPainting) {\n          const { offsetX, offsetY } = e;\n          const offSetData = { offsetX, offsetY };\n          const positionInfo = {\n            start: { ...prevPos },\n            stop: { ...offSetData },\n          };\n          line = line.concat(positionInfo);\n          paint(prevPos, offSetData, USER_STROKE);\n        }\n      }\n      function sendPaintData() {\n        const body = {\n          line,\n          userId,\n        };\n        fetch('http://localhost:4000/paint', {\n          method: 'post',\n          body: JSON.stringify(body),\n          headers: {\n            'content-type': 'application/json',\n          },\n        }).then(() =\u003e (line = []));\n      }\n      function paint(prevPosition, currPosition, strokeStyle) {\n        const { offsetX, offsetY } = currPosition;\n        const { offsetX: x, offsetY: y } = prevPosition;\n        ctx.beginPath();\n        ctx.strokeStyle = strokeStyle;\n        ctx.moveTo(x, y);\n        ctx.lineTo(offsetX, offsetY);\n        ctx.stroke();\n        prevPos = { offsetX, offsetY };\n      }\n      canvas.addEventListener('mousedown', handleMouseDown);\n      canvas.addEventListener('mousemove', handleMouseMove);\n      canvas.addEventListener('mouseup', endPaintEvent);\n      canvas.addEventListener('mouseleave', endPaintEvent);\n    }\n    export default {\n      inserted,\n    };\n```    \n\n\n\u003e **Note:**  we use the `paint` event to describe the duration from a mouse down event to a mouse up or mouse leave event.\n\nSo here, we created a directive that we will be registering locally in our `App` component. Also, you’ll notice that we exported the `inserted` function as a property in an object. The `inserted` function is a hook for when the element has been inserted into the parent node.\n\nThere’s quite a bit going on in the file above. Let’s walk through it and explain each step.\n\nWe’ve set up event listeners on the host element to listen for mouse events. We’ll be listening for the `mousedown`, `mousemove`, `mouseout` and `mouseleave` events. Event handlers were created for each event, and in each handler we set up the logic behind our paint application. \n\n-  In the `onMouseDown` handler, we get the `offsetX`  and `offsetY` properties of the event. The `isPainting` variable is set to true and then we store the offset properties in the `prevPos` object.\n\n- The `onMouseMove` method is where the magic happens. Here we check if `isPainting` is set to true, then we create an `offsetData` object to hold the current `offsetX` and `offsetY` properties of the current event. We then create a `positionInfo` object containing the previous and current positions of the mouse. Then append the `positionData` object to the `line` array. Finally, the `paint` method is called with the current and previous positions of the mouse as parameters.\n\n- The `mouseup` and `mouseleave` events both use one handler. The `endPaintEvent` method checks if the user is currently painting. If true, the `isPainting` property is set to false to prevent the user from painting until the next `mousedown` event is triggered. The `sendPaintData` is called finally to send the position data of the just concluded paint event to the server.\n\n- `sendPaintData`:  this method sends a post request to the server containing the `userId` and the `line` array as the request body. The line array is then reset to an empty array after the request is complete. We use the browser’s native [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) API for making network requests.\n\n- In the `paint` method, three parameters are required to complete a paint event. The previous position of the mouse, current position and the stroke style. We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the properties of each parameter. The `ctx.moveTo` function takes the x and y properties of the previous position. A line is drawn from the previous position to the current mouse position using the `ctx.lineTo` function and  `ctx.stroke` visualizes the line.\n\nNow that the directive has been set up, let’s import the directive and register it locally in the `App.vue`  file. Update the `App.vue` file as so:\n\n``` html\n    // /src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"main\"\u003e\n          \u003cdiv class=\"color-guide\"\u003e\n            \u003ch5\u003eColor Guide\u003c/h5\u003e\n            \u003cdiv class=\"user user\"\u003eUser\u003c/div\u003e\n            \u003cdiv class=\"user guest\"\u003eGuest\u003c/div\u003e\n          \u003c/div\u003e\n          \u003c!-- Bind the custom directive to the canvas element --\u003e\n          \u003ccanvas v-canvas\u003e\u003c/canvas\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import canvas from './canvas.directive.js';\n    export default {\n      name: 'app',\n      // Here we register our custom directive\n      directives: {\n        canvas,\n      },\n    };\n    \u003c/script\u003e\n    \u003cstyle\u003e\n    #app {\n      font-family: 'Avenir', Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n      margin-top: 60px;\n    }\n    canvas {\n      background: navy;\n    }\n    .main {\n      display: flex;\n      justify-content: center;\n    }\n    .color-guide {\n      margin: 20px 40px;\n    }\n    h5 {\n      margin-bottom: 10px;\n    }\n    .user {\n      padding: 7px 15px;\n      border-radius: 4px;\n      color: white;\n      font-size: 13px;\n      font-weight: bold;\n      background: red;\n      margin: 10px 0;\n    }\n    .guest {\n      background: greenyellow;\n      color: black;\n    }\n    \u003c/style\u003e\n```\n\nIn our template, we bound the custom directive to the `canvas` element. We imported and registered the directive in the `App` component. We added a color guide so users can tell their drawing apart. Finally, we added styles for the new elements added. \n\nRun `npm run serve`  in your terminal and visit http://localhost:8080 to have a look at the application. It should be similar to the screenshot below:\n\n![paint-app-vue-stage-1](//images.ctfassets.net/1es3ne0caaid/10sDQ2hxFcIOSimsy2oQ4S/dd0a0fbb83cfbffc4ca00e91683d5b2a/paint-app-vue-stage-1.png)\n\n## Introducing Pusher and realtime collaboration\n\nImport the Pusher library into the `canvas.directive.j``s` file. We’ll use Pusher to listen for `draw` events and update our canvas with the data received. Open the `canvas.directive.js` file, import the Pusher library, initialize it and listen for events:\n\n``` javascript\n    // /src/canvas.directive.js\n    import { v4 } from 'uuid';\n    import Pusher from 'pusher-js';\n    \n    function inserted(el) {\n      ...\n      ctx.lineCap = 'round';\n      ctx.lineWidth = 5;\n      \n      const pusher = new Pusher('PUSHER_KEY', {\n        cluster: 'eu',\n      });\n      const channel = pusher.subscribe('painting');\n      \n      ...\n      \n      canvas.addEventListener('mouseup', endPaintEvent);\n      canvas.addEventListener('mouseleave', endPaintEvent);\n      channel.bind('draw', (data) =\u003e {\n        const { userId: id, line } = data;\n        if (userId !== id) {\n          line.forEach((position) =\u003e {\n            paint(position.start, position.stop, GUEST_STROKE);\n          });\n        }\n      });\n      \n      ...  \n```\n\n- First, we initialize Pusher using the `appKey` provided during creation of the channels ap. \n- Below the event listeners, we subscribe to the `painting` channel and listen for `draw` events. In the callback, we get the `userId` and `line` properties in the `data` object returned; using object destructuring, the `userId` property of the `data` returned was renamed as `id`. \n- Finally, check if the `draw`  event came from a different user by comparing the ids. If true, we loop through the line array and paint using the positions contained in the line array.\n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\n\n## Test application\n\nOpen two browsers side by side to observe the realtime functionality of the application. Drawings made on one browser should show up on the other with different stroke colors. Here’s a screenshot of two browsers side by side using the application:\n\n\u003e **Note:** Ensure both the server and the dev server are up by running `npm run serve` and `node server` on separate terminal sessions.\n\n![paint-app-vue-preview](//images.ctfassets.net/1es3ne0caaid/2nOLiZczyAQaSqSkoCGiSm/e146f487d238e8781c797d67eedecd44/paint-app-vue-preview.png)\n \n\n## Conclusion\n\nWe’ve created a collaborative drawing application using Vue.js, using Pusher to provide realtime functionality. You can extend the application to show each user’s mouse position. It’ll be fun to see where each person is at any point. The source code for this tutorial is available on [GitHub](https://github.com/HackAfro/vue-paintapp) here.","metaTitle":"Build a collaborative painting app using Vue.js","metaDescription":"This short tutorial shows how to create a social painting app using Vue.js. Two users, drawing on HTML5 canvas, can work together on one image."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3mklkPP5gcQgqo8YOcu4ow","type":"Entry","createdAt":"2018-05-24T08:07:42.630Z","updatedAt":"2018-05-24T08:07:42.630Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geofencing web app using Nest.js and the Google Maps API","url":"geofencing-nestjs-googlemaps","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/nest-pusher-geofencing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-05-23","description":"Build a web app using Nest.js and the Google Maps API. The app allows you to select a user and center on their location, showing the positioning of other users around them.","prerequisite":"You will need Node and npm installed on your machine. A basic knowledge of Node.js and TypeScript will be helpful.","content":"## Introduction\n\nThis tutorial will walk you through the process of implementing a basic realtime location-aware application with geofencing updates. Once we are done, you will have gathered enough knowledge to try out more creative ways on how to make use of virtual boundaries.\n\n Geofencing as a technique, is a virtual perimeter (also referred to as geofences) around a physical location. This can allow you to provide useful experiences or carry out specific actions when users are within or outside the specified vicinity.\n \n To keep our application simple, we will have a list of users with random locations. In a real-world application, you would need to get the current location of a user. Fortunately a tool like [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) is available for use on most browsers. \n \n A quick look at what we will be building in the tutorial: \n\n![nest-geofencing-preview](//images.ctfassets.net/1es3ne0caaid/3lcPbXJNdCG2OKaQQO8ygi/bca17aefb2d1b9f83fd66a6d5a6ce6f5/nest-geofencing-preview.png)\n\n In this application, we will randomly display a few people from our users list. Once a user is selected, we will set the location of the user as the center of the map and then show the locations of other users with markers. \n\n## Prerequisites\n\nA basic understanding of TypeScript and Node.js will help you get the best out of this tutorial. I assume that you already have Node and npm installed, if otherwise quickly check [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) for further instructions and installation steps. \n\nHere is a quick overview of the core technologies that we will be using in this post. \n\n- [Nest.js](https://nestjs.com/): a progressive framework for building efficient and scalable server-side applications; built to take the advantage of modern JavaScript but still preserves compatibility with pure JavaScript. \n\n- [Pusher](https://pusher.com/): a Node.js client to interact with the Pusher REST API\n\n- [GoogleMaps API](https://developers.google.com/maps/documentation/): GoogleMaps JavaScript API provides utilities that make it possible to add interactive and customizable maps to web apps.\n\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and Node.js environment.\n\n- [Vue.js](https://vuejs.org/): Vue is a progressive JavaScript frontend framework for building web applications.\n\n\n## Setting up the application\n\nThe simplest way to set up a Nest.js application is to install the starter project on [GitHub](https://github.com/nestjs/typescript-starter) using Git. To do this, let’s run a command that will clone the starter repository into a new project folder named `nest-geofencing` on your machine. Open up your terminal or command prompt and run the command below:\n\n```\n    $ git clone https://github.com/nestjs/typescript-starter.git nest-geofencing\n```\nGo ahead and change directory into the newly created folder and install all the dependencies for the project.\n\n```\n    // change directory\n    cd nest-geofencing\n    \n    // install dependencies\n    npm install\n```\n\n## Running application\n\nStart the application with:\n\n```\n    npm start\n```\n\nThe command above will start the application on the default port used by Nest.js. Open your browser and navigate to http://localhost:3000. You should see a page with a welcome message.\n\n![nest-hello-world](//images.ctfassets.net/1es3ne0caaid/45ET2cOwzYa8MUO6mIwq2Q/c9511e3c4c76117982d0bfadfd43c652/nest-hello-world.png)\n\n## Installing server dependencies\n\nRun the command below to install the server dependencies required for this project.\n\n```\n    npm install ejs body-parser pusher\n```\n\n- **ejs**: this is a simple templating language for generating HTML markup with plain JavaScript.\n\n\n- **Body-parser**: a middleware used for extracting the entire body portion of an incoming request stream and exposing it on `req.body`.\n\n\n- **Pusher**: a Node.js client to interact with the Pusher REST API\n\n\n## Google Maps application \n\nTo use the Maps JavaScript API, you must register your app project on the Google API Console and get a Google API key which you can add to your app. Follow this [quick guide to register your Maps app](https://developers.google.com/maps/documentation/javascript/get-api-key) and get your API credentials.\n\n## Setting up a Pusher application\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![nest-pusher-signup](//images.ctfassets.net/1es3ne0caaid/43DKutJFOw86I2cCeMEGMG/246afa094f08c930af91a38c7b1a65fb/nest-phone-pusher-1.png)   \n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![nest-pusher-new-app](//images.ctfassets.net/1es3ne0caaid/6m8JvB3xxC444SmaIQ824i/5e5ea5d799a6717ca6c74324ac5a6576/nest-phone-pusher-2.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with, for a better setup experience:\n\n![nest-pusher-app-config](//images.ctfassets.net/1es3ne0caaid/4UPXLqxBWMc0mqUuMo462A/1f9779e509f53259bbd32cf0d244ef52/nest-phone-pusher-3.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![nest-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1TPXcBKK9ua4Q2OuqSI0IS/5dd742674348e92defd7ecc4aa320755/nest-phone-pusher-4.png)\n\n## Configure the entry point of the application\n\nNest.js uses the Express library and therefore, favors the popular MVC pattern.\n\nTo set this up, open up the `main.ts` file and update it with the content below:\n\n``` typescript\n    // ./src/main.ts\n    \n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    \n    import * as bodyParser from 'body-parser';\n    import * as express from 'express';\n    import * as path from 'path';\n    \n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      app.use(express.static(path.join(__dirname, 'public')));\n       app.set('views', __dirname + '/views');\n       // set ejs as the view engine\n       app.set('view engine', 'ejs');\n      await app.listen(3000);\n    }\n    bootstrap();\n```\n\nThis is the entry point of the application and necessary for bootstrapping Nest.js apps. I have included the Express module, path and set up ejs as the view engine for the application.\n\n## Building the homepage\n\nAs configured within `main.ts` file, the `views` folder will hold all the templates for this application. Now let’s go ahead and create it within the `src` folder. Once you are done, create a new file named `index.ejs` right inside the newly created `views` folder and update the content with:\n\n``` html\n    // ./src/views/index.ejs\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"/style.css\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js\"\u003e\u003c/script\u003e\n        \u003ctitle\u003eGeofencing Nest.js Demo\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \n        \u003cdiv id=\"app\"\u003e\n            \n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-3\"\u003e\n                    \u003cdiv class=\"user-wrapper\"\u003e\n                        \u003ch3\u003e \u003cb\u003eSelect a user\u003c/b\u003e \u003c/h3\u003e\n                        \u003cp\u003eGet the current location of a user and others (2km away)\u003c/p\u003e\n                        \u003cdiv v-for=\"user in users\" style=\"margin: 10px;\"\u003e\n                            \u003cbutton class=\"btn btn-default\" v-on:click=\"getUserLocation(user.position)\"\u003e{{ user.name}}\u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"load-more\"\u003e\n                        \u003cbutton class=\"btn btn-success\" v-on:click=\"loadMoreUsers\"\u003e Load more users \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"col-md-9\" style=\"background: grey\"\u003e\n                    \u003cdiv id=\"map\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n            \n        \u003c/div\u003e\n        \n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAP_KEY\u0026libraries=geometry\"\u003e\n        \u003c/script\u003e\n        \u003cscript src=\"/main.js\"\u003e\u003c/script\u003e\n        \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nHere, we are simply building a layout for the geofencing application. \n\nFirst, we included a link to the Bootstrap CDN file to add some default styling and layout to our application. We also added a custom stylesheet for further styling. We will create this stylesheet later in this tutorial. Also included in a `\u003cscript\u003e` tag just before the page title is a CDN file for [Vue.js](https://vuejs.org/). This is to ensure that Vue.js is loaded immediately the `index.ejs` file is rendered.\n\nFurthermore, we included a button with the caption **Load more users.** Once this button is clicked we will call a method named `loadMoreUsers()` to fetch more random users. This method will be created later in the tutorial.\n\nWe included a CDN file each for `Axios` and `Pusher`. To load the Maps JavaScript API, we included a `script` tag and added a URL which links to the location of a JavaScript file that loads all of the symbols and definitions required as the `src`. \n\n\n\u003e 💡 Note: ensure you replace the `YOUR_GOOGLE_MAP_KEY` string with your actual GoogleMaps API key\n\nFinally, we then proceeded to add a custom script file named `main.js`. To set up this file, go ahead and create a `public`  folder within the `src` folder in the application and create the `main.js` file within it.\n\n\n## Styling\n\nTo set up this stylesheet, locate the `public` folder and create a new file named `style.css` within it. Next, open the file and paste the code below:\n\n``` css\n    // ./src/public/style.css\n    \n    html, body {\n        background-color: #f0f2fa;\n        font-family: \"PT Sans\", \"Helvetica Neue\", \"Helvetica\", \"Roboto\", \"Arial\", sans-serif;\n        color: #555f77;\n        -webkit-font-smoothing: antialiased;\n      }\n      #map {\n        height: 600px;\n        width: 100%\n      }\n      .user-wrapper {\n        padding: 20px;\n        margin: 20px;\n      }\n      .load-more {\n        padding: 20px;\n        margin: 20px;\n      }\n```\n\n## Building the home route\n\nNest uses a controller metadata `@Controller` to map routes to a specific controller. The starter project already contains a controller by default. We will make use of this in order to render the homepage for this app. Open `./src/app.controller.ts` and edit as shown below:\n\n``` typescript\n    // ./src/app.controller.ts\n    \n    import { Get, Controller, Res } from '@nestjs/common';\n    @Controller()\n    export class AppController {\n      @Get()\n      root(@Res() res) {\n        res.render('index');\n      }\n    }\n```\n\nThis controller will ensure that Nest.js maps every `/` route to the `index.ejs` file.\n\n## Creating a Vue instance\n\nEarlier, we created `main.js` file within the `public` folder and included it on our homepage. We will create Vue instance within this file and bind it to a `div` element with an id of `#app`. We will also declare an initial value for `users` as an empty array inside the `data` options:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            users: []\n        },\n        ...\n    }) \n```\n\nThis will get Vue registered to manipulate the DOM in our application.\n\n## Create the users controller\n\nTo further organize items, we will create a new folder named `users` in the `src` folder and create a new file called `users.controller.ts` within it. Paste following code in the newly created file: \n\n``` typescript\n    // ./src/users/users.controller.ts\n    \n    import { Get, Controller, Res, HttpStatus, Body, Post } from '@nestjs/common';\n    import { UsersService } from 'users/users.service';\n    \n    @Controller('users')\n    export class UsersController {\n        constructor( private userService: UsersService) {}\n        \n        @Get()\n        getUser(@Res() res) {\n          let users =  this.userService.getAllUsers();\n          res.send(users);\n        }\n        @Post()\n        getUsersLocation(@Res() res, @Body() user) {\n          this.userService.postLocation(user);\n          res.status(HttpStatus.OK).send(\"User's location fetched successfully\");\n        }\n    } \n```\n\nThis controller contains two methods:\n\n- `getUser()`: this method will fetch the list of users and send it to the view.\n\n- `getUsersLocation()`: this method receives the user object as a form parameter and returns a successful HttpStatus with a success message.\n\nAs shown above, we imported `UsersService` and injected it into the controller through the constructor. As recommended by Nest, a controller should handle only HTTP requests and abstract any complex logic to a service. We’ll create this service in the next section.\n\n## Set up the users service\n\nWithin the `UsersController`, we imported the `UsersService` and used it to fetch all users and also post the location of the selected user. Let’s create this service. Go to the `users` folder and create a new file named `users.service.ts` within it and then paste the code below into the newly created file:\n\n``` typescript\n    // ./src/users/users.service.ts\n    \n    import { Component } from '@nestjs/common';\n    const people = require('./users');\n    \n    @Component()\n    export class UsersService {    \n        \n        getAllUsers(){        \n            return people.map( (person, index) =\u003e ({\n                name: person.name,\n                position: person.position,\n            }));\n        }\n       \n        intializePusher() {\n            const Pusher = require('pusher');\n            const pusher = new Pusher({\n                appId: 'YOUR_APP_ID',\n                key: 'YOUR_API_KEY',\n                secret: 'YOUR_SECRET_KEY',\n                cluster: 'CLUSTER',\n                encrypted: true\n            });\n            \n            return pusher;\n        }\n        \n        postLocation(user) {\n            const Pusher = require('pusher');\n            const {lat, lng} = user.position\n            \n            people.forEach( (person, index) =\u003e {\n                if (person.position.lat === user.position.lat) {\n                    people[index] = { ...person, position: { lat, lng } };\n                    return this.intializePusher().trigger('map-geofencing', 'location', {person: people[index], people})\n                }\n            })\n        }\n    }\n```\n\nLet’s understand what is happening in this file:\n\nFirst, we imported the list of users as `people` from a file named `users.js`. This file holds the list of fake users with a specified location for our application. You can download this list [here](https://github.com/yemiwebby/nest-geofencing/blob/master/src/users/users.js) on GitHub. Once you are done, locate the `users` folder and save this file within it as `users.js`.\n\nNext, we created a `getAllUsers()` method that returns the name and specified positions of users by using the JavaScript `map()` method. \n\nWe also proceeded to initialize Pusher with the credentials from the dashboard. Don’t forget to replace `YOUR_APP_ID`, `YOUR_API_KEY`, `YOUR_SECRET_KEY` and `CLUSTER` with the right credentials obtained from your dashboard.\n\nThe `postLocation()` method accepts the user object posted from the frontend of the application as a parameter. In addition, it was also used to trigger an event named `location` with the selected user and people as a payload on a `map-geofencing` channel.\n\n## Register the component and the controller\n\nAt the moment, our application doesn’t recognize the newly created controller and service. Let’s change this by editing our module file `app.module.ts`; putting the controller into the `controller` array and service into `components` array of the `@Module()` decorator respectively.\n\n``` typescript\n    // ./src/app.module.ts\n    \n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    import { UsersService } from 'users/users.service';\n    import { UsersController } from 'users/users.controller';\n    @Module({\n      imports: [],\n      controllers: [AppController, UsersController],\n      providers: [UsersService],\n    })\n    export class AppModule {}\n```\n\n## Displaying random users\n\nAs mentioned earlier, we will be displaying users from the mock data in our application. Open `./src/public/main.js` file and update it with the code below:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            users: [],\n        },\n        mounted() {\n            this.getUser();\n        },\n        methods: {\n            getUser() {\n                axios.get('/users').then(response =\u003e {\n                    this.users = this.getRandomUsers(response.data, 6)\n                });\n                \n            },\n            getRandomUsers(people, number) {\n                const selected = [];\n                for ( var i = 0; i \u003c number; i++) {\n                    const index = Math.floor(Math.random() * people.length);\n                    if (selected.includes(index))  continue; \n                    selected.push(index);\n                }\n                const selectedUsers = selected.map(index =\u003e {\n                    const users = { name, position } = people[index];\n                    return users;                \n                });\n                return selectedUsers;\n            }\n        }\n    })\n```\n\nHere, we created a method named `getUser()` with the purpose of fetching all users from the backend of our application. Immediately after this, we then proceeded to create a new method called `getRandomUsers()`, for getting random users from the response. This method takes in two arguments which are the total number of users returned and the maximum random number of users we wish to display on the homepage of our application.\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000.](http://localhost:3000.) You should see:\n\n![nest-geofencing-stage-1](//images.ctfassets.net/1es3ne0caaid/4S8WOClduUauu4uEGuu88A/89575617fcbe16c1d72ce2ec2509c05f/nest-geofencing-stage-1.png)\n\nThis is what the page will look like at the moment. On page mount, we displayed the list of random users and an empty map. Let’s add functionality to display map.\n\n## Getting the location of a user and initializing map\n\nNext, we will display the location of a selected user on the GoogleMap using the coordinate specified for each of the users in `./src/users/users.js` file. Go ahead and open `main.js` file and update it with:\n\n``` javascript\n    // ./src/public/main.js\n    \n    const USER_MARKER = 'http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1526555652/user_my7yzc.png';\n    const OFFLINE_MARKER = 'http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1526555651/offline_elrlvi.png';\n    const ONLINE_MARKER = 'http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1526555651/online_bpf5ch.png'\n    const RADIUS = 2000;\n    new Vue({\n        el: '#app',\n        data: {\n            users: [],\n        },\n        created() {\n            let pusher = new Pusher('YOUR_API_KEY', {\n                cluster: 'CLUSTER',\n                encrypted: true\n            });\n            \n            const channel = pusher.subscribe('map-geofencing');\n            channel.bind('location', data =\u003e {\n                this.initializeMap(data.person.position, data.people);\n            });\n        },\n        mounted() {\n            this.getUser();\n        },\n        methods: {\n            getUser() {\n                ...\n            },\n            getRandomUsers(people, number) {\n               ...\n            },\n            getUserLocation(position) {\n                const user = { position }\n                axios.post('/users', user).then(response =\u003e {\n                    console.log(response);\n                }) \n            },\n            initializeMap(position, people) {\n                const referencePoint = {lat:position.lat, lng:position.lng};\n                this.map = new google.maps.Map(document.getElementById('map'), {\n                    center: referencePoint,\n                    zoom: 13\n                }) \n                for ( var i = 0; i \u003c people.length; i++) {\n                    if (this.withinRegion(referencePoint, people[i], RADIUS)){\n                       \n                        this.addMarker(people[i], ONLINE_MARKER);\n                    } else {\n                       this.addMarker(people[i], OFFLINE_MARKER);\n                    }\n                }\n                this.addCircle(position);\n            },\n            addMarker(props, marker) {\n                this.marker = new google.maps.Marker({\n                    position: props.position,\n                    map: this.map,\n                    animation: google.maps.Animation.DROP,\n                    icon: marker\n                })\n            },\n            addCircle(position) {\n                this.circle = new google.maps.Circle({\n                    map: this.map,\n                    center: new google.maps.LatLng(position.lat, position.lng),\n                    radius: 2000,\n                    strokeColor: '#00ff00',\n                    fillColor: \"#484040bf\",\n                });\n            },\n            withinRegion(position, user, radius) {\n                const to = new google.maps.LatLng(user.position.lat, user.position.lng);\n                const from = new google.maps.LatLng(position.lat, position.lng);\n                const distance = google.maps.geometry.spherical.computeDistanceBetween(from, to);\n                return distance \u003c= radius;\n            }\n        }\n    })\n```\n\nWe added constants for `USER_MARKER`, `OFFLINE_MARKER`, `ONLINE_MARKER`, these markers will be used to indicate the location of a user on the map. The position of a user within a 2km radius from the center of the map will be indicated with `ONLINE_MARKER`  while others will be indicated with `OFFLINE_MARKER`. Also included is a constant for `RADIUS`, which represents the distance from the center of the map. \n\nNext, we established a connection to Pusher Channels using the `Key` and `cluster` obtained from our dashboard. We then proceeded to subscribe to the `map-geofencing` channel we created earlier and listened for an event `location`.  We then passed the payload from the `map-geofencing` channel to `initializeMap()` method. This is the method responsible for initializing the map. It accepts the `position`  of the selected user and the list of other users named  `people` as an argument.\n\nOnce any of the random users is selected, we used the method `getUserLocation()` to make an HTTP POST request to the `/users` endpoint, passing in a `user` object which contains the location of the user. \n\nIn the `initializeMap()` method, we created a variable `referencePoint`, which represents the location of the selected user and set it as the center of the map. We then went ahead to instantiate GoogleMaps and attach it to a `\u003cdiv\u003e` HTML element with an id of `map`. This is where our map indicating the locations of users will be mounted. Next, we looped through the list of other users and added markers based on the condition used to check if they are within the region 2km away from the location of the selected user at the center of the map. \n\nFinally, we also created three different methods, which are:\n\n1.  `addMarker()`: this method was used to add markers to the map based on the location of a user.\n\n2. `addCirlce()`: used to add a circle indicating a 2km radius from the center of the map.\n\n3. `withinRegion()`: created to check if a user is within the region from the center of the map.\n\n## Load more users\n\nLastly, to load more random users, we will create the `loadMoreUsers()` method: \n\n``` javascript\n    // ./src/public/main.js\n    \n    ...\n    new Vue({\n        el: '#app',\n        data: {\n            users: [],\n        },\n        created() {\n           ...\n        },\n        mounted() {\n            this.getUser();\n        },\n        methods: {\n            // other methods\n            ...\n            // load more users\n            loadMoreUsers() {\n                this.getUser();\n            }\n        }\n    })\n```\n\nThis method will call on the `getUser()` method and fetch random users.\n\n## Final result\n\nRestart the development server if it is currently running. Go ahead and navigate to  `[http://localhost:3000](http://localhost:3000.)` in your browser to test the application.\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zUFYnKL8r7w?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## Conclusion\n\nWe have successfully built a basic realtime application with geofencing updates. We used [GoogleMaps API](https://developers.google.com/maps/documentation/) for geolocation and [Pusher](https://pusher.com/) for the realtime functionality.\n\nWith access to the right technology such as the ones used in this tutorial, there is no limit to what you can build. I hope you found this tutorial helpful. Feel free to download the source code [here](https://github.com/yemiwebby/nest-pusher-geofencing) on GitHub. \n\n","metaTitle":"Build a geofencing web app using Nest.js and GoogleMaps","metaDescription":"This tutorial shows you how to create a web app featuring Google Maps and geofencing. Use Nest.js and the Google Maps API to allow app users to select a user and center on their location, showing the positioning of other users around them."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1msgjCo2j26csGuiUk66qe","type":"Entry","createdAt":"2018-05-14T12:39:59.711Z","updatedAt":"2018-05-14T12:39:59.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implementing desktop notifications in your Laravel app","url":"desktop-notifications-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/pusher-news-talk","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-05-11","description":"Use Laravel and Vue to build a news notification module, which will send a desktop notification to everyone on the website when a new post is published.","prerequisite":"You will need PHP and Laravel (5.4 or above) installed on your machine. You should have a working knowledge of PHP and JavaScript.","content":"Realtime notifications are now very common in modern web applications, as site owners want to keep users engaged and informed of happenings on their platform. Notifications are also a great way to build addiction, and make sure users keep coming back to your platform to see \"what's new\".\n\nWith [Laravel](laravel.com) and some [Pusher](http://pusher.com) magic, I will be demonstrating how to build a realtime app, with desktop notifications, utilising the [Notification API](https://developer.mozilla.org/en/docs/Web/API/notification).\n\n## Our application\n\nWe will build a simple News notification module which will alert everyone on a website when a new post is published. Ideally, this would be part of a larger app, but we will build it in isolation here to showcase our desktop notifications.\n\nAt the end of this tutorial, you will have learned how to:\n\n1. Broadcast events in Laravel, using Pusher\n2. Listen for events on channels, using Laravel Echo and Vue.js\n3. Use the Notification API to display desktop notifications\n \nTo follow along, you will need a working knowledge of PHP and JavaScript. Basic knowledge of Laravel and Vue.js are also needed. Laravel 5.4 and Vue.js 2.3 are used.\n\n## Introduction to Pusher\n\nPusher is a service that makes it super easy to add realtime functionality to web and mobile applications. We will be using it in our application, so sign up to a free account [here](https://pusher.com/signup), create an app, and copy out the app credentials (App ID, Key and Secret) from the “App Keys” section.\n\n## Setup and configuration\n\nFor starters, let us set up our app, and do the necessary configuration. We will call the app `news-talk`.\n\nTo create a new app with the [Laravel installer](https://laravel.com/docs/5.4/installation), run this command:\n\n``` \nlaravel new news-talk\n```\nThe next set of commands should be run in the app's root directory.\n\nInstalling the [Pusher PHP library](https://github.com/pusher/pusher-http-php):\n\n``` \ncomposer require pusher/pusher-php-server\n```\nInstalling the [Laravel Frontend](https://laravel.com/docs/5.4/frontend) Dependencies (these include Bootstrap, Axios, Vue.js and a couple of other things which are nice to have):\n\n``` \nnpm install\n```\nInstalling [Laravel Echo](https://laravel.com/docs/5.4/broadcasting#installing-laravel-echo) and [Pusher-js](https://github.com/pusher/pusher-js) which we will use to listen for broadcast events:\n\n``` \nnpm install -S laravel-echo pusher-js\n```\nNext, we will do some more minor configuration to let Laravel know we will be using Pusher to manage our broadcasts.\n\nEditing the `.env`:\n\n``` \n# ./.env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your_pusher_add_id\nPUSHER_APP_KEY=your_pusher_app_key\nPUSHER_APP_SECRET=your_pusher_app_secret\n```\nYou can edit some more optional configuration for Pusher in the `./config/broadcasting.php` file generated by Laravel. You can see other options [here](https://laravel.com/docs/5.4/broadcasting#driver-prerequisites).\n\n\u003e Note: If you created your app in a different cluster to the default `us-east-1`, you must configure the cluster option. It is optional if you chose the default option.\n\nFinally, we will configure Echo to use Pusher. We do that by uncommenting and editing the values at the bottom of `resources/assets/js/bootstrap.js`:\n\n``` javascript\n// ./resources/assets/js/bootstrap.js\n\nimport Echo from \"laravel-echo\"\n\n window.Echo = new Echo({\n     broadcaster: 'pusher',\n     key: 'your_pusher_key'\n});\n```\n## Building the backend\n\nLet's create a table for our posts. This is where data we create via our app will be persisted to. We will use a [Laravel migration](https://laravel.com/docs/5.4/migrations) file, and an [Eloquent model](https://laravel.com/docs/5.4/eloquent) for communication with the database.\n\nTo create a `Post` model run this command:\n\n``` \nphp artisan make:model Post -m -c\n```\nThe `-m` and `c` flags are for automatically generating the migration and controller files respectively.\n\nNext, we edit the generated migration file located in the `./database/migrations` folder. We adjust the `up` method to look like this:\n\n``` php\npublic function up() {\n  Schema::create('posts', function (Blueprint $table) {\n    $table-\u003eincrements('id');\n    $table-\u003estring('title');\n    $table-\u003etext('description');\n    $table-\u003etimestamps();\n  });\n}\n```\nThen, after editing the `.env` with your database details, you can create the table with this command:\n\n``` bash\nphp artisan migrate\n```\n\u003e Tip: You can read more on the Laravel .env file [here](https://laravel.com/docs/5.4/configuration#environment-configuration)\n\nWe should also edit the mass-assignable properties on the model:\n\n``` php\n# ./app/Post.php\n\nclass Post extends Model\n{\n\n  /**\n   * The attributes that are mass assignable.\n   *\n   * @var array\n   */\n  protected $fillable = ['title', 'description'];\n}\n```\n### Saving a post\n\nNext, we will add a route and controller method to save a new post.\n\nWe will be making an API call from the front-end to save our posts, so we can add the new route to the API routes at `./routes/api.php`. Whatever route defined here will be prefixed by `api`, and belongs to the `api` middleware group.\n\n``` php\n# ./routes/api\n\nRoute::post('/post', 'PostController@store');\n```\nAdding the corresponding controller method:\n\n``` php\n# ./app/Http/Controllers/PostController.php\n\nuse App\\Post;\n\nclass PostController extends Controller {\n\n  /**\n   * Saves a new post to the database\n   */\n  public function store(Request $request) {\n    // ...\n    // validation can be done here before saving \n    // with $this-\u003evalidate($request, $rules)\n    // ...\n\n    // get data to be saved in an associative array using $request-\u003eonly()\n    $data = $request-\u003eonly(['title', 'description']);\n\n    //  save post and assign return value of created post to $post array\n    $post = Post::create($data);\n\n    // return post as response, Laravel automatically serializes this to JSON\n    return response($post, 201);\n  }\n}\n```\n## Working with events\n\n[Events](https://laravel.com/docs/5.4/events) are a great way to separate out application logic. We can define events to be triggered in our application when an action occurs, and we can define listeners, to listen for such events and carry out other activities.\n\nLaravel allows for easy definition of events and listeners out of the box. It also includes helper functions and classes to allow us easily trigger and broadcast events.\n\nWe can create a new event with this command:\n\n``` \nphp artisan make:event PostPublished\n```\nThe event class file is created at `./app/Events`.\n\nWe can then edit it to suit our needs:\n\n``` php\n# ./app/Events/PostPublished.php\n\nclass PostPublished implements ShouldBroadcast {\n  use Dispatchable, InteractsWithSockets, SerializesModels;\n\n  public $post;\n\n  public function __construct($post) {\n    $this-\u003epost = $post;\n  }\n\n  /**\n   * Get the channels the event should broadcast on.\n   *\n   * @return Channel|array\n   */\n  public function broadcastOn() {\n    return new Channel('posts');\n  }\n\n  public function broadcastWith() {\n    return [\n      'title' =\u003e $this-\u003epost-\u003etitle,\n    ];\n  }\n}\n```\nThe `Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast` interface on the event class is used to inform Laravel that this event should be broadcast.\n\nThe `broadcastOn` method returns the channel that we want to broadcast our event on. The `Channel` class is used for broadcasting on public channels. `PrivateChannel` and `PresenceChannel` are for private channels (these require authentication for access). You can read more about the various Pusher channels [here](https://pusher.com/docs/client_api_guide/client_channels).\n\nBy default, Laravel broadcasts all of an event class’ public properties as its payload… `broadcastWith` helps us override that behaviour and choose what we want to send.\n\n### Dispatching events\n\nIn our app, we want to dispatch the `PostPublished` event after a post has been saved. In Laravel, we can dispatch events using the `Event` Facade, or the `event()` helper function.\n\nTo dispatch our `PostPublished` event, we can edit the `store` method in the `PostController`, and place the event call right after the post is saved:\n\n``` php\n# ./app/Http/Controllers/PostController.php\n\nuse App\\Events\\PostPublished;\n\n// save post and assign return value of created post to $post array\n$post = Post::create($data);\n\n// fire PostPublished event after post is successfully added to database\nevent(new PostPublished($post));\n// or\n// \\Event::fire(new PostPublished($post))\n```\nThe final `PostController` file will look like this:\n\n``` php\n# ./app/Http/Controllers/PostController.php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Events\\PostPublished;\nuse App\\Post;\n\nclass PostController extends Controller {\n\n  /**\n   * Saves a new post to the database\n   */\n  public function store(Request $request) {\n    // ...\n    // validation can be done here before saving \n    // with $this-\u003evalidate($request, $rules)\n    // ...\n\n    // get data to save in an associative array using $request-\u003eonly()\n    $data = $request-\u003eonly(['title', 'description']);\n\n    //  save post and assign return value of created post to $post array\n    $post = Post::create($data);\n\n    // fire PostPublished event after post is successfully added to database\n    event(new PostPublished($post));\n    // or\n    // \\Event::fire(new PostPublished($post))\n\n    // return post as response, Laravel automatically serializes this to JSON\n    return response($post, 201);\n  }\n}\n```\nNow that we are done with building the backend, we can proceed to create our view and event listener on the Frontend.\n\n## Building the frontend\n\nTo create a basic page view for our app, we can edit the default `welcome.blade.php` file created by Laravel. We can replace its contents with the following:\n\n``` html\n\u003c!-- ./resources/views/welcome.blade.php --\u003e\n\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"{{ config('app.locale') }}\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n  \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n\n  \u003c!-- CSRF Token --\u003e\n  \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n\n  \u003ctitle\u003eNews Talk\u003c/title\u003e\n\n  \u003c!-- Styles --\u003e\n  \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n\n  \u003cstyle\u003e\n    .container {\n      padding-top: 100px;\n    }\n  \u003c/style\u003e\n\n  \u003c!-- Scripts --\u003e\n  \u003cscript\u003e\n    window.Laravel = {!! json_encode([\n      'csrfToken' =\u003e csrf_token(),\n    ]) !!};\n  \u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n  \u003cdiv id=\"app\"\u003e\n    \u003c!-- home Vue component --\u003e\n    \u003chome\u003e\u003c/home\u003e\n  \u003c/div\u003e\n\n  \u003c!-- Scripts --\u003e\n  \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\nMost of the code above is boilerplate Laravel HTML content with relevant scripts and CSS files attached. We will generate them later on.\n\nWe also included a Vue component (`home`) which hasn't been defined yet. Let us go ahead to create and define it.\n\nCreating the `home` Vue component:\n\n``` javascript\n\u003c!-- ./resources/assets/js/components/Home.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"col-sm-6 col-sm-offset-3\"\u003e\n        \u003cdiv class=\"form-group\"\u003e\n          \u003clabel for=\"title\"\u003ePost Title\u003c/label\u003e\n          \u003cinput v-model=\"newPostTitle\" id=\"title\" type=\"text\" class=\"form-control\"\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"form-group\"\u003e\n          \u003clabel for=\"description\"\u003ePost Description\u003c/label\u003e\n          \u003ctextarea v-model=\"newPostDesc\" id=\"description\" rows=\"8\" class=\"form-control\"\u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \u003cbutton @click=\"addPost(newPostTitle, newPostDesc)\" \n          :class=\"{disabled: (!newPostTitle || !newPostDesc)}\"\n          class=\"btn btn-block btn-primary\"\u003eSubmit\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n  export default {\n    data() {\n      return {\n        newPostTitle: \"\", \n        newPostDesc: \"\" \n      }\n    },\n    created() {\n      this.listenForChanges();\n    },\n    methods: {\n      addPost(postName, postDesc) {\n        // check if entries are not empty\n        if(!postName || !postDesc)\n          return;\n\n        // make API to save post\n        axios.post('/api/post', {\n          title: postName, description: postDesc\n        }).then( response =\u003e {\n          if(response.data) { \n            this.newPostTitle = this.newPostDesc = \"\";\n          }\n        })\n      },\n      listenForChanges() {\n        Echo.channel('posts')\n          .listen('PostPublished', post =\u003e {\n            if (! ('Notification' in window)) {\n              alert('Web Notification is not supported');\n              return;\n            }\n\n            Notification.requestPermission( permission =\u003e {\n              let notification = new Notification('New post alert!', {\n                body: post.title, // content for the alert\n                icon: \"https://pusher.com/static_logos/320x320.png\" // optional image url\n              });\n\n              // link to page on clicking the notification\n              notification.onclick = () =\u003e {\n                window.open(window.location.href);\n              };\n            });\n          })\n        }\n      } \n    }\n\u003c/script\u003e\n```\nIn the above code, we define two methods. `addPost()` and `listenForChanges`. The `addPost` method makes a post request to our API with the required payload when a user adds a new post.\n\nIn the `listenForChanges` method, we use Echo to subscribe to the `posts` channel, which is the channel we are broadcasting to, from our backend. We also listen for `PostPublished` events, and define a callback that activates our desktop notification whenever an event is fired.\n\nWe are using the notifications API for desktop notifications. We first [request permission](https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission) to send desktop notifications, then notify the user once permission is granted.\n\nWe can also check if a browser supports desktop notifications this way:\n\n``` javascript\nif (window.Notification) {\n    console.log('Notifications are supported!');\n} else {\n    alert('Notifications aren\\'t supported on your browser! :(');\n}\n```\nWe create an instance of the Notification object with our post title as the body. An optional `icon` parameter can also be set, as we did.\n\nFinally, we define the component as a global [component](https://vuejs.org/v2/guide/components.html) in `app.js`:\n\n``` javascript\n// ./resources/assets/js/app.js\n\nVue.component('home', require('./components/Home.vue'));\n```\n## Bringing it all together\n\nWe can compile our assets easily using Laravel Mix!:\n\n``` \nnpm run dev\n```\nNow, we can navigate to the app's homepage to see it in action. If you use [Laravel Valet](https://laravel.com/docs/5.4/valet), you can also [share the app](https://laravel.com/docs/5.4/valet#sharing-sites), and visit it via another device to test the desktop notifications.\n\n![laravel-pusher-desktop-alerts](//images.ctfassets.net/1es3ne0caaid/7GMNxTA5FeSOkCK6oGeQSi/5452f6da7bd7d9a1d55127aa9bb62483/laravel-pusher-desktop-alerts.gif)\n\n## Conclusion\n\nWe have learned how to build an event-driven basic realtime app enabled with desktop notifications, thanks to Laravel and Pusher. As a next step, you could also learn [how to build a chat application with Pusher](https://blog.pusher.com/how-to-build-a-laravel-chat-app-with-pusher/), and integrate desktop notifications whenever a user receives a message... awesome, right?\n\nIf you’ve thought of any other great ways to use Pusher and Laravel, let us know in the comments!\n\nThe entire code for this tutorial is [hosted on Github](https://github.com/olayinkaos/pusher-news-talk). You can look through and ask questions if you need more information.","metaTitle":"Implementing desktop notifications in your Laravel app","metaDescription":"This tutorial will show you how to build a news notification app using Laravel and Vue. The app focuses on implementing desktop notification functionality, which is used to alert everyone on the website when a new post is published."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5qQu0xiWZiWk0k2mo2EsgO","type":"Entry","createdAt":"2018-04-23T11:35:33.744Z","updatedAt":"2018-04-23T13:40:25.684Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Add a realtime audit trail to your Laravel project","url":"realtime-audit-trail-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/stockt-audited","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-04-20","description":"Learn how to implement realtime stock updates in a Laravel and VueJS application. Clone a sample app, then walk through adding realtime functionality.","prerequisite":"To follow this tutorial you need PHP 7.1.3 or higher, Composer, and a Pusher account.","content":"An audit trail is a record of all changes made to a data model. A model is any entity that can be stored in a database, such as a user or a product. An audit entry typically contains information about the type of change (creation, update, or deletion), *who* made the change, and *when* the change was made. Audit trails are often used in large applications where there is need to track changes to one or more models over time. \n\nIn this tutorial, we'll set up an audit trail dashboard accessible to admins for a simple stock application. Our dashboard will update in realtime, allowing us to see updates as they happen. Here’s a preview of our app in action:\n\n![realtime-audit-trail-demo](//images.ctfassets.net/1es3ne0caaid/5tFe0tcKcwi0uI6aI4eO0I/27663e7f149ab73aa1a3eb0ffa4c9e08/realtime-audit-trail-demo.gif)\n\n\n## Prerequisites\n1. PHP 7.1.3 or higher\n2. Composer\n3. A Pusher account. Create one [here](http://pusher.com/signup).\n\n## Setup\n\nWe’ll start out with a small stock application I built. You can clone the project from GitHub by running:\n\n```\n    git clone https://github.com/shalvah/stockt.git\n```\n\nYou can also download the source directly from [this link.](https://github.com/shalvah/stockt/archive/master.zip) \n\nThen `cd` into the project folder and install dependencies:\n\n```\n    composer install\n```\n\nNext, copy the `.env.example` to a new file called `.env`. Run the following command to generate an application encryption key:\n\n```\n    php artisan key:generate\n```\n\nLastly, create a file called `database.sqlite` in the `database` directory and run the following command to set up and populate the database:\n\n```\n    php artisan migrate --seed\n```\n\n## Creating the audit dashboard\n\nWe’ll use the [laravel-auditing](http://laravel-auditing.com) package to handle auditing. Let’s install the package:\n\n```\n    composer require owen-it/laravel-auditing\n```\n\nNext, we’ll publish the database migrations for the audit tables and run them:\n\n```\n    php artisan auditing:install\n    php artisan migrate\n```\n\nWe’re going to be auditing changes to products. Let’s configure our product model so the auditing package can track it. In your `Product` model (`app/Models/Product.php`):\n\n- `use` the `OwenIt\\Auditing\\Auditable` trait\n- `implement` the `OwenIt\\Auditing\\Contracts\\Auditable` interface:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Models;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use OwenIt\\Auditing\\Contracts\\Auditable;\n    \n    class Product extends Model implements Auditable\n    {\n      use \\OwenIt\\Auditing\\Auditable;\n    \n      // ...\n    }\n```\n\nNow, whenever a change is made to a product, the details of the change will be recorded in the `audits` table. \n\nWe need to make a small change to our auditing configuration so the `Audit` model can properly map to our `User` model. This will enable us to write code like `$audit→user→name`  to retrieve the name of the user who made the change. In the file `config/audit.php`, replace the value of `model` in the `user` array with the class name of our User model (`App\\Models\\User::class`)\n\n```  php\n    'user' =\u003e [\n      'primary_key' =\u003e 'id',\n      'foreign_key' =\u003e 'user_id',\n        \n      // replace the line below\n      'model'       =\u003e App\\User::class,\n        \n      // with this\n      'model'       =\u003e App\\Models\\User::class,\n    ],\n```\n\nNow, on to  the audits dashboard. First, we’ll create a middleware that allows only admin users to view the page. Create a file called `AllowOnlyAdmin`.php in `app/Http/Middleware` with the following content:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Middleware;\n    \n    use Closure;\n    use Illuminate\\Support\\Facades\\Auth;\n    \n    class AllowOnlyAdmin\n    {\n        public function handle($request, Closure $next)\n        {\n            if (Auth::user()-\u003eis_admin) {\n                return $next($request);\n            }\n            \n            abort(403);\n        }\n    }\n```\n\n\nNext, add the route for the audits at the end of your `routes/web.php`:\n\n``` php\n    Route::get('audits', 'AuditController@index')\n    -\u003emiddleware('auth', \\App\\Http\\Middleware\\AllowOnlyAdmin::class);\n```\n\nLet’s create the controller. We’ll generate the file  `app/Http/Controllers/AuditController`.php by running:\n\n```\n    php artisan make:controller AuditController\n```\n\nCreate an `index` method within the `AuditController` class with the following content:\n\n``` php\n    public function index()\n    {\n        $audits = \\OwenIt\\Auditing\\Models\\Audit::with('user')\n            -\u003eorderBy('created_at', 'desc')-\u003eget();\n        return view('audits', ['audits' =\u003e $audits]);\n    }\n```\n\nLet’s build the view for our audits. Create the file `resources/views/audits.blade.php` with the following content:\n\n``` php\n    @extends('layouts.app')\n    \n    @section('content')\n      \u003cdiv class=\"container\"\u003e\n        \u003ctable class=\"table\" \u003e\n          \u003cthead class=\"thead-dark\"\u003e\n            \u003ctr\u003e\n              \u003cth scope=\"col\"\u003eModel\u003c/th\u003e\n              \u003cth scope=\"col\"\u003eAction\u003c/th\u003e\n              \u003cth scope=\"col\"\u003eUser\u003c/th\u003e\n              \u003cth scope=\"col\"\u003eTime\u003c/th\u003e\n              \u003cth scope=\"col\"\u003eOld Values\u003c/th\u003e\n              \u003cth scope=\"col\"\u003eNew Values\u003c/th\u003e\n            \u003c/tr\u003e\n          \u003c/thead\u003e\n          \u003ctbody id=\"audits\"\u003e\n            @foreach($audits as $audit)\n              \u003ctr\u003e\n                \u003ctd\u003e{{ $audit-\u003eauditable_type }} (id: {{ $audit-\u003eauditable_id }})\u003c/td\u003e\n                \u003ctd\u003e{{ $audit-\u003eevent }}\u003c/td\u003e\n                \u003ctd\u003e{{ $audit-\u003euser-\u003ename }}\u003c/td\u003e\n                \u003ctd\u003e{{ $audit-\u003ecreated_at }}\u003c/td\u003e\n                \u003ctd\u003e\n                  \u003ctable class=\"table\"\u003e\n                    @foreach($audit-\u003eold_values as $attribute =\u003e $value)\n                      \u003ctr\u003e\n                        \u003ctd\u003e\u003cb\u003e{{ $attribute }}\u003c/b\u003e\u003c/td\u003e\n                        \u003ctd\u003e{{ $value }}\u003c/td\u003e\n                      \u003c/tr\u003e\n                    @endforeach\n                  \u003c/table\u003e\n                \u003c/td\u003e\n                \u003ctd\u003e\n                  \u003ctable class=\"table\"\u003e\n                    @foreach($audit-\u003enew_values as $attribute =\u003e $value)\n                      \u003ctr\u003e\n                        \u003ctd\u003e\u003cb\u003e{{ $attribute }}\u003c/b\u003e\u003c/td\u003e\n                        \u003ctd\u003e{{ $value }}\u003c/td\u003e\n                      \u003c/tr\u003e\n                    @endforeach\n                  \u003c/table\u003e\n                \u003c/td\u003e\n              \u003c/tr\u003e\n            @endforeach\n          \u003c/tbody\u003e\n        \u003c/table\u003e\n    \n      \u003c/div\u003e\n    @endsection\n```\n\n\nYou can start your app by running:\n\n`php artisan serve`\n\nThen visit your app on http://localhost:8000. The `stockt` app comes with two default users: an admin user (Administrator, admin@stockt.test), and a regular user (John Doe, john@stockt.test). (Both passwords: `secret`) Sign in to your app as John Doe and as Administrator and make changes to some of the products displayed on the homepage. Then visit http://localhost:8000/audits as Administrator to see the list of all changes made by all users.\n\n## Displaying new audits in realtime\n\nNow we’ve got our audit dashboard working, but we need to reload the page whenever we wish to see any new changes. This is where our realtime functionality, powered by Pusher, comes in. Let’s implement it.\n\nFirst, we’ll set up Pusher on the backend. Install the Pusher Laravel package:\n\n```\n    composer require pusher/pusher-http-laravel\n    php artisan vendor:publish --provider=\"Pusher\\Laravel\\PusherServiceProvider\"\n```\n\nEdit your  `config/pusher.php` so it looks like this:\n\n``` php\n    'connections' =\u003e [\n      'main' =\u003e [\n        'auth_key' =\u003e env('PUSHER_APP_KEY'),\n        'secret' =\u003e env('PUSHER_APP_SECRET'),\n        'app_id' =\u003e env('PUSHER_APP_ID'),\n        'options' =\u003e [\n          'cluster' =\u003e env('PUSHER_APP_CLUSTER'),\n        ],\n        'host' =\u003e null,\n        'port' =\u003e null,\n        'timeout' =\u003e null,\n      ],\n    ],\n```\n\nSign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Copy your app credentials from the **App Keys** section and add them to your `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\n\u003e Note: Laravel sometimes caches old configuration, so for the project to see your new configuration values, you might need to run the command `php artisan config:cache`\n\n\nThe `laravel-auditing` package fires an event called `Audited` whenever a new audit is created. We’ll listen for this event and trigger a `new-audit` event on Pusher. Our frontend will listen for this event and add the new audit item to the table.\n\nCreate the event listener, `app/Listeners/AuditedListener.php` with the following content:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Listeners;\n    \n    use OwenIt\\Auditing\\Events\\Audited;\n    use Pusher\\Laravel\\Facades\\Pusher;\n    \n    class AuditedListener\n    {\n      public function handle(Audited $event)\n      {\n        $audit = $event-\u003eaudit-\u003etoArray();\n        $audit['user_name'] = $event-\u003eaudit-\u003euser-\u003ename;\n        Pusher::trigger('audits', 'new-audit', ['audit' =\u003e $audit]);\n      }\n    }\n```\n\n\nNext, we’ll register the event listener in the `app/Providers/EventServiceProvider.php`:\n\n``` php\n    class EventServiceProvider extends ServiceProvider\n    {\n      protected $listen = [\n          \\OwenIt\\Auditing\\Events\\Audited::class =\u003e [\n              \\App\\Listeners\\AuditedListener::class\n              ]\n      ];\n    \n      // ...\n    }\n```\n\n\nHere’s the code we’ll use to handle the event.  We pull in the `pusher-js` library, subscribe to the `audits` channel and bind to the `new-audit` event. When an event comes in, we build up a new row and insert it at the top of the table. Add the code to the end of your `resources/views/audits.blade.php`:\n\n``` php\n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n      var socket = new Pusher(\"your-app-key\", {\n          cluster: 'your-app-cluster',\n      });\n      socket.subscribe('audits')\n          .bind('new-audit', function (data) {\n              var audit = data.audit;\n              var $modelCell = $('\u003ctd\u003e').text(audit.auditable_type + '(id: ' + audit.auditable_id + ')');\n              var $eventCell = $('\u003ctd\u003e').text(audit.event);\n              var $userCell = $('\u003ctd\u003e').text(audit.user_name);\n              var $timeCell = $('\u003ctd\u003e').text(audit.created_at);\n    \n              function createSubTable(values) {\n                var $table = $('\u003ctable\u003e').addClass('table');\n                  for (attribute in values) {\n                    $table.append(\n                      $('\u003ctr\u003e').append(\n                        $('\u003ctd\u003e').text(attribute),\n                        $('\u003ctd\u003e').text(values[attribute])\n                      )\n                    );\n                  }\n                  return $table;\n              }\n    \n              var $oldValuesTable = createSubTable(audit.old_values)\n              var $newValuesTable = createSubTable(audit.new_values)\n    \n              var $oldValuesCell = $('\u003ctd\u003e').append($oldValuesTable);\n              var $newValuesCell = $('\u003ctd\u003e').append($newValuesTable);\n    \n              $newRow = $('\u003ctr\u003e').append(\n                $modelCell,\n                $eventCell,\n                $userCell,\n                $timeCell,\n                $oldValuesCell,\n                $newValuesCell\n              );\n              $('#audits').prepend($newRow);\n          });\n    \u003c/script\u003e\n```\n    \n\nReplace `your-app-key` and `your-app-cluster` with your Pusher app key and cluster, and we’re done! \n\nLet’s test the app. Start your app as described earlier. Sign in as John Doe in one browser and Administrator in another so you can maintain concurrent sessions. Try making changes to some products as John Doe while viewing the dashboard as Administrator. The changes should show up on the dashboard in realtime.\n\n\n## Conclusion\n\nIn this article, we’ve added an audit dashboard to an existing application. We’ve gone ahead to add realtime functionality by displaying audits on the dashboard as they happen. Thanks to Laravel and Pusher, we were able to achieve these with minimal stress. You can check out the source code of the completed application on [GitHub](http://github.com/shalvah/stockt-audited).\n\n","metaTitle":"Add a realtime audit trail to your Laravel project","metaDescription":"This tutorial takes you through building a retail stock tracking application using Laravel and VueJS. It features an audit panel with realtime stock updates."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"24wosbVzVKuYmKqgQEooGk","type":"Entry","createdAt":"2018-03-08T13:10:20.439Z","updatedAt":"2020-06-19T13:29:57.977Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a food ordering app using Vue and Africa’s Talking","url":"ussd-food-app-vue-africas-talking","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/Foodigo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}}],"reviewDate":"2018-03-08","description":"A tutorial showing how to build a USSD food ordering app using Vue.js and Africa's Talking.","prerequisite":"Some knowledge of HTML, CSS and JavaScript is required. Knowledge of Vue.js would be an advantage, but not essential.","content":"Thoughts on building for the next billion users? Development systems are springing up by the day with progressive web apps taking center stage and optimization being the focal point of quality testing teams. We live in a world where using digital services almost always requires the Internet. Is this scalable to even remote parts of the world where internet connectivity is next to nothing? \n\nUSSD (Unstructured Supplementary Service Data) communication technology used mostly by telecommunication companies offers much more promise than just interaction with your telco providers. In this post, we will be building a basic food-ordering App using Vue and implementing USSD interaction via Africa’s Talking(AT).\n\nThe app consists of two parts: the USSD app for the user and the web dashboard for the App owner. Africa’s Talkin (AT) will be used to build the USSD app and Vue for the app dashboard. Pusher will be used to implement the real-time update of our dashboard. You can use services like Twilio or txtNation as alternative to AT if you can’t access the AT services.\n\nHere is a quick look at what we will be building:\n\n![App preview](//images.contentful.com/1es3ne0caaid/wFKWxF63YG4gissiK28yo/134aea33728d4292581236f8790cfcdb/ussd-food-ordering-preview.gif)\n\n## Prerequisites\n\nBuilding this app is beginner friendly. However, knowledge of HTML, CSS, and JavaScript is required. Using Pusher and Africa’s Talking is pretty much seamless. Vue.js will be used to develop the user interface and its knowledge is not required but is of added advantage. \n\n## Installation\n\nThis is a Node.js app so it requires you have node and its corresponding package manager, NPM. Install them from [here](https://nodejs.org/en/) if you haven’t, otherwise verify installation from your command line with:\n\n```\n    node -v \u0026\u0026 npm -v\n```\n\nCreate a folder anywhere on your machine, this will be the root directory of your app. Start a new project by running this on your command line:\n\n```\n    npm init\n```\n\nRun through the setup instructions filling out key app details like name, author, and license.\n\n\n\u003e Note that the entry point specified during npm init (default:index.js), this is the file in which server configuration will take place.\n\nOnce this is completed, you have a new node project with a package.json file but otherwise pretty much empty. Let’s install the required tools and dependencies via npm. Dependencies required are:\n\n- Express - A node framework for developing servers.\n- Cors - Enables cross-origin requests.\n- Pusher - This is the node package for pusher.\n- Body-parser - Parses the req.body object. \n- Africastalking - The node package for Africa’s talking.\n\nInstall these locally with:\n\n```\n    npm install --save express cors pusher body-parser africastalking\n```\n\nDuring development, Vue will be imported via a CDN so don’t worry if you don’t see it being installed yet. Let’s get to configuring our server since this will serve our files.\n\nWe will proceed to create an account on [Pusher](https://pusher.com/) and [Africa’s Talking](https://account.africastalking.com).  \n\nCreate a new Pusher app with whichever name you choose. Note the AppID, key, and cluster issued. Do the same with Africa’s Talking, create a new USSD application and obtain an API key and the username of the app. For this app, we will be utilizing the AT sandbox to test our app, so there is no need to apply for a service code.\n\nTo keep credentials safe, we will create a new module to house these credentials.\nIn the root directory create a new file called cred.js and setup the module like this:\n\n``` javascript\n    module.exports = {\n     AT:{\n         apiKey: 'xxxxxxxxxxxxxxxxxxxxxxx',\n         username: 'xxxxxxx',\n         format: 'json'\n     },\n     pusher:{\n        appId: 'xxxxxx',\n        key: 'xxxxxxxxxxxxxxxx',\n        secret: \"xxxxxxxxxxxxxx\",\n        cluster: \"xx\",\n        encrypted: true\n     }\n    }\n```\n\nThe credentials are stored in an object and will be used later in our app.\n\n## Build the app server\n\nIn the root directory of the project, create a new file called server.js. In this file we will configure our server. First, import all required dependencies for the app and assign them to variables with:\n\n``` javascript\n    var Pusher = require('pusher')\n    var credentials = require('./cred')\n    var africastalking = require('africastalking')(credentials.AT)\n    var cors = require('cors')\n    var bodyParser = require('body-parser')\n    var express = require('express')\n    var path = require('path')\n```\n\nSince we will be using an express server, configure express by first creating a new instance assigned to a variable:\n\n``` javascript\n    var app = express()\n    var port = 3000\n```\n\nWe simply assigned the port number of the app to 3000. This is the port on the local server which the app will be available.\n\nLet’s use other imported modules like cors and bodyParser:\n\n``` javascript\n    app.use(cors())\n    app.use(bodyParser.urlencoded({extended:false}))\n    app.use(bodyParser.json())\n```\n\nNext, create an endpoint for your homepage using express with:\n\n``` javascript\n    app.get('/', function(req, res){\n        res.sendFile(path.join(__dirname + \"/index.html\"))\n    })\n```\n\nThe index.html file hasn’t been created yet, but it would be served nonetheless when created.\nWe would require other static files such as CSS and JS in our HTML script, use the `express.static()` method to specify the directory of the files. These static files will be in our root directory as well:\n\n``` javascript\n    app.use(express.static(__dirname + '/'))\n```\n\n\u003e It’s not safe to expose static files like this, but we’re just doing this for convenience. If you do this for real, I can make a request to `GET /cred.js` and get your AT and Pusher credentials.\n\nCreate a new Pusher instance and assign it to a variable, just so it is available globally:\n\n``` javascript\n    var pusher = new Pusher(credentials.pusher)\n```\n\nRemember the module we created earlier and imported - cred.js. Pusher requires your app credentials when initializing a pusher instance.\n\nWorking with USSD is pretty simple, we create a POST endpoint and configure responses per users request using IF statements. \n\nAfrica’s talking receives these requests on a USSD code we will set on their service and responds with the messages we will configure. We simply control what is sent to the user and determine what the user receives when they make a new request. AT simply provides the offline channel for the user via USSD.\n\nNext, we will configure AT. First, we create some important global variables with:\n\n``` javascript\n    var webURL = 'http://foodigo.com/menu'\n    var welcomeMsg = `CON Hello and welcome to Foodigo.\n    Have your food delivered to you fast and hot!\n    Please find our menu ${webURL}\n    Enter your name to continue`\n    var orderDetails = {\n        name: \"\",\n        description: \"\",\n        address: \"\",\n        telephone: \"\",\n        open: true\n    }\n    var lastData = \"\";\n```\n\nThe `welcomeMsg` variable is assigned a template literal with the welcome message on our USSD app. The `orderDetails` object is the payload to be sent over to the dashboard via Pusher.\n\nThis is the more interesting part. Create the REST API with a POST request on a `/order` route:\n\n``` javascript\n    app.post('/order', (req,res) =\u003e {\n      console.log(req.body)\n      //configure /order api\n    })\n```\n\nWhen a user makes a request via a certain USSD service code, the body of the request contains useful information about the request which we will process. This information is to be passed to variables as required. The properties in the `req.body` object are: \n\n\n- sessionID - For every time a user dials a USSD code, a session is opened. The sessionId is a unique ID assigned to each session opened by a user.\n- serviceCode - This is the service code dialed by a user, also note that multiple service codes can be assigned to an app.\n- phoneNumber - The telephone number of the user is also sent through the request, You can create a database from this and play around with the data.\n- text - This is the plain text inputted by the user in the text field. Initially, when a user initiates a session, text is empty.\n\nIn the `/order` API, assign the various `req.body` parameters to variables. For beginners understanding, do this:\n\n``` javascript\n    ...\n    var sessionId = req.body.sessionId\n    var serviceCode = req.body.serviceCode\n    var phoneNumber = req.body.phoneNumber\n    var text = req.body.text\n    var textValue = text.split('*').length\n    ...\n```\n\nWhat about the response from our server to the client? Let’s call that `message`, create the variable and assign it an empty value. To understand the current state of response from the server, we use some simple logic to split the response carrying user information. The request (`text`) comes in plain text with user inputs separated by asterisks (*). Subsequent inputs are concatenated to the existing request and each is separated by an asterisk. By splitting `text` with the asterisks, the length of the resulting array would better inform us on how many requests has been made by the user.\n\n``` javascript\n    var message = \"\"\n```\n\nNext, we define the logic with which AT will process user requests and responses using `if` statements. In the `/order` endpoint include this logic:\n\n``` javascript\n    ...\n    if(text === ''){\n        message = welcomeMsg\n    }else if(textValue === 1){\n        message = \"CON What do you want to eat?\"\n        orderDetails.name = text;\n    }else if(textValue === 2){\n        message = \"CON Where do we deliver it?\"\n        orderDetails.description = text.split('*')[1];\n    }else if(textValue === 3){\n        message = \"CON What's your telephone number?\"\n        orderDetails.address = text.split('*')[2];\n    }else if(textValue === 4){\n        message = `CON Would you like to place this order?\n        1. Yes\n        2. No`\n        lastData = text.split('*')[3];\n    }else{\n        message = `END Thanks for your order\n        Enjoy your meal in advance`\n        orderDetails.telephone = lastData   \n    }\n    ...\n```\n\nIf statements simply serve our purpose here. In the block above it simply means once a user makes the initial request by dialling the service code the response should be the `welcomeMsg` variable defined previously. For the sake of simplicity of this demo, we wouldn’t be considering edge cases and responses to match the request. Once a response is received as `text`, it is manipulated and assigned to a parameter in the `orderDetails` object.\n\nMessages begin with `CON`, this shows the beginning of the response and the session as well and to terminate the session the response starts with `END`.\n\nStill in the `/order` endpoint, specify the response with:\n\n``` javascript\n    ...\n    res.contentType('text/plain');\n    res.send(message, 200);\n    ...\n```\n\nNow that we have a payload in `orderDetails`, Pusher is to handle the delivery of this payload to the client dashboard. In the `/order`  endpoint, open a new Pusher channel and event with:\n\n``` javascript\n    ...\n    if(orderDetails.name != \"\" \u0026\u0026 orderDetails.address != ''\u0026\u0026 orderDetails.description != '' \u0026\u0026 orderDetails.telephone != ''){\n      pusher.trigger('orders', 'customerOrder', orderDetails)\n      } \n    ...  \n```\n\nWe created a simple test to ensure that all the data is collected in `orderDetails` before it is sent through Pusher. Use the pusher `trigger()` method to open a new pusher channel, in this case, `orders`. A new event `customerOrder` is created and `orderDetails` is passed as the payload.\n\nLastly, reset `orderDetails` to its default state of empty values:\n\n``` javascript\n    if(orderDetails.telephone != ''){\n      //reset data\n      orderDetails.name= \"\"\n      orderDetails.description= \"\"\n      orderDetails.address= \"\"\n      orderDetails.telephone= \"\"\n    }\n```\n\nNext, set up the listening port of the app with:\n\n``` javascript\n    app.listen(port, (err,res) =\u003e {\n    if(err) throw err;\n    console.log('listening on port ' + port)\n    })\n```\n\nRun the server with:\n\n```\n    node server.js\n```\n\nYou will see `listening on port 3000` in the command line, but on opening `localhost:3000` in your browser an error is thrown. This is fine and it is because we haven’t created the `index.html` file to be served by the server. So far we have created the app’s server but, before we test, let’s build out the app dashboard.\n\n## Build the dashboard\n\nWhile we have our server ready to handle client orders, we need a dashboard to display these orders and we will accomplish this using Vue.js.\n\nVue is a lightweight progressive JavaScript framework for building interactive user interfaces. In the root directory of your project, create the HTML, CSS and JavaScript Files required.\n\nIn index.html, create a HTML5 script with:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"index.css\"\u003e\n        \u003ctitle\u003eReal-time food ordering app dashboard\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv class=\"container-fluid\" id=\"root\"\u003e\n    \u003c!-- Body of document --\u003e\n        \u003c/div\u003e\n    \u003c!-- Scripts --\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.4/vue.js\"\u003e\u003c/script\u003e   \n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e \n        \u003cscript src=\"index.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNote the imported scripts via a CDN - Vue, Pusher. We also imported our external JavaScript file. Bootstrap is also used for styling and is imported from a CDN as seen in the head tag of the script.\n\nFor the simplicity of this demo, our orders will be in the form of cards (a presentation UI widget) and have a close button to close any open orders.\n\nLet’s configure Vue in the index.js file created earlier. \n\n``` javascript\n    new Vue({\n        el: \"#root\",\n        data:{\n            title: \"Foodigo Restaurant Dashboard\",\n            orders:[\n                {name:\"Chris Nwamba\", description:\"Rice and Ofe-Akwu\", address:\"Lekki\", telephone:\"08082092001\", open:true},\n                {name:\"William Imoh\", description:\"Rice and Chicken\", address:\"Amuwo\", telephone:\"08082818700\", open:true},\n                {name:\"Mary-Anne Unoka\", description:\"Yam and Egg Sauce\", address:\"Satellite Town\", telephone:\"08083872501\", open:true},\n                {name:\"Ralph Ugwu\", description:\"Rice and Salad\", address:\"Nsukka\", telephone:\"08082983021\", open:true},\n                {name:\"BLAQLSG Imoh\", description:\"Cake and Sprite\", address:\"Ije-Ododo\", telephone:\"08082869830\", open:true}\n            ]\n        },\n        created(){\n            var pusher = new Pusher('PusherKey',{\n                cluster:'PusherCluster',\n                encrypted:true\n            })\n            var channel = pusher.subscribe('orders')\n            channel.bind('customerOrder', (data) =\u003e {\n                console.log(data)\n                this.orders.push(data)\n            })\n        }\n    })\n```\n\nIn the script above we created a new Vue instance and mounted it on the DOM element with an ID of `root`. Basically, state in Vue is managed by the `data` property. We will manage our app state here as well as other data which we would like to pass to the DOM using Vue. For this app, we created placeholder data in the `orders` array consisting of the `name`, `description`, `address`, `telephone` and the order status of either `true` or `false`. \n\nWe used a Vue lifecycle method called the created method to setup pusher. The `created()` method is called once the DOM is fully loaded. In it, we configure a pusher instance with the pusher key obtained during account creation. \n\nNext, using the `subscribe()` method, we subscribed to the channel we created on our server - `orders`. Afterwards, the event created in the server is bound to the channel and it takes a callback function. This function receives a parameter which is the payload sent though pusher, in this case, `orderDetails`.\n\nLastly, we push this data into the orders array. How about if we want to close an order? We will create a method to handle that next.\n\nClosing an order requires the creation of a method to handle the action. So once the method is triggered, the state of the `open` property of the order is changed to `false`. \n\nIn the Vue instance, after the `created()` method, create a `methods` object and update it like this:\n\n``` javascript\n    ...\n    methods:{\n        // close completed order\n        close(orderToClose){\n            if ( confirm('Are you sure you want to close the order?') === true){\n                this.orders = this.orders.map(order =\u003e {\n                    if(order.name !== orderToClose.name \u0026\u0026 order.description !== orderToClose.description){\n                        return order;\n                    }\n                    const change = Object.assign(order, {open: !order.open})\n                    return change;\n                })\n            } \n        }\n    }\n    ...    \n```\n\nA `confirm` action is required to ascertain that the order is to be closed and we simply use a `map()` method to run through the available orders until we find an order that matches the parameter of the particular order to be closed, at which point the state of its `open` property is inverted.\n\nNow we have our data and methods all set up, let’s pass them to the DOM.\n\nIn index.html, include this block in the parent `div` with an ID of `root`:\n\n``` html\n    ...\n    \u003cheader\u003e\n        \u003ch1 class=\"text-center\"\u003e{{title}}\u003c/h1\u003e\n        \u003ch4 class=\"text-center\"\u003eRealtime food ordering app via USSD\u003c/h4\u003e\n    \u003c/header\u003e\n    \u003cmain\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv v-for=\"order in orders\" v-if=\"order.open\" class=\"col-md-4 order-card\"\u003e\n                \u003ch3 title=\"Customer Name\"\u003e{{order.name}}\u003c/h3\u003e\n                \u003cspan class=\"closeicon\" @click=\"close(order)\" title=\"Close Order\"\u003eX\u003c/span\u003e\n                \u003cp title=\"Order Description\"\u003e{{order.description}}\u003c/p\u003e\n                \u003cp title=\"Customer Address\"\u003e{{order.address}}\u003c/p\u003e\n                \u003cp title=\"Customer Telephone\"\u003e{{order.telephone}}\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/main\u003e\n    ...\n```\n\nThe title of our app is set dynamically using Vue. In the div with the class of `order-card`, we simply used the `v-for` directive to iterate over the `orders` array. This is done conditionally using the conditional `v-if` directive. This means only if `order.open` resolves to true will the order be iterable. Each order property is passed to DOM elements using mustache-like syntax.\n\nStyle the app in index.css with:\n\n``` css\n    body{\n        margin: 0px;\n        padding: 0px;\n    }\n    .container-fluid{\n        margin: 0px;\n        padding: 0px;\n        width: 100%;\n    }\n    header{\n        height: 160px;\n        margin: 0px;\n        background-color: rgb(240, 75, 75);\n        padding: 40px;\n    }\n    header h1{\n        margin: 0px;\n    }\n    header h4{\n        color: rgb(92, 91, 91);\n    }\n    .completeOrder{\n        display: none;\n    }\n    .closeicon{\n        font-weight: bold;\n        position: absolute;\n        top: 15px;\n        right: 20px;\n        cursor: pointer;\n    }\n    .closeicon:hover{\n        opacity: 0.5;\n    }\n    .order-card{\n        background-color: antiquewhite;\n        margin: 50px;\n        border-radius: 10px;\n        width: 20%;\n        margin-right:0px;\n        margin-top: 30px;\n        margin-bottom: 0px;\n    }\n```\n\nEverything is all set, start the app server with:\n\n```\n    node server.js\n```\n\n![Dashboard screenshot](//images.contentful.com/1es3ne0caaid/5wXTyLAedOQQOUQYk0cgqy/4fbf09bb6a3b5337ddc79391e5927fcb/ussd-food-ordering-dashboard.png)\n\n\nAll we see is placeholder data. We will use the Africa’s talking sandbox app to test our app. Before that, we need to expose our local server to the internet so we can access our endpoint on the Internet. Ngrok will be used for this. Navigate to the directory with ngrok in the command line and expose your local server with:\n\n```\n    ./ngrok http 3000\n```\n\nOnce the session status on the ngrok dashboard in the command line interface goes to `online`, a forwarding address is issued. This is the temporary web address for our app e.g. https://1654a6cb.ngrok.io.\n\nSince this address is available on the internet, our POST endpoint is https://1654a6cb.ngrok.io/order. This is the endpoint required by Africa’s Talking.\n\nLog-in to [AT](https://africastalking.com/) and go to the sandbox app [here](https://account.africastalking.com/apps/sandbox). In the sandbox, [create a service code](https://account.africastalking.com/apps/sandbox/ussd/channel/create) and pass in the callback URL of your API endpoint.  Our USSD code is now available for use. In the sandbox app, navigate to the ‘launch simulator’ tab and input a valid telephone number to use the USSD feature. All these should be done while your local server is running and ngrok is online.\n\nOnce you dial the USSD code in the simulator, fill out the text fields with the chosen data and, once the responses are complete, the dashboard automatically updates with the new order.\n\n![Finished app running](//images.contentful.com/1es3ne0caaid/6l5vRP8x0sy8A6SGWuwA02/04056eefa7ff0ec521e350b2cf9b7882/ussd-food-ordering-app-running.gif)\n\n## Conclusion\n\nIt’s been awesome building this out. We have seen how to integrate USSD interaction in a node app, and so far I can’t help but imagine the immense potential this poses. Vue was used to build out the front-end and pass data received to the DOM, with Pusher bringing in realtime activity so it is unnecessary to refresh the page to know if an order has arrived. Meanwhile anyone with the USSD code can place an order without having internet connectivity. Feel free to play around with the app, suggest improvements and submit improvements to the source code [here](https://github.com/christiannwamba/Foodigo).","metaTitle":"Build a food ordering app using Vue and Africa’s Talking","metaDescription":"A short tutorial, guiding the reader through building a food ordering app using Vue.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5PGtao88o0iWAGs6kaocMc","type":"Entry","createdAt":"2018-02-28T12:35:03.059Z","updatedAt":"2018-02-28T12:35:03.059Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime payment dashboard with Stripe","url":"realtime-payment-dashboard-stripe","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-payment-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Build a live admin dashboard with Vue.js and Node.js, accepting payments through Stripe.","prerequisite":"A basic understanding of Vue.js and Node.js is needed to follow this tutorial.","content":"In this article, we are going to be looking at how to accept payments from a user using [Stripe](https://stripe.com) and displaying sales on an admin dashboard in realtime using*text in italic* [Pusher](https://pusher.com).\n\n## How it works\n\nStripe is used to handle user payments and Pusher adds realtime functionality to our application.\n\n![realtime-payment-dashboard-stripe-demo](//images.contentful.com/1es3ne0caaid/1LkoYsTPec4goWWyAGYaSu/fe6153d7fc28ccc4a5e74c6ffbc4ba33/realtime-payment-dashboard-stripe-demo.gif)\n\n## Dependencies\n\nBefore you begin, you need [Node](https://nodejs.org/) and Node Package Manager( [npm](https://npmjs.com) ) installed on your machine. To verify your installation, please run the following commands on your terminal\n\n```\n    npm -v\n    node -v\n```\n\nIf you get version numbers as your response, then it means that you already have them installed and you are good to go.\n\n## Setting up a Stripe account\n\n[Stripe](https://stripe.com) is a platform that helps process online payment. We will use this to process payments in our store.\n\nTo set up a Stripe account, head over [here](https://dashboard.stripe.com/register) and then fill out the form.\n\n![realtime-payment-dashboard-stripe-signup](//images.contentful.com/1es3ne0caaid/1fQGvRyQIYEsgY2WOMymy0/025045bdb5c077268f01e9226935c3e0/realtime-payment-dashboard-stripe-signup.png)\n\nOnce this step is completed, you will be redirected to your [dashboard](https://dashboard.stripe.com/test/dashboard):\n\n![realtime-payment-dashboard-stripe-dashboard](//images.contentful.com/1es3ne0caaid/3zxY5XAJJYgIYAksWKOkqA/a846796ec876519937068bd59d0c4dfb/realtime-payment-dashboard-stripe-dashboard.png)\n\n![realtime-payment-dashboard-stripe-api-keys](//images.contentful.com/1es3ne0caaid/2fY7XiOmeQYAAiEIEsmqY8/857b3b2dee3d73a20f9c41935bb00ed4/realtime-payment-dashboard-stripe-api-keys.png)\n\nNote your `STRIPE_PUBLISHABLE_KEY` and `STRIPE_SECRET_KEY`. We are going to use them later on as we build our application\n\n## Setting up a Pusher account\n\n[Pusher](https://pusher.com) allows you to incorporate realtime functionality into your applications. To get started with Pusher, head over [here](https://dashboard.pusher.com/accounts/sign_up).\n\nOnce you're signed in, you will be redirected to your dashboard. You then need to create a new app.\nAfter your new app is created, you need to note your `PUSHER_APP_ID`, `PUSHER_API_KEY`, `PUSHER_API_SECRET`, `PUSHER_API_CLUSTER` .\n\nOnce you have these details, you are ready to begin building your app.\n\n**Note** : All source code is available [here](https://github.com/oreHGA/realtime-payment-dashboard) \n\n## Setting up the backend server\n\nTo handle your API calls to Stripe and Pusher, we will use an Express server.\n\n### Install node modules\n\nWe need some node modules that are essential for our application to work:\n\n- cors - to enable cross origin resource sharing on our app\n- express - this is our web server\n- pusher - this package enables us and makes it easy to make calls to pushers api\n- body-parser - used in parsing the contents of a request in a json format\n- multipart - to enable multipart on our app\n- stripe - to allow us communicate seamlessly with our stripe api\n- ejs - this will be our view engine for the user facing side of the application\n\nMake a new directory and change directory into it:\n\n```\n    mkdir realtime-dashboard \u0026\u0026 cd realtime-dashboard\n```\n\nThen initialize a node project and install the node modules:\n\n```\n    # Initialze\n    npm init -y\n    # Install\n    npm install cors express ejs body-parser connect-multiparty pusher stripe --save\n```\n\nYou have now installed all the modules necessary for you to build the project.\n\n### Create our server.js file\n\nNow we need to create a file that will contain the instructions needed for our server to work\nIn your `realtime-dashboard` directory:\n\n```\n    touch server.js\n```\n\nThis is the start up file that will be referenced when your server is running\nIn your server.js file, you need to:\n\n#### Import the node modules\n\n```\n    const cors  = require('cors')\n    const Pusher = require('pusher')\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const multipart = require('connect-multiparty')\n    const stripe = require('stripe')('STRIPE_API_KEY')\n        [...]\n```\n\nOnce you have imported your node modules, you can then use them freely all through your script.\n\n#### Create your express app\n\nNow we create our express app by adding the following to the `server.js`:\n\n```\n    [...]\n    const app = express()\n    [...]\n```\n\n#### Load the middleware\n\nWe load the middleware in our `server.js` by adding the following:\n\n```\n    ...\n    app.use(cors());\n    app.set('view engine', 'ejs');\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false}));\n    const multipartMiddleware = multipart();\n    ...\n```\n\nHere, we set our app to use `cors` and set the view engine to `ejs`. We also instructed the app the parse the requests in JSON format.\n\n#### Create the Pusher client\n\nWe need to create our Pusher client to enable us to trigger events from our app to a specific channel. Our admin dashboard will also be listening for events on the same channel (more details on this as we progress). \nWe create the client by adding this to our file:\n\n```\n    [...]\n    const pusher = new Pusher({\n        appId: 'PUSHERE_APP_ID',\n        key: 'PUSHER_API_KEY',\n        secret: 'PUSHER_API_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    [...]\n```\n\nOnce this is done, we have successfully created our Pusher client.\n\n#### Create app routes\n\nWe need to decide what the user sees when visiting different parts of our app. Since this is a simple application, we only need two routes for the user facing side:\n\n- Route that loads the checkout page.\n- Route that handles the payment and communicated with the stripe API.\n\nEarlier on, we set our  `view engine` to `ejs` and we will use this here:\n\n```\n    [...]\n    app.get('/', function(req, res){\n        res.render('index');\n    });\n    \n    app.post('/gen-payment', multipartMiddleware, function(req, res){\n        let amount = 500;\n        stripe.customers.create({\n            email: req.body.stripeEmail,\n            source: req.body.stripeToken\n        })\n        .then(customer =\u003e\n            stripe.charges.create({\n                amount,\n                description: 'One camera bought from shop',\n                currency: \"usd\",\n                customer: customer.id\n            })\n        )\n        .then(charge =\u003e {\n            pusher.trigger('sales', 'payment-completed', {\n                \"time\" : new Date().toDateString(),\n                \"value\" : `\\$${charge.amount/100}`,\n                \"message\" : \"payment complete...duh!\",\n                \"description\" : charge.description\n            });\n            console.log( charge );\n            res.render(\"charge\");\n        });\n    });\n    [...]\n```\n\nLet's shed more light on the `gen-payment` route. We accept the `stripeEmail` and the `stripeToken` which would be passed as part of the body in the post request to the route. We then create a new `customer` using the `stripeEmail` and the `stripeToken`. The `create` function returns a `promise` and so once the customer is created, we initiate a new `charge` for the customer. If this charge is successful, i.e we are able to completely charge the customer, then we trigger a `payment-completed` event to the `sales` channel.\n\n#### Assign a port to your app\n\nYou need to choose a port you want your app to run on. You do this by adding this following to your `server.js` file:\n\n```\n    [...]\n    app.listen('3120')\n    [...]\n```\n\nAt this point the backend server is all set up. Now we need to go to the views to see how data is passed to the server.\n\n## Setting up the frontend\n\nCreate a `views` directory. In the views directory create your `index.ejs` and `charge.ejs`:\n\n```\n    mkdir views \u0026\u0026 cd views\n    touch index.ejs charge.ejs\n```\n\nIn our `index.ejs` we need to accept user payment. To make it more secure when handling card information, Stripe has an embedded payment form called [Checkout](https://stripe.com/docs/checkout/tutorial) which we will use to collect user's card data securely. The following is a truncated version of the form that sends data to our server. You can see the complete [code on github](https://github.com/christiannwamba/realtime-payment-dashboard/blob/master/views/index.ejs).\n\n```\n    \u003cform method=\"POST\" action=\"http://localhost:3120/gen-payment\" enctype=\"multipart/form-data\"/\u003e\n        \u003cscript\n            src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\n            data-key=\"PUSBLISHABLE_API_KEY\"\n            data-amount=\"500\"\n            data-name=\"Pay OG\"\n            data-description=\"Send money to OG\"\n            data-image=\"https://stripe.com/img/documentation/checkout/marketplace.png\"\n            data-locale=\"auto\"\u003e\n        \u003c/script\u003e\n    \u003c/form\u003e\n```\n\nWe submit the form to the `/gen-payment` route on our server. We include the `checkout.js` script and the following :\n\n- data-key: your publishable `API_KEY` gotten from your [dashboard](https://dashboard.stripe.com/account/apikeys)\n- data-amount: the amount you plan on charging\n- data-name: name of the store\n- data-description: description of your payment\n- data-image: store image\n\nOnce this is sent to the server and the request is completed successfully, we render the `charge.ejs` view to the user telling the use that their payment is complete:\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime Payment Dashboard\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e \n        \u003clink rel=\"stylesheet\" href=\"https://codepen.io/drehimself/pen/VvYLmV.css\"\u003e \n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cnav\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cul class=\"navbar-left\"\u003e\n                \u003cli\u003e\u003ca href=\"#\"\u003eHome\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#about\"\u003eAbout\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n            \n                \u003cul class=\"navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"#\" id=\"cart\"\u003e\u003ci class=\"fa fa-shopping-cart\"\u003e\u003c/i\u003e Cart \u003cspan class=\"badge\"\u003e0\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e \n        \u003c/nav\u003e\n                \n        \u003cscript\u003e\n            alert(\"Payment Complete\");\n        \u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n## Setting up the admin dashboard\n\nWe want our admin dashboard to show completed payments as they are made without having to refresh the page. To do this, we are going to make use of [Vue.js](https://vuejs.org) and [Pusher](https://pusher.com).\n\nBefore we begin, we need to install the `vue-cli` by running the following command:\n\n```\n    npm install -g vue-cli\n```\n\nThis will install it globally on our local machine. To confirm your installation of the `vue-cli` you can run:\n\n```\n    vue --version\n```\n\nIf you get the version number as a result then you're all set!\n\nTo create the `admin` server, run the following command in the `realtime-dashboard` directory:\n\n```\n    vue init webpack admin\n```\n\nThis will ask you a few questions on project name, description, author, etc. then it will create a new Vue project for us with some boilerplate already set up.\n\n## Installing the pusher-js module\n\nWe need to install `pusher-js` module that allows us to use pusher with our vue frontend. To do this, change directory into the admin directory and run the following command:\n\n```\n    npm install -S pusher-js\n```\n\n### Creating the dashboard component\n\nNow we want to create our `dashboard` component:\n\n```\n    cd admin/src/components\n    touch Dashboard.vue\n```\n\nIn the `Dashboard.vue`, we need to import the `pusher.js` module:\n\n```\n    \u003cscript\u003e\n    import Pusher from 'pusher-js'\n    [...]\n```\n\nWe then create some mock payments to populate the dashboard:\n\n```\n    [...]\n    const MOCK_PAYMENTS = [\n      {time : '12th Dec, 2017', description: \"Shoes\", value : \"$5\"},\n      {time : '12th Dec, 2017', description: \"Maga don pay\", value : \"$12\"}\n    ]\n    [...]\n```\n\nNow we describe our component itself:\n\n```\n    [...]\n    export default {\n      name: 'Dashboard',\n      data () {\n        return {\n          payments : MOCK_PAYMENTS\n        }\n      },\n      created () {\n        this.subscribe();\n      },\n      methods: {\n        subscribe () {\n          let pusher = new Pusher('PUSHER_API_KEY', {\n              cluster: 'PUSHER_CLUSTER',\n              encrypted: true\n          });\n          pusher.subscribe('sales');\n          pusher.bind('payment-completed', data =\u003e {\n            this.payments.unshift(data);\n          });\n        }\n      }\n    }\n    \u003c/script\u003e\n    [...]\n```\n\nIn the `subscribe` method above, we subscribe to the `sales` channel and then listen for the `payment-completed` event. When a new `payment-completed` event is broadcast from the backend server on the `sales`, our frontend server picks it up and the adds it to the `payments` array of the component.\n\nThe `Dashboard.vue` also has a template which looks like this:\n\n```\n    [...]\n    \u003ctemplate\u003e\n      \u003cdiv class=\"container-fluid\"\u003e\n        \u003ctable class=\"table table-striped\"\u003e\n          \u003cthead\u003e\n            \u003ctr\u003e\n              \u003ctd\u003eTime\u003c/td\u003e\n              \u003ctd\u003eValue\u003c/td\u003e\n              \u003ctd\u003eDescription\u003c/td\u003e\n            \u003c/tr\u003e\n          \u003c/thead\u003e\n    \n          \u003ctbody\u003e\n            \u003ctr v-for=\"payment in payments\"\u003e\n              \u003ctd\u003e{{ payment.time }}\u003c/td\u003e \n              \u003ctd\u003e{{ payment.value }}\u003c/td\u003e   \n              \u003ctd\u003e{{ payment.description }}\u003c/td\u003e   \n            \u003c/tr\u003e \n          \u003c/tbody\u003e\n        \u003c/table\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    [...]\n```\n\nAnd some scoped css styling: \n\n```\n    \u003cstyle scoped\u003e\n    h1, h2 {\n      font-weight: normal;\n    }\n    ul {\n      list-style-type: none;\n      padding: 0;\n    }\n    li {\n      display: inline-block;\n      margin: 0 10px;\n    }\n    a {\n      color: #42b983;\n    }\n    .table{\n      background-color : white;\n    }\n    \u003c/style\u003e\n```\n\n### Importing the dashboard component in our App.vue\n\nNow that our dashboard component is ready, we need to import it in our `App.vue` so that I would be picked up when the view is being compiled\n\n```\n    [...]\n    import Dashboard from './components/Dashboard'\n    export default {\n      name: 'app',\n      components: {\n        Dashboard\n      }\n    }\n    [...]\n```\n\nOnce this is done, you should be ready to run your frontend server. You can can do this using the command:\n\n```\n    npm run dev\n```\n\nNow you can run the `Dashboard` side-by-side with the `Store` and then see as purchases are being made in realtime:\n\n![realtime-payment-dashboard-stripe-demo](//images.contentful.com/1es3ne0caaid/1LkoYsTPec4goWWyAGYaSu/fe6153d7fc28ccc4a5e74c6ffbc4ba33/realtime-payment-dashboard-stripe-demo.gif)\n\n## Conclusion\n\nWe have seen how to build a realtime payment dashboard using Pusher, Stripe and some Vue.js. There are many more use cases where realtime functionality will give you an edge. A big advantage is that you get to obtain realtime insights as to how users interact with your application.","metaTitle":"Build a realtime payment dashboard with Stripe","metaDescription":"Learn how to build a live payment dashboard with Stripe, Vue.js and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"BYMUj9H49E08Wi8GKWM0E","type":"Entry","createdAt":"2018-02-28T12:21:17.268Z","updatedAt":"2018-06-21T09:23:00.104Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a cryptocurrency tracker using Vue.js","url":"cryptocurrency-tracker-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/sample-vue-pwa-cryptocurrency-watcher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-09","description":"In this tutorial, learn how to build a live cryptocurrency tracking view with Progressive Web Apps, Vue.js and Node.js.","prerequisite":"A basic understanding of Vue.js, Node.js and PWA is needed to follow this tutorial.","content":"PWAs (Progressive Web Applications) has already been identified as the future of web applications and the reason is quite obvious. PWAs let you build web apps that are capable of delivering native app-like experiences to users.\n\nFrom sending push notifications, to caching data for offline retrieval, to background sync, Progressive web apps have got you completely covered. PWAs can also ensure that users are engaged and up to date with dynamic data even with very poor network connections.\n\n\u003e Progressive Web App (PWA) is a term used to denote web applications that use the latest web technologies. Progressive Web Apps, also known as Installable Web Apps or Hybrid Web Apps, are regular web pages or websites but can appear to the user like traditional applications or native mobile applications. The application type attempts to combine features offered by most modern browsers with the benefits of mobile experience. - [Wikipedia](https://en.wikipedia.org/wiki/Progressive_web_app)\n\nThis article demonstrates how to build a simple realtime PWA with Vue.js and Pusher.\nVue.js is a Progressive Web Framework for JavaScript, it’s easy to use, and requires relatively little code to produce awesome results.\n\nFor the realtime part of this application, we will be plugging in Pusher’s JavaScript library. Pusher is a realtime engine that makes it easy to add realtime functionalities to applications.\n\n## What we’ll be building\n\nIn this article, we will be building a cryptocurrency application called “KryptoWatcher”. Its function is to display the price updates of three cryptocurrencies (Bitcoin, Ethereum, and Litecoin) in realtime. The price updates will be obtained from the Cryptocompare API.\n\nKryptoWatcher will also be able to travel five days into the past and retrieve coin data for those days. Here’s a visual display of what the final application will look like:\n\n![cryptocurrency-tracker-vue-demo](//images.contentful.com/1es3ne0caaid/70YNXoNPl6cuAOAmS0SW8a/3b318c61b0a19378604ac5607a3201eb/cryptocurrency-tracker-vue-demo.gif)\n\nThe best part of it all is that, after this app runs once, it can run again and display coin data even without an internet connection. This is possible because we’ll build `KryptoWatcher` to cache the coin data on the first run.\n\nLet’s start putting the pieces together.\n\n## Requirements\n\nTo follow along in this tutorial, you will need to have the following:\n- Knowledge of [Vue.js](https://vuejs.org/).\n- [Vue CLI](https://vuejs.org/v2/guide/installation.html#CLI) installed on your machine.\n- [Node and NPM](https://docs.npmjs.com/getting-started/installing-node) installed on your machine.\n- Knowledge of Node.js and Express framework.\n- Knowledge of JavaScript.\n- A Pusher Application. [Create one here](https://pusher.com).\n\nOnce you have requirements we can move on to setting up our application.\n\n## Setting up your Pusher application\n\nCreate a [Pusher account](https://pusher.com/), if you have not already, and then set up your application as seen in the screenshot below.\n\n![cryptocurrency-tracker-vue-create-app](//images.contentful.com/1es3ne0caaid/4dQB7DXuQEyecCwE06AuSy/3d775f17a03b1895f67c6e8b80e65e2f/cryptocurrency-tracker-vue-create-app.png)\n\nWhen you have completed the set up, take note of your Pusher application keys as we will need them later on.\n\n## Setting up our Vue.js PWA application\n\nYou can think of the Vue CLI tool as a lightweight tool for scaffolding Vue.js projects. To start building our application we will use the Vue CLI tool to pull in the [Vue PWA template](https://github.com/vuejs-templates/pwa) that we will be working with. \n\nTo create our application run the following command on your terminal:\n\n```\n    $ vue init pwa krypto-watcher\n```\n\nYou’ll be presented with prompts and a few ‘Yes’ or ‘No’ questions. You can answer most as you see fit, however, for the “Y” or “N” prompts, since we do not require the additional functionalities and features, let’s respond with “N” to all the queries.\n\n\n![cryptocurrency-tracker-vue-project-details](//images.contentful.com/1es3ne0caaid/64HwW3fkUouk2OuuGMkmeC/d7b56613d14ecc9f66bb25b55b3e248a/cryptocurrency-tracker-vue-project-details.png)\n\n\nThe template gives us awesome PWA features out of the box. One such feature is the service worker. The service worker allows our application to work offline.\n\n\n\u003e 💡  A service worker is a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction.\n\nTo install the dependencies, go to your terminal window and run the following command:\n \n```\n    $ cd krypto-watcher \u0026\u0026 npm install\n```\n\nIf you take a look at your project directory, you will find that it contains a few subfolders: `build`, `config`, `src`, `static`, `test`. Let’s open the `build/webpack.prod.conf.js` file and take a quick peek at the `SWPrecacheWebpackPlugin` object:\n\n```\n    new SWPrecacheWebpackPlugin({\n        cacheId: 'krypto-watcher',\n        filename: 'service-worker.js',\n        staticFileGlobs: ['dist/**/*.{js,html,css}'],\n        minify: true,\n        stripPrefix: 'dist/'\n    })\n```\n\nWhat this does is generate a new service worker when the application is built (with the `npm run build` command).\n\nThe service worker will cache all the files that match the glob expression, for offline access, in `staticFileGlobs` which currently points to a non-existent `dist` folder. The `dist` directory will be created when we build our application.\n\nLet’s start building out our application component by component.\n\n### Vue.js components\n\nSimilar to other modern JavaScript libraries and frameworks like React, Vue allows us to create components when building applications. Components help us keep our application modular and ensure that apps can be separated into reusable modules.\n\nLet’s build `KryptoWatcher` by creating three reusable components:\n\n1. The `Intro` component which will hold the introductory markup and styles for the application.\n2. The `Current` component which will display coin prices in realtime.\n3. The `Previous` component which will display coins prices from ‘x days ago’.\n\nLet us start creating the components. We will be doing them manually however you can always use an NPM package like [this](https://www.npmjs.com/package/vue-generate-component) to make it easier to create components. Create a `src/components` directory and create the following files in the directory: `Intro.vue`, `Current.vue`, and `Previous.vue`.\n\n### The intro component\nThis component has no special functionalities as it just holds the intro markup and styles that will make the app presentable. The HTML goes between the `template` tags and the styles go in the `styles` tag.\n\nIn the `Intro.vue` file paste the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cheader class=\"hero\"\u003e\n        \u003cdiv class=\"bar logo\"\u003e\n          \u003ch3\u003eKryptoWatcher\u003c/h3\u003e\n          \u003cspan class=\"monitor\"\u003e\u003cspan class=\"monitorText\"\u003ereceive updates\u003c/span\u003e\u003c/span\u003e\n        \u003c/div\u003e\n        \u003ch1\u003eRealtime PWA that displays updates on cryptocurrencies\u003c/h1\u003e\n        \u003ch2\u003eBitcoin, Ethereum, Litecoin?\u003c/h2\u003e\n      \u003c/header\u003e\n    \u003c/template\u003e\n    \u003cscript\u003eexport default { name: 'app' }\u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    header {\n        background: linear-gradient(to bottom right, rgb(0, 193, 131),rgb(50, 72, 95));\n        padding: 1em;\n        margin-bottom: 1em;\n        text-align: center;\n        height: 300px;\n        color: #fff;\n    }\n    header h3 {\n        color: white;\n        font-weight: bold;\n        text-transform: uppercase;\n        float: left;\n    }\n    bar { padding: 20px; height: 48px; }\n    .monitor{\n        text-transform: uppercase;\n        float:right;\n        background-color: rgba(255, 255, 255, 0.2);\n        line-height: 23px;\n        border-radius: 25px;\n        width: 175px;\n        height: 48px;\n        margin: auto;\n    }\n    .monitor:hover, monitorText:hover { cursor:pointer; }\n    .monitorText{\n        width: 104px;\n        height: 23px;\n        font-weight: bold;\n        line-height: 50px;\n        font-size: 14px;\n    }\n    header h1 { padding-top: 80px; width: 80%; margin: auto; }\n    header h2{ padding-top:20px; }\n    \u003c/style\u003e\n```\n\nThat is all for the intro component.\n\n### The current component\nIn the `Current.vue` component, we’ll write some HTML that displays the prices in realtime as they are updated. Open the file and paste the following inside the file:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch2\u003eCurrent prices of coins\u003c/h2\u003e\n        \u003cdiv id=\"btc\" class=\"currency\"\u003e\n          \u003clabel\u003e1 BTC\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.BTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"eth\"class=\"currency\"\u003e\n          \u003clabel\u003e1 ETH\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.ETH}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"ltc\"class=\"currency\"\u003e\n          \u003clabel\u003e1 LTC\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nBelow the `template` tags, we will have the `script` tag. This will be where we will handle the scripting of the component. Below the `template` tag in the same file, paste the following code:\n\n```\n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      props: {\n        currentCurrency: { type: Object }\n      }, \n      data () {\n        return {}\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe script above specifies the `props` the `Current` component should expect. It will be getting it, `currentCurrency`, from the parent component `App.vue`.\n\nLastly, below the `script` tag, let’s include the `style` for the component. Paste the following code after the `script` tag:\n\n```\n    \u003cstyle scoped\u003e\n    .currency {\n      border: 1px solid #F5CE00;\n      border-radius: 15px;\n      padding: 2em 0em;\n      display: inline-block;\n      width: 30%;\n    }\n    div p { font-size: 2rem; }\n    h2 { font-size: 1.5em; }\n    \u003c/style\u003e\n```\n\nThat’s all for the `Current` component.\n\n### The previous component\nThis component should display the prices of coins in the past, five days at most. We’ll also display the dates of each of the days.\n\nInside the `Previous.vue` file paste the following code:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch2\u003ePrevious prices of coins\u003c/h2\u003e\n        \u003cdiv id=\"first\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.yesterday.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.yesterday.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.yesterday.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.yesterday.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"second\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.twoDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.twoDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.twoDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.twoDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"third\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.threeDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.threeDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.threeDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.threeDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"fourth\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.fourDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.fourDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.fourDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.fourDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"fifth\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.fiveDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.fiveDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.fiveDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.fiveDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nIn the `script` section, we’ll be receiving the `previousCurrency` object from the parent component, `App.vue`. In the same file paste the following code after the `template` tag:\n\n```\n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      props: {\n        previousCurrency: { type: Object }\n      },\n      data () {\n        return {}\n      }\n    }\n    \u003c/script\u003e\n```\n\nLastly, some styles to help things stay pretty:\n\n```\n    \u003cstyle scoped\u003e\n    #first, #second, #third, #fourth, #fifth {\n      border: 1px solid #F5CE00;\n      padding: 2em 0em;\n      max-width: 90%;\n      margin: 3px auto;\n    }\n    #first p, #second p, #third p, #fourth p, #fifth p {\n      display: inline-block;\n      padding: 0em 1.5em;\n      font-size: 1.5rem;\n    }\n    h2 { font-size: 1.5em; }\n    \u003c/style\u003e\n```\n\nThat’s pretty much all the business we have with the three components, they are pretty straightforward. Most of the complexity and app logic are buried in the root component, `App.vue`. Let’s explore that next.\n\n### Setting up the root component\n\nThe root component is included by default in every fresh Vue installation in the `src/App.vue` file, so we don’t need to create it. Unlike the other components we created earlier, the root component holds the logic and is more complex than them. \n\nWe’ll keep the `template` tag of the root component simple. We include the earlier components, `Intro.vue`, `Current.vue`, and `Previous.vue`, as custom tags and pass in the appropriate `props`.\n\nIn the `App.vue` file, replace the contents with the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003cintro\u003e\u003c/intro\u003e\n        \u003cdiv id=\"body\"\u003e\n          \u003cdiv id=\"current\"\u003e\n            \u003ccurrent v-bind:currentCurrency=\"currentCurrency\"\u003e\u003c/current\u003e\n          \u003c/div\u003e\n          \u003cdiv id=\"previous\"\u003e\n            \u003cprevious v-bind:previousCurrency=\"previousCurrency\"\u003e\u003c/previous\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nNext, let’s add some `script` and start adding logic in the `script` section. Paste the following below the `template` tag:\n\n```\n    \u003cscript\u003e\n    import Intro from './components/Intro.vue';\n    import Current from './components/Current.vue';\n    import Previous from './components/Previous.vue';\n    \n    export default {\n      name: 'app',\n      components: {Intro, Current, Previous},\n      data() {\n        return {\n          currentCurrency: {BTC: '', ETH: '', LTC: ''},\n          previousCurrency: {\n            yesterday: {}, twoDays: {}, threeDays: {}, fourDays: {}, fiveDays: {}\n          }\n        }\n      },\n      methods: {\n        // Stub\n      },\n      created() {\n        // Stub\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe script above does not do much but it sets the stage for our logic. We have set all the defaults for the `data` we will be using in the application and we have defined the `created` method that is called automatically during Vue’s component lifecycle. We also imported the components we will be using in the application.\n\nBefore we start adding script logic, let’s add some style for the root component. Below the `script` tag, paste the following code:\n\n```\n    \u003cstyle\u003e\n    @import url('https://fonts.googleapis.com/css?family=Lato');\n    * {\n      margin : 0px;\n      padding : 0px;\n      font-family: 'Lato', sans-serif;\n    }\n    body { height: 100vh; width: 100%; }\n    .row { display: flex; flex-wrap: wrap; }\n    h1 { font-size: 48px; }\n    a { color: #FFFFFF; text-decoration: none; }\n    a:hover { color: #FFFFFF; }\n    a:visited { color: #000000; }\n    .button {\n      margin: auto;\n      width: 200px;\n      height: 60px;\n      border: 2px solid #E36F55;\n      box-sizing: border-box;\n      border-radius: 30px;\n    }\n    #body {\n      max-width: 90%;\n      margin: 0 auto;\n      padding: 1.5em;\n      text-align: center;\n      color:rgb(0, 193, 131);\n    }\n    #current { padding: 2em 0em; }\n    #previous { padding: 2em 0em; }\n    \u003c/style\u003e\n```\n\n### Adding methods to our root component\n\nWe need to populate the `method` object with actual methods. We’ll start by defining the methods that will retrieve coin prices for previous days.\n\n### Pulling in dependencies\nSince we are getting data from a remote API, we need an HTTP client to pull in the data for us. In this article, we’ll be using the promise based HTTP client [axios](https://github.com/axios/axios) to make our HTTP requests. We also need [moment](https://momentjs.com/) to easily work with dates.\n\nTo add Axios and Moment.js to our project, run the following command in your terminal:\n\n```\n    npm install --save vue-axios axios vue-momentjs moment\n```\n\n\u003e 💡  `vue-axios` and `vue-momentjs` are Vue wrappers around the Axios and Moment.js packages.\n\nWhen the installation is complete, we will globally import the packages to our application. Open the `src/main.js` file and in there replace:\n\n```\n    import App from './App'\n```\n\nwith:\n\n```\n    import App from './App'\n    import moment from 'moment';\n    import VueMomentJS from 'vue-momentjs';\n    import axios from 'axios'\n    import VueAxios from 'vue-axios'\n     \n    Vue.use(VueAxios, axios)\n    Vue.use(VueMomentJS, moment);\n```\n\n### Building the methods logic\nNext, we want to go back to our root component and build out the `methods` object. In the `methods` object, let’s create the first method. Paste the following code inside the `methods` object in the `App.vue` file:\n\n```\n    _fetchDataFor: (key, daysAgo) =\u003e {\n      var date = this.$moment().subtract(daysAgo, 'days').unix()\n      let fetch = (curr, date) =\u003e this.axios.get(`https://min-api.cryptocompare.com/data/pricehistorical?fsym=${curr}\u0026tsyms=USD\u0026ts=${date}`)\n      \n      this.axios\n          .all([fetch('BTC', date), fetch('ETH', date), fetch('LTC', date)])\n          .then(this.axios.spread((BTC, ETH, LTC) =\u003e {\n              this.previousCurrency[key] = {\n                  BTC: BTC.data.BTC.USD,\n                  LTC: LTC.data.LTC.USD,\n                  ETH: ETH.data.ETH.USD,\n                  DATE: this.$moment.unix(date).format(\"MMMM Do YYYY\"),\n              }\n              \n              localStorage.setItem(`${key}Prices`, JSON.stringify(this.previousCurrency[key]));\n          }))\n    },\n```\n\nThe method above is a helper method for fetching the coin exchange rate within a specified period and saving the response in `localStorage` and the `this.previousCurrency` object. We will use this later in the code.\n\nNext, paste the following function inside the `methods`  object alongside the one we added above:\n\n```\n    _fetchDataForToday: () =\u003e {\n      let url = 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD'\n      \n      this.axios.get(url).then(res =\u003e {\n        localStorage.setItem('BTC', this.currentCurrency.BTC = res.data.BTC.USD),\n        localStorage.setItem('ETH', this.currentCurrency.ETH = res.data.ETH.USD),\n        localStorage.setItem('LTC', this.currentCurrency.LTC = res.data.LTC.USD)\n      })\n    },\n```\n\nThe method above simply fetches the coin data for the current date and saves the response to `localStorage` and the `this.currentCurrency` object.\n\nNext, inside the `created()` method of the root component, paste in the following code:\n\n```\n    if ( ! navigator.onLine) {\n      this.currentCurrency = {\n        BTC: localStorage.getItem('BTC'),\n        ETH: localStorage.getItem('ETH'),\n        LTC: localStorage.getItem('LTC'),\n      }\n      \n      this.previousCurrency = {\n        yesterday: JSON.parse(localStorage.getItem('yesterdayPrices')),\n        twoDays:   JSON.parse(localStorage.getItem('twoDaysPrices')),\n        threeDays: JSON.parse(localStorage.getItem('threeDaysPrices')),\n        fourDays:  JSON.parse(localStorage.getItem('fourDaysPrices')),\n        fiveDays:  JSON.parse(localStorage.getItem('fiveDaysPrices'))\n      }\n    } else {\n      this._fetchDataFor('yesterday', 1)\n      this._fetchDataFor('twoDays', 2)\n      this._fetchDataFor('threeDays', 3)\n      this._fetchDataFor('fourDays', 4)\n      this._fetchDataFor('fiveDays', 5)\n      this._fetchDataForToday()\n    }\n```\n\nIn the code above, we have defined the code to fetch the current currency from `localStorage` if the client is offline. If the client is online though, it fetches the data from the API.\n\nEverything should be working now except the realtime functionality.\n\n![cryptocurrency-tracker-vue-draft](//images.contentful.com/1es3ne0caaid/70EsAUqmNqSogEYYgwg640/c70439aeb26fd7963309b4cfb39dce7f/cryptocurrency-tracker-vue-draft.png)\n\n### Integrating realtime functionality using Pusher\n\nNow that we have a functional application, we would like to add some realtime functionality so we see updates as they happen. \n\nWe will be using Pusher to provide this functionality, if you haven’t, create your Pusher application from the Pusher dashboard as you will need the: `app_id`, `key`, `secret` and `cluster`.\n\n#### Building a Node.js backend for our application\nWe need a backend server to trigger events to Pusher, we will be using Node.js to build the backend for this article.\n\nTo get started, create a new file in the root directory of our application and call it `server.js`.\nIn this `server.js` file, we’ll be using `Express` as the web framework so we need to pull that in. We’ll also pull in `axios`, `Pusher` and `body-parser` since we’d be making references to them in our code.\n\nIn your terminal type in the following command:\n\n```\n    $ npm install --save express axios body-parser pusher\n```\n\nWhen the installation is complete, open the `server.js` file and in the file paste in the following code:\n\n```\n    const express = require('express');\n    const path = require('path');\n    const bodyParser = require('body-parser');\n    const app = express();\n    const Pusher = require('pusher');\n    const axios = require('axios');\n    \n    \n    // Initialise Pusher\n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // Body parser middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // CORS middleware\n    app.use((req, res, next) =\u003e {\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        next()\n    });\n    \n    // Routes\n    app.get('/', _ =\u003e res.send('Welcome'));\n    \n    // Simulated Cron\n    setInterval(_ =\u003e {\n      let url = 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD';\n      \n      axios.get(url).then(res =\u003e {\n        pusher.trigger('price-updates', 'coin-updates', {coin: res.data})\n      })\n    }, 5000)\n    \n    // Start app\n    app.listen(8000, () =\u003e console.log('App running on port 8000!'));\n```\n\n\u003e 💡  You need to replace `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, and `PUSHER_APP_CLUSTER` with the details from your Pusher application dashboard.\n\nIn the Express app above, we import our dependencies and then instantiate Pusher. We then register some middleware including the [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) middleware so we don’t get cross origin request errors.\n\nNext, we have a “Simulated Cron” that runs after 5 seconds. The job is to fetch the updates from the server and send the updates to Pusher. Our Vue application can then subscribe to the Pusher channel, pull the changes and display them.\n\nFinally, we tell the Node app to listen on port **8000**. To start the Node server, run the command below:\n\n```\n    $ node server.js \n```\n\nThis will start a Node server and the simulated cron will start running and sending events to Pusher.\n\n## Creating an API proxy\n\nTo access our API server from the Vue application, we can create a proxy in `config/index.js` and run the dev server and the API backend side-by-side. All requests to `/api` in our frontend code will be proxied to the backend server.\n\nOpen the `config/index.js` and make the following modifications:\n\n```\n    // config/index.js\n    module.exports = {\n      // ...\n      dev: {\n        // ...\n        proxyTable: {\n            '/api': {\n            target: 'http://localhost:8000',\n            changeOrigin: true,\n            pathRewrite: {\n              '^/api': ''\n            }\n          }\n        },\n        // ...\n      }\n    }\n```\n\nIn the `proxyTable` we attempt to proxy requests from `/api` to `localhost:8000`. \n\n### Using Pusher in our Vue.js application\nTo use `Pusher` on the client side of our application we need to pull in the `pusher-js`. Run the following command in your terminal:\n\n```\n    $ npm install --save pusher-js\n```\n\nWhen the installation is complete, we will import `pusher-js` to the root component. Within the `script` tag add the following at the top:\n\n```\n    import Pusher from 'pusher-js'\n```\n\nNext we will initialize Pusher with the app credentials from the Pusher dashboard and subscribe to a channel in the `created()` life cycle hook. Open the `App.vue` and add this to the bottom of the `created()` method in the `else` block:\n\n```\n    let pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    let channel = pusher.subscribe('price-updates');\n    \n    channel.bind('coin-updates', data =\u003e {\n      this.currentCurrency = {\n        BTC: data.coin.BTC.USD, \n        ETH: data.coin.ETH.USD, \n        LTC: data.coin.LTC.USD\n      }\n    });\n```\n\nIn the code above, we subscribe to receive updates on the `price-updates` channel. Then we bind to the `coin-updates` event on the channel. When the event is triggered, we get the data and update the `currentCurrency`.\n\nThat’s all now. You can build the application by running the command below:\n\n```\n    $ npm run dev\n```\n\nThis should start and open the Vue PWA on your browser. To make sure you receive updates, make sure your Node server is running. \n\n![cryptocurrency-watcher-vue-demo](//images.contentful.com/1es3ne0caaid/4beBtBCJjqiWK4GKa0Mw0i/13f64db1b24726b8b3e19ccb17aa92a6/cryptocurrency-watcher-vue-demo.gif)\n\n## Using service workers and offline capability\n\nAs it is, the application already functions but is not a PWA in true sense of the term. So let us work on making the application a PWA with offline storage. The build process already automatically generates the service worker when the application is built so let’s build the application. Run the following command to build the application:\n\n```\n    $ npm run build\n```\n\nThis command creates a `dist` folder in our working directory and also registers a new service worker. Let’s serve this `dist` directory and take a peek at the generated service worker in a Chrome web browser.\n\nWe’ll serve this application using an NPM package called [Serve](https://www.npmjs.com/package/serve). Run the following command to install it:\n\n```\n    $ npm i serve -g\n```\n\nWhen the installation is complete, we will use the package to serve the application. Run the following command to serve the application:\n\n```\n    $ serve dist\n```\n\nWe should get an output that looks like this:\n\n\n![cryptocurrency-tracker-vue-output](//images.contentful.com/1es3ne0caaid/5D35dFM7PGssemAeMO0IcS/2563dfc1d3b90732117be8babc5ae2d0/cryptocurrency-tracker-vue-output.png)\n\n\nIf we navigate to this address `http://localhost:5000` on our web browser, we’d see our application as it was the last time, no obvious changes except for the fact that the app is now a PWA.\n\nWe can inspect this feature by opening the browser’s dev tools and clicking on the “Application” tab. Here’s what we should see:\n\n\n![cryptocurrency-tracker-vue-service-workers](//images.contentful.com/1es3ne0caaid/1V3EsE6wwoicCOo6KQgiG0/35da6aa92c35a46419c58dacb08b7a3a/cryptocurrency-tracker-vue-service-workers.png)\n\n\nOur app registered a service worker that caches the app shell on the first run, thanks to the Vue PWA template.\n\n\n\u003e 💡  An application shell (or app shell) refers to the local resources that your web app needs to load the skeleton of your user interface (UI). Think of your app's shell like the bundle of code you would publish to a native app store when building a native app.\n\n\n## Conclusion\n\nIn this tutorial, we have seen how to write a simple realtime PWA with Vue.js, Pusher and Service Workers. We also saw how to cache dynamic values from a remote API using the Web Storage API’s storage object. There is a lot more you can do with PWAs and Vue, but this is a good introduction so far.","metaTitle":"Build a cryptocurrency tracker using Vue.js","metaDescription":"In this tutorial, learn how to build a realtime cryptocurrency tracker using Progressive Web Apps, Vue.js, Node.js and and Service Workers."}}],"defaultValue":"Vue.js","queryType":"tag","pages":9,"route":"/tutorials","query":{"tag":"Vue.js","page":"6"}}},"page":"/tutorials","query":{"tag":"Vue.js","page":"6"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Vue.js&page=6 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:55 GMT -->
</html>