<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Vue.js&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:13 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">74</span> tutorials for “<span class="css-npldjc ehwuahf2">Vue.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsedf8.html?product=Channels&amp;tag=Vue.js" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsa504.html?product=Beams&amp;tag=Vue.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Vue.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/chat-flask-vue-part-4.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis  - Part 4: Adding an online presence feature</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-graphql-subscriptions.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building live chat app with GraphQL subscriptions</h3><p class="css-k12xad e5jrto45">This brief tutorial takes you through building a simple chat app using GraphQL and Vue.js. Users will be able to talk on...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/emotion-recognition-tensorflow.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an emotion recognition application with Tensorflow.js</h3><p class="css-k12xad e5jrto45">Build a simple web app in Vue that takes input from a webcam and can learn to recognize emotions. Implement machine lear...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-python-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player game with Python and Vue</h3><p class="css-k12xad e5jrto45">Build a simple two-player game featuring online presence and realtime interactions. Use Python for the backend, and Vue ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/go-vue-online-presence.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Go application with online presence</h3><p class="css-k12xad e5jrto45">In this tutorial you&#x27;ll build a simple Go application, using Vue.js for the frontend. Users will be able to sign in and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/calendar-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Calendar event scheduling in Vue</h3><p class="css-k12xad e5jrto45">Build a calendar using Vue.js, with a Node.js backend. Users are able to add events to the calendar, with all instances ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-framework7.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using Framework7</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-blog-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live blog using Go and Vue.js</h3><p class="css-k12xad e5jrto45">Build a live blogging app using Go and Vue.js. Admin users can post blog updates, and readers can see posts appear in re...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comments feed with Go and Vue.js</h3><p class="css-k12xad e5jrto45">Build a simple comments feed using Go, Vue.js and SQLite. Users can comment on a post, with the comments feed updating i...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsdb36.html?tag=Vue.js&amp;page=4" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials7118.html?tag=Vue.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials60f4.html?tag=Vue.js&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorialsdb36.html?tag=Vue.js&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials7b12.html?tag=Vue.js&amp;page=5" class="css-2wakph edg0byb1">5</a><a href="tutorialsd161.html?tag=Vue.js&amp;page=6" class="css-za1ua3 edg0byb1">6</a><a href="tutorialsacf8.html?tag=Vue.js&amp;page=7" class="css-za1ua3 edg0byb1">7</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials27ac.html?tag=Vue.js&amp;page=9" class="css-5s6711 edg0byb1">9</a><a href="tutorialsd161.html?tag=Vue.js&amp;page=6" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":74,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1dAElRmwsyikCgyiGYIWyo","type":"Entry","createdAt":"2018-11-14T19:41:10.290Z","updatedAt":"2019-01-02T15:42:34.989Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis  - Part 4: Adding an online presence feature","url":"chat-flask-vue-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-4","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-04","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part four, add an online presence feature.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this part, we’ll see how to add a “who’s online” feature. This feature will make our chat more lively. This way we know if the other participants are online so we know if we’ll be getting a reply soon. The code is available on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-4).\n\nYou can find the previous parts of the series here: \n[Part 1](https://pusher.com/tutorials/chat-flask-vue-part-1) \n[Part 2](https://pusher.com/tutorials/chat-flask-vue-part-2) \n[Part 3](https://pusher.com/tutorials/chat-flask-vue-part-3)\n\nIf you don't have the setup from previous parts, follow the below instructions to get it otherwise skip this.\n\n```\n    # Clone the repo\n    $ git clone https://github.com/dongido001/pusher-chat-sentiment-analysis.git -b part-3\n    \n    # Go to the project root folder\n    $ cd pusher-chat-sentiment-analysis\n    \n    # Install dependencies\n    $ npm install\n```\n\nUpdate the `.env` file in the project’s root folder with your correct Pusher App key:\n\n```\n    VUE_APP_PUSHER_KEY=\u003cPUSHER_APP_KEY\u003e\n    VUE_APP_PUSHER_CLUSTER=\u003cPUSHER_APP_CLUSTER\u003e\n```\n\nThen run the app:\n\n```\n    # Start vue app\n    $ npm run serve\n```\n\nThen from a new terminal execute the following:\n\n```\n    $ cd api\n    $ python -m venv env\n    $ pip install -r requirements.txt\n    $ source env/bin/activate\n```\n\nUpdate the `api/.env`  file with your correct Pusher API key:\n\n```\n    PUSHER_APP_ID=app_id\n    PUSHER_KEY=key\n    PUSHER_SECRET=secret\n    PUSHER_CLUSTER=cluster\n```\n \n```\n    $ flask run\n```\n\nNow you should have both apps running. Both apps should be running on a different port. Note the URL of the Vue.js app in your terminal because this is what you will use to access the chat application.\n\n## Presence channels\n\n[Presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) are similar to the private chat channel. It exposes an additional feature of an awareness of who is subscribed to a channel. This will enable us to easily implement “who’s online” functionality into our chat app. When naming a presence channel, it needs to have a prefix of “presence-”.\n\nThe flow is much related to the private channel. First, we will subscribe all users logging in to the app to a presence channel we’ll name “presence-chitchat”. Before they are subscribed, Pusher will make a request to our auth endpoint (which we have already) to authenticate the channel. \n\nAn important thing to note is that when setting up the authentication for presence channel, you must add a custom data to the authenticate function. The custom data is the information of the user you want to authenticate. The custom data will be passed back to your client’s app so we can use them.\n\n\n## Authenticating channel\n\nFirst, let’s update the endpoint so that it accommodates authentication for presence channels.\n\nWhen Pusher makes a request to this endpoint to authenticate the channel, it passes along the channel name and the connected user’s socket ID. \n\nRemember that our routes are protected with JWT. We are using the `@jwt_required` decorator to protect the route.  When Channels makes the request to the endpoint, it includes a JWT token in its request header. If the token is not valid, it results to a 403 HTTP error. Also, remember that we set the JWT token to be included in  the request header while we are initializing Pusher JavaScript client.\n\nUpdate the `pusher_authentication` function in `api/app.py` to include custom data:\n\n``` python\n    # ./api/app.py\n    \n    [...]\n    @app.route(\"/api/pusher/auth\", methods=['POST'])\n    @jwt_required\n    def pusher_authentication():\n        channel_name = request.form.get('channel_name')\n        socket_id = request.form.get('socket_id')\n        \n        username = get_jwt_identity()\n        \n        user_data = User.query.filter_by(username=username).first()\n        \n        auth = pusher.authenticate(\n            channel=channel_name,\n            socket_id=socket_id,\n            custom_data={\n                \"user_id\": user_data.id,\n                \"user_info\": {\n                   \"username\": user_data.username\n                }\n            }\n        )\n        \n        return jsonify(auth)\n    [...]\n```\n\nIn the code above,\n\n- We first fetch the channel name and socket ID from the request.\n- Then, we fetch the username from the JWT token.\n- Next, we query the database with the username to get more information about the user.\n- Finally, we call `pusher.authenticate` to authenticate the channel. We also added some custom data to the authenticate function. The `user_id` in the `custom_data` is the ID of the user while the user_info property is for additional information for that user.\n\nNow, with this, we can authenticate both our private and presence channel.\n\n\n\u003e ⚠️ If you don’t include a custom data, the channel won’t be authenticated. This means you won’t be able to subscribe to the channel. The `user_id` in the custom data is also required.\n\n\n## Subscribe the user\n\nNow, let’s subscribe our users to a common channel from the Vue app. We’ll name this channel `presence-chatchit`.\n\nAdd the following code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    var presenceChannel = pusher.subscribe(\"presence-chitchat\");\n```\n\nOnce the user logs in,  we’ll subscribe the user to the `presence-chitchat` channel.\n\nNext, update the user `is_online` status to true as they subscribe. Add the below code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    [...]\n    presenceChannel.bind(\"pusher:member_added\", data =\u003e {\n      // Get the index of user that just scubscribed\n      const index = this.users.findIndex(user =\u003e user.id == data.id);\n      \n      // Set the is_online status of the user to true\n      this.$set(this.users, index, { ...this.users[index], is_online: true });\n    });\n    [...]\n```\n\nHere,\n\n- We bind the channel to the pre-defined event called `pusher:member_added`. This event is available by default for the presence channels. In the event, we can access the custom data we added while authenticating the channel.\n- `this.users` is a state we used for storing all users available on the app.\n- the `data` is the custom data we passed while authenticating the channel.\n- Then finally, we [set](https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats) the `is_online` status for the user to be true.\n\nNext, update the user `is_online` status to false as they leave the channel. Add the below code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    [...]\n    presenceChannel.bind(\"pusher:member_removed\", data =\u003e {\n      // Get the index of user that just subscribed\n      const index = this.users.findIndex(user =\u003e user.id == data.id);\n      \n      // Set the is_online status of the user to false\n      this.$set(this.users, index, {\n        ...this.users[index],\n        is_online: false\n      });\n    });\n    [...]\n```\n\nHere, we bind the channel to the pre-defined event called `pusher:member_removed`. This event is available by default for the presence channels. Then finally, we [set](https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats) the `is_online` status for the user to be false.\n\nNext, get all users already on the channel before the user joined and set their `is_online` status to be true. Add the below code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    [...]\n    presenceChannel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n      // Fetch members already on this channel, then set them to be online\n      for (let member_id of Object.keys(data.members)) {\n        const index = this.users.findIndex(user =\u003e user.id == member_id);\n        this.$set(this.users, index, {\n          ...this.users[index],\n          is_online: true\n        });\n      }\n    });\n    [...]\n```\n\nThe `pusher:subscription_succeeded` is triggered as soon as a user subscribes to the channel. As the user subscribes to the channel, it’s possible to have users already subscribed to that channel. \n\nIn the code above, when we get the event, we’ll fetch all the users already subscribed to the channel and then update their is_online property to true.\n\n## Adding an online indicator\n\nWe need an indicator that shows if a user is online or offline. We’ll use a small circle beside a user to show when the user is online, and remove it when the user is offline.\n\nIn the template section of `src/components/Users.vue`, add the below markup:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv style=\"margin-top: 0px;\"\u003e\n        \u003cdiv v-for=\"(user, id) in users\" v-bind:key=\"id\"\u003e\n          \u003cdiv\n            v-bind:class=\"[activeUser == user.id ? 'user active' : 'user']\"\n            @click=\"chat(user.id)\"\n          \u003e\n            {{user.userName}}\n            \u003cspan v-if=\"user.has_new_message\" class=\"has_new_message\"\u003eNew message\u003c/span\u003e\n            \u003cspan v-if=\"user.is_online\" class=\"online\"\u003e\u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nHere, we check if the user is online so that we can show the HTML indicator.\n\nNext, add some style for the indicator in the `\u003cstyle\u003e` section of the `src/components/Users.vue` file:\n\n``` css\n    [...]\n    .online {\n      height: 15px;\n      width: 15px;\n      background-color: #17a2b8;\n      border-radius: 50%;\n      display: inline-block;\n      margin-bottom: -4px;\n      border: 1px solid white;\n    }\n    [...]\n```\n\n### Testing the app\n\nCongrats! Now we can see those online and those that are offline. \n\nNow test the app. Open the app in different tabs on your browser then log in. You will get a similar experience as below!\n\n![flask-vue-sentiment-demo-part-4](//images.ctfassets.net/1es3ne0caaid/5iuUiYUuME0qUO6CcWgqWk/f3d0cdf1ff02d41dcf640a06c5c04603/flask-vue-sentiment-demo-part-4.gif)\n\n## Conclusion\n\nIn this tutorial, we explored how to add a “who’s online” feature to chat apps using Channel’s presence channel. \n\nThe source code for the tutorial is available in [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-4).","metaTitle":"Build a chat app in Flask and Vue - Part 4","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part four, add an online presence feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4cFHa1iHtYyG2oUgkS6U4q","type":"Entry","createdAt":"2018-10-30T15:29:10.088Z","updatedAt":"2019-01-02T15:45:26.747Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building live chat app with GraphQL subscriptions","url":"chat-graphql-subscriptions","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/graphql-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}}],"reviewDate":"2018-09-02","description":"This brief tutorial takes you through building a simple chat app using GraphQL and Vue.js. Users will be able to talk one-to-one in realtime, using GraphQL's subscriptions feature.","prerequisite":"You will need Node and the Vue CLI installed on your machine.","content":"One of the exciting things about GraphQL is the ability to build realtime applications with it, through the use of GraphQL subscriptions. In this tutorial, I’ll be showing you how to build a realtime app with GraphQL subscriptions.\n\n## Prerequisites\n\nThis tutorial assumes the following:\n\n- Node.js and NPM installed on your computer\n- Vue CLI 3 installed on your computer\n- Basic knowledge of GraphQL\n- Basic knowledge of JavaScript and Vue.js\n\n## What we'll be building\n\nWe’ll be building a simple chat app. We’ll start by building the GraphQL server, then we’ll build a Vue.js app that will consume the GraphQL server. To keep this tutorial focused, we won’t be working with a database. Instead, we’ll save the chats in an in-memory array.\n\nBelow is a quick demo of the final app:\n\n![graphql-realtime-chat-demo](//images.ctfassets.net/1es3ne0caaid/2O9KqUyxCwgQO0QOAqy0cM/469d8a6e331f641e0e2f1572ae33c366/graphql-realtime-chat-demo.gif)\n\n## What are GraphQL subscriptions?\n\nBefore we dive into code, let’s take a quick look at what is GraphQL subscriptions. GraphQL subscriptions add realtime functionality to GraphQL. They allow a server to send data to clients when a specific event occurs. Just as queries, subscriptions can also have a set of fields, which will be returned to the client. Unlike queries, subscriptions doesn’t immediately return a response, but instead, a response is returned every time a specific event occurs and the subscribed clients will be notified accordingly.\n\nUsually, subscriptions are implemented with WebSockets. You can check out the [Apollo GraphQL subscriptions docs](https://www.apollographql.com/docs/graphql-subscriptions) to learn more.\n\n## Building the GraphQL server\n\nTo speed the development process of our GraphQL server, we’ll be using [graphql-yoga](https://github.com/prisma/graphql-yoga). Under the hood, graphql-yoga makes use of Express and  Apollo Server. Also, it comes bundled with all the things we’ll be needing in this tutorial, such as [graphql-subscriptions](https://github.com/apollographql/graphql-subscriptions). So let’s get started.\n\nWe’ll start by creating a new project directory, which we’ll call `graphql-chat-app`:\n\n```\n    $ mkdir graphql-chat-app\n```\n\nNext, let’s `cd` into the new project directory and create a `server` directory:\n\n```\n    $ cd graphql-chat-app\n    $ mkdir server\n```\n\nNext, `cd` into `server` and run the command below:\n\n```\n    $ cd server\n    $ npm init -y\n```\n\nNow, let’s install `graphql-yoga`:\n\n```\n    $ npm install graphql-yoga\n```\n\nOnce that’s done installing, we’ll create a `src` directory inside the `server` directory:\n\n```\n    $ mkdir src\n```\n\nThe `src` directory is where our GraphQL server code will reside. So let’s create an `index.js` file inside the `src` directory and paste the code below in it:\n\n``` javascript\n    // server/src/index.js\n    \n    const { GraphQLServer, PubSub } = require('graphql-yoga')\n    const typeDefs = require('./schema')\n    const resolvers = require('./resolver')\n    \n    const pubsub = new PubSub()\n    const server = new GraphQLServer({ typeDefs, resolvers, context: { pubsub } })\n    \n    server.start(() =\u003e console.log('Server is running on localhost:4000'))\n```\n\nHere, we import `GraphQLServer` and `PubSub` (which will be used to publish/subscribe to channels) from `graphql-yoga`. Also, we import our schemas and resolvers (which we’ll create shortly). Then we create an instance of `PubSub`. Using `GraphQLServer`, we create our GraphQL server passing to it the schemas, resolvers and a context. Noticed we pass `pubsub` as a context to our GraphQL server. That way, we’ll be able to access it in our resolvers. Finally, we start the server.\n\n### Defining the schemas\nInside the `src` directory, create a `schema.js` file and paste the code below in it:\n\n``` javascript\n    // server/src/schema.js\n    \n    const typeDefs = `\n      type Chat {\n        id: Int!\n        from: String!\n        message: String!\n      }\n      \n      type Query {\n        chats: [Chat]\n      }\n      \n      type Mutation {\n        sendMessage(from: String!, message: String!): Chat\n      }\n      \n      type Subscription {\n        messageSent: Chat\n      }\n    `\n    module.exports = typeDefs\n```\n\nWe start by defining a simple `Chat` type, which has three fields: the chat ID, the username of the user sending the message and the message itself. Then we define a query to fetch all messages and a mutation for sending a new message, which accepts the username and the message. Lastly, we define a subscription, which we are calling `messageSent` and it will return a message.\n\n### Writing the resolver functions\n\nWith the schemas defined, let’s move on to defining the resolver functions. Inside the `src` directory, create a `resolver.js` file and paste the code below in it:\n\n``` javascript\n    // server/src/resolver.js\n    \n    const chats = []\n    const CHAT_CHANNEL = 'CHAT_CHANNEL'\n    \n    const resolvers = {\n      Query: {\n        chats (root, args, context) {\n          return chats\n        }\n      },\n      \n      Mutation: {\n        sendMessage (root, { from, message }, { pubsub }) {\n          const chat = { id: chats.length + 1, from, message }\n          \n          chats.push(chat)\n          pubsub.publish('CHAT_CHANNEL', { messageSent: chat })\n          \n          return chat\n        }\n      },\n      \n      Subscription: {\n        messageSent: {\n          subscribe: (root, args, { pubsub }) =\u003e {\n            return pubsub.asyncIterator(CHAT_CHANNEL)\n          }\n        }\n      }\n    }\n    \n    module.exports = resolvers\n```\n\nWe create an empty chats array, then we define our channel name, which we call `CHAT_CHANNEL`. Next, we begin writing the resolver functions. First, we define the function to fetch all the messages, which simply returns the chats array. Then we define the `sendMessage` mutation. In the `sendMessage()`, we create a chat object from the supplied arguments and add the new message to the chats array. Next, we make use of the `publish()` from the `pubsub` object, which accepts two arguments: the channel (`CHAT_CHANNEL`) to publish to and an object containing the event (`messageSent`, which must match the name of our subscription) to be fired and the data (in this case the new message) to pass along with it. Finally, we return the new chat.\n\nLastly, we define the subscription resolver function. Inside the `messageSent` object, we define a `subscribe` function, which subscribes to the `CHAT_CHANNEL` channel, listens for when the `messageSent` event is fired and returns the data that was passed along with the event, all using the `asyncIterator()` from the `pubsub` object.\n\nLet’s start the server since we’ll be using it in the subsequent sections:\n\n```\n    $ node src/index.js\n```\n\nThe server should be running at `http://localhost:4000`.\n\n## Building the frontend app\n\nWith the GraphQL server ready, let’s start building the frontend app. Using the Vue CLI, create a new Vue.js app directly inside the project’s root directory:\n\n```\n    $ vue create frontend\n```\n\nAt the prompt, we’ll choose the `default (babel, eslint)` preset. \n\nOnce that’s done, let’s install the necessary dependencies for our app:\n\n```\n    $ cd frontend\n    $ npm install vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag apollo-link-ws apollo-utilities subscriptions-transport-ws\n```\n\nThat’s a lot of dependencies, so let’s go over each of them:\n\n\n- **vue-apollo:** an Apollo/GraphQL integration for Vue.js.\n- **graphql:** a reference implementation of GraphQL for JavaScript.\n- **apollo-client:** a fully-featured, production-ready caching GraphQL client for every server or UI framework.\n- **apollo-link:** a standard interface for modifying control flow of GraphQL requests and fetching GraphQL results.\n- **apollo-link-http:** used to get GraphQL results over a network using HTTP fetch.\n- **apollo-cache-inmemory:** cache implementation for Apollo Client 2.0.\n- **graphql-tag:** a JavaScript template literal tag that parses GraphQL queries.\n- **apollo-link-ws:** allows sending of GraphQL operations over a WebSocket.\n- **apollo-utilities: u**tilities for working with GraphQL ASTs.\n- **subscriptions-transport-ws:** a WebSocket client + server for GraphQL subscriptions.\n\nNext, let’s set up the Vue Apollo plugin. Open `frontend/src/main.js` and update it as below:\n\n``` javascript\n    // frontend/src/main.js\n    \n    import { InMemoryCache } from 'apollo-cache-inmemory'\n    import { ApolloClient } from 'apollo-client'\n    import { split } from 'apollo-link'\n    import { HttpLink } from 'apollo-link-http'\n    import { WebSocketLink } from 'apollo-link-ws'\n    import { getMainDefinition } from 'apollo-utilities'\n    import Vue from 'vue'\n    import VueApollo from 'vue-apollo'\n    import App from './App.vue'\n    \n    Vue.config.productionTip = false\n    \n    const httpLink = new HttpLink({\n      uri: 'http://localhost:4000'\n    })\n    \n    const wsLink = new WebSocketLink({\n      uri: 'ws://localhost:4000',\n      options: {\n        reconnect: true\n      }\n    })\n    \n    const link = split(\n      ({ query }) =\u003e {\n        const { kind, operation } = getMainDefinition(query)\n        return kind === 'OperationDefinition' \u0026\u0026 operation === 'subscription'\n      },\n      wsLink,\n      httpLink\n    )\n    \n    const apolloClient = new ApolloClient({\n      link,\n      cache: new InMemoryCache(),\n      connectToDevTools: true\n    })\n    \n    const apolloProvider = new VueApollo({\n      defaultClient: apolloClient\n    })\n    \n    Vue.use(VueApollo)\n    \n    new Vue({\n      apolloProvider,\n      render: h =\u003e h(App)\n    }).$mount('#app')\n```\n\nHere, we create new instances of both `httpLink` and `WebSocketLink` with the URLs (`http://localhost:4000` and  `ws://localhost:4000`) of our GraphQL server respectively. Since we can have two different types of operations (query/mutation and subscription), we need to configure Vue Apollo to handle both of them. We can easily do that using the `split()`. Next, we create an Apollo client using the `link` created above and specify we want an in-memory cache. Then we install the Vue Apollo plugin, and we create a new instance of the Vue Apollo plugin using the `apolloClient` created as our default client. Lastly, we make use of the `apolloProvider` object by adding it to our Vue instance.\n\n### Adding Bootstrap\nFor quick prototyping of our app, we’ll be using Bootstrap. So add the line below to the `head` section of `public/index.html`:\n\n``` html\n    // frontend/public/index.html\n    \n    \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n```\n\nFor the purpose of this tutorial, we’ll be making use of just one component for everything, that is, the `App` component.\n\n### Joining chat\nSince we won’t be covering user authentication in this tutorial, we need a way to get the users in the chat. For that, we’ll ask the user to enter a username before joining the chat. Update `frontend/src/App.vue` as below:\n\n``` html\n    // frontend/src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\" class=\"container\" style=\"padding-top: 100px\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n          \u003cdiv class=\"col-md-8\"\u003e\n            \u003cdiv class=\"card\"\u003e\n              \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"row\" v-if=\"entered\"\u003e\n                  \u003cdiv class=\"col-md-12\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                      \u003cdiv class=\"card-header\"\u003eChatbox\u003c/div\u003e\n                      \u003cdiv class=\"card-body\"\u003e\n                        \u003c!-- messages will be here --\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"row\" v-else\u003e\n                  \u003cdiv class=\"col-md-12\"\u003e\n                    \u003cform method=\"post\" @submit.prevent=\"enterChat\"\u003e\n                      \u003cdiv class=\"form-group\"\u003e\n                        \u003cdiv class='input-group'\u003e\n                          \u003cinput\n                            type='text'\n                            class=\"form-control\"\n                            placeholder=\"Enter your username\"\n                            v-model=\"username\"\n                          \u003e\n                          \u003cdiv class='input-group-append'\u003e\n                            \u003cbutton class='btn btn-primary' @click=\"enterChat\"\u003eEnter\u003c/button\u003e\n                          \u003c/div\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/form\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      data() {\n        return {\n          username: '',\n          message: '',\n          entered: false,\n        };\n      },\n      methods: {\n        enterChat() {\n          this.entered = !!this.username != '';\n        },\n      },\n    };\n    \u003c/script\u003e\n```\n\nWe display a form for entering a username. Once the form is submitted, we call `enterChat()`, which simply updates the `entered` data depending on whether the user entered a username or not. Notice we have conditional rendering in the `template` section. The chat interface will only be rendered when a user has supplied a username. Otherwise, the join chat form will be rendered.\n\nLet’s start the app to see our progress thus far:\n\n```\n    $ npm run serve\n```\n\nThe app should be running at `http://localhost:8080`.\n\n![graphql-realtime-chat-1](//images.ctfassets.net/1es3ne0caaid/4lE40zOhlC2C4C0kOIaQqE/8ad366fd06fa6ddd437c11e60033e640/graphql-realtime-chat-1.png)\n\n### Displaying all chats\n\nNow, let’s display all messages. First, let’s update the template. Replace the `messages will be here` ****comment with the following:\n\n``` html\n    // frontend/src/App.vue\n    \n    \u003cdl\n      v-for=\"(chat, id) in chats\"\n      :key=\"id\"\n    \u003e\n      \u003cdt\u003e{{ chat.from }}\u003c/dt\u003e\n      \u003cdd\u003e{{ chat.message }}\u003c/dd\u003e\n    \u003c/dl\u003e\n    \n    \u003chr\u003e\n```\n\nHere, we are looping through all the messages (which will be populated from our GraphQL server) and displaying each of them.\n\nNext, add the following to the `script` section:\n\n``` javascript\n    // frontend/src/App.vue\n    \n    import { CHATS_QUERY } from '@/graphql';\n    \n    // add this after data declaration\n    apollo: {\n      chats: {\n        query: CHATS_QUERY,\n      },\n    },\n```\n\nWe add a new `apollo` object, then within the `apollo` object, we define the GraphQL query to fetch all messages. This makes use of the `CHATS_QUERY` query (which we’ll create shortly).\n\nNext, let’s create the `CHATS_QUERY` query. Create a new `graphql.js` file inside `frontend/src` and paste the following content in it:\n\n``` javascript\n    // frontend/src/graphql.js\n    \n    import gql from 'graphql-tag'\n    \n    export const CHATS_QUERY = gql`\n      query ChatsQuery {\n        chats {\n          id\n          from\n          message\n        }\n      }\n    `\n```\n\nFirst, we import `graphql-tag`. Then we define the query for fetching all chats from our GraphQL server.\n\nLet’s test this. Enter a username to join the chat. For now, the chatbox is empty obviously because we haven’t sent any messages yet.\n\n![graphql-realtime-chat-2](//images.ctfassets.net/1es3ne0caaid/6lNyKaRF0QgKIQgs8mgkWM/d7727dbbcb290206473be6a1c7f47bae/graphql-realtime-chat-2.png)\n\n### Send a new message\n\nLet’s start sending messages. Add the code below immediately after the `hr` tag in the template:\n\n``` html\n    // frontend/src/App.vue\n    \n    \u003cinput\n      type='text'\n      class=\"form-control\"\n      placeholder=\"Type your message...\"\n      v-model=\"message\"\n      @keyup.enter=\"sendMessage\"\n    \u003e\n```\n\nWe have an input field for entering a new message, which is bound to the `message` data. The new message will be submitted once we press enter key, which will call a `sendMessage()`.\n\nNext, add the following to the `script` section:\n\n``` javascript\n    // frontend/src/App.vue\n    \n    import { CHATS_QUERY, SEND_MESSAGE_MUTATION } from '@/graphql';\n    \n    // add these inside methods\n    async sendMessage() {\n      const message = this.message;\n      this.message = '';\n      \n      await this.$apollo.mutate({\n        mutation: SEND_MESSAGE_MUTATION,\n        variables: {\n          from: this.username,\n          message,\n        },\n      });\n    },\n```\n\nWe define the `sendMessage()`, which makes use of the `mutate()` available on `this.$apollo` (from the Vue Apollo plugin). We use the `SEND_MESSAGE_MUTATION` mutation (which we’ll create shortly) and pass along the necessary arguments (username and message).\n\nNext, let’s create the `SEND_MESSAGE_MUTATION` mutation. Add the code below inside `frontend/src/graphql.js`:\n\n``` javascript\n    // frontend/src/graphql.js\n    \n    export const SEND_MESSAGE_MUTATION = gql`\n      mutation SendMessageMutation($from: String!, $message: String!) {\n        sendMessage(\n          from: $from,\n          message: $message\n        ) {\n          id\n          from\n          message\n        }\n      }\n    `\n```\n\nNow, if we try sending a message, we and the user we are chatting with won’t see the message until the page is refreshed.\n\n![graphql-realtime-chat-3](//images.ctfassets.net/1es3ne0caaid/2hnlVnUqVmUWUAKeAiqYsq/8423738b062d4f8e453af74caca2bade/graphql-realtime-chat-3.png)\n\n### Displaying new messages in realtime\n\nTo resolve the issue above, we’ll add realtime functionality to our app. Let’s start by defining the subscription. Add the code below inside `frontend/src/graphql.js`:\n\n``` javascript\n    // frontend/src/graphql.js\n    \n    export const MESSAGE_SENT_SUBSCRIPTION = gql`\n      subscription MessageSentSubscription {\n        messageSent {\n          id\n          from\n          message\n        }\n      }\n    `\n```\n\nNext, in the `App` component, we also import the `MESSAGE_SENT_SUBSCRIPTION` subscription we just created.\n\n``` javascript\n    // frontend/src/App.vue\n    \n    import {\n      CHATS_QUERY,\n      SEND_MESSAGE_MUTATION,\n      MESSAGE_SENT_SUBSCRIPTION,\n    } from '@/graphql';\n```\n\nNext, we’ll update the query for fetching all messages as below:\n\n``` javascript\n    // frontend/src/App.vue\n    \n    apollo: {\n      chats: {\n        query: CHATS_QUERY,\n        subscribeToMore: {\n          document: MESSAGE_SENT_SUBSCRIPTION,\n          updateQuery: (previousData, { subscriptionData }) =\u003e {\n            return {\n              chats: [...previousData.chats, subscriptionData.data.messageSent],\n            };\n          },\n        },\n      },\n    },\n```\n\nIn addition to just fetching the messages, we now define a `subscribeToMore` object, which contains our subscription. To update the messages in realtime, we define a `updateQuery`, which accepts the previous chats data and the data that was passed along with the subscription. So all we have to do is merge the new data to the existing one and return them as the updated messages.\n\nNow, if we test it out, we should see our messages in realtime.\n\n![graphql-realtime-chat-demo](//images.ctfassets.net/1es3ne0caaid/2O9KqUyxCwgQO0QOAqy0cM/469d8a6e331f641e0e2f1572ae33c366/graphql-realtime-chat-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have seen how to build realtime apps with GraphQL subscriptions. We started by first building a GraphQL server, then a Vue.js app that consumes the GraphQL server.\n\nThe complete code for this tutorial is available on [GitHub](https://github.com/ammezie/graphql-chat-app).","metaTitle":"Building live chat app with GraphQL subscriptions","metaDescription":"This brief tutorial takes you through building a simple chat app using GraphQL and Vue.js. Users will be able to talk one-to-one in realtime, using GraphQL's subscriptions feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5xjXgZhNZKOgmyeOiAy0qa","type":"Entry","createdAt":"2018-08-28T17:25:17.268Z","updatedAt":"2020-06-19T13:47:39.290Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an emotion recognition application with Tensorflow.js","url":"emotion-recognition-tensorflow","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/realtime-emotion-recognizer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kaOeiCgZqsKQowY0KAQIY","type":"Entry","createdAt":"2018-08-08T16:33:51.998Z","updatedAt":"2018-08-08T16:33:51.998Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Machine Learning","url":"machine-learning","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-28","description":"Build a simple web app in Vue that takes input from a webcam and can learn to recognize emotions. Implement machine learning with Tensorflow in the browser, and create a basic Node backend to support realtime functionality.","prerequisite":"You will need Node 8.9+ and Yarn installed on your machine.","content":"In this tutorial, we will examine at how to use Tensorflow.js and Pusher to build a realtime emotion recognition application that accepts an face image of a user, predicts their facial emotion and then updates a dashboard with the detected emotions in realtime. A practical use case of this application will be a company getting realtime feedback from users when they roll out incremental updates to their application.\n\nWith the rapid increase in computing power and the ability of machines to make sense of what is going on around them, users now interact with intelligent systems in a lot of their daily interactions. From Spotify’s awesomely accurate discover weekly playlists to Google Photos being able to show you all pictures of “Gaby” in your gallery after identifying her in one picture, companies are now interested in ways they can leverage this “silver bullet” in their service delivery.\n\n## What we’ll build\n\n![tensorflow-feedback-demo](//images.ctfassets.net/1es3ne0caaid/3oVdBTMeGIUAMyusiE4KYy/c76127672a55ba31f54075be8862d99e/tensorflow-feedback-demo.gif)\n\n\nThe best part of this is that recognizing a users emotion happens right on the client side and the user’s image is never sent to the over to the server. All that is sent to the server is the emotion detected. This means, your users never have to be worry about you storing their images on your server. Let’s get to the good stuff now!\n\n\n## Prerequisites\n\n- Node installed on your machine (version 8.9 or above)\n- Yarn installed on your machine\n- Basic knowledge of Javascript\n\n\n## What is Tensorflow.js\n\nTensorflow.js is a JavaScript library that allows developers train and use machine learning models in the browser. This really changes the game because it means that users no longer need “super” machines to be able to run our models. Once they have a browser, they will be able to get stuff done. This also allows for developer who are more familiar with JavaScript get into building and using machine learning models without the need to learn a new programming language.\n\n## Getting started\n\nTo create the build the interface of our application, we are going to use Vue.js. Vue.js is a web framework used to build interactive interfaces with JavaScript. To get started, install the Vue CLI using the command:\n\n```\n    yarn global add @vue/cli\n```\n\nAfterwards, create a new Vue project using the command:\n\n```\n    vue create realtime-feedback\n```\n\nFollow the prompt to create the application using the using the Vue Router preset. This creates a starter Vue.js project which we will then update to fit our application.\n\n![tensorflow-feedback-vue-project](//images.ctfassets.net/1es3ne0caaid/1LGTtSFV8YcGOSwqQGcwyM/22c23ed092efdbcb80ec217066bfc683/tensorflow-feedback-vue-project.png)\n\nInstall the other JavaScript libraries you are going to use:\n\n```\n    yarn add axios @tensorflow/tfjs @tensorflow-models/knn-classifier @tensorflow-models/mobilenet \n```\n\nTo get users’ images and feed them to our model, we are going to make use of the a webcam class. Fetch the file from [here](https://github.com/oreHGA/realtime-emotion-recognizer/blob/master/src/assets/webcam.js) and add it to your `realtime-feedback/src/assets`  directory. Afterwards, go ahead and ahead and get the Pusher logo from [here](https://github.com/oreHGA/realtime-emotion-recognizer/blob/master/src/assets/pusher.jpg) and place it in the `realtime-feedback/src/assets` directory.\n\n### Creating the homepage component\n\nIn the `src/components` folder, create component titled `Camera`. Components allow us to split the user interface of application into reusable parts. Add the following markup to the new component:\n\n``` html\n    \u003c!-- src/components/Camera.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n          \u003cvideo autoplay playsinline muted id=\"webcam\" width=\"250\" height=\"250\"\u003e\u003c/video\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    [...]\n```\n\nAdd the following code below the closing template tag:\n\n``` javascript\n    // src/components/Camera.vue \n    \n    [...]\n    \u003cscript\u003e\n    import {Webcam} from '../assets/webcam'\n    \n    export default {\n      name: \"Camera\",\n      data: function(){\n          return {\n              webcam: null,\n          }\n      },\n      mounted: function(){\n          this.loadWebcam();\n      },\n      methods: {\n          loadWebcam: function(){\n              this.webcam = new Webcam(document.getElementById('webcam'));\n              this.webcam.setup();\n          }\n      }\n    };\n    \u003c/script\u003e\n```\n\nWhen this component is mounted, a webcam is loaded and the user can now actively see what is going on from their camera.\n\n\n## Application views\n\nOur application will have two basic views:\n\n- Homepage, where users will interact with and take pictures of themselves.\n- Dashboard, where you can see a summary of the emotions recognized in realtime.\n\n### Configuring the router\n\nTo allow for navigation between pages, we are going to make use of the Vue Router in our application. Go ahead and edit your `router.js` file to specify what pages to show on different routes:\n\n``` javascript\n    // src/router.js\n    import Vue from \"vue\";\n    import Router from \"vue-router\";\n    import Home from \"./views/Home.vue\";\n    import Dashboard from \"./views/Dashboard.vue\";\n    \n    Vue.use(Router);\n    \n    export default new Router({\n      mode: \"history\",\n      base: process.env.BASE_URL,\n      routes: [\n        {\n          path: \"/\",\n          name: \"home\",\n          component: Home\n        },\n        {\n          path: \"/dashboard\",\n          name: \"dashboard\",\n          component: Dashboard\n        }\n      ]\n    });\n```\n\nAlso, you need to ensure that you include the router in your `src/main.js` file like this:\n\n``` javascript\n    // src/main.js\n    import Vue from \"vue\";\n    import App from \"./App.vue\";\n    import router from \"./router\";\n    \n    Vue.config.productionTip = false;\n    \n    new Vue({\n      router,\n      render: h =\u003e h(App)\n    }).$mount(\"#app\");\n```\n\n## Creating the homepage\n\nOn the homepage, there are two basic modes, `train` mode and `test`  mode. To give us the ability to successfully recognize emotions, we are going to make use of a pretrained [MobileNet](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet) and pass the result from the inference to train KNNClassifier for our different moods. In simpler terms, MobileNet is responsible for getting activations from the image and the KNNClassifier accepts the activation for a particular image and predicts which class the image activation belongs to by selecting the class the activation is closest to.\n\n\n\u003e More explanation on how predictions are generated will be shared later on in the article.\n\nCreate a new view in the `src/views/` directory of the project:\n\n```\n    touch src/views/Home.vue\n```\n\nThe homepage has the following template:\n\n``` html\n    \u003c!-- src/views/Home.vue --\u003e \n    \u003ctemplate\u003e\n      \u003cdiv class=\"train\"\u003e\n        \u003ctemplate v-if=\"mode == 'train'\"\u003e\n            \u003ch1\u003eTake pictures that define your different moods in the dropdown\u003c/h1\u003e\n        \u003c/template\u003e\n        \u003ctemplate v-else\u003e\n            \u003ch1\u003eTake a picture to let us know how you feel about our service\u003c/h1\u003e\n        \u003c/template\u003e\n        \u003cselect id=\"use_case\" v-on:change=\"changeOption()\"\u003e\n            \u003coption value=\"train\"\u003eTrain\u003c/option\u003e\n            \u003coption value=\"test\"\u003eTest\u003c/option\u003e\n        \u003c/select\u003e\n        \u003cCamera\u003e\u003c/Camera\u003e\n        \u003ctemplate v-if=\"mode == 'train'\"\u003e\n            \u003cselect id=\"emotion_options\"\u003e\n                \u003ctemplate v-for=\"(emotion, index) in emotions\"\u003e\n                    \u003coption :key=\"index\" :value=\"index\"\u003e{{emotion}}\u003c/option\u003e\n                \u003c/template\u003e\n            \u003c/select\u003e\n            \u003cbutton v-on:click=\"trainModel()\"\u003eTrain Model\u003c/button\u003e\n        \u003c/template\u003e\n        \u003ctemplate v-else\u003e\n            \u003cbutton v-on:click=\"getEmotion()\"\u003eGet Emotion\u003c/button\u003e\n        \u003c/template\u003e\n        \u003ch1\u003e{{ detected_e }}\u003c/h1\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    [...]\n```\n\nIf the selected mode is `train` mode, the camera module is displayed and a dropdown is presented for the user to train the different available classes. \n\n\n\u003e **Note**: In a real-world application, you’ll likely want to train your model before porting it to the web\n\nIf the `test` mode is selected, the user is then shown a button prompting them to take a picture of their face and allow the model predict their emotion.\n\nNow, let’s take a look at the rest of the `Home`  component and see how it all works:\n\n``` javascript\n    \u003c!-- src/view/Home.vue --\u003e\n    [...]\n    \n    \u003cscript\u003e\n    // @ is an alias to /src\n    import Camera from \"@/components/Camera.vue\";\n    import * as tf from '@tensorflow/tfjs';\n    import * as mobilenetModule from '@tensorflow-models/mobilenet';\n    import * as knnClassifier from '@tensorflow-models/knn-classifier';\n    import axios from 'axios';\n    \n    [...]\n```\n\nFirst import the `Camera` component, the Tensorflow.js library, the MobileNet model and the KNNClassifier. There are also other models available open source on the [Tensorflow Github](https://github.com/tensorflow/tfjs-models) repository.\n\nAfterwards, go ahead and then specify the data to be rendered to the DOM. Notice that there’s an array of the `emotions` that we train the model to recognize and predict. The other data properties include:\n\n- `classifer` - which will represent the KNNClassifier.\n- `mobilenet` - which will represents the loaded MobileNet model.\n- `class` - which represents the class to train. Used in `train` mode.\n- `detected_e` - which represents the emotion that model predicts. Used in `test` mode.\n- `mode` - which represents what mode is in use.\n\n``` javascript\n    // src/views/Home.vue\n    [...]\n    export default {\n      name: \"Home\"\n      components: {\n        Camera\n      },\n      data: function(){\n          return {\n              emotions: ['angry','neutral', 'happy'],\n              classifier: null,\n              mobilenet: null,\n              class: null,\n              detected_e: null,\n              mode: 'train',\n          }\n      },\n      \n    [...]\n```\n\nLet’s also add the methods to the `Home` component:\n\n``` javascript\n    // src/view/Home.vue\n    \n    [...]\n      mounted: function(){\n          this.init();\n      },\n      methods: {\n          async init(){\n            // load the load mobilenet and create a KnnClassifier\n            this.classifier = knnClassifier.create();\n            this.mobilenet = await mobilenetModule.load();\n          },\n          trainModel(){\n            let selected = document.getElementById(\"emotion_options\");\n            this.class = selected.options[selected.selectedIndex].value;\n            this.addExample();\n          },\n          addExample(){\n            const img= tf.fromPixels(this.$children[0].webcam.webcamElement);\n            const logits = this.mobilenet.infer(img, 'conv_preds');\n            this.classifier.addExample(logits, parseInt(this.class));\n          },\n    \n    [...]\n```\n\nWhen the component mounts on the DOM, the `init()` function is called. This creates an empty KNN Classifier and also loads the pretrained MobileNet module. When the `trainModel()` is called, we fetch the image from the camera element and then feed it to the MobileNet model for inference. This returns intermediate activations (logits) as Tensorflow tensors and then add it as an example for the selected class in the classifier. What have just done is also known as transfer learning. \n\nLet’s take a look at the methods that are called when in the `test` mode. When the `getEmotion()` method is called, we fetch the image and also obtain logits. Then we call the `predictClass` method of the classifier to fetch the class the image belongs to.\n\nAfter the emotion is obtained, we also call the `registerEmotion()` that sends the detected emotion over to a backend server.\n\n\n\u003e Notice here that the users image is never sent anywhere. Only the predicted emotion.\n\n\n``` javascript\n    // src/view/Home.vue\n    [...]\n          async getEmotion(){\n            const img = tf.fromPixels(this.$children[0].webcam.webcamElement);\n            const logits = this.mobilenet.infer(img, 'conv_preds');\n            const pred = await this.classifier.predictClass(logits);\n            this.detected_e = this.emotions[pred.classIndex];\n            this.registerEmotion();\n          },\n          changeOption(){\n              const selected = document.getElementById(\"use_case\");\n              this.mode = selected.options[selected.selectedIndex].value;\n          },\n          registerEmotion(){\n              axios.post('http://localhost:3128/callback', {\n                  'emotion': this.detected_e\n              }).then( () =\u003e {\n                  alert('Thanks for letting us know how you feel');\n              });\n          }\n        }\n    };\n    \u003c/script\u003e\n```\n\n## Adding realtime functionality with Pusher\n\n### Building the backend server\n\nLet’s see how to create the backend server that triggers events in realtime. Create a `server` folder inside your `realtime-feedback` folder and initialize an empty node project:\n\n```\n    mkdir server \u0026\u0026 cd server\n    yarn init\n```\n\nInstall the necessary modules for the backend server:\n\n```\n    yarn add body-parser cors dotenv express pusher\n```\n\nWe need a way to be able to trigger realtime events in our application when a new emotion is predicted. To do this, let’s use Pusher. Pusher allows you to seamlessly add realtime features to your applications without worrying about infrastructure. To get started, create a [developer account](https://pusher.com/signup). Once that is done, [create your application](https://dashboard.pusher.com/#wizard-modal) and obtain your application keys. \n\nCreate a `.env`  in your `server` directory to hold the environment variables for this application:\n\n```\n    touch .env\n```\n\nAdd the following to the `.env` file:\n\n```\n    PUSHER_APPID='YOUR_APP_ID'\n    PUSHER_APPKEY='YOUR_APP_KEY'\n    PUSHER_APPSECRET='YOUR_APP_SECRET'\n    PUSHER_APPCLUSTER='YOUR_APP_CLUSTER'\n```\n\nAfterward, create an `index.js` file in the `server`  directory and add the following to it:\n\n``` javascript\n    // server/index.js\n    require(\"dotenv\").config();\n    const express = require(\"express\");\n    const cors = require(\"cors\");\n    const bodyParser = require(\"body-parser\");\n    const Pusher = require(\"pusher\");\n    \n    // create express application\n    const app = express();\n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    // initialize pusher\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APPID,\n      key: process.env.PUSHER_APPKEY,\n      secret: process.env.PUSHER_APPSECRET,\n      cluster: process.env.PUSHER_APPCLUSTER,\n      encrypted: true\n    });\n    \n    //  create application routes\n    app.post(\"/callback\", function(req, res) {\n      // now that we are here just go ahead and then\n      pusher.trigger(\"emotion_channel\", \"new_emotion\", {\n        emotion: req.body.emotion\n      });\n      return res.json({ status: true });\n    });\n    \n    app.listen(\"3128\");\n```\n\nWe create a simple Express application, then initialize Pusher using the environment variables specified in the `.env`. Afterwards, we create a simple `/callback` route that is responsible for triggering a `new_emotion` event on the `emotion_channel` with the detected emotion passed as the body.\n\nNow, on the dashboard, we are listening on the `emotion_channel` for a `new_emotion` event. Let’s see how to do this:\n\n### Displaying detected emotions in realtime on the dashboard\n\nFirstly, add the Pusher minified script to your `index.html` file for use in our application:\n\n``` html\n    \u003c!-- public/index.html --\u003e \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"\u003e\n      \u003clink rel=\"icon\" href=\"\u003c%= BASE_URL %\u003efavicon.ico\"\u003e\n      \u003ctitle\u003eRealtime Emotion Recognition Feedback Application\u003c/title\u003e\n      \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n      \u003cnoscript\u003e\n        \u003cstrong\u003eWe're sorry but the application doesn't work properly without JavaScript enabled. Please enable it to continue.\u003c/strong\u003e\n      \u003c/noscript\u003e\n      \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n      \u003c!-- built files will be auto injected --\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nCreate a new Dashboard view in the `src/views` directory of the `realtime-feedback` application:\n\n```\n    touch src/views/Dashboard.vue\n```\n\nThe dashboard page has the following template:\n\n``` html\n    \u003c!-- src/views/Dashboard.vue --\u003e \n    \u003ctemplate\u003e\n      \u003cdiv class=\"dashboard\"\u003e\n        \u003ch1\u003eHere's a summmary of how users feel about your service in realtime\u003c/h1\u003e\n        \u003cdiv\u003e\n          \u003ctemplate v-for=\"(emotion, index) in emotions\"\u003e\n            \u003cdiv :key=\"index\"\u003e\n              \u003cstrong\u003e{{index}}\u003c/strong\u003e clients: {{ emotion }}\n            \u003c/div\u003e\n          \u003c/template\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    [...]\n```\n\nThe component only has one function `init()`  which we call when the component is mounted. The function creates a new Pusher object, subscribes to the `emotion_channel`  and then listens for a `new_emotion` event and then updates the feedback summary on the dashboard in realtime without any need to refresh the page. \n\nAdd the following to the Dashboard view:\n\n``` javascript\n    \u003c!-- src/views/Dashboard.vue --\u003e\n    [...]\n    \n    \u003cscript\u003e\n    export default {\n      name: \"Dashboard\",\n      data: function(){\n        return {\n          emotions: {\n            angry: 0,\n            neutral: 0,\n            happy: 0\n          },\n          pusher_obj: null,\n          e_channel: null,\n        }\n      },\n      mounted: function(){\n        this.init();\n      },\n      methods: {\n        init (){\n          // create a new pusher object\n          // PUSHER_APPKEY should be your pusher application key\n          this.pusher_obj = new Pusher('PUSHER_APPKEY',{\n              cluster: 'PUSHER_APPCLUSTER',\n              encrypted: true\n          });\n          // subscribe to channel\n          this.e_channel = this.pusher_obj.subscribe('emotion_channel');\n          // bind the channel to the new event and specify what should be done\n          let self = this;\n          this.e_channel.bind('new_emotion', function(data) {\n            //  increment the counnt for the emotion by one\n            self.emotions[`${data.emotion}`] += 1;\n          });\n        },\n      },\n    }\n    \u003c/script\u003e\n```\n\n\u003e **Note**: You’ll need to replace `PUSHER_APPKEY` and `PUSHER_APPCLUSTER` with your application key and cluster.\n\nFinally, the `src/App.vue` is responsible for rendering all our views and components. Edit your `src/App.vue` to look like this:\n\n``` html\n    \u003c!-- src/App.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cimg alt=\"Pusher logo\" src=\"./assets/pusher.jpg\" height=\"100px\"\u003e\n        \u003crouter-view/\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cstyle\u003e\n    #app {\n      font-family: 'Avenir', Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n    }\n    #nav {\n      padding: 30px;\n    }\n    \n    #nav a {\n      font-weight: bold;\n      color: #2c3e50;\n    }\n    \n    #nav a.router-link-exact-active {\n      color: #42b983;\n    }\n    \u003c/style\u003e\n```\n\nNow, we can take our application for a spin! Run the frontend server using the command:\n\n```\n    yarn serve\n```\n\nAnd in another terminal tab, navigate to the `server/` directory and then run the backend server using the command:\n\n```\n    node index.js\n```\n\nWhen you head over your application and navigate to `http://localhost:8080` in your browser to view the homepage. \n\nOpen  the `http://locahost:8080/dashboard`  route in another browser tab so you can see your results in realtime on the dashboard.\n\n\n\u003e **Note**: To allow you see how the training and testing process, you’ll need to train at least 10 samples for each of the 3 classes, also, the training data is lost on refresh of your browser. If you want to persist the trained model, you can save the trained model to your browser’s local storagea\n\n![tensorflow-feedback-demo](//images.ctfassets.net/1es3ne0caaid/3oVdBTMeGIUAMyusiE4KYy/c76127672a55ba31f54075be8862d99e/tensorflow-feedback-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we went through how to create build a realtime emotion recognition application using Pusher, Tensorflow and  Vue.js in the browser without needing to send the image of the user to any external service. Feel free to explore more on machine learning and play with some awesome demos [here](https://js.tensorflow.org/). Here’s a link to the [GitHub](https://github.com/oreHGA/realtime-emotion-recognizer) repository. Happy hacking!","metaTitle":"Build an emotion recognition application with Tensorflow.js","metaDescription":"Use Tensorflow, Vue and Node to create a simple machine learning app. Users can train it to recognize their emotions based on their facial expression. This is used to power a feedback feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"yJv9gYc9dmUAeyIMAQEw2","type":"Entry","createdAt":"2018-08-16T22:01:51.811Z","updatedAt":"2018-08-16T22:01:51.811Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player game with Python and Vue","url":"game-python-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-pusher-multiplayer-game","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-13","description":"Build a simple two-player game featuring online presence and realtime interactions. Use Python for the backend, and Vue for the frontend. Users will be able to see when another player logs on, challenge them to a game, and interact instantly.","prerequisite":"You will need Python 3+, virtualenv and Flask installed on your machine.","content":"The advent of the PC and the internet has redefined the term “entertainment” and the means by which it can be obtained. While a console or some special hardware would have been required to play games in the past, games are only a click away in today's world of technology.\n\nIn this tutorial, we will create a realtime tic-tac-toe game using Python and Pusher channels. Here’s a demo of how the game will look and behave upon creation:\n\n![python-vue-game-demo](//images.ctfassets.net/1es3ne0caaid/1RGRfjXfgQgYWYy2kqImOs/0c1db39f9371dbb773638ffe57bfd385/python-vue-game-demo.gif)\n\nThis multiplayer game will allow a player to connect using their preferred username (or generate a random username where a player doesn’t connect with a username) and choose to play with another player from a list of other online players.\n\nThe game itself follows the conventional principles of the popular [tic-tac-toe](https://en.wikipedia.org/wiki/Tic-tac-toe) game. The “online player(s)” feature is powered by [Pusher presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) and the realtime updates of a player’s move across multiple windows is powered by [Pusher private channels.](https://pusher.com/docs/client_api_guide/client_private_channels) The source code for this tutorial is available here [GitHub](https://github.com/neoighodaro/python-pusher-multiplayer-game). \n\nLet’s get started.\n\n\n## Prerequisites\n\nTo follow along, a basic knowledge of Python, Flask, JavaScript (ES6 syntax) and Vue is required. You will also need the following installed on your machine:\n\n\n1. [Python (v3.x)](https://www.python.org/)\n2. [Virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment without polluting our global packages directory.\n\n\n## Setting up the app environment\n\nWe will create the project folder and activate a virtual environment within it:\n\n```\n    $ mkdir python-pusher-mutiplayer-game\n    $ cd python-pusher-mutiplayer-game\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nWe will install [Flask](http://flask.pocoo.org/) using this command:\n\n```\n    $ pip install flask\n```\n\n## Setting up Pusher\n\nTo integrate Pusher into the multiplayer game, we need to create a Pusher channels application from the Pusher dashboard. If you don’t already have a Pusher account, head over to the [Pusher website](https://pusher.com/) and create one.\n\nAfter creating an account, create a new channels application and enable client events from the application dashboard. To enable client events, click on **App settings** and scroll to the bottom of the page then select the option that says **Enable client events,** and update the **App settings.**\n\n## Building the backend server\n\nBack in the project directory, let’s install the [Python Pusher library](https://github.com/pusher/pusher-http-python) with this command:\n\n```\n    $ pip install pusher\n```\n\nWe will create a new file and call it `app.py`, this is where we will write all the code for the Flask backend server. We will also create a folder and call it `templates`, this folder will hold the markup files for this application.\n\nLet’s write some code to register the endpoints for the game and serve the view, open the `app.py` file and paste the following code:\n\n``` python\n    // File: ./app.py\n    from flask import Flask, render_template, request, jsonify, make_response, json\n    from pusher import pusher\n    \n    app = Flask(__name__)\n    \n    pusher = pusher_client = pusher.Pusher(\n      app_id='PUSHER_APP_ID',\n      key='PUSHER_APP_KEY',\n      secret='PUSHER_APP_SECRET',\n      cluster='PUSHER_APP_CLUSTER',\n      ssl=True\n    )\n    \n    name = ''\n    \n    @app.route('/')\n    def index():\n      return render_template('index.html')\n      \n    @app.route('/play')\n    def play():\n      global name\n      name = request.args.get('username')\n      return render_template('play.html')\n      \n    @app.route(\"/pusher/auth\", methods=['POST'])\n    def pusher_authentication():\n      auth = pusher.authenticate(\n        channel=request.form['channel_name'],\n        socket_id=request.form['socket_id'],\n        custom_data={\n          u'user_id': name,\n          u'user_info': {\n            u'role': u'player'\n          }\n        }\n      )\n      return json.dumps(auth)\n      \n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=5000, debug=True)\n    \n    name = ''\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the values on your Pusher dashboard.\n\nIn the code above, we defined three endpoints, here’s what they do:\n\n\n- `/` - renders the front page that asks a player to connect with a username.\n- `/play` - renders the game view.\n- `/pusher/auth` - authenticates Pusher’s presence and private channels for connected players.\n\n\n## Building the frontend\n\nIn the `templates` folder, we will create two files:\n\n\n1. `index.html`\n2. `play.html`\n\nThe `index.html` file will render the connection page, so open the `templates/index.html` file and paste the following code:\n\n``` html\n    \u003c!-- File: ./templates/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n            \u003cmeta name=\"description\" content=\"\"\u003e\n            \u003cmeta name=\"author\" content=\"Neo Ighodaro\"\u003e\n            \u003ctitle\u003eTIC-TAC-TOE\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n            \u003cstyle\u003e\n                  :root {\n                    --input-padding-x: .75rem;\n                    --input-padding-y: .75rem;\n                  }\n                  html,\n                  body, body \u003e div {\n                    height: 100%;\n                  }\n                  body \u003e div {\n                    display: -ms-flexbox;\n                    display: flex;\n                    -ms-flex-align: center;\n                    align-items: center;\n                    padding-top: 40px;\n                    padding-bottom: 40px;\n                    background-color: #f5f5f5;\n                  }\n                  .form-signin {\n                    width: 100%;\n                    max-width: 420px;\n                    padding: 15px;\n                    margin: auto;\n                  }\n                  .form-label-group {\n                    position: relative;\n                    margin-bottom: 1rem;\n                  }\n                  .form-label-group \u003e input,\n                  .form-label-group \u003e label {\n                    padding: var(--input-padding-y) var(--input-padding-x);\n                  }\n                  .form-label-group \u003e label {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    display: block;\n                    width: 100%;\n                    margin-bottom: 0; /* Override default `\u003clabel\u003e` margin */\n                    line-height: 1.5;\n                    color: #495057;\n                    cursor: text; /* Match the input under the label */\n                    border: 1px solid transparent;\n                    border-radius: .25rem;\n                    transition: all .1s ease-in-out;\n                  }\n                  .form-label-group input::-webkit-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-moz-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:not(:placeholder-shown) {\n                    padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                  }\n                  .form-label-group input:not(:placeholder-shown) ~ label {\n                    padding-top: calc(var(--input-padding-y) / 3);\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                    font-size: 12px;\n                    color: #777;\n                  }\n            \u003c/style\u003e\n          \u003c/head\u003e\n          \u003cbody\u003e\n            \u003cdiv id=\"app\"\u003e\n              \u003cform class=\"form-signin\"\u003e\n                \u003cdiv class=\"text-center mb-4\"\u003e\n                  \u003cimg class=\"mb-4\" src=\"https://thestore.gameops.com/v/vspfiles/photos/Tic-Tac-Go-14.gif\" alt=\"\" width=\"72\" height=\"72\"\u003e\n                  \u003ch1 class=\"h3 mb-3 font-weight-normal\"\u003eTIC-TAC-TOE\u003c/h1\u003e\n                  \u003cp\u003ePUT IN YOUR DETAILS TO PLAY\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                    \u003cinput type=\"name\" id=\"inputUsername\" ref=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"\" autofocus=\"\"\u003e\n                      \u003clabel for=\"inputUsername\"\u003eUsername\u003c/label\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                  \u003cinput type=\"email\" id=\"inputEmail\" ref=\"email\" class=\"form-control\" placeholder=\"Email address\" autofocus=\"\" required\u003e\n                    \u003clabel for=\"inputEmail\"\u003eEmail address\u003c/label\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" @click.prevent=\"login\"\u003eConnect\u003c/button\u003e\n                \u003cp class=\"mt-5 mb-3 text-muted text-center\"\u003e© 2017-2018\u003c/p\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n            \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n            \u003cscript\u003e\n            var app = new Vue({\n              el: '#app',\n              methods: {\n                login: function () {\n                  let username = this.$refs.username.value\n                  let email = this.$refs.email.value\n                  window.location.replace(`/play?username=${username}\u0026email=${email}`);\n                }\n              }\n            })\n            \u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWhen a player visits the connection page and puts in a username and email, the browser window will be redirected to the game view. \n\nLet’s write the markup for the game view. Open the `play.html` file and paste the following code:\n\n``` html\n    \u003c!-- file: ./templates/play.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n      \u003ctitle\u003eTIC-TAC-TOE\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\" class=\"container-fluid\"\u003e\n        \u003cdiv class=\"container-fluid clearfix mb-3 shadow\"\u003e\n          \u003cimg class=\"float-left my-3\" src=\"https://thestore.gameops.com/v/vspfiles/photos/Tic-Tac-Go-14.gif\" height=\"62px\" width=\"62px\"\n          /\u003e\n          \u003cdiv class=\"float-right w-25 py-3\"\u003e\n            \u003cimg class=\"my-3 mx-3 rounded-circle border\" src=\"http://dfsanonymous.club/wp-content/uploads/2017/11/DFSAnonymous-NewLogo.png\"\n              height=\"62px\" width=\"62px\" /\u003e\n            \u003cp class=\"d-inline\"\u003e {% raw %} {{ username }} {% endraw %} \u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"row mx-5\" style=\"height: 50vh\"\u003e\n          \u003cdiv class=\"col-8 h-50 align-self-center\"\u003e\n            \u003cdiv class=\"row border rounded invisible h-50 w-75 m-auto\" style=\"font-size: 3.6rem\" ref=\"gameboard\" @click=\"playerAction\"\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"1\" ref=\"1\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"2\" ref=\"2\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"3\" ref=\"3\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"4\" ref=\"4\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"5\" ref=\"5\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"6\" ref=\"6\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"7\" ref=\"7\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"8\" ref=\"8\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"9\" ref=\"9\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"col-4 pl-3\"\u003e\n            \u003cdiv class=\"row h-100\"\u003e\n              \u003cdiv class=\"col border h-75 text-center\" style=\"background: rgb(114, 230, 147);\"\u003e\n                \u003cp class=\"my-3\"\u003e {% raw %} {{ players }} {% endraw %} online player(s) \u003c/p\u003e\n                \u003chr/\u003e\n                \u003cli class=\"m-auto py-3 text-dark\" style=\"cursor: pointer;\" v-for=\"member in connectedPlayers\" @click=\"choosePlayer\"\u003e\n                  {% raw %} {{ member }} {% endraw %}\n                \u003c/li\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col text-center py-3 border h-25\" style=\"background: #b6c0ca; font-size: 1em; font-weight: bold\"\u003e\n                {% raw %} {{ status }} {% endraw %}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript\u003e\n      \n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code above defines the layout of the game view but does not contain any interactivity or realtime features. In the scripts section, before the closing `body` tag, we included the Vue and Pusher libraries because they are required for the game to work. \n\nLet’s include the JavaScript code that will drive the entire game process and define its logic.\n\nIn the same file, add the code below in between the `script` tag that is just before the closing `body` tag:\n\n``` javascript\n    var app = new Vue({\n      el: '#app',\n      \n      data: {\n        username: '',\n        players: 0,\n        connectedPlayers: [],\n        status: '',\n        pusher: new Pusher('PUSHER_APP_KEY', {\n          authEndpoint: '/pusher/auth',\n          cluster: 'PUSHER_APP_CLUSTER',\n          encrypted: true\n        }),\n        otherPlayerName: '',\n        mychannel: {},\n        otherPlayerChannel: {},\n        firstPlayer: 0,\n        turn: 0,\n        boxes: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      },\n      \n      created () {\n        let url = new URL(window.location.href);\n        let name = url.searchParams.get(\"username\");\n        \n        if (name) {\n          this.username = name\n          this.subscribe();\n          this.listeners();\n        } else {\n          this.username = this.generateRandomName();\n          location.assign(\"/play?username=\" + this.username);\n        }\n      },\n      \n      methods: {\n        // We will add methods here\n      }\n    });\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nAbove, we create a new instance of Vue and we target the `#app` selector. We define all the defaults in the `data` object and then in the `create()` function which is called automatically when the Vue component is created, we check for a user and assign the user to the username if one was supplied.\n\nWe also make calls to the `subscribe` and `listeners` methods. Let’s define those inside the `methods` object. Inside the `methods` object, paste the following functions:\n\n``` javascript\n    // [...]\n    \n    subscribe: function () {\n      let channel = this.pusher.subscribe('presence-channel');\n      this.myChannel = this.pusher.subscribe('private-' + this.username)\n    \n      channel.bind('pusher:subscription_succeeded', (player) =\u003e {\n        this.players = player.count - 1\n        player.each((player) =\u003e {\n          if (player.id != this.username)\n            this.connectedPlayers.push(player.id)\n        });\n      });\n      \n      channel.bind('pusher:member_added', (player) =\u003e {\n        this.players++;\n        this.connectedPlayers.push(player.id)\n      });\n      \n      channel.bind('pusher:member_removed', (player) =\u003e {\n        this.players--;\n        var index = this.connectedPlayers.indexOf(player.id);\n        if (index \u003e -1) {\n          this.connectedPlayers.splice(index, 1)\n        }\n      });\n    },\n    \n    listeners: function () {\n      this.pusher.bind('client-' + this.username, (message) =\u003e {\n        if (confirm('Do you want to start a game of Tic Tac Toe with ' + message)) {\n          this.otherPlayerName = message\n          this.otherPlayerChannel = this.pusher.subscribe('private-' + this.otherPlayerName)\n          this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n            this.otherPlayerChannel.trigger('client-game-started', this.username)\n          })\n          this.startGame(message)\n        } else {\n          this.otherPlayerChannel = this.pusher.subscribe('private-' + message)\n          this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n            this.otherPlayerChannel.trigger('client-game-declined', \"\")\n          })\n          this.gameDeclined()\n        }\n      }),\n      \n      this.myChannel.bind('client-game-started', (message) =\u003e {\n        this.status = \"Game started with \" + message\n        this.$refs.gameboard.classList.remove('invisible');\n        this.firstPlayer = 1;\n        this.turn = 1;\n      })\n      \n      this.myChannel.bind('client-game-declined', () =\u003e {\n        this.status = \"Game declined\"\n      })\n      \n      this.myChannel.bind('client-new-move', (position) =\u003e {\n        this.$refs[position].innerText = this.firstPlayer ? 'O' : 'X'\n      })\n    \n      this.myChannel.bind('client-your-turn', () =\u003e {\n        this.turn = 1;\n      })\n    \n      this.myChannel.bind('client-box-update', (update) =\u003e {\n        this.boxes = update;\n      })\n      \n      this.myChannel.bind('client-you-lost', () =\u003e {\n        this.gameLost();\n      })\n    },\n    \n    // [...]\n```\n\nIn the `subscribe` method, we subscribe to our Pusher presence channel, and then subscribe to the private channel for the current user. In the `listeners` method we register the listeners for all the events we are expecting to be triggered on the private channel we subscribed to.\n\nNext, we will add other helper methods to our methods class. Inside the methods class, add the following functions to the bottom after the `listeners` method:\n\n``` javascript\n    // Generates a random string we use as a name for a guest user\n    generateRandomName: function () {\n      let text = '';\n      let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      for (var i = 0; i \u003c 6; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n      return text;\n    },\n    \n    // Lets you choose a player to play as.\n    choosePlayer: function (e) {\n      this.otherPlayerName = e.target.innerText\n      this.otherPlayerChannel = this.pusher.subscribe('private-' + this.otherPlayerName)\n      this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n        this.otherPlayerChannel.trigger('client-' + this.otherPlayerName, this.username)\n      });\n    },\n    \n    // Begins the game\n    startGame: function (name) {\n      this.status = \"Game started with \" + name\n      this.$refs.gameboard.classList.remove('invisible');\n    },\n    \n    // User declined to play\n    gameDeclined: function () {\n      this.status = \"Game declined\"\n    },\n    \n    // Game has ended with current user winning\n    gameWon: function () {\n      this.status = \"You WON!\"\n      this.$refs.gameboard.classList.add('invisible');\n      this.restartGame()\n    },\n    \n    // Game has ended with current user losing\n    gameLost: function () {\n      this.turn = 1;\n      this.boxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      this.status = \"You LOST!\"\n      this.$refs.gameboard.classList.add('invisible');\n      this.restartGame()\n    },\n    \n    // Restarts a game\n    restartGame: function () {\n      for (i = 1; i \u003c 10; i++) {\n        this.$refs[i].innerText = \"\"\n      }\n      this.$refs.gameboard.classList.remove('invisible');\n    },\n    \n    // Checks tiles to see if the tiles passed are a match\n    compare: function () {\n      for (var i = 1; i \u003c arguments.length; i++) {\n        if (arguments[i] === 0 || arguments[i] !== arguments[i - 1]) {\n          return false\n        }\n      }\n    \n      return true;\n    },\n    \n    // Checks the tiles and returns true if theres a winning play\n    theresAMatch: function () {\n      return this.compare(this.boxes[0], this.boxes[1], this.boxes[2]) ||\n        this.compare(this.boxes[3], this.boxes[4], this.boxes[5]) ||\n        this.compare(this.boxes[6], this.boxes[7], this.boxes[8]) ||\n        this.compare(this.boxes[0], this.boxes[3], this.boxes[6]) ||\n        this.compare(this.boxes[1], this.boxes[4], this.boxes[7]) ||\n        this.compare(this.boxes[2], this.boxes[5], this.boxes[8]) ||\n        this.compare(this.boxes[2], this.boxes[4], this.boxes[6]) ||\n        this.compare(this.boxes[0], this.boxes[4], this.boxes[8])\n    },\n    \n    // Checks to see if the play was a winning play\n    playerAction: function (e) {\n      let index = e.target.dataset.id - 1\n      let tile = this.firstPlayer ? 'X' : 'O'\n      \n      if (this.turn \u0026\u0026 this.boxes[index] == 0) {\n        this.turn = 0\n        this.boxes[index] = tile\n        e.target.innerText = tile\n        \n        this.otherPlayerChannel.trigger('client-your-turn', \"\")\n        this.otherPlayerChannel.trigger('client-box-update', this.boxes)\n        this.otherPlayerChannel.trigger('client-new-move', e.target.dataset.id)\n        \n        if (this.theresAMatch()) {\n          this.gameWon()\n          this.boxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n          this.otherPlayerChannel.trigger('client-you-lost', '')\n        }\n      }\n    },\n```\n\nAbove, we have added several helper methods that the game needs to function properly and before each method, we have added a comment to show what the method does.\n\nLet’s test the game now.\n\n## Testing the game\n\nWe can test the game by running this command:\n\n```\n    $ flask run\n```\n\nNow if we visit [localhost:5000](http://localhost:5000), we should see the connection page and test the game:\n\n![python-vue-game-demo](//images.ctfassets.net/1es3ne0caaid/1RGRfjXfgQgYWYy2kqImOs/0c1db39f9371dbb773638ffe57bfd385/python-vue-game-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating an online multiplayer game powered by a Python backend server.\n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/python-pusher-multiplayer-game)","metaTitle":"Create a two-player game with Python and Vue","metaDescription":"Use Python and Vue to create a realtime two-player game featuring online presence and instant UI updates."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ixvYc9KQOOcYecWgqi0QU","type":"Entry","createdAt":"2018-08-13T22:46:15.628Z","updatedAt":"2018-08-13T22:46:15.628Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Go application with online presence","url":"go-vue-online-presence","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-presence-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-08","description":"In this tutorial you'll build a simple Go application, using Vue.js for the frontend. Users will be able to sign in and view a video, and see who else is watching.","prerequisite":"You will need Go 0.10+ installed on your machine.","content":"When building applications that allow multiple users to interact with one another, it is essential to display their online presence so that each user gets an idea of how many other users are online.\n\nIn this article, we will build a live streaming application that displays the online presence of the users currently streaming a video. We will use [Go](https://golang.org/doc/install), JavaScript (Vue) and [Pusher](http://pusher.com/) for the development.\n \nHere’s a demo of the final application:\n\n![go-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/1ITW3IU0Vm8wkMS2gMqaGe/fdc44d0a06f09561bb282297f721a7e4/go-online-presence-demo.gif)\n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/go-pusher-presence-app).\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- A code editor like Visual Studio Code.\n- Basic knowledge of the Go programming language.\n- Go (version \u003e= 0.10.x) installed on your computer. [Installation guide.](https://golang.org/doc/install)\n- Basic knowledge of JavaScript (Vue).\n- A Pusher application. Create one [here](https://dashboard.pusher.com/).\n\nOnce you have all the above requirements, we can proceed.\n\n## Building the backend server\n\nWe will build the backend server in Go. Create a new project directory in the `src` directory that is located in the `$GOPATH`, let’s call this directory `go-pusher-presence-app`.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-presence-app\n    $ cd go-pusher-presence-app\n```\n\nNext, create a new Go file and call it `presence.go`, this file will be where our entire backend server logic will be. Now, let’s pull in the official Go Pusher package with this command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nOpen the `presence.go` file and paste the following code:\n\n``` go\n    // File: ./presence.go\n    package main\n    \n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    type user struct {\n        Username  string `json:\"username\" xml:\"username\" form:\"username\" query:\"username\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    var loggedInUser user\n    \n    func main() {\n        // Define our routes\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./static\")))\n        http.HandleFunc(\"/isLoggedIn\", isUserLoggedIn)\n        http.HandleFunc(\"/new/user\", NewUser)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        // Start executing the application on port 8090\n        log.Fatal(http.ListenAndServe(\":8090\", nil))\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nHere’s a breakdown of what we’ve done in the code above:\n\n\n- We imported all the packages that are required for the application to work, including Pusher.\n- We instantiated the Pusher client that we will use to authenticate users from the client-side.\n- We defined a user struct and gave it two the properties — username and email — so that Go knows how to handle incoming payloads and correctly bind it to a user instance.\n- We created a global instance of the user struct so that we can use it to store a user’s name and email. This instance is going to somewhat serve the purpose of a session on a server, we will check that it is set before allowing a user to access the dashboard of this application.\n\nIn the main function, we registered four endpoints:\n\n\n1. `/` - loads all the static files from the static directory.\n2. `/isLoggedIn` - checks if a user is logged in or not and returns a fitting message.\n3. `/new/user` - allows a new user to connect and initializes the global user instance.\n4. `/pusher/auth` — authorizes users from the client-side.\n\nIn the same file, above the `main` function, add the code for the handler function of the `/isLoggedIn` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    func isUserLoggedIn(rw http.ResponseWriter, req *http.Request){\n        if loggedInUser.Username != \"\" \u0026\u0026 loggedInUser.Email != \"\" {\n            json.NewEncoder(rw).Encode(loggedInUser)\n        } else {\n            json.NewEncoder(rw).Encode(\"false\")\n        }\n    }\n    \n    // [...]\n```\n\nAfter the function above, let’s add the handler function for the `/new/user` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    func NewUser(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        err = json.Unmarshal(body, \u0026loggedInUser)\n        if err != nil {\n            panic(err)\n        }\n        json.NewEncoder(rw).Encode(loggedInUser)\n    }\n    \n    // [...]\n```\n\nAbove, we receive a new user's details in a `POST` request and bind it to an instance of the user struct. We further use this user instance to check if a user is logged in or not\n\nLastly, after the function above, let’s add the code for the `/pusher/auth` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    // -------------------------------------------------------\n    // Here, we authorize users so that they can subscribe to \n    // the presence channel\n    // -------------------------------------------------------\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        \n        data := pusher.MemberData{\n            UserId: loggedInUser.Username,\n            UserInfo: map[string]string{\n                \"email\": loggedInUser.Email,\n            },\n        }\n    \n        response, err := client.AuthenticatePresenceChannel(params, data)\n        if err != nil {\n            panic(err)\n        }\n    \n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nTo ensure that every connected user has a unique presence, we used the properties of the global `loggedInUser` variable in setting the `pusher.MemberData` instance.\n \n The syntax for authenticating a Pusher presence channel is:\n \n```\n    client.AuthenticatePresenceChannel(params, presenceData)\n```\n\n## Building the frontend\n\nNext, in the root of the project, create a `static` folder. Create two files the directory named `index.html` and `dashboard.html`. In the `index.html` file, we will write the HTML code that allows users to connect to the live streaming application using their name and email.\n\n### Setting up the connection page\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./static/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n            \u003ctitle\u003eLive streamer\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n            \u003cstyle\u003e\n                  :root {\n                    --input-padding-x: .75rem;\n                    --input-padding-y: .75rem;\n                  }\n                  html,\n                  body, body \u003e div {\n                    height: 100%;\n                  }\n                  body \u003e div {\n                    display: -ms-flexbox;\n                    display: flex;\n                    -ms-flex-align: center;\n                    align-items: center;\n                    padding-top: 40px;\n                    padding-bottom: 40px;\n                    background-color: #f5f5f5;\n                  }\n                  .form-signin {\n                    width: 100%;\n                    max-width: 420px;\n                    padding: 15px;\n                    margin: auto;\n                  }\n                  .form-label-group {\n                    position: relative;\n                    margin-bottom: 1rem;\n                  }\n                  .form-label-group \u003e input,\n                  .form-label-group \u003e label {\n                    padding: var(--input-padding-y) var(--input-padding-x);\n                  }\n                  .form-label-group \u003e label {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    display: block;\n                    width: 100%;\n                    margin-bottom: 0; /* Override default `\u003clabel\u003e` margin */\n                    line-height: 1.5;\n                    color: #495057;\n                    cursor: text; /* Match the input under the label */\n                    border: 1px solid transparent;\n                    border-radius: .25rem;\n                    transition: all .1s ease-in-out;\n                  }\n                  .form-label-group input::-webkit-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-moz-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:not(:placeholder-shown) {\n                    padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                  }\n                  .form-label-group input:not(:placeholder-shown) ~ label {\n                    padding-top: calc(var(--input-padding-y) / 3);\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                    font-size: 12px;\n                    color: #777;\n                  }\n            \u003c/style\u003e\n          \u003c/head\u003e\n    \n          \u003cbody\u003e\n            \u003cdiv id=\"app\"\u003e\n              \u003cform class=\"form-signin\"\u003e\n                \u003cdiv class=\"text-center mb-4\"\u003e\n                  \u003cimg class=\"mb-4\" src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/Fotolia_117855281_Subscription_Monthly_M.jpg\" alt=\"\" width=\"72\" height=\"72\"\u003e\n                  \u003ch1 class=\"h3 mb-3 font-weight-normal\"\u003eLive streamer\u003c/h1\u003e\n                  \u003cp\u003eSTREAM YOUR FAVOURITE VIDEOS FOR FREE\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                    \u003cinput type=\"name\" id=\"inputUsername\" ref=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"\" autofocus=\"\"\u003e\n                      \u003clabel for=\"inputUsername\"\u003eUsername\u003c/label\u003e\n                  \u003c/div\u003e\n    \n                \u003cdiv class=\"form-label-group\"\u003e\n                  \u003cinput type=\"email\" id=\"inputEmail\" ref=\"email\" class=\"form-control\" placeholder=\"Email address\" autofocus=\"\" required\u003e\n                    \u003clabel for=\"inputEmail\"\u003eEmail address\u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cbutton class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" @click.prevent=\"login\"\u003eConnect\u003c/button\u003e\n                \u003cp class=\"mt-5 mb-3 text-muted text-center\"\u003e© 2017-2018\u003c/p\u003e\n              \u003c/form\u003e\n              \u003c/div\u003e\n    \n              \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\nOn line 106, we added Vue using a CDN. Let’s add the Vue script for the page.\n\nBefore the closing `body` tag add the following code:\n\n``` javascript\n    \u003cscript\u003e\n      var app = new Vue({\n        el: '#app',\n        methods: {\n          login: function () {\n            let username = this.$refs.username.value\n            let email = this.$refs.email.value\n    \n            fetch('new/user', {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({username, email})\n            })\n            .then(res =\u003e res.json())\n            .then(data =\u003e window.location.replace('/dashboard.html'))\n          }\n        }\n      })\n    \u003c/script\u003e\n```\n\nThis script above submits user data to the backend Go server and navigates the browser’s location to the dashboard’s URL. \n\nNext, let’s build the dashboard.\n\n### Setting up the dashboard\n\nOpen the `dashboard.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./static/dashboard.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eLive streamer | Dashboard\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n          \u003cdiv class=\"container-fluid row shadow p-1 mb-3\"\u003e\n            \u003cdiv class=\"col-3\"\u003e\n              \u003cimg class=\"ml-3\" src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/Fotolia_117855281_Subscription_Monthly_M.jpg\" height=\"72px\" width=\"72px\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-6 ml-auto mt-3\"\u003e\n              \u003cdiv class=\"input-group\"\u003e\n                \u003cinput type=\"text\" class=\"form-control\" aria-label=\"Text input with dropdown button\"\u003e\n                \u003cdiv class=\"input-group-append\"\u003e\n                  \u003cbutton class=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003eSearch\u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-3 float-right\"\u003e\n              \u003cimg src=\"https://www.seoclerk.com/pics/319222-1IvI0s1421931178.png\"  height=\"72px\" width=\"72px\" class=\"rounded-circle border\"/\u003e\n              \u003cp class=\"mr-auto mt-3 d-inline\"\u003e {{ username }} \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\"\u003e\n              \u003cdiv class=\"col-8\"\u003e\n                \u003cdiv class=\"embed-responsive embed-responsive-16by9\"\u003e\n                  \u003ciframe width=\"854\" height=\"480\" class=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/VYOjWnS4cMY\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"text-center mt-3 p-3 text-muted font-weight-bold border\"\u003e\n                  {{ member }} person(s) is/are currently viewing this video \n                  \u003chr\u003e\n                  \u003cli class=\"m-auto text-success\" v-for=\"member in connectedMembers\"\u003e\n                    {{ member }}\n                  \u003c/li\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"col-4 border text-justify\" style=\"background: #e0e0e0; height: 30em; overflow-y: scroll; position: relative;\"\u003e\n                \u003cdiv class=\"border invisible h-50 w-75 text-center\" ref=\"added\" style=\"font-size: 2rem; position: absolute; right: 0; background: #48cbe0\"\u003e{{ addedMember }} just started watching.\u003c/div\u003e\n                \u003cdiv class=\"border invisible h-50 w-75 text-center\" ref=\"removed\" style=\"font-size: 2rem; position: absolute; right: 0; background: #ff8325\"\u003e{{ removedMember }} just stopped watching.\u003c/div\u003e\n                \u003cdiv class=\"h-75 text-center\"\u003e\n                  \u003ch2 class=\"text-center my-3\"\u003e Lyrics \u003c/h2\u003e\n                  \u003cp class=\"w-75 m-auto\" style=\"font-size: 1.5rem\"\u003e\n                    We just wanna party\u003cbr\u003e\n                    Party just for you\u003cbr\u003e\n                    We just want the money\u003cbr\u003e\n                    Money just for you\u003cbr\u003e\n                    I know you wanna party\u003cbr\u003e\n                    Party just for me\u003cbr\u003e\n                    Girl, you got me dancin' (yeah, girl, you got me dancin')\u003cbr\u003e\n                    Dance and shake the frame\u003cbr\u003e\n                    We just wanna party (yeah)\u003cbr\u003e\n                    Party just for you (yeah)\u003cbr\u003e\n                    We just want the money (yeah)\u003cbr\u003e\n                    Money just for you (you)\u003cbr\u003e\n                    I know you wanna party (yeah)\u003cbr\u003e\n                    Party just for me (yeah)\u003cbr\u003e\n                    Girl, you got me dancin' (yeah, girl, you got me dancin')\u003cbr\u003e\n                    Dance and shake the frame (you)\u003cbr\u003e\n                    This is America\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Look what I'm whippin' up\u003cbr\u003e\n                    This is America (woo)\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Look what I'm whippin' up\u003cbr\u003e\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e ⚠️  Video is an embed from YouTube and may not play depending on your region.\n\nOn line 80 we imported the JavaScript Pusher library so let’s add some code to utilize it. Before the closing `body` tag, add the following code:\n\n``` javascript\n    \u003cscript\u003e\n    var app = new Vue({\n        el: '#app',\n        data: {\n            username: '',\n            member: 0,\n            addedMember: '',\n            removedMember: '',\n            connectedMembers: []\n        },\n    \n        created() {\n            fetch('/isLoggedIn', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(res =\u003e res.json())\n            .then(data =\u003e {\n                if (data != 'false') {\n                    this.username = data.username\n                } else {\n                    window.location.replace('/')\n                }\n            })\n    \n            this.subscribe()\n        },\n    \n        methods: {\n            subscribe: function () {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    authEndpoint: '/pusher/auth',\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n    \n                let channel = pusher.subscribe('presence-channel')\n    \n                channel.bind('pusher:subscription_succeeded', data =\u003e {\n                    this.member = data.count\n                    data.each(member =\u003e this.connectedMembers.push(member.id))\n                })\n    \n                // Display a notification when a member comes online\n                channel.bind('pusher:member_added', data =\u003e {\n                    this.member++\n                    this.connectedMembers.push(data.id)\n                    this.addedMember = data.id\n    \n                    this.$refs.added.classList.add('visible')\n                    this.$refs.added.classList.remove('invisible')\n    \n                    window.setTimeout(() =\u003e {\n                        this.$refs.added.classList.remove('visible');\n                        this.$refs.added.classList.add('invisible');\n                    }, 3000)\n                });\n    \n                // Display a notification when a member goes offline\n                channel.bind('pusher:member_removed', data =\u003e {\n                    this.member--\n                    let index = this.connectedMembers.indexOf(data.id)\n    \n                    if (index \u003e -1) {\n                        this.connectedMembers.splice(index, 1)\n                    }\n    \n                    this.removedMember = data.id\n                    this.$refs.removed.classList.add('visible')\n                    this.$refs.removed.classList.remove('invisible')\n    \n                    window.setTimeout(() =\u003e {\n                        this.$refs.removed.classList.remove('visible')\n                        this.$refs.removed.classList.add('invisible')\n                    }, 3000)\n                })\n            }\n        }\n    })\n    \u003c/script\u003e\n```\n\nIn the snippet above, we created some Vue data variables to display reactive updates on different parts of the DOM. We also registered a `created()` lifecycle hook that checks if a user is connected on the backend server and eligible to view the dashboard before calling the `subscribe()` method.\n\nThe `subscribe()` method first configures a Pusher instance using the keys provided on the dashboard then subscribes to a presence channel. Next, it binds to several events that are available on the returned object of a presence channel subscription.\n\nIn the callback function of these bindings, we are able to update the state of the data variables, this is how we display the visual updates on user presence in this application.\n\n\n## Testing the application\n\nWe can test the application by compiling down the Go source code and running it with this command:\n\n```\n    $ go run presence.go\n```\n\nThe application will be available for testing on this address http://127.0.0.1:8090, here’s a display of how the application should look:\n\n![go-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/1ITW3IU0Vm8wkMS2gMqaGe/fdc44d0a06f09561bb282297f721a7e4/go-online-presence-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating a live streaming application powered by a Go backend server.\n\nThe source code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/go-pusher-presence-app)","metaTitle":"Create a Go application with online presence","metaDescription":"Use Go and Vue.js to create a simple web app with online presence functionality. Users will be able to sign in, view a video and see who else is viewing the same video."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6rpnzMV0e4S0YqSAaEoyCM","type":"Entry","createdAt":"2018-07-22T02:43:42.230Z","updatedAt":"2018-07-22T02:43:42.230Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Calendar event scheduling in Vue","url":"calendar-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/vue-event-scheduler","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-07-12","description":"Build a calendar using Vue.js, with a Node.js backend. Users are able to add events to the calendar, with all instances of the calendar updating in realtime. ","prerequisite":"You will need Node 6+ and npm installed on your machine.","content":"Today, we’ll be creating a realtime event scheduling application. Using our application, users can easily schedule calendar events and receive realtime updates for new calendar events. We’ll be using Pusher’s pub/sub pattern to get realtime updates and Vue.js for creating the user interface.\n\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of Vue and Node.js is required. Please ensure that you have at least Node version 6\u003e= installed before you begin.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Vue](https://vuejs.org)\n\nHere’s a demo of the final product:\n\n![vuejs-calendar-demo](//images.ctfassets.net/1es3ne0caaid/3Kw1VEeU5aAu8SqAU6SUc2/7ba90e92e78be04b42a63a80cb2bc9e3/vuejs-calendar-demo.gif)\n\n## Initializing the application and installing project dependencies\n\nTo get started, we will use the [vue-cli](https://github.com/vuejs/vue-cli/tree/dev) to bootstrap our application. First, we’ll install the CLI by running `npm install -g @vue/cli` in a terminal.\n\nTo create a Vuejs project using the CLI, we’ll run the following command:\n\n```\n    vue create vue-eventapp\n```\n\nAfter running this command, you will be asked by the CLI to pick a preset. Please select the default preset.\n\n\n\u003e **Note:** the @vue/cli 3.0 is still in beta and should not be used in production. \n \n \nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js vue-fullcalendar@latest date-fns vuejs-datepicker\n```\n\nStart the app dev server by running `npm run serve` in a terminal in the root folder of your project.\n\nA browser tab should open on http://localhost:8080. The screenshot below should be similar to what you see in your browser:\n\n![vuejs-default-page](//images.ctfassets.net/1es3ne0caaid/5ARSy5jJjGu4mUAkC6wKYw/eda6e8a37c38fc7ac178627dcc030e06/vuejs-default-page.png)\n\n## Building the server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a [Pusher account](https://dashboard.pusher.com/accounts/sign_in) and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n    PUSHER_CLUSTER=PUSHER_CLUSTER\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\n\n### Draw route\n\nLet’s create a post route named `schedule`, our application will send requests to this route when a user attempts to schedule events. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    app.post('/schedule', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n      };\n      \n      pusher.trigger('schedule', 'new-event', data);\n      res.json(data);\n    });\n    \n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`schedule`), an event name (`new-event`), and a payload.\n\nStart the server by running `node server` in a terminal in the root folder of your project.\n\n\n## Calendar component\n\nWe’ll be creating a component(`Calendar`), this component will display our calendar with the events scheduled by a user.\n\nCreate a file called `Calendar.vue` in the `src/components` folder of your project. Open the file and copy the code below into it:\n\n``` css\n    // src/components/Calendar.vue\n    \n    \u003ctemplate\u003e\n      \u003cfull-calendar :events=\"events\" /\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import FullCalendar from 'vue-fullcalendar';\n    export default {\n      name: 'Calendar',\n      props: ['events'],\n      components: {\n        FullCalendar\n      }\n    }\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n    .red {\n      background: rgb(235, 77, 77) !important;\n      color: whitesmoke !important;\n    }\n    .blue {\n      background: rgb(59, 59, 163) !important;\n      color: whitesmoke !important;\n    }\n    .orange {\n      background: orange !important;\n      color: white !important;\n    }\n    .green {\n      background: rgb(49, 155, 49) !important;\n      color: white !important;\n    }\n    .blue,\n    .orange,\n    .red,\n    .green {\n      font-size: 13px;\n      font-weight: 500;\n      text-transform: capitalize;\n    }\n    .event-item {\n      padding: 2px 0 2px 4px !important;\n    }\n    \u003c/style\u003e\n```\n\nOur component will make use of the [Vue-fullcalendar](https://github.com/Wanderxx/vue-fullcalendar) library. The library provides a `full-calendar` component. Our component will receive an `events`  prop, a list of events to be bound to the `full-calendar` component. \n\nAlso, we’ve added a few styles to the `style` section of the component. These styles will help theme the events that will be bound to the calendar. Later in the tutorial, we’ll make use of these styles.\n\n\n## Event form component\n\nNow that the we’ve set up the calendar component, let’s create an `EventForm` component that will be used for scheduling new events. \n\nCreate a file `EventForm.vue`  in the `src/components` folder. Copy the following into the file. We’ll break it down into three snippets, the `template` snippet, followed by the `script` and finally the `style` snippet. \n\n### Template\n\nThe template will hold the form element that will handle creation of new events.\n\n``` html\n    // /src/components/EventForm.vue\n    \n    \u003ctemplate\u003e\n      \u003cform @submit.prevent=\"handleSubmit\"\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cinput type=\"text\" placeholder=\"Event title\" v-model=\"event.title\"/\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cdate-picker :placeholder=\"'Start date'\" v-model=\"event.start\" /\u003e \n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cdate-picker :placeholder=\"'End date'\" v-model=\"event.end\"/\u003e \n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003ctextarea placeholder=\"Event description\" rows=\"4\" v-model=\"event.data.description\" \u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003ccolor-picker @colorPicked=\"selectColor\" :color=\"event.cssClass\" /\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-holder\"\u003e\n          \u003cbutton type=\"submit\"\u003eSchedule\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/form\u003e\n    \u003c/template\u003e\n```    \n\nIn the template, we made use of the `date-picker` component, [Vuejs-datepicker](https://github.com/charliekassel/vuejs-datepicker). This component will handle `start` and `stop` date selection for our events. Also, we’ll be able to theme our events using a `color-picker`. We haven’t gone about creating the `color-picker` component but that’s coming soon.\n\n### Script\n\nWe’ll handle all the functionality of our component in the script section. Update the `EventForm.vue` file to include the script section.\n\n``` javascript\n    // src/components/EventForm.vue\n    \u003ctemplate\u003e\n      ...\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import DatePicker from 'vuejs-datepicker';\n    import format from 'date-fns/format';\n    import ColorPicker from './ColorPicker';\n    \n    export default {\n      name: 'EventForm',\n      data(){\n        return {\n          event: {\n            title: '',\n            start: '',\n            end: '',\n            cssClass: '',\n            data: {\n              description: ''\n            }\n          }\n        }\n      },\n      methods: {\n        async handleSubmit(){\n          const start = format(this.event.start, 'YYYY-MM-DD');\n          const end = format(this.event.end, 'YYYY-MM-DD');\n          const event = {\n            ...this.event,\n            start,\n            end\n          }\n          const req = await fetch('http://localhost:4000/schedule', {\n            method: 'POST',\n            body: JSON.stringify(event),\n            headers: {\n              'content-type': 'application/json'\n            }\n          });\n          const res = await req.json();\n          this.resetValues();\n        },\n        selectColor(color){\n          this.event = {\n            ...this.event,\n            cssClass: color\n          }\n        },\n        resetValues(){\n          this.event = {\n            title: '',\n            start: '',\n            end: '',\n            cssClass: '',\n            data: {\n              description: ''\n            }\n          }\n        }\n      },\n      components: {\n        DatePicker,\n        ColorPicker\n      }\n    }\n    \u003c/script\u003e\n```\n\nIn our scripts section, we have one `data` property, `event`, this will hold all the data needed to schedule an event. \nThe `methods` property has three methods. The `handleSubmit` method uses the [date-fns](https://date-fns.org/v1.29.0/docs/format) library to format the `start` and `end` dates and then sends the data to the server to schedule an event. When a response is returned, the data in the response is emitted to the parent component. The `resetvalues` method resets the values to their initial state.\n\nThe `selectColor` method will be bound to the `colorPicked` event emitted by the `color-picker` component. This method is triggered whenever a color is selected.\n\n### Styles\n\nUpdate the component with the following styles:\n\n``` css\n    // src/components/EventForm.vue\n    \u003ctemplate\u003e\n      ...\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      ...\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n      form {\n      display: flex;\n      flex-direction: column;\n      margin-left: 30px;\n    }\n    .input-holder {\n      margin: 10px 0;\n      display: flex;\n      justify-content: flex-start;\n    }\n    .vdp-datepicker {\n      width: 100%;\n    }\n    .vdp-datepicker \u003e div \u003e input {\n      width: 77%;\n    }\n    .input-holder \u003e button {\n      justify-self: center;\n      padding: 12px 25px;\n      border-radius: 0;\n      text-transform: uppercase;\n      font-weight: 600;\n      background: orangered;\n      color: white;\n      border: none;\n      font-size: 14px;\n      letter-spacing: -0.1px;\n      cursor: pointer;\n    }\n    input,\n    textarea {\n      padding: 12px 15px;\n      border: 2px solid rgba(0, 0, 0, 0.2);\n      border-radius: 0;\n      width: 70%;\n      opacity: 0.8;\n      font-size: 15px;\n      font-weight: normal;\n    }\n    input:focus,\n    textarea:focus,\n    button:focus {\n      border: 2px solid orangered;\n      outline: none;\n      box-shadow: 0 2px 3px 1px rgba(0, 0, 0, 0.2);\n    }\n    \u003c/style\u003e\n```\n\nNext, let’s create the `color-picker` component.\n\n\n## Color picker component\n\nThe color component will help us theme our event by letting us select a color that suits the event.\nCreate a file named `ColorPicker.vue` in the `src/components/` directory and update it with the code below:\n\n``` html\n    // src/components/ColorPicker.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv class=\"picker-main\"\u003e \n        \u003ch4 class=\"header\"\u003eSelect event theme\u003c/h4\u003e\n        \u003cdiv class=\"color-picker\"\u003e\n          \u003cdiv class=\"color\" v-for=\"(theme, index) in colors\" :key=\"index\" @click=\"selectColor(theme)\" :class=\"{selected: color === theme, [theme]: theme}\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: 'ColorPicker',\n      props: ['color'],\n      data(){\n        return {\n          colors: ['red', 'green', 'blue', 'orange']\n        }\n      },\n      methods: {\n        selectColor(color){\n          this.$emit('colorPicked', color);\n        }\n      }\n    }\n    \u003c/script\u003e\n    \u003cstyle scoped\u003e\n    .picker-main {\n      width: 55%;\n    }\n    .header {\n      font-size: 14px;\n      text-transform: uppercase;\n      color: orangered;\n      letter-spacing: 0.5px;\n      margin: 0 0 6px;\n      text-align: left;\n    }\n    .color-picker {\n      display: flex;\n      justify-content: space-around;\n    }\n    .color-picker \u003e .color {\n      width: 40px;\n      height: 40px;\n      border-radius: 50%;\n      border: 1.5px solid whitesmoke;\n      cursor: pointer;\n    }\n    .color.selected{\n      box-shadow: 0 2px 3px 1px rgba(0, 0, 0, 0.2);\n      border: 3px solid rgba(0, 0, 0, 0.4);\n    }\n    .color.red {\n      background: rgb(235, 77, 77);\n    }\n    .color.blue {\n      background: rgb(59, 59, 163);\n    }\n    .color.orange {\n      background: orange;\n    }\n    .color.green {\n      background: rgb(49, 155, 49);\n    }\n    \u003c/style\u003e\n```\n\nIn the template section, we loop through an array of `colors`, creating a clickable element that emits a `color` when clicked. The component takes a prop `color` from the parent component.\n\n## App component\n\nNow that we’ve built out the components to be used for our application, let’s render them in the `App` component to create a usable application. Open the `App.vue` file and update it to look like the snippet below:\n\n``` html\n    // src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"main\"\u003e\n          \u003cdiv class=\"calendar-holder\"\u003e\n            \u003ccalendar :events=\"events\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-holder\"\u003e\n            \u003ch3\u003eSchedule an event\u003c/h3\u003e\n            \u003cevent-form /\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import Calendar from './components/Calendar.vue'\n    import EventForm from './components/EventForm.vue'\n    import Pusher from 'pusher-js';\n    export default {\n      name: 'app',\n      components: {\n        Calendar,\n        EventForm\n      },\n      data(){\n        return {\n          events: [{\n            title     :  'event1',\n            start     : '2018-07-09',\n            cssClass  : 'blue',\n            YOUR_DATA : {}\n          },\n          {\n            title     : 'event2',\n            start     : '2018-07-10',\n            end       : '2018-07-13',\n            cssClass  : ['orange']\n          }] \n        }\n      }\n    }\n    \u003c/script\u003e\n    \u003cstyle\u003e\n    #app {\n      font-family: 'Avenir', Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n      margin-top: 60px;\n    }\n    .main {\n      display: flex;\n      align-items: center;\n    }\n    .calendar-holder {\n      width: 65%;\n    }\n    .form-holder {\n      width: 35%;\n    }\n    .form-holder \u003e h3 {\n      color: orangered;\n      text-transform: uppercase;\n      font-size: 16px;\n      text-align: left;\n      margin-left: 30px;\n      margin-bottom: 10px;\n    }\n    \u003c/style\u003e\n```\n\n\nWe’ve populated the `data` property with a list of events. There is a method `handleNewEvent`, this method is bound to the `event-form` component. It appends the new event emitted from the `event-form` component to the list of events.\n\nYou can now check out the current look of the application by visiting http://localhost:8080. Make sure both the vue dev server (`yarn serve`) and the server (`node server`) are running in separate terminals in the root folder of your project.\n\n![vuejs-calendar-partial](//images.ctfassets.net/1es3ne0caaid/1SjKyDBdZaoIa8SCU0Y640/795170b2f077b531810b88aaab9243d6/vuejs-calendar-partial.png)\n\n## Introducing Pusher and realtime updates\n\nOur application will update in realtime whenever there’s a new event added. We’ll be using [Pusher](https://pusher.com)’s pub/sub pattern to enable this functionality in our application.\n\nWe’ll update the `App` component to include the `created` lifecycle. It’s in this lifecycle we’ll initialise Pusher and listen for new events. Open the `App.vue` file and update it to match the snippet below:\n\n``` html\n    // /src/App.vue\n    \u003ctemplate\u003e\n      ...\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import Calendar from './components/Calendar.vue'\n    import EventForm from './components/EventForm.vue'\n    import Pusher from 'pusher-js';\n    \n    export default {\n      name: 'app',\n      components: {\n        ...\n      },\n      data(){\n        ...  \n      },\n      created(){\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true,\n        });\n        const channel = pusher.subscribe('schedule');\n        channel.bind('new-event', (data) =\u003e {\n          this.events = [\n            ...this.events,\n            data\n          ];\n        })\n      }\n    }\n    \u003c/script\u003e\n    \u003cstyle\u003e\n      ...\n    \u003c/style\u003e\n```   \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER`  placeholder strings with your actual credentials.\n\nIn the `created` lifecycle, we initialized Pusher, subscribed to the `schedule` channel and listened for  the `new-event` event. In the callback, we appended the data returned from the event to the list of events.\n\n## Test application\n\nOpen two browsers side by side to observe the realtime functionality of the application. Events scheduled on one browser are picked up by the other browser. Here’s a screenshot of two browsers side by side using the application:\n\n\n\u003e **Note:** Ensure both the server and the dev server are up by running `npm run serve` and `node server` on separate terminal sessions.\n\n![vuejs-calendar-demo](//images.ctfassets.net/1es3ne0caaid/3Kw1VEeU5aAu8SqAU6SUc2/7ba90e92e78be04b42a63a80cb2bc9e3/vuejs-calendar-demo.gif)\n \n\n## Conclusion\n\nWe’ve created an event scheduling application using Vue.js, using Pusher to provide realtime functionality.  You can think up new ideas to extend the application.  It’ll be fun to see what you come up with. The source code for this tutorial is available on [GitHub](https://github.com/HackAfro/vue-event-scheduler) here.","metaTitle":"Calendar event scheduling in Vue","metaDescription":"Use Vue.js and Node.js to create a simple calendar application. Users are able to add events to the calendar, with all instances of the calendar updating in realtime. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iJKA5uH6oMMw8GSGM2ko8","type":"Entry","createdAt":"2018-07-12T21:02:54.294Z","updatedAt":"2020-06-19T13:46:49.924Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using Framework7","url":"chat-app-framework7","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/Kennypee/pusher-framework7-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-07-09","description":"Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel.","prerequisite":"You will need Node and npm or Yarn installed on your machine.","content":"## Introduction\n\nRealtime chat functionality has revitalized the way we communicate over the years. In recent times, customers can speak directly with business owners from their mobile applications and websites. This is a huge plus in technology considering how difficult it was in the past.\n\nFramework7 is a free and open source mobile HTML framework to develop hybrid mobile apps with iOS and Android native look and feel. In this tutorial, we'll build a realtime chat application with Framework7 using Pusher channels. Here’s a preview of what we’ll be building. \n\n![framework7-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/5ksbxBpdDyueuymA0OMEae/45c761be2e92c8b19f8eb55ca8a3a9d9/framework7-chat-app-demo.jpeg)\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Framework7**](http://framework7.io) ****- a framework for building native-like mobile applications with HTML\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our chat app.\n\n\n3. [**Vue.js**](https://vuejs.org/) - an open-source JavaScript framework for building user interfaces\n\n\n4. [**Phonegap**](http://phonegap.com/) - an application framework that enables you to build natively installed applications using HTML and JavaScript. \n\n\n## Setting up the project\n\nThe simplest way to set up a Phonegap project is through the command line interface (CLI). Before we create a Phonegap project, ensure that you have Phonegap installed on your machine. To install Phonegap, run:\n\n```\n    $ npm install -g phonegap\n```\n\nThis will install phonegap on your machine and you can confirm the installation by running the command:\n\n```\n    $ phonegap -v\n```\n\nThis should print the version of the currently installed Phonegap. Now that we have that installed let’s create a Phonegap project. Run:\n\n\n```    \n    // create a phonegap project with the framework7 vue template\n    $ phonegap create pusher-chat --template https://github.com/hollyschinsky/phonegap-template-framework7-vue\n    $ cd pusher-chat\n    //start the server\n    $ phonegap serve\n```\n\n\nIf you get any prompts in the process, it is always safe to say yes within the scope of this demo. The `phonegap serve` command will start your project on `localhost:3000`. If you navigate to it on your browser, you should see this.\n\n![framework7-default-page](//images.ctfassets.net/1es3ne0caaid/6peL2Lzl7imkwesSOiAKuM/3d2898faf0d1debba50b40bd9c0ae337/framework7-default-page.jpeg)\n\n## Setting up Pusher\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![framework7-create-pusher](//images.ctfassets.net/1es3ne0caaid/2X2s4DWEt2cQEmAG6iui4k/a4bd9f45baaa63a44ea6c85c8f2cf22f/framework7-create-pusher.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![framework7-create-channels](//images.ctfassets.net/1es3ne0caaid/2reyE709jys2EO6eOIQKgw/12d2a1d82bd74a28a017eba7a441a6cc/framework7-create-channels.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![framework7-pusher-app-config](//images.ctfassets.net/1es3ne0caaid/55C390SQikyEYaY8uwW4Uc/3ddd7e19bd5134635da595a617e22cf1/framework7-pusher-app-config.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![framework7-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/3zxbKtLyysGEWyko8I2MOq/292dc1a265982eee46b7236043cfb6cb/framework7-pusher-app-keys.png)\n\nSave your Pusher credentials somewhere in your editor where you can quickly retrieve it as we’ll be needing it soon.\n\n\n## Server configurations\n\nWe’ll be using a local Node server to establish communications with the client so as to render messages in realtime. Before we create our server, let’s install the packages it’ll need to run effectively. Back in your project root, run:\n\n```\n    $ npm install --save axios body-parser cors express pusher pusher-js\n```\n\nThen in your code editor, create a new file `server.js` and set it up like so:\n\n``` javascript\n        //server.js\n        const Pusher = require('pusher');\n        const express = require('express');\n        const bodyParser = require('body-parser');\n        const cors = require('cors');\n        const app = express();\n        app.use(cors());\n        app.use(bodyParser.urlencoded({extended: false}));\n        app.use(bodyParser.json());\n        \n        var pusher = new Pusher({\n            appId: 'Your-app-Id',\n            key: 'Your-app-Key',\n            secret: 'Your-app-secret',\n            cluster: 'Your-app-cluster',\n            encrypted: true\n          });\n        app.set('PORT', process.env.PORT || 6000);\n        app.post('/message', (req, res) =\u003e {\n          const message = req.body;\n          pusher.trigger('chat', 'message', message);\n          res.send(message)\n      \n        });\n        app.listen(app.get('PORT'), () =\u003e \n          console.log('Listening at ' + app.get('PORT')))\n```\n\n\u003e Do not forget to replace the placeholder values here with your unique keys from Pusher.\n\nHere we loaded all the necessary middlewares for the Express server and then configured Pusher using the credentials we got from our Pusher dashboard.\n\nWe also created the `/``message` endpoint that will receive and process messages sent in from our app. Finally, we trigger an event named `message` to Pusher Channels on a channel called `chat`. The `chat` channel holds a message payload that contains the `message` sent by the user.\n\nTo start the server, run:\n\n```\n    $ node server\n```\n\nThe above command should output this message in your terminal:\n\n\n```    \n    Listening on port 6000\n``` \n\n## Application layout\n\nNow let’s open the `index.html` file and set it up. This is the entrance to our app and we’ll place a form to collect the user’s name and a button to take them to the chat page. Open the `index.html` file, delete all the code in it and update it with this:\n\n``` html\n    // www/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e \n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-capable\" content=\"yes\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"\u003e\n      \u003ctitle\u003eMy App\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.colors.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/app.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cf7-statusbar\u003e\u003c/f7-statusbar\u003e\n        \u003cf7-views\u003e\n          \u003cf7-view id=\"main-view\" navbar-through :dynamic-navbar=\"true\" main\u003e\n            \u003cf7-navbar back-link=\"Back\" sliding\u003e\n              \u003cf7-nav-center sliding\u003ePusher-Framework7 App \u003c/f7-nav-center\u003e\n            \u003c/f7-navbar\u003e\n      \n            \u003cf7-pages\u003e\n              \u003cf7-page\u003e\n                \u003cf7-list\u003e\n                  \u003c/f7-list-item\u003e\n                        \u003cf7-list-item\u003e    \n                          \u003cf7-input type=\"text\" v-model:value=\"name\" placeholder=\"Your name\" clear-button\u003e\u003c/f7-input\u003e\n                        \u003c/f7-list-item\u003e\n                  \u003c/f7-list-item\u003e\n                  \u003cf7-list-button v-on:click=\"enterChat\"\u003eEnter Chat\u003c/f7-list-button\u003e\n                \u003c/f7-list\u003e\n              \u003c/f7-page\u003e\n            \u003c/f7-pages\u003e\n          \u003c/f7-view\u003e\n        \u003c/f7-views\u003e\n      \u003c/div\u003e\n      \u003ctemplate id=\"page-chat\"\u003e\n        \u003cf7-page\u003e\n    \u003c!-- chat page goes here ... --\u003e\n        \u003c/f7-page\u003e\n      \u003c/template\u003e\n      \n    \u003c!-- Add CDN for Pusher and Axios --\u003e\n      \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n      \u003cscript src=\"cordova.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7-vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNotice we added the CDN for both Pusher and Axios in the scripts above. Next, open the `app.js` file and  replace the code there in it with this:\n\n``` javascript\n    // www/js/app.js\n    \n    (function(){\n    function init(){\n    Vue.use(Framework7Vue)\n    Vue.component('page-chat', {\n      template: '#page-chat',\n    \n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n        }\n      },\n      framework7: {\n        root: '#app',\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    document.addEventListener('deviceready', init, false)\n    })();\n```    \n    \n\nAt this point, if you save both edited files and check back on your browser, you should now get this look:\n\n![framework7-chat-app-stage-1](//images.ctfassets.net/1es3ne0caaid/3CjVXRcJT2Q268I2QyiwCG/4da71e4c5139bcf6a0c6470879a578b5/framework7-chat-app-stage-1.jpeg)\n\nHere we can supply a name and click the **Enter Chat** button to enter the chat page, but at this point it won’t work. That is expected, given that we’ve not defined a function to handle the button click event. To fix that, let’s go ahead and do some data binding between our component and our states. Update the `app.js` file like so:\n\n``` javascript\n    // www/js/app.js\n    \n    // init states\n    var states = {\n        name: '',\n        msgs: []\n    };\n      \n    (function(){\n    function init(){\n    \n    Vue.use(Framework7Vue)\n    \n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      // handle onSend\n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n          if( typeof clear == 'function' ) clear()\n        }\n      }\n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      // handle enterChat button\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n        }\n      },\n      framework7: {\n        root: '#app',\n        /* Uncomment to enable Material theme: */\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    \n    document.addEventListener('deviceready', init, false)\n    })();\n```\n\nHere we defined a states object to hold the name of the user and an array of messages. Then we added the missing callbacks that we defined in our HTML file to handle the click events on the buttons. \n\nIf the user supplies a name and clicks the **Enter Chat** button, it’ll open up the chat page, but if that is not the case, it’ll alert the user to a name. Update your `app.js` file with the snippet above and save. Now go back to the browser, enter a name and click **Enter Chat.** This should now open up the empty chat page.\n\nNext, we’ll set up the chat page to have a simple chat form with an input to collect the message and a button to send it. Open the `index.html` file and update the chat page template section with this code:\n\n``` html\n    // www/index.html\n    // ...\n    \u003cf7-messages\u003e\n      \u003cf7-message v-for=\"msg in msgs\" :name=\"msg.name\" :text=\"msg.text\" :type=\"msg.type\"\u003e\n    \u003c/f7-message\u003e\n    \u003c/f7-messages\u003e\n      \u003cf7-messagebar placeholder=\"type message\" send-link=\"Send\" v-on:submit=\"onSend\" \u003e\n    \u003c/f7-messagebar\u003e\n    // ...\n```    \n\nAdd this code in the section where we left a comment to add chat page. Save the `index.html` file and check back on your browser. The chat page should look like this:\n\n![framework7-chat-app-stage-2](//images.ctfassets.net/1es3ne0caaid/5hX0MmKXSEE2KYKo20kUoM/6a2fb2c3fbf42ac5aef29d016d50e115/framework7-chat-app-stage-2.jpeg)\n\n## Realtime updates\n\nAt this point, we can type messages, but nothing happens when you try to send. This is because we haven’t integrated Pusher. At the beginning we set up Pusher and retrieved our app keys, we’ll now use it to configure our project. Open the `app.js`  file and add this code:\n\n``` javascript\n      // www/js/app.js\n      \n       const pusher = new Pusher('YOUR_PUSHER_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true,\n      });\n      const channel = pusher.subscribe('chat');\n      channel.bind('message', data =\u003e {\n          console.log(data)\n        var type = data.name == states.name ? 'sent':'received'\n        var name = type == 'sent'? states.name : data.name;\n        states.msgs.push({name:name, text:data.text, type:type});\n      });\n      \n      // ...\n```\n\nThis sets up Pusher in our client with the credentials from our dashboard. We subscribe to the `chat` channel we defined on the server and bind our response data to the appropriate view objects to display them on screen.\n\nNow to send the chat to the server when the user clicks the **Send button**, let’s update the onSend function in the `app.js`  file:\n\n``` javascript\n      // www/js/app.js\n      ...\n      \n      // Init Page Components\n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      \n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n            var message = {\n                name: this.name,\n                text: text \n            }\n            axios.post('http://localhost:6000/message', message);\n          if( typeof clear == 'function' ) clear()\n          }\n        }\n      });\n      \n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n          \n        }\n      },\n      ...\n```\n\nHere we define a message object that takes the name of the user and text message to send. Then we use Axios to post the message object to the `/messages` endpoint we defined on the server.\n\n\n## Testing\n\nTo test out the application, ensure that both Phonegap server and the Node server is running. If that’s not the case, you can start the Phonegap server in project root with `phonegap serve` and the Node server with `node server`. \n\nBefore testing your application, I recommend you compare your codes with mine to ensure that you did everything right so as not to encounter any blockers. Compare your `index.html`, `server.js` and `app.js`. If everything looks alright, now go ahead and test the application.\n\nOpen two browser windows to `localhost:3000` and send messages:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8xB4rlOXW-A?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n\n\n## Conclusion\n\nThe importance of realtime engagement of users on any platform cannot be overemphasized. As seen in this tutorial, we were able to implement a realtime chat system with Framework7 and Pusher. I hope you found this tutorial helpful.\n\nFeel free to explore the code for this tutorial on [GitHub](https://github.com/Kennypee/pusher-framework7-chat) and add more features as you deem fit.  ","metaTitle":"Build a chat app using Framework7","metaDescription":"Use Framework7, Vue.js and Node.js to build a simple chat app for Android and iOS. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1V9IMy4fvOuKCyY4462mCE","type":"Entry","createdAt":"2018-06-22T15:27:13.678Z","updatedAt":"2020-06-19T12:34:30.182Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live blog using Go and Vue.js","url":"live-blog-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/liveblog-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-06-20","description":"Build a live blogging app using Go and Vue.js. Admin users can post blog updates, and readers can see posts appear in realtime.","prerequisite":"You will need Go 0.10+ and SQLite 3+ set up on your machine.","content":"Live reporting is nothing new and can take different forms. It can be live video streaming, live audio streaming or live blogging. Live blogging while being the most basic of the group, is also the one that saves the most data. \n\nSports websites like Goal.com implement live blogging as a way of showing live commentary on their platform.  This technique is also being used in the current (at the time of writing this article) FIFA World Cup going on in Russia. \n\nIn this article, we will see how we can build a live blogging platform using Go, Vue and Pusher Channels.\n\nThis is a preview of what we will be building:\n\n![go-vue-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/5VVLlqx7zieoQoSY2kWkyA/d632e8a489c4ba8841d56a7a1d100b24/go-vue-liveblog-demo.gif)\n\n## Prerequisites\n\nTo follow along you need to have the following requirements:\n\n\n- Basic knowledge of the [Go](https://golang.org/) programming language.\n- Basic JavaScript (Vue.js) knowledge.\n- Go (version \u003e= 0.10.x) installed on your machine. [Check out the installation guide](https://golang.org/doc/install).\n- SQLite (version \u003e= 3.x) installed on your machine.\n\nLet’s get started.\n\n\n## Getting a Pusher Channels application\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\nNow that we have our application, let’s move on to the next step\n\n## Creating our Go application\n\nThe next thing we want to do is create the Go application. In your terminal, `cd` to your `$GOPATH` and create a new directory there.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir liveblog\n    $ cd liveblog\n```\n\n\u003e 💡 It is recommended that you place the source code for your project in the `src` subdirectory (e.g., `$GOPATH/src/your_project` or `$GOPATH/src/github.com/your_github_username/your_project`.\n  \n\nNext, we will create some directories to organize our application:\n\n```\n    $ mkdir database\n    $ mkdir public\n    $ mkdir public/uploads\n```\n\nThe commands above will create a `database` and `public` directory, and also an `uploads` directory inside the `public` directory. We will store our database file inside the `database` directory. We will keep our public files, HTML and images, inside the `public` and `uploads` directory. Create a new `index.html` file in the `public` directory that was created.\n\nNow let’s create our main Go file. We will try to keep everything simple by placing all our source code in a single file. Create a `main.go` file in the project root.\nIn the file paste the following:\n\n``` go\n    package main\n    \n    import (\n        \"database/sql\"\n        \"net/http\"\n    \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        _ \"github.com/mattn/go-sqlite3\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n\nAbove we have imported some packages we will be needing to work on our live blog. We need the `database/sql` for working with SQL, and the `net/http` will be used for our HTTP status codes.\n\nAbove we also have some external packages imported. The `labstack/echo` package is the [Echo framework](https://github.com/labstack/echo) that we will be using. We also have the `mattn/go-sqlite3` package for working with SQLite. And finally, we imported the `pusher/pusher-http-go` package which we will use to trigger events to Pusher Channels.\n\n### Importing the external Go packages\n\nBefore we continue, let’s pull in these packages using our terminal. Run the following commands below to pull the packages in:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e Note that the commands above will not return any confirmation output when it finishes installing the packages. If you want to confirm the packages were indeed installed you can just check the `$GOPATH/src/github.com` directory.\n  \n\nWhen the packages have been pulled in successfully, we can go ahead and create our `main` function. This will be the entry point of our application. In this function, we will set up our applications database, middleware, and routes.\n\nOpen the `main,go` file and paste the following code:\n\n``` go\n    func main() {\n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        db := initialiseDatabase(\"./database/storage.db\")\n        migrateDatabase(db)\n    \n        e.File(\"/\", \"public/index.html\")\n        e.File(\"/admin\", \"public/admin.html\")\n        e.GET(\"/posts\", getPosts(db))\n        e.POST(\"/posts\", savePost(db))\n    \n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nIn the code above, we instantiated our database using the file path to the database file and passing that to the `initialiseDatabase` function. This will create the SQLite file if it did not already exist. We then run the `migrateDatabase` function which migrates the database.\n\nNext, we instantiate Echo and register some middlewares and routes. The routes will handle client requests and return responses. The first handler is the File handler. We use this to serve the `index.html` and `admin.html` file. The `index.html` will be the entry point to the application from the frontend while the `admin.html` will be the place where the admin can update the posts.\n\nWe also have the `/posts` route which accepts a `POST` and `GET` request. We need these routes to act like API endpoints that are used for creating new posts and viewing all the available posts.\n\nFinally, we use `e.Start` to instruct the Go web server to run on port 9000 when it is started.\nAt this point, we have not created most of the functions we referenced in the `main` function so let’s do so now.\n\n### Creating our database management functions\n\nIn the `main` function we referenced `initialiseDatabase` and `migrateDatabase` functions. Let’s create them now. In the `main.go` file, paste the following functions above the `main` function:\n\n``` go\n    func initialiseDatabase(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        if db == nil {\n            panic(\"db nil\")\n        }\n    \n        return db\n    }\n    \n    func migrateDatabase(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS posts(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    content TEXT\n            );\n    `\n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nIn the `initialiseDatabase` function, we create an instance of the SQLite database using the database file and return that instance. In the `migrateDatabase` function, we use the instance of the database returned in the previous function to execute the migration SQL.\n\nLet’s create the data structure for our post and post collection.\n\n### Creating our data structures\n\nNext, let's create the data structure for our object types. We will create a `Post` structure and a `PostCollection` structure. The `Post` struct will define how a typical post will be represented while the `PostCollection` will define how a collection of posts will be represented.\n\nOpen the `main.go` file and paste the following code above the `initialiseDatabase` function:\n\n``` go\n    // Post type\n    type Post struct {\n        ID      int64  `json:\"id\"`\n        Content string `json:\"content\"`\n    }\n    \n    // PostCollection type\n    type PostCollection struct {\n        Posts []Post `json:\"items\"`\n    }\n```\n\n### Creating our route handler functions\n\nNext, let’s create the functions for our routes. Open the `main.go` file and paste the following file inside it:\n\n``` go\n    func getPosts(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            rows, err := db.Query(\"SELECT * FROM posts ORDER BY id DESC\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer rows.Close()\n    \n            result := PostCollection{}\n    \n            for rows.Next() {\n                post := Post{}\n                err2 := rows.Scan(\u0026post.ID, \u0026post.Content)\n                if err2 != nil {\n                    panic(err2)\n                }\n    \n                result.Posts = append(result.Posts, post)\n            }\n    \n            return c.JSON(http.StatusOK, result)\n        }\n    }\n    \n    func savePost(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            postContent := c.FormValue(\"content\")\n            stmt, err := db.Prepare(\"INSERT INTO posts (content) VALUES(?)\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer stmt.Close()\n    \n            result, err := stmt.Exec(postContent)\n            if err != nil {\n                panic(err)\n            }\n    \n            insertedID, err := result.LastInsertId()\n            if err != nil {\n                panic(err)\n            }\n    \n            post := Post{\n                ID:      insertedID,\n                Content: postContent,\n            }\n    \n            return c.JSON(http.StatusOK, post)\n        }\n    }\n```\n\nIn the `getPosts` method above, we ran a query to fetch all the latest posts from the database and return them as a JSON response to the client. In the `savePost` method we run the query to insert a new record in the posts table and return a JSON response to the client.\n\n### Adding realtime support to our Go application\n\nThe next thing we want to do is trigger an event when a new post is added to the posts table. For this, we will be using the Pusher Go HTTP library.\n\nIn the `main.go` file paste the following above the type definitions for the `Post` and `PostCollection`:\n\n``` go\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n```\n\nThis will create a new Pusher client instance. We can then use this instance to trigger notifications to different channels we want. Remember to replace the `PUSHER_APP_*` keys with the keys on your Pusher app dashboard.\n\nNext, in the `savePost` function in the `main.go` file and right before the `return` statement at the bottom of the function, paste the following code:\n\n```\n    client.Trigger(\"live-blog-stream\", \"new-post\", post)\n```\n\nThis is the code that triggers a new event when a new post is added to the live blog.\n\nThat will be all for our Go application.\n\nYou can build your application and compile it into a binary using the `go build` command. However, for this tutorial we will just run the binary temporarily:\n\n```\n    $ go run main.go\n```\n\nThis command will temporarily build and run our Go application.\n\n## Building our frontend\n\nWe have built the Go backend of our application and now it's time to build the frontend. We will be using the Vue.js framework and the [Axios](https://github.com/axios/axios) library to send HTTP requests.\n\nOpen the `index.html` file and in there paste the following code:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eLive Blog\u003c/title\u003e\n        \u003cstyle\u003e\n        .container {\n            max-width: 500px;\n        }\n        .logo-space {\n            text-align: center;\n            padding: 50px 0;\n            background-color: #bada55;\n            margin: 10px 0;\n        }\n        .live-posts {\n            margin: 0;\n            padding: 0;\n            list-style: none;\n        }\n        .live-posts \u003e li {\n            padding: 10px;\n            background-color: #d8d8d8;\n            margin-bottom: 10px;\n        }\n        .power {\n            text-align: center;\n            margin-top: 20px;\n            font-size: 12px;\n            color: #999;\n        }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"logo-space\"\u003e\n                    \u003ch1\u003eLive Commentary\u003c/h1\u003e\n                \u003c/div\u003e\n                \u003cul class=\"live-posts\"\u003e\n                    \u003cli v-for=\"post in posts\"\u003e{{ post.content }}\u003c/li\u003e\n                \u003c/ul\u003e\n                \u003cdiv class=\"power\"\u003e\n                    Powered by \u003ca href=\"https://pusher.com\"\u003ePusher\u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe HTML above defines the visual elements of our application. Let's add some Vue code. In the same file, paste the following code before the closing `body` tag:\n\n``` javascript\n    \u003cscript\u003e\n        new Vue({\n            el: '#app',\n            data: {\n                posts: []\n            },\n            created() {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n                \n                let channel = pusher.subscribe('live-blog-stream')\n    \n                channel.bind('new-post', post =\u003e this.posts.unshift(post));\n    \n                axios.get(\"/posts\").then(res =\u003e {\n                    if (res.data.items) {\n                        this.posts = res.data.items\n                    }\n                })\n            }\n        })\n    \u003c/script\u003e\n```\n\nAbove we created a Vue instance and stored the properties `posts`. The `posts` property stores the post list.\n\nIn the `created` method we create an instance of our Pusher library. We then listen on the `live-blog-stream` channel for the `new-post` event. When this event is triggered we append the new post from the event to the `posts` list.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the one from your Pusher dashboard.\n\nFinally, let’s create the admin panel where we can update the commentaries from. Create an `admin.html` file in the `public` directory and paste the following into the file:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eAdmin Panel\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003cstyle\u003e\n        .container {\n            max-width: 500px;\n        }\n        .logo-space {\n            text-align: center;\n            padding: 50px 0;\n            background-color: #bada55;\n            margin: 10px 0;\n        }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n    \n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"logo-space\"\u003e\n                    \u003ch1\u003eLive Commentary\u003c/h1\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"alert alert-success\" role=\"alert\" v-show=\"successfulPost\"\u003e\n                    Post added successfully!\n                \u003c/div\u003e\n                \u003cform action=\"/posts\" method=\"POST\" id=\"post-stuff\" v-on:submit.prevent=\"submitForm\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003ctextarea class=\"form-control\" v-model=\"content\" placeholder=\"Enter Post\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \u003cinput type=\"submit\" class=\"form-control btn btn-primary\" name=\"submit\" value=\"Update Stream\"\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n        new Vue({\n            el: \"#app\",\n            data: {\n                content: \"\",\n                successfulPost: false\n            },\n            methods: {\n                submitForm() {\n                    if (this.content.length \u003e 0 \u0026\u0026 this.content !== \"\") {\n                        let data = new FormData()\n                        data.append(\"content\", this.content)\n                        axios.post(\"/posts\", data).then(res =\u003e {\n                            this.content = \"\"\n                            this.successfulPost = true\n                            setTimeout(() =\u003e this.successfulPost = false, 3000)\n                        })\n                    }\n                }\n            }\n        })\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove we have a simple admin panel with an input to update the blog. It uses [Axios](https://github.com/axios/axios) to make a POST request to the API to update the blog.\n\nThat’s all for the frontend, you can save the file and head over to your web browser. Visit http://127.0.0.1:9000 to see your application in action.\n\nHere’s how it will look again:\n\n![go-vue-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/5VVLlqx7zieoQoSY2kWkyA/d632e8a489c4ba8841d56a7a1d100b24/go-vue-liveblog-demo.gif)\n\n## Conclusion\n\nIn this article, we have considered how we can create a live blogging platform using Go, Pusher Channels and Vue. As seen from the code samples above, it is very easy to get started with Pusher Channels.\n\nCheck the [documentation](https://pusher.com/docs) to see other ways you can use Pusher Channels to provide realtime features to your users.\n\nThe source code for this application is available on [GitHub](https://github.com/neoighodaro/liveblog-go-pusher).","metaTitle":"Create a live blog using Go and Vue.js","metaDescription":"Use Go and Vue.js to build a live blogging application. Admin users can add posts, and the homepage shows the updates in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XaCS1RWmcC6OQCW2OSceE","type":"Entry","createdAt":"2018-06-06T10:53:29.784Z","updatedAt":"2020-06-19T12:38:38.352Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comments feed with Go and Vue.js","url":"live-comments-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-comments-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-06-04","description":"Build a simple comments feed using Go, Vue.js and SQLite. Users can comment on a post, with the comments feed updating instantly.","prerequisite":"You will need Go, and SQLite installed on your machine. Basic knowledge of Go and JavaScript will be helpful.","content":"The internet is a breeding ground for all kinds of social activities because it expands the possibilities of communication. In order to keep web applications social and enjoyable, it is important for them to have one or more interfaces for the users to interact through. One such interface is the comment section. \n\nThe comment section is where users can discuss a subject (post, video, picture) that they have access to. In the past, for a user to see a comment from another user, the user would have to refresh the browser window. However, with realtime comments now we can automatically pull in comments live. This article will cover how we can build realtime commenting using Pusher.\n\nBy the end of this article, we will have built an application that looks like this:\n\n![go-comments-demo](//images.ctfassets.net/1es3ne0caaid/3dhebYl8aAm4cCME4Os2ys/4d39432a0bd39156cf8556c15649a2f1/go-comments-demo.gif)\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n\n- Go (version \u003e= 0.10.x) installed on your computer. Heres how you can [install Go](https://golang.org/doc/install).\n- SQLite (v3.x) installed on your machine. [Installation guide](http://www.sqlitetutorial.net).\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6).\n- Basic knowledge of Vue.js.\n\n## Getting a Pusher Channels application\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the Pusher website and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![go-comments-app-keys](//images.ctfassets.net/1es3ne0caaid/2h3e4hp58cIW6acMc8Mgy0/dfeac8f3cdffb41174e93ad567233cd0/go-comments-app-keys.png)\n\nNow that we have our application, let’s move on to the next step.\n\n## Setting up the codebase\n\nLet’s start by navigating into the `src` directory located in the `$GOPATH`. Then we’ll create a new directory for our app there.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-realtime-comments\n    $ cd go-realtime-comments\n```\n\nCreate a `comments.go` file in this directory.\n\nBefore we write code, we need to import a few Go packages that will help run our projects. We will install the [Echo framework](https://echo.labstack.com) and the [SQLite packages](https://github.com/mattn/go-sqlite3). Run the following commands to pull in the packages:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n```\n\n\u003e ⚠️  If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also see this [GitHub issue](https://github.com/mattn/go-sqlite3/issues/297).\n\nWith your favorite editor, open the `comments.go` file and paste in the following lines of code:\n\n``` go\n    package main\n    \n    import (\n        // \"database/sql\"\n    \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        // _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\n\n## Configuring the database and routes\n\nEvery Go application must have a `main` function. This is where the execution of the application will start from, so let’s create our `main` function:\n\nIn the `comments.go` file, add the following below the imports:\n\n``` go\n    func main() {\n    \n        // Echo instance\n        e := echo.New()\n        \n        // Middleware\n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n            \n        // Define the HTTP routes\n        e.GET(\"/comments\", func(c echo.Context) error {\n            return c.JSON(200, \"GET Comments\")\n        })\n        \n        e.POST(\"/comment\", func(c echo.Context) error {\n            return c.JSON(200, \"POST a new Comment\")\n        })\n        \n        // Start server\n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nIn the main function, we have defined some basic route handler functions, these functions basically return hard coded text to browser on request. The last line will start Go’s standard HTTP server using Echo’s start method and listen for requests port 9000.\n\nWe can test that the application works at this stage by running it and making some requests using [Postman](https://www.getpostman.com/).\n\nHere is how you can run the application:\n\n```\n    $ go run ./comments.go\n```\n\nWe can send HTTP requests using Postman. Here’s a sample GET request using Postman:\n\n![go-comments-get-example](//images.ctfassets.net/1es3ne0caaid/1hOAHfzR8C2SocUciKSaEi/de4455b61abfaed1da7f612a6b1c75f6/go-comments-get-example.png)\n\nPOST request with Postman:\n\n![go-comments-post-example](//images.ctfassets.net/1es3ne0caaid/1uCCDXGXBeus4mSKgSKYoi/a66e13b4921d54b799a3ceae40c2b4d1/go-comments-post-example.png)\n\nWe will create a function that will initialize a database and for that we need the SQL and SQLite3 drivers. We already added them to the `import` statement so uncomment them. We will also create a function that will migrate the database using a database schema defined inside the function.\n\nOpen the `comments.go` file and paste the following code before the `main` function:\n\n``` go\n    func initDB(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n        if err != nil {\n            panic(err)\n        }\n    \n        if db == nil {\n            panic(\"db nil\")\n        }\n        return db\n    }\n    \n    func migrate(db *sql.DB) {\n        sql := `\n        CREATE TABLE IF NOT EXISTS comments(\n                id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                name VARCHAR NOT NULL,\n                email VARCHAR NOT NULL,\n                comment VARCHAR NOT NULL\n        );\n       `\n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nNext add the following code to the top of the `main` function:\n\n``` go\n    // [...]\n    \n    // Initialize the database\n    db := initDB(\"storage.db\")\n    migrate(db)\n    \n    // [...]\n```\n\nWe can now check that these functions are being called and the database is created during execution by running the application:\n\n```\n    go run comments.go\n```\n\n\u003e ⚠️  If you were already running the Go application you would need to kill the process using ctrl+c on your keyboard and then restart it to see changes.\n\nWhen the application is run for the first time, a `storage.db` file will be created in the working directory if it did not previously exist.\n\n\n## Setting up the handlers\n\nWe have tested that our application listens on the specified port 9000 and handles the HTTP requests as we configured it to. However, the current handler functions simply return hard-coded text to the browser so let’s create new handler functions to handle responses to the routes.\n\nCreate a new folder in the root directory named `handlers`:\n\n```\n    $ mkdir handlers\n    $ cd handlers\n```\n\nNext create a `handlers.go` file and paste the following:\n\n``` go\n    package handlers\n    \n    import (\n        \"database/sql\"\n        \"go-realtime-comments/models\"\n        \"net/http\"\n        \"github.com/labstack/echo\"\n    )\n```\n\nNow we need to go back to the `comments.go` file and import the handlers package:\n\n```\n    import (\n        \"go-realtime-comments/handlers\"\n    \n        // [...]\n    )\n```\n\nIn the same file, replace the route definitions from earlier with the ones below:\n\n``` go\n    // [...]\n    \n    // Define the HTTP routes\n    e.File(\"/\", \"public/index.html\")\n    e.GET(\"/comments\", handlers.GetComments(db))\n    e.POST(\"/comment\", handlers.PushComment(db))\n    \n    // [...]\n```\n\nNext paste the following code in the `handlers.go` file below the import statement:\n\n``` go\n    type H map[string]interface{}\n    \n    //GetComments handles the HTTP request that hits the /comments endpoint\n    func GetComments(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            return c.JSON(http.StatusOK, models.GetComments(db))\n        }\n    }\n    \n    func PushComment(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            var comment models.Comment\n    \n            c.Bind(\u0026comment)\n    \n            id, err := models.PushComment(db, comment.Name, comment.Email, comment.Comment)\n            if err == nil {\n                return c.JSON(http.StatusCreated, H{\n                    \"created\": id,\n                })\n            }\n            \n            return err\n        }\n    }\n```\n\nThe `GetComments` function fetches and returns comments from the database while the  `PushComment` saves comments to the database and returns a response.\n\n\n## Setting up the models\n\nTo create the model package, we need to create a new folder in the root directory of our application:\n\n```\n    $ mkdir models\n    $ cd models\n```\n\nNext create a `models.go` file and paste the following code:\n\n``` go\n    package models\n    \n    import (\n        \"database/sql\"\n        _ \"github.com/mattn/go-sqlite3\"\n    )\n```\n\nLet’s create a Comment `type`, which is a struct with four fields:\n\n- `ID` - the ID of the comment.\n- `Name` - the username of the user who made the comment.\n- `Email` - the email of the user who made the comment.\n- `Comment` - the comment.\n\nIn Go, we can add metadata to variables by putting them within backticks. We can use this to define what each field should look like when converted to `JSON`. This will also help the `c.Bind` function know how to map `JSON` data when registering a new comment.\n\nLet’s define the structs for `Comment` and `CommentCollection`. In the `models.go` file paste in the following below the imports:\n\n``` go\n    type Comment struct {\n        ID      int    `json:\"id\"`\n        Name    string `json:\"name\"`\n        Email   string `json:\"email\"`\n        Comment string `json:\"comment\"`\n    }\n    \n    type CommentCollection struct {\n        Comments []Comment `json:\"items\"`\n    }\n```\n\nNext, paste in the following code after the structs:\n\n``` go\n    func GetComments(db *sql.DB) CommentCollection {\n        sql := \"SELECT * FROM comments\"\n        rows, err := db.Query(sql)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        defer rows.Close()\n    \n        result := CommentCollection{}\n    \n        for rows.Next() {\n    \n            comment := Comment{}\n            err2 := rows.Scan(\u0026comment.ID, \u0026comment.Name, \u0026comment.Email, \u0026comment.Comment)\n            if err2 != nil {\n                panic(err2)\n            }\n    \n            result.Comments = append(result.Comments, comment)\n        }\n    \n        return result\n    }\n```\n\nThe `GetComments` function is responsible for retrieving all the available comments from the database and returning them as an instance of the `CommentCollection` that we defined. \n\nNext, paste in the following code below the one above:\n\n``` go\n    func PushComment(db *sql.DB, name string, email string, comment string) (int64, error) {\n        sql := \"INSERT INTO comments(name, email, comment) VALUES(?, ?, ?)\"\n        stmt, err := db.Prepare(sql)\n        if err != nil {\n            panic(err)\n        }\n    \n        defer stmt.Close()\n    \n        result, err2 := stmt.Exec(name, email, comment)\n        if err2 != nil {\n            panic(err2)\n        }\n    \n        return result.LastInsertId()\n    }\n```\n\nThe `PushComments` function adds a new comment to the database.\n\n\n## Building the frontend\n\nNext, create a `public` folder in our application’s root directory and create an `index.html` file inside it. \n\nOpen the `index.html` file and paste in this code:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003ctitle\u003eRealtime comments\u003c/title\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cstyle\u003e\n          @media (min-width: 48em) {\n            html {\n              font-size: 18px;\n            }\n          }\n          body {\n            font-family: Georgia, \"Times New Roman\", Times, serif;\n            color: #555;\n          }\n          h1, .h1, h2, .h2, h3, .h3, h4, .h4, h5, .h5, h6, .h6 {\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            font-weight: 400;\n            color: #333;\n          }\n          .blog-masthead {\n            margin-bottom: 3rem;\n            background-color: #428bca;\n            box-shadow: inset 0 -.1rem .25rem rgba(0,0,0,.1);\n          }\n          .nav-link {\n            position: relative;\n            padding: 1rem;\n            font-weight: 500;\n            color: #cdddeb;\n          }\n          .nav-link:hover, .nav-link:focus {\n            color: #fff;\n            background-color: transparent;\n          }\n          .nav-link.active {\n            color: #fff;\n          }\n          .nav-link.active::after {\n            position: absolute;\n            bottom: 0;\n            left: 50%;\n            width: 0;\n            height: 0;\n            margin-left: -.3rem;\n            vertical-align: middle;\n            content: \"\";\n            border-right: .3rem solid transparent;\n            border-bottom: .3rem solid;\n            border-left: .3rem solid transparent;\n          }\n          @media (min-width: 40em) {\n            .blog-title {\n              font-size: 3.5rem;\n            }\n          }\n          .sidebar-module {\n            padding: 1rem;\n          }\n          .sidebar-module-inset {\n            padding: 1rem;\n            background-color: #f5f5f5;\n            border-radius: .25rem;\n          }\n          .sidebar-module-inset p:last-child,\n          .sidebar-module-inset ul:last-child,\n          .sidebar-module-inset ol:last-child {\n            margin-bottom: 0;\n          }\n          .blog-post {\n            margin-bottom: 4rem;\n          }\n          .blog-post-title {\n            margin-bottom: .25rem;\n            font-size: 2.5rem;\n            text-align: center;\n          }\n          .blog-post-meta {\n            margin-bottom: 1.25rem;\n            color: #999;\n            text-align: center;\n          }\n          .blog-footer {\n            padding: 2.5rem 0;\n            color: #999;\n            text-align: center;\n            background-color: #f9f9f9;\n            border-top: .05rem solid #e5e5e5;\n          }\n          .blog-footer p:last-child {\n            margin-bottom: 0;\n          }\n          input{\n              width: 45% !important;\n              display: inline-block !important;\n          }\n          textarea {\n              width: 90%;\n              height: 150px;\n              padding: 12px 20px;\n              box-sizing: border-box;\n              border: 2px solid #ccc;\n              border-radius: 4px;\n              background-color: #f8f8f8;\n              resize: none;\n          }\n          textarea:focus, input:focus{\n              outline: none !important;\n          }\n          #comment-section{\n            background: rgb(178, 191, 214); \n            padding: 0.5em 2em; width: 90%;\n            margin: 10px 0;\n            border-radius: 15px;\n          }\n          #comment-section \u003e div \u003e p {\n            color: black;\n            display:inline;\n          }\n          img{\n          border-radius: 50%;\n          float: left;\n          }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cdiv id=\"app\"\u003e\n        \u003cheader\u003e\n            \u003cdiv class=\"blog-masthead\"\u003e\n              \u003cdiv class=\"container\"\u003e\n                \u003cnav class=\"nav\"\u003e\n                  \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                \u003c/nav\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/header\u003e\n    \n          \u003cmain role=\"main\" class=\"container\"\u003e\n    \n            \u003cdiv class=\"row\"\u003e\n    \n              \u003cdiv class=\"col-sm-12 blog-main\"\u003e\n    \n                \u003cdiv class=\"blog-post\"\u003e\n                  \u003ch2 class=\"blog-post-title\"\u003eRealtime Comments With Pusher\u003c/h2\u003e\n                  \u003cp class=\"blog-post-meta\"\u003eJanuary 1, 2018 by \u003ca href=\"#\"\u003eJordan\u003c/a\u003e\u003c/p\u003e\n                  \u003cp\u003eThis blog post shows a few different types of content that's supported and styled with Bootstrap. Basic typography, images, and code are all supported.This blog post shows a few different types of content that's supported and styled with Bootstrap. Basic typography, images, and code are all supported\n                  \u003c/p\u003e\n                  \u003cdiv class=\"comment-section\"\u003e\n            \u003cform class=\"form-signin\"\u003e\n            \u003ch5 class=\"comment\"\u003eComment\u003c/h5\u003e\n            \u003cinput type=\"username\" ref=\"username\" class=\"form-control\" placeholder=\"John Doe\" required autofocus\u003e\n            \u003cinput type=\"email\" ref=\"email\" class=\"form-control\" placeholder=\"Johndoe@gmail.com\" required\u003e\n            \u003ctextarea ref=\"comment\"\u003e\u003c/textarea\u003e\n            \u003cbutton class=\"btn btn-lg btn-primary\" @click.prevent=\"sendComment\" type=\"submit\"\u003eComment\u003c/button\u003e\n          \u003c/form\u003e\n          \u003cbr\u003e\n          \u003cdiv id=\"comment-section\" v-for=\"comment in comments\"\u003e\n            \u003cdiv\u003e\n              \u003cimg src=\"http://merritos.com/img/team/maleTeam.jpg\" width=\"65px\" height=\"65px\"\u003e\n               \u003cp\u003e\u0026nbsp;\u0026nbsp;{{comment.name}} \u0026nbsp;\u003c {{comment.email}} \u003e\u003c/p\u003e\n               \u003chr\u003e\n            \u003c/div\u003e\n            \u003cp style=\"color:black\"\u003e{{comment.comment}}\u003c/p\u003e\n          \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n            \u003c/div\u003e\n    \n          \u003c/main\u003e\n    \n          \u003cfooter class=\"blog-footer\"\u003e\n            \u003cp\u003e\u003ca href=\"#\"\u003eBack to top\u003c/a\u003e\u003c/p\u003e\n          \u003c/footer\u003e\n    \n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow in the same file, paste the following code before the closing `body` tag of the HTML:\n\n``` javascript\n    \u003cscript\u003e\n      var app = new Vue({\n        el: '#app',\n        data: {\n          comments : []\n        },\n        created: function() {\n          axios.get('/comments').then(response =\u003e { \n            this.comments = response.data.items ? response.data.items : [] \n          })\n        },\n        methods: {\n            sendComment: function(index) {\n              let comment = {\n                name: this.$refs.username.value,\n                email: this.$refs.email.value,\n                comment: this.$refs.comment.value\n              }\n              \n              axios.post('/comment', comment).then(response =\u003e { \n                this.$refs.username.value = '',\n                this.$refs.email.value = '',\n                this.$refs.comment.value = ''\n              })\n            }\n        }\n      })\n    \u003c/script\u003e\n```\n\nAbove we have the Vue.js code for our application and this is a summary of what it does:\n\n\n- We instantiate a comments array that will hold all the available comments.\n- In the `created()` method, we use [Axios](https://www.npmjs.com/package/axios) to pull in all the comments available from the API and store it in the `comments` array.\n- In the `sendComment` method, we send a request to the API to create a new `comment`.\n\nWe can build our application at this stage and visit http://localhost:9000, we should see this:\n\n```\n    $ go run comments.go\n```\n\nOur application should display like this:\n\n![go-comments-homepage](//images.ctfassets.net/1es3ne0caaid/2m7H3gsZCMIkEKGueSEuK/d014e440249b413da2ed8f509d91eae1/go-comments-homepage.png)\n\n### Making comments display in realtime\nThe next thing we need to do is make sure the comments are displayed in realtime. To do this, we need to trigger an event every time a new comment is added. We will do this in the backend using the [Pusher Go library](https://github.com/pusher/pusher-http-go).\n\nTo pull in the Pusher Go library run the following command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nNext let’s import the library. In our `models.go` file do the following in the imports statement:\n\n``` go\n    package models\n    \n    import (\n        // [...]\n        \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n\nIn the same file, before the `type` definition, paste in the following code:\n\n``` go\n    // [...]\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // [...]\n```\n\nHere, we have initialized the Pusher client using the credentials from our earlier created app.\n\n\n\u003e ⚠️ Replace `PUSHER_APP_*` keys with your Pusher app credentials.\n\nNext, let’s trigger an event every time a comment is saved to the database. Replace the `PushComment` function with the following code:\n\n``` go\n    func PushComment(db *sql.DB, name string, email string, comment string) (int64, error) {\n        sql := \"INSERT INTO comments(name, email, comment) VALUES(?, ?, ?)\"\n        stmt, err := db.Prepare(sql)\n        if err != nil {\n            panic(err)\n        }\n    \n        defer stmt.Close()\n    \n        result, err2 := stmt.Exec(name, email, comment)\n        if err2 != nil {\n            panic(err2)\n        }\n    \n        newComment := Comment{\n            Name:    name,\n            Email:   email,\n            Comment: comment,\n        }\n    \n        client.Trigger(\"comment-channel\", \"new-comment\", newComment)\n        return result.LastInsertId()\n    }\n```\n\nIn this newer version of the function we create a `newComment` object that holds information for the last comment that was saved to the database. Whenever a new comment is created, we will send it to the Pusher channel `comment-channel` to be triggered on the event `new-comment`.\n\n**Displaying data in realtime on the client**\nTo receive comments we have to register the [Pusher JavaScript Client](https://github.com/pusher/pusher-js) in our frontend code. Add this line of code inside the head tag of our HTML in the index.html file:\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nNext we will register a Pusher instance in the `created()` life cycle hook:\n\n``` go\n    created: function() {\n    \n        const pusher = new Pusher('PUSHER_APP_KEY', {\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n        \n        const channel = pusher.subscribe('comment-channel');\n        \n        channel.bind('new-comment', data =\u003e {\n          this.comments.push(data)\n        });\n    \n        // [...]    \n    }\n```\n\n\u003e ⚠️  Replace the `PUSHER_APP_*` keys with the credentials for your Pusher application.\n\nIn the code above, we are creating a Pusher instance and then subscribing to a channel. In that channel we are listening for the `new-comment` event.\n\nNow we can run our application:\n\n```\n    $ go run comments.go\n```\n\nWe can point a web browser to this address http://localhost:9000 and we should see the application in action:\n\n![go-comments-demo](//images.ctfassets.net/1es3ne0caaid/3dhebYl8aAm4cCME4Os2ys/4d39432a0bd39156cf8556c15649a2f1/go-comments-demo.gif)\n\n## Conclusion\n\nIn this article, we looked at how to build a realtime comment system using Go, Vue.js, and Pusher Channels. The source code to the application is available on [GitHub.](https://github.com/neoighodaro/realtime-comments-go-pusher)","metaTitle":"Build a live comments feed with Go and Vue.js","metaDescription":"Use Go and Vue.js to create a live comments feed. You will build a simple app, with a sample post. Users will be able to comment on the post and see all users' comments update in realtime."}}],"defaultValue":"Vue.js","queryType":"tag","pages":9,"route":"/tutorials","query":{"tag":"Vue.js","page":"5"}}},"page":"/tutorials","query":{"tag":"Vue.js","page":"5"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Vue.js&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:13 GMT -->
</html>