<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=26 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:55 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/accessible-react-native.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making accessible React Native apps</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial looks at ways to improve the accessibility of React Native apps. You will take a (provided) starter app an...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/go-vue-online-presence.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Go application with online presence</h3><p class="css-k12xad e5jrto45">In this tutorial you&#x27;ll build a simple Go application, using Vue.js for the frontend. Users will be able to sign in and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ios-machine-learning.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create an iOS application using machine learning</h3><p class="css-k12xad e5jrto45">This tutorial dives into machine learning with a practical demo. You will build a convolutional neural network, , before...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/storybook-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Using Storybook with React Native</h3><p class="css-k12xad e5jrto45">Learn how to use Storybook for React Native development. The tutorial introduces Storybook and the concepts of component...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/localized-laravel-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a localized app with Laravel - Part 1: Internationalization and accessibility</h3><p class="css-k12xad e5jrto45">This four-part series explores how to build an accessible localized application in Laravel. In part one, examine various...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/localized-laravel-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a localized app with Laravel - Part 2 : The setup and application backend</h3><p class="css-k12xad e5jrto45">This four-part series explores how to build an accessible localized application in Laravel. In part two, set up your pro...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/mvp-backend-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Writing an MVP for your backend with Kotlin</h3><p class="css-k12xad e5jrto45">This tutorial guides you through building a minimum viable product for a Kotlin backend app. It uses a messenger applica...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with Go</h3><p class="css-k12xad e5jrto45">This brief tutorial helps you create a simple chat application. You will build the backend in Go, and the frontend in va...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/android-messenger-presence-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Android messenger app with online presence using Kotlin</h3><p class="css-k12xad e5jrto45">This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials8c06.html?page=25" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials1d82.html?page=24" class="css-za1ua3 edg0byb1">24</a><a href="tutorials8c06.html?page=25" class="css-za1ua3 edg0byb1">25</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials19d2.html?page=26" class="css-2wakph edg0byb1">26</a><a href="tutorials2459.html?page=27" class="css-za1ua3 edg0byb1">27</a><a href="tutorialse459.html?page=28" class="css-za1ua3 edg0byb1">28</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorials2459.html?page=27" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1CtUK8rOmUWskec6qKQ04E","type":"Entry","createdAt":"2018-08-17T22:30:49.340Z","updatedAt":"2018-08-17T22:30:49.340Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making accessible React Native apps","url":"accessible-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNa11y","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-08-13","description":"This tutorial looks at ways to improve the accessibility of React Native apps. You will take a (provided) starter app and enhance it with various accessibility features. You will also learn how to test and measure your app's accessibility.","prerequisite":"You will need React Native and Yarn installed on your machine. Some familiarity with React Native will be helpful.","content":"In this tutorial, you’re going to learn how to make React Native apps more accessible. Specifically, we’re going to cover the following:\n\n- What is accessibility?\n- Designing apps with accessibility in mind\n- Accessibility in React Native apps\n- Accessibility testing tools\n\nOf course, we cannot hope to cover everything about accessibility. It’s a pretty big subject and it’s a continuous journey. There’s always something that you can improve in order to make the experience just a little bit more pleasant for a certain user. Instead, what we hope to achieve in this tutorial, is to take that first step into making more accessible apps.\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNa11y). The `starter` branch contains the not so accessible version of the app, while the `a11y` branch contains the more accessible version.\n\n\n## Prerequisites\n\nTo follow this tutorial, you need to know the basics of creating a React Native app. \nThe React Native development environment should also be set up on your machine.\n\nWe will be using React Native version 0.56 in this tutorial. We’ll also be using [Yarn](https://yarnpkg.com/en/) to install packages.\n\n\n## What is accessibility?\n\nBefore we proceed, it’s important that we all agree on what accessibility is, in the context of a mobile app. Accessibility or a11y, means making your apps usable to both normal users and users with disabilities. Any person can have one or more form of disability. That usually includes but not limited to the following:\n\n\n- **Visual impairments** - examples include low vision, color-blindness, and total blindness.\n- **Physical or motor disabilities** - cerebral palsy, bone and joint deformities.\n- **Mental disorders** - autism spectrum disorders such as Asperger’s syndrome, and autistic disorder.\n- **Hearing impairment** - deafness and partial hearing loss.\n- **Reading disabilities** - Dyslexia.\n\nAccessibility means designing your apps in such a way that it takes all of these disabilities into consideration in order to make the user experience pleasant for everyone. \n\n\n## What you’ll be building\n\nWe won’t actually be building anything from scratch. Instead, we’re going to make a pre-built app more accessible. Here’s what the starter app looks like:\n\n![accessible-rn-starter](//images.ctfassets.net/1es3ne0caaid/5o4PrPT43eGaCw8yGswg4A/1fe4265f13dd87224aae737a8c9f95b6/accessible-rn-starter.png)\n\nThis won’t be how the final output will look like because we’ll also be taking design into consideration (though, only a little because I’m not really a designer). \n\nIf you want to follow along, clone the repo, switch to the `starter` branch and install the dependencies:\n\n```\n    git clone https://github.com/anchetaWern/RNa11y.git\n    cd RNa11y\n    git checkout starter\n    yarn install\n    react-native upgrade\n    react-native link\n    react-native run-android\n    react-native run-ios\n```\n\n## Designing apps with accessibility in mind\n\nIn this section, we’ll redesign the app so that it becomes more accessible. We will be using the [dos and don'ts on designing for accessibility](https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/) from the [GOV.UK](https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/) website as a guide. Specifically, we’re going to adopt the following dos from their guide:\n\n\n- Use simple colors\n- Make buttons descriptive\n- Build simple and consistent layouts\n- Follow a linear, logical layout\n- Write descriptive links and heading\n- Use good contrasts and a readable font size\n- Use a combination of color, shapes, and text\n- Make large clickable actions\n\nRight off the bat, you can see that the starter app violates some of these rules. The app is already following a few, but we can still improve on it.\n\n### Use simple colors\n\nThe starter app violates this rule because it’s using a dark color for its background. It’s not really easy on the eyes, so we need to update the app and card background:\n\n``` javascript\n    // file: App.js\n    const styles = {\n      container: {\n        flex: 10,\n        backgroundColor: \"#FFF\" // update this\n      }\n    };\n```\n\n``` javascript\n    // src/components/Card.js\n    const styles = StyleSheet.create({\n      card: {\n        width: 120,\n        height: 140,\n        backgroundColor: \"#3e3e3e\", // update this\n      }\n    });\n```\n\nAlso, update the `Header` component to match. This is because the items in the status bar aren’t really very readable when using a dark background:\n\n``` javascript\n    // src/components/Header.js\n    const styles = StyleSheet.create({\n      header: {\n        paddingTop: 10,\n        backgroundColor: \"#ccc\" // update this\n      },\n      header_text: {\n        fontWeight: \"bold\",\n        color: \"#333\", // update this\n      }\n    });\n```\n\nOnce that’s done, the content should now be more readable.\n\n### Make large clickable actions\n\nNext, we need to make the buttons larger. This change is specifically useful for people with physical and motor disabilities, as they’re often the ones who have difficulty in pressing small buttons.\n\nIf you inspect the app right now, you’ll see that there’s not much space we can work with. So even if we make the buttons larger, it will still be difficult to target a specific one because there won’t be ample whitespace between them. Though we still have some free space between each card so we’ll make use of that instead.\n\nIn your `Card` component, include the `Dimensions` module so that we can get the device’s width. We’ll use it to determine how much width each card can use. In this case, we have two cards in each row so we’ll just divide it by two and add a padding. We’re also making the `height` bigger because we’re anticipating the buttons to become bigger:\n\n``` javascript\n    // src/components/Card.js\n    \n    import { View, Text, Image, StyleSheet, Dimensions } from \"react-native\"; // add Dimensions\n    \n    const { width } = Dimensions.get(\"window\");\n    \n    const cardPadding = 20;\n    const styles = StyleSheet.create({\n      card: {\n        width: (width / 2) - cardPadding, // update this\n        height: 150, // update this\n      }\n    });\n```\n\nNext, we can now proceed with updating the size and padding of the button:\n\n``` javascript\n    // src/components/IconButton.js:\n    \n    const icon_color = \"#586069\";\n    const icon_size = 25; // update this\n    \n    const styles = StyleSheet.create({\n      icon: {\n        // update these:\n        paddingLeft: 10, \n        paddingRight: 10\n      }\n    });\n```\n\nAt this point, each button should be huge and visible enough to click on.\n\n### Make buttons descriptive\n\nUnfortunately, this isn’t really something that can be implemented all the time because of design constraints. If you check the app now, you’ll see that there’s not really enough space to accommodate labels for each button. \n\nThere is a solution, but we will end up giving up the current layout (two cards per row) for a one card per row layout. So the only feasible solution is to have a walkthrough for new users. This way, you can teach what each button is used for. I won’t really be covering how to do that, but there’s a [good component](https://github.com/okgrow/react-native-copilot) which allows you to implement it easily.\n\n### Use good contrasts and a readable font size\n\nIn my opinion, the app already has pretty good contrast. But to be on the safe side, we’ll tweak it some more.\n\nFirst, we have to differentiate between each individual card and the app’s background. We can do that by applying a darker background color:\n\n``` javascript\n    // src/components/Card.js\n    const cardPadding = 20;\n    const styles = StyleSheet.create({\n      card: {\n        width: width / 2 - cardPadding,\n        height: 150,\n        backgroundColor: \"#e0e0e0\", // update this\n      }\n    });\n```\n\nNext, we need to differentiate between the card’s body and its contents:\n\n``` javascript\n    // src/components/Card.js\n    const styles = StyleSheet.create({\n      name: {\n        fontSize: 16,\n        color: \"#3a3f46\", // update this\n      }\n    });\n```\n\n``` javascript\n    // src/components/IconButton.js\n    \n    const icon_color = \"#3a3f46\"; // update this\n    const icon_size = 25;\n```\n\nLastly, we need to make the text larger. While there’s no general agreement as to what font size should we be using to optimize accessibility, a [few](https://ux.stackexchange.com/questions/102813/minimum-font-size-for-mobile-view) [people](https://accessibleweb.com/wcag_2_0_developers/minimum-font-size/) seem to swear by `16px` so we’re also going with that:\n\n``` javascript\n    const styles = StyleSheet.create({\n      name: {\n        fontSize: 16, // update this\n      }\n    });\n```\n\nWe’ve skipped the following because we’re already following them:\n\n\n- Write descriptive links and heading\n- Follow a linear, logical layout\n- Use a combination of color, shapes, and text\n- Build simple and consistent layouts\n\nOnce that’s done, the app’s design should be pretty accessible. \n\n\n## Accessibility in React Native apps\n\nThe previous section discussed mainly the visual component of accessibility. In this section, we’ll look at how to make the app more accessible for people who use screen readers.\n\nFor those unfamiliar, a screen reader reads to users what they’re currently touching on the screen. This technology is mainly used by blind or visually impaired people. If a screen reader is enabled, the user has to double tap in order to activate the intended action.\n\nIn order for a screen reader to be useful, we need to properly label all the relevant components that a user will most likely interact upon. In React Native, this can be done by adding accessibility props. Here’s an example of how we can add these props:\n \n``` javascript\n    // src/components/Header.js\n    const Header = ({ title }) =\u003e {\n      return (\n        \u003cView\n          style={styles.header}\n          accessible={true}\n          accessibilityLabel={\"Main app header\"}\n          accessibilityRole={\"header\"}\n        \u003e\n          \u003cText style={styles.header_text}\u003e{title}\u003c/Text\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nLet’s go through each of the accessibility props we’ve added to the `Header` component:\n\n\n- `accessible` - accepts a boolean value that’s used to mark whether a specific component is an accessible element or not. This means that the screen reader will read whatever label you put on it. Be careful with using this though, as it makes all of its children inaccessible. In the `Header` component above, this makes the `Text` component inside the `View` inaccessible. So the screen reader won’t actually read the title indicated in the header. It will only read the `accessibilityLabel` you’ve passed to the `View` instead. It’s a good practice to only set the `accessible` prop to `true` if you know that the component doesn’t have any child that’s supposed to be treated as an accessible element.\n- `accessibilityLabel` - the text you want the screen reader to read when the user touches over it. A good practice when using this prop is to be as descriptive as possible. Remember that the user will only rely on what’s being read by the screen reader. They actually have no idea of the context a specific component is in, so it’s always useful to repeat it in your labels. For example, each of the buttons in each card should still mention the name of the Pokemon.\n- `accessibilityRole` - the general role of the component in this app. Examples include: `button`, `link`, `image`, `text`, and in this case `header`. Note that `header` doesn’t only indicate the app’s main header. It can also indicate a section header or a list header.\n\nThe next component we’ll update is the IconButton because it’s important that the user knows that those buttons we’ve added are actually buttons:\n\n````javascript\n    // src/components/IconButton.js\n    const IconButton = ({ icon, onPress, data, label }) =\u003e {\n      return (\n        \u003cTouchableOpacity\n          accessible={true}\n          accessibilityLabel={label}\n          accessibilityTraits={\"button\"}\n          accessibilityComponentType={\"button\"}\n          onPress={() =\u003e {\n            onPress(data.name);\n          }}\n        \u003e\n          \u003cIcon\n            name={icon}\n            style={styles.icon}\n            size={icon_size}\n            color={icon_color}\n          /\u003e\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nFrom the code above, you can see that we’re accepting a new `label` prop which we then use as the value for the `accessibilityLabel`. We’ve also set the component to be `accessible` which means that when the user’s finger goes over it, the screen reader will read out the `accessibilityLabel`. \n\nBut what about `accessibilityTraits` and `accessibilityComponentType`? Well, they are the old way of setting the `accessibilityRole`. `accessibilityTraits` is only for iOS and `accessibilityComponentType` is only for Android. As [mentioned in the docs](https://facebook.github.io/react-native/docs/accessibility#accessibilitytraits-ios), these props will be deprecated soon. We’re only using it because `TouchableOpacity` doesn’t seem to be accepting `accessibilityRole`. The trait (button) wouldn’t show up as I was testing with the accessibility inspector. We’ll go over this tool in the next section.\n\nLastly, we update the `Card` component so it passes the correct labels to each of the IconButton. We’re also making the Pokemon Image and Text accessible:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ item, viewAction, bookmarkAction, shareAction }) =\u003e {\n      return (\n        \u003cView style={styles.card}\u003e\n          \u003cImage\n            source={item.pic}\n            style={styles.thumbnail}\n            accessible={true}\n            accessibilityRole={\"image\"}\n            accessibilityLabel={`${item.name} image`}\n          /\u003e\n          \u003cText style={styles.name} accessibilityRole={\"text\"}\u003e\n            {item.name}\n          \u003c/Text\u003e\n          \u003cView style={styles.icons}\u003e\n            \u003cIconButton\n              icon=\"search\"\n              onPress={viewAction}\n              data={item}\n              label={`View Pokemon ${item.name}`}\n            /\u003e\n            \u003cIconButton\n              icon=\"bookmark\"\n              onPress={bookmarkAction}\n              data={item}\n              label={`Bookmark Pokemon ${item.name}`}\n            /\u003e\n            \u003cIconButton\n              icon=\"share\"\n              onPress={shareAction}\n              data={item}\n              label={`Share Pokemon ${item.name}`}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nIn case you’re wondering why we didn’t add the `accessible` and `accessibilityLabel` prop in the Pokemon label, it’s because the `Text` component is [accessible by default](https://facebook.github.io/react-native/docs/text#accessible). This also means that the screen reader automatically reads the text inside of this component.\n\n\n## Accessibility testing tools\n\nIn this section, we’ll take a look at four tools you can use to test the accessibility of your React Native app.\n\n### Testing accessibility while developing the app\n\nIn iOS, you can use the Accessibility Inspector tool in Xcode. Because it’s in Xcode, you have to run the app from Xcode. You can do that by opening the `RNa11y.xcodeproj` or `RNa11y.xcworkspace` file inside your project’s `ios` directory. Then run the app using the big play button located on the upper left side of the screen. \n\nOnce the app is running, you can open the Accessibility Inspector tool by going to **Xcode** → **Open Developer Tool** → **Accessibility Inspector**.\n\nFrom there, you can select the running iOS simulator instance:\n\n![ios-accessibility-inspector-1](//images.ctfassets.net/1es3ne0caaid/6qNgPqBzxY2gQCya28EQCe/18c5511aaa2c0c91d2627c6e4af89e05/ios-accessibility-inspector-1.png)\n\nOnce you’ve selected the simulator, click on the target icon right beside the drop-down. This activates the inspection mode. You can then hover over the components which we updated earlier and verify whether the inspector is reading the labels correctly:\n\n![ios-accessibility-inspector-2](//images.ctfassets.net/1es3ne0caaid/2SeBUm2GQM08QYMyu8acM2/bc43ab7293dfc5cdb317cd5b92585106/ios-accessibility-inspector-2.png)\n\nFor Android testing, you can use the [Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor) app. Unlike the Accessibility Inspector in iOS, you have to install it on your emulator or device in order to use it. Once installed, go to **Settings** → **Accessibility** → **Accessibility Scanner** and enable it. \n\n![android-accessibility-scanner](//images.ctfassets.net/1es3ne0caaid/23c3rdh3BeOOQuGCQoKEUk/ccd4b3393e5c944ef0d4dd661864fcd6/android-accessibility-scanner.png)\n\nOnce it’s enabled, switch to the app that we’re working on and click the floating blue button. This will scan the app for any accessibility issues. Once it’s done scanning, you can click on any of the indicated areas to view the suggestion:\n\n![image-contrast-warning](//images.ctfassets.net/1es3ne0caaid/4RRVksnQ3YsSsuQuYGo8Cg/91e7e74829222b88ac984bd166517f72/image-contrast-warning.png)\n\nThe easiest way to solve this issue is by making the card’s background color lighter. You can also try increasing the contrast of the image as suggested.\n\nInterestingly, if you remove the accessibility props from the image and scan again, you’ll see that it will no longer complain about the contrast:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ item, viewAction, bookmarkAction, shareAction }) =\u003e {\n      return (\n        \u003cView style={styles.card}\u003e\n          \u003cImage\n            source={item.pic}\n            style={styles.thumbnail}\n          /\u003e\n          ...\n        \u003c/View\u003e\n      );\n    };\n```\n\nThis can mean that the scanner only gets picky when you’ve marked a component as accessible. To test this assumption, try removing the accessibility props from the IconButton:\n\n``` javascript\n    // src/components/IconButton.js\n    const IconButton = ({ icon, onPress, data, label }) =\u003e {\n      return (\n        \u003cTouchableOpacity\n          onPress={() =\u003e {\n            onPress(data.name);\n          }}\n        \u003e\n        ...\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nIf you run the scanner again, you’ll see that it actually picks up on the issue:\n\n![item-description-warning](//images.ctfassets.net/1es3ne0caaid/5XT7FDpT32QQW640uuy664/b711061ff8d32bb41f09996a83c82cea/item-description-warning.png)\n\n### Manual accessibility testing\n\nAs with anything, it’s always important to test things manually so you know the actual experience your users are getting. After all, accessibility is all about improving the user experience that your users get when using the app. \n\n#### Testing in iOS\nTo test things manually in iOS, open Xcode and run the app on your iOS device. You can also do this from the simulator but that kinda beats the purpose of manual testing. You won’t really have an accurate “feel” of the experience if you’re just testing from a screen.\n\nOnce the app is running on your device, go to **Settings** → **Accessibility** → **VoiceOver**. From there, you can select the **Speech** menu to change the voice (I personally prefer Siri Female). You can also adjust the speaking rate. Adjust a little bit more from the mid-point should be fast enough for most people.\n\nOnce you’re done adjusting the settings, enable the **VoiceOver** setting then switch to the app. From there, you can tap on each of the accessibility areas that we’ve set to verify if it’s being read correctly.\n\n#### Testing in Android\nTo test in Android, run the app on your Android device. Once the app is running, go to **Settings** → **Language** and set it to your preferred language. \n\nNext, go to **Accessibility** → **Text-to-speech** options and make sure the **Default language status** is fully supported. If not, you have to go to the language settings again and select a supported language. \n\nThe equivalent of VoiceOver in Android is TalkBack, you can enable it by going to **Accessibility** → **TalkBack** then enable the setting**.** Once enabled, switch to the app and verify if the labels are read correctly as you tap.\n\n\n## Further reading\n\nHere are some resources to learn more about accessibility:\n\n\n- [Accessibility by Rob Dodson](https://www.youtube.com/watch?v=KPN31sB7v8c)\n- [React Native Accessibility: Creating Inclusive Apps in React Native](https://medium.com/@larenelg/creating-inclusive-apps-in-react-native-the-coding-bit-bd3832349009)\n- [React Native: Accessibility](https://facebook.github.io/react-native/docs/accessibility)\n- [Accessibility Testing on Android](https://robots.thoughtbot.com/accessibility-testing-on-android)\n- [iOS Accessibility Tutorial: Getting Started](https://www.raywenderlich.com/845-ios-accessibility-tutorial-getting-started)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to make React Native apps more accessible to a person with disabilities. I hope that you’ll use the knowledge you’ve gained in order to make accessibility a part of your development workflow. Because all of your users deserve an equal or similar ease of use.\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNa11y).","metaTitle":"Making accessible React Native apps","metaDescription":"Using a starter app, learn to implement improved accessibility in React Native apps. Work through practical examples, and discover accessibility tools."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ixvYc9KQOOcYecWgqi0QU","type":"Entry","createdAt":"2018-08-13T22:46:15.628Z","updatedAt":"2018-08-13T22:46:15.628Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Go application with online presence","url":"go-vue-online-presence","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-presence-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-08","description":"In this tutorial you'll build a simple Go application, using Vue.js for the frontend. Users will be able to sign in and view a video, and see who else is watching.","prerequisite":"You will need Go 0.10+ installed on your machine.","content":"When building applications that allow multiple users to interact with one another, it is essential to display their online presence so that each user gets an idea of how many other users are online.\n\nIn this article, we will build a live streaming application that displays the online presence of the users currently streaming a video. We will use [Go](https://golang.org/doc/install), JavaScript (Vue) and [Pusher](http://pusher.com/) for the development.\n \nHere’s a demo of the final application:\n\n![go-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/1ITW3IU0Vm8wkMS2gMqaGe/fdc44d0a06f09561bb282297f721a7e4/go-online-presence-demo.gif)\n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/go-pusher-presence-app).\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- A code editor like Visual Studio Code.\n- Basic knowledge of the Go programming language.\n- Go (version \u003e= 0.10.x) installed on your computer. [Installation guide.](https://golang.org/doc/install)\n- Basic knowledge of JavaScript (Vue).\n- A Pusher application. Create one [here](https://dashboard.pusher.com/).\n\nOnce you have all the above requirements, we can proceed.\n\n## Building the backend server\n\nWe will build the backend server in Go. Create a new project directory in the `src` directory that is located in the `$GOPATH`, let’s call this directory `go-pusher-presence-app`.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-presence-app\n    $ cd go-pusher-presence-app\n```\n\nNext, create a new Go file and call it `presence.go`, this file will be where our entire backend server logic will be. Now, let’s pull in the official Go Pusher package with this command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nOpen the `presence.go` file and paste the following code:\n\n``` go\n    // File: ./presence.go\n    package main\n    \n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    type user struct {\n        Username  string `json:\"username\" xml:\"username\" form:\"username\" query:\"username\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    var loggedInUser user\n    \n    func main() {\n        // Define our routes\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./static\")))\n        http.HandleFunc(\"/isLoggedIn\", isUserLoggedIn)\n        http.HandleFunc(\"/new/user\", NewUser)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        // Start executing the application on port 8090\n        log.Fatal(http.ListenAndServe(\":8090\", nil))\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nHere’s a breakdown of what we’ve done in the code above:\n\n\n- We imported all the packages that are required for the application to work, including Pusher.\n- We instantiated the Pusher client that we will use to authenticate users from the client-side.\n- We defined a user struct and gave it two the properties — username and email — so that Go knows how to handle incoming payloads and correctly bind it to a user instance.\n- We created a global instance of the user struct so that we can use it to store a user’s name and email. This instance is going to somewhat serve the purpose of a session on a server, we will check that it is set before allowing a user to access the dashboard of this application.\n\nIn the main function, we registered four endpoints:\n\n\n1. `/` - loads all the static files from the static directory.\n2. `/isLoggedIn` - checks if a user is logged in or not and returns a fitting message.\n3. `/new/user` - allows a new user to connect and initializes the global user instance.\n4. `/pusher/auth` — authorizes users from the client-side.\n\nIn the same file, above the `main` function, add the code for the handler function of the `/isLoggedIn` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    func isUserLoggedIn(rw http.ResponseWriter, req *http.Request){\n        if loggedInUser.Username != \"\" \u0026\u0026 loggedInUser.Email != \"\" {\n            json.NewEncoder(rw).Encode(loggedInUser)\n        } else {\n            json.NewEncoder(rw).Encode(\"false\")\n        }\n    }\n    \n    // [...]\n```\n\nAfter the function above, let’s add the handler function for the `/new/user` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    func NewUser(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        err = json.Unmarshal(body, \u0026loggedInUser)\n        if err != nil {\n            panic(err)\n        }\n        json.NewEncoder(rw).Encode(loggedInUser)\n    }\n    \n    // [...]\n```\n\nAbove, we receive a new user's details in a `POST` request and bind it to an instance of the user struct. We further use this user instance to check if a user is logged in or not\n\nLastly, after the function above, let’s add the code for the `/pusher/auth` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    // -------------------------------------------------------\n    // Here, we authorize users so that they can subscribe to \n    // the presence channel\n    // -------------------------------------------------------\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        \n        data := pusher.MemberData{\n            UserId: loggedInUser.Username,\n            UserInfo: map[string]string{\n                \"email\": loggedInUser.Email,\n            },\n        }\n    \n        response, err := client.AuthenticatePresenceChannel(params, data)\n        if err != nil {\n            panic(err)\n        }\n    \n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nTo ensure that every connected user has a unique presence, we used the properties of the global `loggedInUser` variable in setting the `pusher.MemberData` instance.\n \n The syntax for authenticating a Pusher presence channel is:\n \n```\n    client.AuthenticatePresenceChannel(params, presenceData)\n```\n\n## Building the frontend\n\nNext, in the root of the project, create a `static` folder. Create two files the directory named `index.html` and `dashboard.html`. In the `index.html` file, we will write the HTML code that allows users to connect to the live streaming application using their name and email.\n\n### Setting up the connection page\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./static/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n            \u003ctitle\u003eLive streamer\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n            \u003cstyle\u003e\n                  :root {\n                    --input-padding-x: .75rem;\n                    --input-padding-y: .75rem;\n                  }\n                  html,\n                  body, body \u003e div {\n                    height: 100%;\n                  }\n                  body \u003e div {\n                    display: -ms-flexbox;\n                    display: flex;\n                    -ms-flex-align: center;\n                    align-items: center;\n                    padding-top: 40px;\n                    padding-bottom: 40px;\n                    background-color: #f5f5f5;\n                  }\n                  .form-signin {\n                    width: 100%;\n                    max-width: 420px;\n                    padding: 15px;\n                    margin: auto;\n                  }\n                  .form-label-group {\n                    position: relative;\n                    margin-bottom: 1rem;\n                  }\n                  .form-label-group \u003e input,\n                  .form-label-group \u003e label {\n                    padding: var(--input-padding-y) var(--input-padding-x);\n                  }\n                  .form-label-group \u003e label {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    display: block;\n                    width: 100%;\n                    margin-bottom: 0; /* Override default `\u003clabel\u003e` margin */\n                    line-height: 1.5;\n                    color: #495057;\n                    cursor: text; /* Match the input under the label */\n                    border: 1px solid transparent;\n                    border-radius: .25rem;\n                    transition: all .1s ease-in-out;\n                  }\n                  .form-label-group input::-webkit-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-moz-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:not(:placeholder-shown) {\n                    padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                  }\n                  .form-label-group input:not(:placeholder-shown) ~ label {\n                    padding-top: calc(var(--input-padding-y) / 3);\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                    font-size: 12px;\n                    color: #777;\n                  }\n            \u003c/style\u003e\n          \u003c/head\u003e\n    \n          \u003cbody\u003e\n            \u003cdiv id=\"app\"\u003e\n              \u003cform class=\"form-signin\"\u003e\n                \u003cdiv class=\"text-center mb-4\"\u003e\n                  \u003cimg class=\"mb-4\" src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/Fotolia_117855281_Subscription_Monthly_M.jpg\" alt=\"\" width=\"72\" height=\"72\"\u003e\n                  \u003ch1 class=\"h3 mb-3 font-weight-normal\"\u003eLive streamer\u003c/h1\u003e\n                  \u003cp\u003eSTREAM YOUR FAVOURITE VIDEOS FOR FREE\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                    \u003cinput type=\"name\" id=\"inputUsername\" ref=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"\" autofocus=\"\"\u003e\n                      \u003clabel for=\"inputUsername\"\u003eUsername\u003c/label\u003e\n                  \u003c/div\u003e\n    \n                \u003cdiv class=\"form-label-group\"\u003e\n                  \u003cinput type=\"email\" id=\"inputEmail\" ref=\"email\" class=\"form-control\" placeholder=\"Email address\" autofocus=\"\" required\u003e\n                    \u003clabel for=\"inputEmail\"\u003eEmail address\u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cbutton class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" @click.prevent=\"login\"\u003eConnect\u003c/button\u003e\n                \u003cp class=\"mt-5 mb-3 text-muted text-center\"\u003e© 2017-2018\u003c/p\u003e\n              \u003c/form\u003e\n              \u003c/div\u003e\n    \n              \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\nOn line 106, we added Vue using a CDN. Let’s add the Vue script for the page.\n\nBefore the closing `body` tag add the following code:\n\n``` javascript\n    \u003cscript\u003e\n      var app = new Vue({\n        el: '#app',\n        methods: {\n          login: function () {\n            let username = this.$refs.username.value\n            let email = this.$refs.email.value\n    \n            fetch('new/user', {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({username, email})\n            })\n            .then(res =\u003e res.json())\n            .then(data =\u003e window.location.replace('/dashboard.html'))\n          }\n        }\n      })\n    \u003c/script\u003e\n```\n\nThis script above submits user data to the backend Go server and navigates the browser’s location to the dashboard’s URL. \n\nNext, let’s build the dashboard.\n\n### Setting up the dashboard\n\nOpen the `dashboard.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./static/dashboard.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eLive streamer | Dashboard\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n          \u003cdiv class=\"container-fluid row shadow p-1 mb-3\"\u003e\n            \u003cdiv class=\"col-3\"\u003e\n              \u003cimg class=\"ml-3\" src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/Fotolia_117855281_Subscription_Monthly_M.jpg\" height=\"72px\" width=\"72px\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-6 ml-auto mt-3\"\u003e\n              \u003cdiv class=\"input-group\"\u003e\n                \u003cinput type=\"text\" class=\"form-control\" aria-label=\"Text input with dropdown button\"\u003e\n                \u003cdiv class=\"input-group-append\"\u003e\n                  \u003cbutton class=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003eSearch\u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-3 float-right\"\u003e\n              \u003cimg src=\"https://www.seoclerk.com/pics/319222-1IvI0s1421931178.png\"  height=\"72px\" width=\"72px\" class=\"rounded-circle border\"/\u003e\n              \u003cp class=\"mr-auto mt-3 d-inline\"\u003e {{ username }} \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\"\u003e\n              \u003cdiv class=\"col-8\"\u003e\n                \u003cdiv class=\"embed-responsive embed-responsive-16by9\"\u003e\n                  \u003ciframe width=\"854\" height=\"480\" class=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/VYOjWnS4cMY\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"text-center mt-3 p-3 text-muted font-weight-bold border\"\u003e\n                  {{ member }} person(s) is/are currently viewing this video \n                  \u003chr\u003e\n                  \u003cli class=\"m-auto text-success\" v-for=\"member in connectedMembers\"\u003e\n                    {{ member }}\n                  \u003c/li\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"col-4 border text-justify\" style=\"background: #e0e0e0; height: 30em; overflow-y: scroll; position: relative;\"\u003e\n                \u003cdiv class=\"border invisible h-50 w-75 text-center\" ref=\"added\" style=\"font-size: 2rem; position: absolute; right: 0; background: #48cbe0\"\u003e{{ addedMember }} just started watching.\u003c/div\u003e\n                \u003cdiv class=\"border invisible h-50 w-75 text-center\" ref=\"removed\" style=\"font-size: 2rem; position: absolute; right: 0; background: #ff8325\"\u003e{{ removedMember }} just stopped watching.\u003c/div\u003e\n                \u003cdiv class=\"h-75 text-center\"\u003e\n                  \u003ch2 class=\"text-center my-3\"\u003e Lyrics \u003c/h2\u003e\n                  \u003cp class=\"w-75 m-auto\" style=\"font-size: 1.5rem\"\u003e\n                    We just wanna party\u003cbr\u003e\n                    Party just for you\u003cbr\u003e\n                    We just want the money\u003cbr\u003e\n                    Money just for you\u003cbr\u003e\n                    I know you wanna party\u003cbr\u003e\n                    Party just for me\u003cbr\u003e\n                    Girl, you got me dancin' (yeah, girl, you got me dancin')\u003cbr\u003e\n                    Dance and shake the frame\u003cbr\u003e\n                    We just wanna party (yeah)\u003cbr\u003e\n                    Party just for you (yeah)\u003cbr\u003e\n                    We just want the money (yeah)\u003cbr\u003e\n                    Money just for you (you)\u003cbr\u003e\n                    I know you wanna party (yeah)\u003cbr\u003e\n                    Party just for me (yeah)\u003cbr\u003e\n                    Girl, you got me dancin' (yeah, girl, you got me dancin')\u003cbr\u003e\n                    Dance and shake the frame (you)\u003cbr\u003e\n                    This is America\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Look what I'm whippin' up\u003cbr\u003e\n                    This is America (woo)\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Look what I'm whippin' up\u003cbr\u003e\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e ⚠️  Video is an embed from YouTube and may not play depending on your region.\n\nOn line 80 we imported the JavaScript Pusher library so let’s add some code to utilize it. Before the closing `body` tag, add the following code:\n\n``` javascript\n    \u003cscript\u003e\n    var app = new Vue({\n        el: '#app',\n        data: {\n            username: '',\n            member: 0,\n            addedMember: '',\n            removedMember: '',\n            connectedMembers: []\n        },\n    \n        created() {\n            fetch('/isLoggedIn', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(res =\u003e res.json())\n            .then(data =\u003e {\n                if (data != 'false') {\n                    this.username = data.username\n                } else {\n                    window.location.replace('/')\n                }\n            })\n    \n            this.subscribe()\n        },\n    \n        methods: {\n            subscribe: function () {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    authEndpoint: '/pusher/auth',\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n    \n                let channel = pusher.subscribe('presence-channel')\n    \n                channel.bind('pusher:subscription_succeeded', data =\u003e {\n                    this.member = data.count\n                    data.each(member =\u003e this.connectedMembers.push(member.id))\n                })\n    \n                // Display a notification when a member comes online\n                channel.bind('pusher:member_added', data =\u003e {\n                    this.member++\n                    this.connectedMembers.push(data.id)\n                    this.addedMember = data.id\n    \n                    this.$refs.added.classList.add('visible')\n                    this.$refs.added.classList.remove('invisible')\n    \n                    window.setTimeout(() =\u003e {\n                        this.$refs.added.classList.remove('visible');\n                        this.$refs.added.classList.add('invisible');\n                    }, 3000)\n                });\n    \n                // Display a notification when a member goes offline\n                channel.bind('pusher:member_removed', data =\u003e {\n                    this.member--\n                    let index = this.connectedMembers.indexOf(data.id)\n    \n                    if (index \u003e -1) {\n                        this.connectedMembers.splice(index, 1)\n                    }\n    \n                    this.removedMember = data.id\n                    this.$refs.removed.classList.add('visible')\n                    this.$refs.removed.classList.remove('invisible')\n    \n                    window.setTimeout(() =\u003e {\n                        this.$refs.removed.classList.remove('visible')\n                        this.$refs.removed.classList.add('invisible')\n                    }, 3000)\n                })\n            }\n        }\n    })\n    \u003c/script\u003e\n```\n\nIn the snippet above, we created some Vue data variables to display reactive updates on different parts of the DOM. We also registered a `created()` lifecycle hook that checks if a user is connected on the backend server and eligible to view the dashboard before calling the `subscribe()` method.\n\nThe `subscribe()` method first configures a Pusher instance using the keys provided on the dashboard then subscribes to a presence channel. Next, it binds to several events that are available on the returned object of a presence channel subscription.\n\nIn the callback function of these bindings, we are able to update the state of the data variables, this is how we display the visual updates on user presence in this application.\n\n\n## Testing the application\n\nWe can test the application by compiling down the Go source code and running it with this command:\n\n```\n    $ go run presence.go\n```\n\nThe application will be available for testing on this address http://127.0.0.1:8090, here’s a display of how the application should look:\n\n![go-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/1ITW3IU0Vm8wkMS2gMqaGe/fdc44d0a06f09561bb282297f721a7e4/go-online-presence-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating a live streaming application powered by a Go backend server.\n\nThe source code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/go-pusher-presence-app)","metaTitle":"Create a Go application with online presence","metaDescription":"Use Go and Vue.js to create a simple web app with online presence functionality. Users will be able to sign in, view a video and see who else is viewing the same video."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2wVdDDrHTCUWaUoKkO2Acs","type":"Entry","createdAt":"2018-08-10T18:29:41.646Z","updatedAt":"2018-11-21T11:33:38.688Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create an iOS application using machine learning","url":"ios-machine-learning","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"44i97616Lmk0Q0Ygcwc8iI","type":"Entry","createdAt":"2018-08-10T18:11:48.524Z","updatedAt":"2018-11-21T11:42:23.848Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Elena Jovchevska","url":"elena-jovchevska","email":"jovchevska.elenaa@gmail.com","twitter":"https://twitter.com/EJovchevska","github":"https://github.com/elleAI/","guestWriter":true}}],"projectRepo":"https://github.com/elleAI/ios-ml-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kaOeiCgZqsKQowY0KAQIY","type":"Entry","createdAt":"2018-08-08T16:33:51.998Z","updatedAt":"2018-08-08T16:33:51.998Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Machine Learning","url":"machine-learning","type":"use case"}}],"reviewDate":"2018-08-08","description":"This tutorial dives into machine learning with a practical demo. You will build a convolutional neural network, , before connecting it to an iOS app, creating a machine learning powered iOS image recognition app.","prerequisite":"You will need the following installed on your machine: PyCharm, Miniconda, Python 2.7, pip, coremltools, XCode and Keras.","content":"We are lucky enough to be living in an era of exponential technology growth. We are lucky enough to witness the transition from yesterday’s technology - the one we grew up with, to the new era - the era of artificial intelligence.\n\nThe world of technology is in a constant rise. New ideas, researchers and curious minds are striving for new discoveries and advancements.\n\nAlgorithms for mimicking the human brain, such as a neural network, are used as part of machines, which will act as a human being. The area of the deep learning is in the main focus and the peak of its glory. But still, there is yet a lot more to discover.\n\nIn order for us to be able to do this, we should start with the basics. This tutorial will guide you through the following concepts:\n\n\n- Building a machine learning algorithm\n- Applying the technique of [transfer learning](https://towardsdatascience.com/what-is-transfer-learning-8b1a0fa42b4)\n- Building an iOS application based on the ML model using the Core ML framework.\n\nWhether you are an iOS developer, machine learning enthusiast or curious mind for technology, this tutorial is for you.\n\nFrom what I have learned from my experience with machine learning is that the hardest part is understanding its basic principles. When you get the hang of it, everything else is going to be the right amount of challenge, knowledge and projects stacked up in your experience. This tutorial will do exactly that, help you see the bigger picture and guide you deeper into one of the most hyped technology these days.\n\nHere is a demo of what we will build: \n\n![ml-ios-demo](//images.ctfassets.net/1es3ne0caaid/3OSefYygNaScYiwiWOaMOi/0358ec5921b77e4321c21393eace5c66/ml-ios-demo.gif)\n\nTo start working on this project, we will need to set up an environment. In the following section I will include all the packages used and links from where you can download them.\n\n## Prerequisites\n\nFor this tutorial you should have a basic understanding of machine learning,  and also familiarity with iOS development. \n\nThe following are used in this project:\n\n\n- [PyCharm (Commercial)](https://www.jetbrains.com/pycharm/download/#section=mac)\n- [Miniconda](https://conda.io/miniconda.html)\n- [Python 2.7](https://www.python.org/downloads/release/python-2714/) \n- [pip (10.0.1)](https://pip.pypa.io/en/stable/installing/)\n- coremltools (0.8)\n- [XCode (9.4.1)](https://developer.apple.com/xcode/)\n- Keras (2.1.3)\n\nDownload the above packages from the links attached. I went on and used Python 2.7 in combination with miniconda, I suggest you do the same, since there are differences between Python 2 and Python 3. You can always use Anaconda if you prefer, or used it before.\n\nThe installation of coremltools and Keras will be done with pip. Open your terminal and type the following:\n\n```\n    pip install keras==2.1.3\n    pip install coremltools\n```\n\n## But first of all, what is machine learning?\n\nMachine learning is the creation of algorithms who are able to learn on their own. They do not need to be programmed for each decision on the way. An algorithm builds on rules, fed with input and resulting in output. It is capable of making classifications, recognizing patterns and analyzing a large amount of data. \n\nThe input for these algorithms can be either supervised or unsupervised, ie. labelled or unlabelled data. ML can help us optimize large amounts of data and classify it in a way no human brain can, at least not with that speed. But it can't help us clean the data, that is our job. \n\nOur first task when building a machine learning algorithm - is finding the right data. Data is power. With the right amount of data, the diverse and clean one, we can build the optimal algorithm.\n\n## Secondly, what algorithm will be used?\n\nIn this tutorial, I will focus on building a convolutional neural network. CNN is used for image recognition in the area of deep learning. \n\nThe logic behind this choice is fairly simple since the final product is an algorithm that does image recognition. \n\nTo understand how the CNN works, we should understand how it processes the data, which is an image. An image is a three dimensional array of numbers, commonly known as pixels. Each pixel may have a value from 0 to 255. The colors we see are represented in RGB (RED, GREEN, BLUE) spectrum. The three dimensional array is consisted of width, height and its three channels(RGB). This neural network performs mathematical operations on the image's pixels.\n\nTo understand the operations more thoroughly, we will explain the topology of the CNN. The name of the neural network - convolutional, originates from the mathematical operation - dot between two functions. \n\n![topology-cnn](//images.ctfassets.net/1es3ne0caaid/3Wd1SI59EcSeE4KCsO6woE/c5457db830b8fbb4b6b5e89f516dac91/topology-cnn.png)\n\nThe first layer in the neural network is the convolutional (1). This is our main layer. In this step, certain effects are applied to the images, effects such as blurring or sharpening. This is achieved with filters. The filters are matrices of digits, performing matrix multiplication with the input image, resulting in a feature vector.\n\n![convolutional-layer-operation](//images.ctfassets.net/1es3ne0caaid/6kjISWq7bGSSw8mG8wMiiW/573017e5f035e96d68e8eab7b2a30e6c/convolutional-layer-operation.png)\n\nThe number and size of the filters are defined by us. \n\nThe next step is dealing with the fact that the real world data is a nonlinear one. If you are not familiar with non-linearity, it is a concept where the output does not rely on the input changes. So to achieve the nonlinearity, we apply one of the [activation functions](https://towardsdatascience.com/activation-functions-neural-networks-1cbd9f8d91d6) available such as ReLU, sigmoid or tanh. \n\nThe next layer in the neural network is recommended to be the pooling layer (2). The pooling layer performs downsampling of the image input dimensions, keeping the most important features. Usually, the pooling operation can either be selecting the largest digits of the image matrix, performing a sum of the matrices numbers, or calculating the matrices average. It all depends on the type of the pooling layer. \n\n![pooling-operation](//images.ctfassets.net/1es3ne0caaid/1LK85ny2nqCwQES2cmeeIi/99cc21446e688be013379bd591031136/pooling-operation.png)\n\nFinally, the last step of the neural network is flattening the output high dimensional matrix to a two dimensional array. Then adding the last fully connected layer in the CNN (3). This layer has connections between all the neurons and is the one responsible for performing the classification.\n\n![fully-connected-layer](//images.ctfassets.net/1es3ne0caaid/4zj9bHBTvaA2W0YMauyoME/674bf43e3627b8f88657c4dae8090e82/fully-connected-layer.png)\n\nThe dataset we will use for the training is a dataset of flowers, separated into five categories, which you can download [here](https://www.kaggle.com/alxmamaev/flowers-recognition#flowers.zip). One of the first problems, that was encountered with this dataset is the different dimensions of each of the images. The prerequisites for building a convolutional neural network is defining an input shape. So the first step towards processing the dataset is resizing the images. The final shape of the input is 200x200 (width x height). The following step is separating the dataset to train and test data. The threshold for test data is 20 percent. The process for resizing the images and separation can be observed below.\n\n## Project setup\n\nFirst, checkout the whole code from [**GitHub**](https://github.com/elleAI/ios-ml-app). \n\nOpen your terminal and navigate to the folder structure where you will set the project and clone the repository. Download the folder models from this [Dropbox link](https://www.dropbox.com/sh/nbopbot03e5hr0o/AAAHeps1wOehKKGj6SK4ZGyTa?dl=0) and place in the folder structure next to Datasets and MachineLearningTutorial folders.\n\nIn the project you can find the Python scripts for creating the neural networks for the initial training and the transfer learning.\n\nThe scripts are the following:\n⋅⋅/project/algorithmFlowManager.py - Defines the flow of the scripts.\n⋅⋅/project/cnn.py - Convolutional Neural Network for Initial Training\n⋅⋅/project/readDataset.py - Reads the datasets\n⋅⋅/project/seperateDataset.py - Separate the datasets to train and test folders.\n⋅⋅/project/resizeDataset.py - Resizes the images to 200x200 dimensions.\n⋅⋅/project/transferLearning.py - Convolutional Neural Network for Transfer Learning\n⋅⋅/project/convertToMLModel.py - Conversion of trained model with Transfer Learning to MLModel\n\nThere are also three additional subfolders: one being `datasets` for the images used for training and transfer learning respectively, the other one being `MachineLearningTutorial` folder, where you can find the iOS Application and the last one are the trained `models` (downloaded from Dropbox).\n\nFirst we need to open the project, by selecting **Choose File → Open . . .** from the menu.\nThe second thing during the project setup is choosing the project interpreter. To set up the interpreter open the settings options by selecting **Choose File → Default Settings . . .**:\n\n![ml-ios-pycharm-menu](//images.ctfassets.net/1es3ne0caaid/6p97SidpCgYCwYeggAE8wc/c1eb6bc491603d026e6b8c68f8e17e5c/ml-ios-pycharm-menu.png)\n\nYou will be prompted with the window shown in the picture below. Since this will be the first time setting up the interpreter, select **Project Interpreter → Add Local**.\n\n![ml-ios-project-interpreter](//images.ctfassets.net/1es3ne0caaid/1MzQNn5Ky8aUQk0qeMAMuu/2713f3a7309a8a6194cd7e3d195f5fe4/ml-ios-project-interpreter.png)\n\nThe interpreter can be found in the Miniconda or Anaconda installation folders on your computer. Usually it is located under the bin subfolder of the installation folder.\n\nSo when you set the interpreter, to check that everything works as expected, select **Edit Configurations . . .** . option, located next to the run button.\n\n![ml-ios-interpreter-config](//images.ctfassets.net/1es3ne0caaid/t6Pp2hNGbA2wgCgGUyUSw/19ba028893539b292be0305a43cf6928/ml-ios-interpreter-config.png)\n\nAnd you will get an overview for the project interpreter.\nNow that we are all set up, we can start working on our project.\n\n## Building the CNN\n\nFirst open the script  `algorithmFlowManager.py`.\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    import readDataset\n    import cnn\n    import transferLearning\n    import convertToMLModel\n    import seperateDataset\n    import sys\n    import os\n    \n    # Returns the absolute path of the current project folder\n    def getFolderPath():\n        pathname = os.path.dirname(sys.argv[0])\n        return os.path.abspath(pathname)\n    \n    trainingDir = os.path.join(getFolderPath(), \"datasets\",\"trainDataset/\")\n    transferLearningDir = os.path.join(getFolderPath(), \"datasets\",\"transferLearningDataset/\")\n    \n    # Performs the initial training\n    def performTrainingCNN():\n        seperateDataset.createDatasetFolders(trainingDir)\n        xtrain, xtest, ytrain, ytest = readDataset.loadData(trainingDir, True)\n        modelPath = os.path.join(getFolderPath(), \"models\")\n        cnn.trainCNN(xtrain, xtest, ytrain, ytest, modelPath)\n    \n    # Performs the transfer Learning\n    def performTransferLearning():\n        seperateDataset.createDatasetFolders(transferLearningDir)\n        xtrain, xtest, ytrain, ytest = readDataset.loadData(transferLearningDir, False)\n        modelPath = os.path.join(getFolderPath(), \"models\")\n        transferLearning.performTransferLearning(xtrain, xtest, ytrain, ytest, modelPath)\n        \n    # Saves the trained model to .mlmodel format\n    def saveCoreMLModel():\n        convertToMLModel.convert(os.path.join(getFolderPath(), \"models\"))\n    \n    # To start the whole process, call this function\n    def start():\n        performTrainingCNN()\n        performTransferLearning()\n        saveCoreMLModel()\n    \n    start()\n```\n\n\nWhen calling the method:\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    def start():\n        performTrainingCNN()\n        performTransferLearning()\n        saveCoreMLModel()\n```\n\nWe will initiate the initial training, the transfer learning and the conversion to MLModel.\n \nIf you are using macOS, you might get an error while running `algorithmFlowManager.py`, for unrecognized .DS_Store file in the datasets folders. To handle this run the following command:\n\n```\n    cd /folder\n    rm -rf .DS_Store \n```\n \nThis will delete this file which is autogenerated Desktop Service Store, created by the Finder application on Mac.\n \nNow we will look in the following method for the initial training:\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    def performTrainingCNN():\n        seperateDataset.createDatasetFolders(trainingDir)\n        xtrain, xtest, ytrain, ytest = readDataset.loadData(trainingDir, True)\n        modelPath = os.path.join(getFolderPath(), \"models\")\n        cnn.trainCNN(xtrain, xtest, ytrain, ytest, modelPath)\n```\n\nLooking at this method, we will notice that before training the model, the first step is to separate the dataset images to train and test subfolders.\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    seperateDataset.createDatasetFolders(trainingDir)\n```\n\nThis method is located in `seperateDataset.py` script.\n\nThe next line is reading the dataset images for the corresponding folders and allocates them in arrays, such as xtrain, ytrain, xtest and ytest. \n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    xtrain, xtest, ytrain, ytest = readDataset.loadData(trainingDir, True)\n```\n\nThis method is located in `readDataset.py` script.\n\nThe scripts for separating the datasets and reading the data for train and test are automatically called before training of the neural network, from `algorithmFlowManager.py`.\n\nNext open the script named `cnn.py`. Navigate to the method called from `algorithmFlowManager.py`:\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    from keras.models import Sequential\n    from keras.layers import Dense, Dropout, Flatten, Activation\n    from keras.layers import Conv2D, MaxPooling2D\n    from sklearn.model_selection import train_test_split\n    import os\n    \n    def trainCNN(xtrain, xtest, ytrain, ytest, path):\n        x_train, x_validation, y_train, y_validation = train_test_split(xtrain, ytrain, \n                                                    test_size = 0.2, random_state = 0)\n        model = Sequential()\n        model.add(Conv2D(32,(3,3), input_shape=(200,200,3)))\n        model.add(Conv2D(32,(3,3)))\n        model.add(Activation('relu'))\n        model.add(MaxPooling2D(pool_size=(2,2)))\n        model.add(Dropout(0.25))\n        model.add(Conv2D(64,(3,3)))\n        model.add(Conv2D(64, (3, 3)))\n        model.add(Activation('relu'))\n        model.add(MaxPooling2D(pool_size=(2, 2)))\n        model.add(Dropout(0.25))\n    \n        model.add(Flatten())\n        model.add(Dense(128))\n        model.add(Activation('relu'))\n        model.add(Dropout(0.5))\n        model.add(Dense(5))\n        model.add(Activation('softmax'))\n    \n        model.compile(loss='categorical_crossentropy',\n                  optimizer='rmsprop',\n                  metrics=['accuracy'])\n        model.fit(x_train, y_train,\n               batch_size=32, nb_epoch=10, verbose=1, validation_data=(x_validation, \n               y_validation))\n        model.evaluate(xtest, ytest)\n        saveModel(model, path)\n```\n\nThis method is building and training of the convolutional neural network. We will go step by step through the code.\n\nInitially before creating the neural network, the training data is separated in train and validation datasets. The main difference between the validation and test datasets is that we use the validation dataset for fine tuning of the hyperparameters of the neural network during training, while we use the test data for evaluating the overall accuracy. The main similarity is that both of the datasets are \"unknown\" to the neural network.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    x_train, x_validation, y_train, y_validation = train_test_split(xtrain, ytrain, \n                                                    test_size = 0.2, random_state = 0)\n```\n\nWhen the data is separated, we will start with the creation of the model. With Keras there are two models available, Sequential and Functional. In this tutorial we will use the Sequential model.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model = Sequential()\n```\n\nThe next step will be adding the convolutional layers. I have decided to use 32 filters in our first layer of the CNN, since it a more common practice to do so. The size of the filters will be (3,3), which is a common small size for filters, when we know that small and local features are the one that are distinctive.\n\nNext, we will add two convolutional layers, the more convolutional layers, the better results. After the second layer, we will add activation Rectified Linear Unit (ReLU) function. The ReLU function is a nonlinear function f(x) = max(0,x), which replaces the negative values in the input with zeroes. So adding this nonlinearity is really important for the accuracy of our network. There are also other functions such as sigmoid and tanh, but this one has proved to give the best results.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Conv2D(32,(3,3), input_shape=(200,200,3)))\n    model.add(Conv2D(32,(3,3)))\n    model.add(Activation('relu'))\n```\n\nNext, we add the pooling layer. It is common to follow this step after convolutional layers since it reduces the number of parameters in the network and it removes the unnecessary features during the training, therefore preventing overfitting. Here we perform max pooling, which in this case is selection of the largest number in the matrix of (2,2). The pooling operation is performed on the output from the previous layer, sliding through the output matrix.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(MaxPooling2D(pool_size=(2,2)))\n```\n\nIt is recommended after the pooling layer to apply dropout, which is a regularisation technique. This technique improves the accuracy of the network by preventing inter-dependencies between the nodes. It works by randomly dropping nodes and creating new connections at each iteration of the backpropagation algorithm. This algorithm is the base of the neural network.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Dropout(0.25))\n```\n\nNext, we add the following convolutional layers, but with a higher number of filters, doubled because of the pooling layer.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Conv2D(64,(3,3)))\n    model.add(Conv2D(64,(3,3)))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n```\n\nAt the last stages of building our neural network, we will perform a so-called \"flattening\". What this does is it takes the output of the convolutional layers and flattens the higher dimension of the array to a two dimensional array. The last layer is not focused only on a limited part of the image, it needs a set of features summed from the convolution to perform the classification.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Flatten())\n```\n\nThe dense layer is actually the fully connected layer, this means each input node is connected with each output node. The 128 is the number of neurons in this layer. It is recommended to use two dense layers since it increases the accuracy. Keep in mind that there is no perfect network topology, but with testing you can finalize your neural network structure. Here we also apply activation function.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Dense(128))\n    model.add(Activation('relu'))\n    model.add(Dropout(0.5))\n```\n\nThe final layer is the softmax activation function which will do the classification for the images fed in the neural network.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.add(Dense(5))\n    model.add(Activation('softmax'))\n```\n\nNow when we have defined our topology, we would need to compile the model. To do so, we need to define loss function. Loss function calculates the difference between the predictions of the neural network and correct answers for the dataset. The smaller the loss function, the better. There are few [loss functions](https://keras.io/losses/) available, such as binary_crossentropy, Poisson, cosine_proximity, categorical_crossentropy, and sparse_categorical_crossentropy. Next, we will define the optimizer for the network, here I have chosen rmsprop, but there are also [others](https://keras.io/optimizers/) such as adam, adagrad, adadelta, adamax and many more.\n\n``` pyython\n    # ../ios-ml-app-master/cnn.py\n    \n    model.compile(loss='categorical_crossentropy',\n                  optimizer='rmsprop',\n                  metrics=['accuracy'])\n```\n\nFinally, the model is fitted with the training data for the batch size of 32 and 10 epochs. This means that the data will be iterated 10 times, and during the epoch, the images will be separated in batches of 32 until all of them are processed through the network.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.fit(x_train, y_train,\n               batch_size=32, nb_epoch=10, verbose=1, \n               validation_data=(x_validation, y_validation))\n    model.evaluate(xtest, ytest)\n```\n\nAfter the training of the model is finished, we need to save it. \nWe will save the model to .h5 file format using the following method\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    model.save(path)\n```\n\nBut before saving it we want to remove the last dense layers, and then set the trainable flag to the layers of the CNN to false. In the next section on transfer learning I will explain why this is done.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    def saveModel(model, path):\n        layers = model.layers\n        first_dense_idx = [index for index, layer in enumerate(layers) if type(layer) is \n        Dense][0]\n    \n        num_del = len(layers) - first_dense_idx\n        for i in range(0, num_del):\n            model.pop()\n        for layer in model.layers:\n            layer.trainable = False\n    \n        model.save(os.path.join(path,\"model.h5\"))\n        model.summary()\n```\n\nThe following snippet is the summary of the trained model.\n\n``` python\n    # ../ios-ml-app-master/cnn.py\n    \n    Layer (type)                 Output Shape              Param #   \n    =================================================================\n    conv2d_1 (Conv2D)            (None, 198, 198, 32)      896       \n    _________________________________________________________________\n    conv2d_2 (Conv2D)            (None, 196, 196, 32)      9248      \n    _________________________________________________________________\n    max_pooling2d_1 (MaxPooling2 (None, 98, 98, 32)        0         \n    _________________________________________________________________\n    dropout_1 (Dropout)          (None, 98, 98, 32)        0         \n    _________________________________________________________________\n    conv2d_3 (Conv2D)            (None, 96, 96, 64)        18496     \n    _________________________________________________________________\n    conv2d_4 (Conv2D)            (None, 94, 94, 64)        36928     \n    _________________________________________________________________\n    max_pooling2d_2 (MaxPooling2 (None, 47, 47, 64)        0         \n    _________________________________________________________________\n    dropout_2 (Dropout)          (None, 47, 47, 64)        0         \n    _________________________________________________________________\n    flatten_1 (Flatten)          (None, 141376)            0         \n    _________________________________________________________________\n    dense_1 (Dense)              (None, 128)               18096256  \n    _________________________________________________________________\n    dropout_3 (Dropout)          (None, 128)               0         \n    _________________________________________________________________\n    dense_2 (Dense)              (None, 5)                 645       \n    =================================================================\n    Total params: 18,162,469\n    Trainable params: 18,162,469\n    Non-trainable params: 0\n    _________________________________________________________________\n```\n\nThe results of the training of the model are in the span of 95 - 99 % accuracy. \n\n## Transfer learning\n\nAndrew Ng said \"Transfer Learning will be the next driver of ML Success\", and we do follow. The idea behind transfer learning is a fairly basic one. Imagine the processing power and data needed for training a powerful machine learning algorithm. Now imagine doing that for every new data, retraining the algorithm, again and again, it is nor efficient, nor fast, also we would need a lot of data. \nBut instead of that approach, why don't we train one good neural network, save its topology and weights, load that model and remove the last layers, the one responsible for the classification of the data. Then load the saved model, add in new fully connected layers, and train this network with new data. This main difference is this data is way smaller and also we would need to train only the new layers, we will have faster and more efficient training. We have transferred the learning.\n\nThe training for the transfer learning is also intiated from `algorithmFlowManger.py` script.\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    def performTransferLearning():\n        seperateDataset.createDatasetFolders(transferLearningDir)\n        xtrain, xtest, ytrain, ytest = readDataset.loadData(transferLearningDir, False)\n        modelPath = os.path.join(getFolderPath(), \"models\")\n        transferLearning.performTransferLearning(xtrain, xtest, ytrain, ytest, modelPath)\n```\n\nNow to understand the algorithm for transfer learning, we will open the script `transferLearning.py`.\n\n``` python\n    # ../ios-ml-app-master/transferLearning.py\n    \n    from keras.layers import Dense, Dropout, Activation\n    from keras.models import load_model\n    from sklearn.model_selection import train_test_split\n    import os\n    \n    def performTransferLearning(xtrain, xtest, ytrain, ytest, modelPath):\n        x_train, x_validation, y_train, y_validation = train_test_split(xtrain, ytrain,\n                                                       test_size=0.2, random_state=0)\n        model = load_model(os.path.join(modelPath, \"model.h5\"))\n        model.add(Dense(128))\n        model.add(Activation('relu', name='activation6'))\n        model.add(Dropout(0.5, name= 'dropout4'))\n        model.add(Dense(3))\n        model.add(Activation('softmax', name='activation7'))\n    \n        model.compile(loss='categorical_crossentropy',\n                      optimizer='adam', metrics=['accuracy'])\n        model.fit(x_train, y_train, validation_data=(x_validation, y_validation), epochs=30, batch_size=5)\n    \n        model.evaluate(xtest, ytest)\n        # Save the model\n        model.save(os.path.join(modelPath, \"transferLearning.h5\"))\n```\n\nAs you can notice, the above code is pretty familiar. We read the saved model of the trained CNN and then we add the new fully connected layers with the new number of classes.\n\nYou can notice that there is a specified name for some of the new layers, such as ‘activation6’ and ‘dropout4’, this is since the topology of the neural network can't have duplicate names. Since the loaded model already contains ‘activation1’ and ‘dropout1’.  So be sure to specify these names.\n\nThe dataset I will be using for transfer learning can be downloaded from [here](http://www.vision.caltech.edu/Image_Datasets/Caltech101/), it is a dataset of objects, but instead of using the whole list of categories, I only used three of them for the training. The categories are a butterfly, chandelier, and hawksbill. \nYou can also find the images attached in the datasets folder of the structure of the project. The grayscale images were also removed from the original folders since the input shape of the CNN is with three channels (RGB).\n\n``` python\n    # ../ios-ml-app-master/transferLearning.py\n    \n    Layer (type)                 Output Shape              Param #   \n    =================================================================\n    conv2d_1 (Conv2D)            (None, 198, 198, 32)      896       \n    _________________________________________________________________\n    conv2d_2 (Conv2D)            (None, 196, 196, 32)      9248      \n    _________________________________________________________________\n    activation_1 (Activation)    (None, 196, 196, 32)      0         \n    _________________________________________________________________\n    max_pooling2d_1 (MaxPooling2 (None, 98, 98, 32)        0         \n    _________________________________________________________________\n    dropout_1 (Dropout)          (None, 98, 98, 32)        0         \n    _________________________________________________________________\n    conv2d_3 (Conv2D)            (None, 96, 96, 64)        18496     \n    _________________________________________________________________\n    conv2d_4 (Conv2D)            (None, 94, 94, 64)        36928     \n    _________________________________________________________________\n    activation_2 (Activation)    (None, 94, 94, 64)        0         \n    _________________________________________________________________\n    max_pooling2d_2 (MaxPooling2 (None, 47, 47, 64)        0         \n    _________________________________________________________________\n    dropout_2 (Dropout)          (None, 47, 47, 64)        0         \n    _________________________________________________________________\n    flatten_1 (Flatten)          (None, 141376)            0         \n    _________________________________________________________________\n    dense_1 (Dense)              (None, 128)               18096256  \n    _________________________________________________________________\n    activation6 (Activation)     (None, 128)               0         \n    _________________________________________________________________\n    dropout4 (Dropout)           (None, 128)               0         \n    _________________________________________________________________\n    dense_2 (Dense)              (None, 4)                 516       \n    _________________________________________________________________\n    activation7 (Activation)     (None, 4)                 0         \n    =================================================================\n    Total params: 18,162,340\n    Trainable params: 18,096,772\n    Non-trainable params: 65,568\n    _________________________________________________________________\n```\n\nThe results of the training of the model are :\n\n``` python\n    # ../ios-ml-app-master/transferLearning.py\n    \n    loss: 0.0018 - acc: 1.0000 - val_loss: 1.1946 - val_acc: 0.7692\n```\n\n## Convert to MLModel\n\nAfter we perform transfer learning we save the model and convert it into MLModel format. The conversion is called from `algorithmFlowManager.py` with method:\n\n``` python\n    # ../ios-ml-app-master/algorithmFlowManager.py\n    \n    def saveCoreMLModel():\n        convertToMLModel.convert(os.path.join(getFolderPath(), \"models\"))\n```\n\nOpen the script `convertToMLModel.py`. You can notice implementation of the method called from `algorithmFlowManager.py`.\n\n``` python\n    # ../ios-ml-app-master/convertToMLModel.py\n    \n    def convert(path):\n        model = load_model(os.path.join(path, \"transferLearning.h5\"))\n        coreml_model = coremltools.converters.keras.convert(model,\n                                                            class_labels=['butterfly',\n                                                            'chandelier',\n                                                            'hawksbill'], \n                                                            input_names='input_1',\n                                                            image_input_names = 'input_1')\n        coreml_model.short_description = 'Model to classify category of images'\n        coreml_model.save(os.path.join(path, \"ObjectPredict.mlmodel\"))\n```\n\nFirst we read the saved transfer learning model\n\n``` python\n    # ../ios-ml-app-master/convertToMLModel.py\n    \n    model = load_model(os.path.join(path, \"transferLearning.h5\"))\n```\n\nThen perform the conversion by using the Python library coremltools. It supports conversion from the saved HDF5 file type to .mlmodel type, supported by Apple. Adding description to model come in handy when the MLModel is seen from the iOS Application. \n\n``` python\n    # ../ios-ml-app-master/convertToMLModel.py\n    \n    coreml_model = coremltools.converters.keras.convert(model,\n                                                            class_labels=['butterfly',\n                                                            'chandelier',\n                                                            'hawksbill'], \n                                                            input_names='input_1',\n                                                            image_input_names = 'input_1')\n    coreml_model.short_description = 'Model to classify category of images'\n    coreml_model.save(os.path.join(path, \"ObjectPredict.mlmodel\"))\n```\n\nAlso before the conversion is important to add the following parameters \n\n``` python\n    # ../ios-ml-app-master/convertToMLModel.py\n    \n    input_names='input_1',\n    image_input_names = 'input_1\n```\n\nThese will allow the input for our MLModel in our iOS Application to be CVPixelBufferRef instead of MLMultiArray.\n\nDuring conversion to MLModel we will see the following output:\n\n``` python\n    # ../ios-ml-app-master/convertToMLModel.py\n    \n    0 : conv2d_1_input, \u003ckeras.engine.topology.InputLayer object at 0x112d094d0\u003e\n    1 : conv2d_1, \u003ckeras.layers.convolutional.Conv2D object at 0x112d09510\u003e\n    2 : conv2d_2, \u003ckeras.layers.convolutional.Conv2D object at 0x112d159d0\u003e\n    3 : activation_1, \u003ckeras.layers.core.Activation object at 0x112d52910\u003e\n    4 : max_pooling2d_1, \u003ckeras.layers.pooling.MaxPooling2D object at 0x112d52ed0\u003e\n    5 : conv2d_3, \u003ckeras.layers.convolutional.Conv2D object at 0x112d7a710\u003e\n    6 : conv2d_4, \u003ckeras.layers.convolutional.Conv2D object at 0x112d7a250\u003e\n    7 : activation_2, \u003ckeras.layers.core.Activation object at 0x112dce710\u003e\n    8 : max_pooling2d_2, \u003ckeras.layers.pooling.MaxPooling2D object at 0x112e14cd0\u003e\n    9 : flatten_1, \u003ckeras.layers.core.Flatten object at 0x112e65b10\u003e\n    10 : dense_1, \u003ckeras.layers.core.Dense object at 0x112db7950\u003e\n    11 : activation6, \u003ckeras.layers.core.Activation object at 0x112e3b7d0\u003e\n    12 : dense_2, \u003ckeras.layers.core.Dense object at 0x112ed6c90\u003e\n    13 : activation7, \u003ckeras.layers.core.Activation object at 0x112e9ded0\u003e\n```\n\nThis is our first step toward building our user interface - the iOS Application.\n\n## iOS application with MLModel\n\nNow that we have generated the `ObjectPredict.ml` model we need to integrate it in our iOS application.\nOpen the `MachineLearningTutorial.xcodeproj`, located in `MachineLearningTutorial`  directory, in the project we cloned, `ios-ml-app-master`. This will launch the Xcode interface. Next, we will drag and drop `ObjectPredict.ml` file in the structure folder of our project, directly in Xcode. \n\n![ml-ios-objectpredict-file](//images.ctfassets.net/1es3ne0caaid/uLeWEy75nMeg820IWMqEC/339780b8a1c73613cba173200a654b93/ml-ios-objectpredict-file.png)\n\nIf we click on the model in XCode, it will present a generated overview of its input, output, and description. \n\nFinally we build our application.\n\nAfter a successful build, when the user selects an image, it is converted to CVPixelBuffer. This is achieved by using an open source class from GitHub which allows resizing of the image to specific dimensions and performs the conversion of the image to CVPixelBuffer. The return type of this conversion method will be the input to our MLModel Object, which will return the predicted class label.\n\nThe method responsible for the model prediction class is in the extension `ViewController+Classify.swift`. This method is called each time the end user choose an image.\n\n``` swift\n    // ../ios-ml-app-master/MachineLearningTutorial/MachineLearningTutorial/ViewController+Classify.swift\n    \n    func predictImageClass(_ image: UIImage) -\u003e String? {\n            let model = ObjectPredict()\n            do {\n                let category = try model.prediction(input_1: image.pixelBuffer(width: 200,                                                 height: 200)!)\n                return category.classLabel\n            } catch {\n                print(error)\n                return nil\n            }\n        }\n```\n\nThe result is being presented under the image. This can be noticed in the demo application attached above.\n\n***Tip:***  *If you are testing on a simulator if you want to add photo in its library, just drag and drop the image and it will be automatically added.*\n\n## Conclusion\n\nSo now hopefully you have a better overview of:\n\n\n- Collecting datasets and building a neural network\n- Performing transfer learning with new data (which is more than 10 times smaller in size)\n- And finally connecting the trained model in an iOS Application and creating a simple user interface for trying out the results.\n\nThis is the [Github](https://github.com/elleAI/ios-ml-app) link from where you can access the code.\n\nFrom trying out a few test images, I have noticed that for the categories that have less and more unstructured data, the results are worse. Since the accuracy of the transfer learning is not high, it can be concluded that with more and cleaner image data the neural network can learn better features from the images and show better results. Also, the initial network should have a lot more data, more epochs and bigger structure. This is why performing transfer learning on networks such as [inceptionV3](https://keras.io/applications/#inceptionv3) created by Google Brain Team, results in high accuracy.\n\nHope this tutorial gave you a quick and in depth intro of what the machine learning area can do at a very small scale at least. You could also try out recurrent neural networks or their extension - LSTM, there are few examples of speech recognition that you would probably find exciting. And last but not least take up to the challenge and improve my algorithm from above, by fine tuning the parameters and improving the data, because almost always there is a more optimized version of any piece of code you will see.\n\n\n## References:\n\n+ *Transfer Learning Images* - L. Fei-Fei, R. Fergus and P. Perona. \n+ *Learning generative visual models*\n*from few training examples: an incremental Bayesian approach tested on*\n*101 object categories*. IEEE. CVPR 2004, Workshop on Generative-Model\nBased Vision. 2004","metaTitle":"Create an iOS application using machine learning","metaDescription":"Use Python and Swift to create a machine learning powered iOS image recognition app. You will explore how to build a machine learning model, and add it to a simple iOS application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3L3NK3r4VyQyemcMCqaeyo","type":"Entry","createdAt":"2018-08-09T20:55:38.106Z","updatedAt":"2018-08-09T21:45:00.036Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Using Storybook with React Native","url":"storybook-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNStorybook","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-08-07","description":"Learn how to use Storybook for React Native development. The tutorial introduces Storybook and the concepts of component driven design. It then walks through building a simple demo app.","prerequisite":"You will need a good working knowledge of React Native and Redux. The tutorial uses React Native 0.55.","content":"In this tutorial, we’re going to take a look at how you can use Storybook to speed up the development and testing of individual components for your React Native app.\n\nWe will be creating a React Native app which will show a list of Pokemon cards. Here’s what the final output will look like:\n\n![react-native-storybook-demo](//images.ctfassets.net/1es3ne0caaid/5GZ98aIgdUQwC22WkwqwYW/16e7007adb4af313a6dbf586580e06d8/react-native-storybook-demo.png)\n\nWe will be covering the following topics as we move along:\n\n\n- Setting up Storybook in a React Native app\n- Using Storybook to develop and visually test the UI components\n- Using StoryShots to automatically add snapshot tests to Storybook stories\n\nYou can find the source code for this tutorial [in its repo on GitHub](https://github.com/anchetaWern/RNStorybook). \n\n\n## Prerequisites\n\nTo follow this tutorial, you need to have good working knowledge of creating React Native apps. That usually means you already have developed a few apps without following a tutorial. We’ll also be using Redux so you should be familiar with basic Redux concepts as well.\n\nYour machine should also be set up with the React Native development environment. We will be using React Native version 0.55 in this tutorial and Yarn to install project dependencies.\n\n\n## What is Storybook?\n\nBefore we begin, it’s important to understand the following:\n\n\n- What is Storybook?\n- What does Storybook do? \n- How Storybook fits into the React Native app development workflow? \n\nStorybook is a development environment for rapid iteration and testing of UI components. By using Storybook, you can:\n\n\n- Visualize the different states of the individual components of your app.\n- Test the UI interactions.\n\nThis is all inside an isolated environment, so you can tweak your components as much as you want without having to worry about breaking something.\n\nStorybook fits in nicely to your existing component development and testing workflow. It integrates well with testing tools such as Jest and Enzyme. This means you can easily perform snapshot and interaction tests on your components. \n\nThe main idea of Storybook is for you to create “Stories”. These stories represent a specific state or behavior of an individual component. For example, there can be a story for the default state of a button, or a disabled button, or a button that’s currently active. \n\nA story can also be composed of tiny little components. For example, a Card component can be composed of a CardImage, CardText, and CardButton components. These stories can then be rendered within the same environment as a React Native app (either on a simulator or real device) so they can be tested. These stories also serve as a living and interactive style guide that documents how specific components should look and behave.\n\n\n## Setting up Storybook\n\nNow that you know what Storybook is, it’s time to set it up so we can use it within a React Native app.\n\nStart by installing [**Create React Native App (CRNA)**](https://github.com/react-community/create-react-native-app). We’ll be using it to generate a new React Native project that works with Storybook:\n\n```\n    npm install -g create-react-native-app\n```\n\nWe need to do this because projects created with `react-native init` [doesn’t work well](https://github.com/storybooks/storybook/issues/3897) with Storybook. At the time of writing this tutorial, the React Native version that was used is `0.55`. You can try installing that version with `react-native init`. But in this tutorial, we’ll use **CRNA** to generate a new project, and then use the “eject” feature to convert it to a standard React Native project. \n\nIf you’re coming here wanting to set up Storybook on an existing project, you’re welcome to follow along. But I can’t ensure that the setup we’ll be using here will work for you. You can skip right to the part where we install Storybook.\n\nNext, create a new project with **CRNA**:\n\n```\n    create-react-native-app RNStorybook\n```\n\nOnce created, navigate inside the project folder and eject the app:\n\n```\n    cd RNStorybook\n    npm run eject\n```\n\nHere are the responses you can use for the questions asked by the eject command:\n\n![react-native-storybook-eject-app](//images.ctfassets.net/1es3ne0caaid/14ek6Kezb6mMQEe0a6ygk2/440c584f0800b1331206204979d0e1be/react-native-storybook-eject-app.png)\n\nNext, install the Storybook command-line tool globally:\n\n```\n    npm install -g @storybook/cli\n```\n\nThis allows you to add Storybook to a React Native project.\n\n\n### Installing dependencies\n\nNext, install the dependencies of the app:\n\n```\n    yarn add prop-types redux react-redux react-native-vector-icons\n```\n\nAmong those dependencies, we have a native module (**react-native-vector-icons**), so we have to link it as well:\n\n```\n    react-native link\n```\n\nIf you’re having problems with the automatic linker, reset the changes made by the linker and follow the installation instructions [here](https://github.com/oblador/react-native-vector-icons#installation).\n\nNext, add Storybook to the project:\n\n```\n    getstorybook\n```\n\nThe command above should show an output similar to the following:\n\n![react-native-storybook-getstorybook](//images.ctfassets.net/1es3ne0caaid/6raNJnGknucsMm88SE0sKE/b2507af48d7c61c3bac18acb3f12caf5/react-native-storybook-getstorybook.png)\n\nOnce it’s done, it adds the following dependencies to the project. These are the [Storybook add-ons](https://storybook.js.org/addons/addon-gallery/). They provide additional features when working inside the Storybook environment:\n\n```\n    \"@storybook/react-native\": \"^3.4.8\", // for working with React Native\n    \"@storybook/addon-actions\": \"^3.4.8\", // for inspecting events triggered by your components\n    \"@storybook/addon-links\": \"^3.4.8\", // for linking stories together\n    \"@storybook/addons\": \"^3.4.8\", // for loading custom add-ons to Storybook\n```\n\nWe won’t really be using any of these in this tutorial, except for the React Native add-on. But they’re installed by default when using the `getstorybook` command, so just explore them on your own.\n\nAnother thing you’ll notice is the `storybook` folder:\n\n![react-native-storybook-file-structure](//images.ctfassets.net/1es3ne0caaid/60gxp33ZegUm2yeY0gyMOy/088e6cd840e3213ff14c77c01cf3ff94/react-native-storybook-file-structure.png)\n\nThis folder contains the template for how the Storybook can be structured. Inside are a few stories and files for initializing Storybook within your app. \n\nWe won’t really be using this structure because we want to be able to easily render the components in both Storybook and the app. \n\nThe next step is to delete all the contents of the `App.js` file at the root of your project directory and replace it with the following:\n\n```\n    export default from \"./storybook\";\n```\n\nThis renders the Storybook UI instead of the UI of the app. In this tutorial, we will only focus on developing the UI components using Storybook. We won’t actually be bringing everything together inside a standard React Native app, that’s why we’ve replaced it with the Storybook UI.\n\nIn reality though, at some point, you’ll want to bring everything together. That’s why it’s important to have a strategy on how you can switch between the app’s UI and the Storybook UI. The most common way to deal with this is to use [**react-native-config**](https://github.com/luggit/react-native-config). This allows you to create a `.env` file which contains the config on which UI to use:\n\n```\n    IS_STORYBOOK=true\n```\n\nThen in your `App.js` file, you can read the value of that variable to determine which UI to use. I won’t really be delving on that in this tutorial so feel free to explore it on your own.\n\nNext, run the app:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\nOnce the app is running on the simulator or device, you should get an error which looks like this:\n\n![react-native-storybook-connection-refused](//images.ctfassets.net/1es3ne0caaid/1zlTwLzGxWKsuWOUAyygEW/f3eb7d4bc95c77883db4b851fdf5844d/react-native-storybook-connection-refused.png)\n\nThe error is because the app is now expecting the Storybook bundler to be running instead of the default metro bundler. To solve this, you have to terminate the existing metro bundler and then run the Storybook bundler instead:\n\n```\n    yarn storybook\n```\n\nOnce it’s running, reload the app and you should see the following:\n\n![react-native-storybook-welcome](//images.ctfassets.net/1es3ne0caaid/2EtlAgOPIIsQq8Sw0Cia6I/6fd748920ffb3a61d3cdb1d40c82ce5a/react-native-storybook-welcome.png)\n\nIf you click on the burger menu, you should see the individual stories that are inside the `storybook` folder.\n\n\n### Automatically load stories\n\nAs mentioned earlier, we won’t really be using the default structure for the stories. Instead, the story files will live inside the `src/stories` folder. This way, the stories can easily access the components (`src/components`) they need to render. \n\nThese folders shouldn’t exist on your working copy yet. Create a `src` folder at the root of your project directory, then create the `stories` and `components` folder inside of it.\n\nTo make this easier, we can use React Native Storybook loader:\n\n```\n    yarn add react-native-storybook-loader -D\n```\n\nOnce installed, update `package.json` to include the `prestorybook` script and the config for the Storybook loader:\n\n``` json\n    {\n      // existing configs here...\n      \"scripts\": {\n        // existing scripts here...\n        \"storybook\": \"storybook start -p 7007\",\n        \"prestorybook\": \"rnstl\" // add this\n      },\n      // add these\n      \"config\": {\n        \"react-native-storybook-loader\": {\n          \"searchDir\": [\"./src/stories\"],\n          \"pattern\": \"**/*.story.js\", // the filename pattern of the stories within the indicated searchDir\n          \"outputFile\": \"./storybook/storyLoader.js\" // the loader file \n        }\n      }\n    }\n```\n\nThe `storyLoader.js` file is the one that’s going to automatically load the stories that are currently available inside the `searchDir` you defined. In this case, we have to put the components inside the `src/components` and their stories inside the `src/stories` folder.\n\nNext, open the `storybook/storybook.js` file and replace its contents with the following:\n\n``` javascript\n    import { AppRegistry } from \"react-native\";\n    import { getStorybookUI, configure } from \"@storybook/react-native\";\n    import { loadStories } from \"./storyLoader\";\n    \n    configure(() =\u003e {\n      loadStories();\n    }, module);\n    \n    const StorybookUI = getStorybookUI({\n      port: 7007,\n      host: \"localhost\",\n      onDeviceUI: true,\n      resetStorybook: true\n    });\n    \n    AppRegistry.registerComponent(\"RNStorybook\", () =\u003e StorybookUI);\n    \n    export { StorybookUI as default };\n```\n\nThis file calls the story loader so the stories will be included in the Storybook UI. \n\nNext, make sure that the `storybook/index.js` file contains the code below. This makes use of the `StorybookUI` you’ve exported in the `storybook/storybook.js` file:\n\n``` javascript\n    // storybook/index.js\n    \n    import StorybookUI from \"./storybook\";\n    \n    export default StorybookUI;\n```\n\nOnce that’s done, you should now be ready to develop the components of the app. Go ahead and run Storybook:\n\n```\n    yarn storybook\n```\n\nHere’s what the app will look like:\n\n![react-native-storybook-no-stories](//images.ctfassets.net/1es3ne0caaid/4IQwAvi9DGU6OmcWi846mg/2579aeaae4814c4f3cad84cb4a9473cd/react-native-storybook-no-stories.png)\n\nRemember to terminate the currently running process of Storybook and re-run `yarn` `storybook` every time you add a new story. This is because React Native Storyloader only re-generates the `storyLoader.js` file when you execute the `yarn storybook` command.\n\n\n## Developing the components\n\nTo develop the UI components of the app, we will be using [Component-Driven Development](https://blog.hichroma.com/component-driven-development-ce1109d56c8e). It’s a development methodology wherein the focus is on the individual components of the app. The main idea is to build the UI starting from the tiniest of components, then you incrementally build up to the screens by using those tiny components. In short, it’s a “bottom-up” approach in developing the UI of the app.\n\nSince you already have experience in developing React Native apps, I assume that you already have a clear idea on what components to build. But let’s try to follow the Component-Driven Development methodology and build the tinier components first before the bigger ones.\n\nBefore we proceed, please download the [Pokemon images from the repo](https://github.com/anchetaWern/RNStorybook/tree/master/src/images). If you’ve cloned the repo earlier, you can simply copy the `src/images` directory over to your `src` folder. While you’re at it, you can also create a `components` folder beside the `images` folder. This is where we will put the components.\n\n### IconButton component\n\nBased on the app’s screenshot from earlier, the smallest component which we can break down from the screen is the heart-shaped button. This button is used to favorite a specific Pokemon. Here’s what it looks like when rendered inside Storybook:\n\n![react-native-storybook-icon](//images.ctfassets.net/1es3ne0caaid/3MqChjGQfSeeiw6kQS8IUy/d3346a1a42457183ece820e6e37c0114/react-native-storybook-icon.png)\n\nGo ahead and create the component:\n\n``` javascript\n    // src/components/IconButton.js\n    \n    import React from \"react\";\n    import PropTypes from \"prop-types\";\n    import { TouchableOpacity } from \"react-native\";\n    import Icon from \"react-native-vector-icons/FontAwesome\";\n    \n    const IconButton = ({ icon, color, onPress }) =\u003e {\n      return (\n        \u003cTouchableOpacity onPress={onPress} style={styles.button}\u003e\n          \u003cIcon name={icon} size={30} color={color} /\u003e\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n    \n    const styles = {\n      button: {\n        alignSelf: \"center\",\n        marginTop: 10\n      }\n    };\n    \n    IconButton.propTypes = {\n      icon: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      onPress: PropTypes.func.isRequired\n    };\n    \n    export default IconButton;\n```\n\nThe next step is to create the stories for the component. This is where we render the different states of the component so it’s visible within Storybook:\n\n``` javascript\n    // src/stories/IconButton.story.js\n    \n    import React from \"react\";\n    import { View } from \"react-native\";\n    import IconButton from \"../components/IconButton\";\n    import { storiesOf } from \"@storybook/react-native\";\n    \n    storiesOf(\"IconButton\", module)\n      .add(\"on\", () =\u003e (\n        \u003cIconButton\n          icon={\"heart\"}\n          color={\"#333\"}\n          onPress={() =\u003e console.log(\"un-favorited!\")}\n        /\u003e\n      ))\n      .add(\"off\", () =\u003e (\n        \u003cIconButton\n          icon={\"heart-o\"}\n          color={\"#333\"}\n          onPress={() =\u003e console.log(\"favorited!\")}\n        /\u003e\n      ));\n```\n\nLet’s break down what’s happening in the code above. First, we load the modules that we need. This includes the `IconButton` and the `storiesOf` function from the React Native Storybook package:\n\n``` javascript\n    import React from \"react\";\n    import { View } from \"react-native\";\n    import IconButton from \"../components/IconButton\"; // the component whose story we're creating\n    import { storiesOf } from \"@storybook/react-native\";\n```\n\nNext, we specify the name of the component whose story we’re creating:\n\n``` javascript\n    storiesOf(\"IconButton\", module)\n```\n\nThe second argument in the `storiesOf` function above serves as Storybook’s reference to the file where the story code is. This enables the hot-module replacement feature. It’s only needed in a browser environment because React Native already reloads the entire app if you have live-reloading enabled. The only reason why we’re including it is that Jest needs this reference for the snapshot tests to work.\n\nNext, we add the stories for this component. In this case, we only have two: one for the default state, and another for the favorited state:\n\n``` javascript\n    .add(\"off\", () =\u003e (\n      \u003cIconButton\n        icon={\"heart-o\"}\n        color={\"#333\"}\n        onPress={() =\u003e console.log(\"action: favorited\")}\n      /\u003e\n    ))\n    .add(\"on\", () =\u003e (\n      \u003cIconButton\n        icon={\"heart\"}\n        color={\"#333\"}\n        onPress={() =\u003e console.log(\"action: un-favorited\")}\n      /\u003e\n    ));\n```\n\nWhen rendering the tiny components, we don’t really care yet about testing their functionality. That’s why we only log the action we’re expecting. If the button is in the default state (meaning, it hasn’t been favorited yet), we expect the action to be “favorited” while the other one is just the opposite.\n\nA couple of things to remember when creating stories is that there should be only one story file for each component. And each story file should only be rendering that component alone. The other thing is that you don’t have to add a story for every possible state of the component, only the ones that makes sense. For example, if you’re in the React Native environment, and you’re creating a story for a component that makes use of `TouchableOpacity`. In this case, you don’t really have to add a story for “clicked” or “tapped”, because it all looks the same anyway. The default opacity value used by React Native already makes sense, so most of the time you don’t really want to change it.\n\n\n### Card component\n\nThe next component we’re going to create is the Card component. Here’s what it looks like:\n\n![react-native-storybook-favorited](//images.ctfassets.net/1es3ne0caaid/4BLoZKSv4IqSIScocGiCuq/61ddbddd61dfac9deeb5ceae0ae90535/react-native-storybook-favorited.png)\n\nHere’s the code:\n\n``` javascript\n    // src/components/Card.js\n    \n    import React from \"react\";\n    import { View, Image, Text, Dimensions } from \"react-native\";\n    import PropTypes from \"prop-types\";\n    import IconButton from \"./IconButton\";\n    \n    const { width, height } = Dimensions.get(\"window\");\n    \n    const Card = ({ image, text, is_favorite, action }) =\u003e {\n      const icon = is_favorite ? \"heart\" : \"heart-o\";\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cImage source={image} resizeMode={\"contain\"} style={styles.image} /\u003e\n          \u003cText style={styles.text}\u003e{text}\u003c/Text\u003e\n          \u003cIconButton icon={icon} color={\"#333\"} onPress={action} /\u003e\n        \u003c/View\u003e\n      );\n    };\n    \n    const styles = {\n      container: {\n        width: width - 40,\n        alignItems: \"center\",\n        borderWidth: 1,\n        borderColor: \"#ccc\",\n        padding: 10,\n        marginTop: 5,\n        marginBottom: 5\n      },\n      image: {\n        width: width - 100\n      },\n      text: {\n        fontSize: 20,\n        fontWeight: \"bold\"\n      }\n    };\n    \n    Card.propTypes = {\n      image: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n      is_favorite: PropTypes.bool.isRequired,\n      action: PropTypes.func.isRequired\n    };\n    \n    export default Card;\n```\n\nFrom the code above, you can see that we’re bringing in a smaller component. This is what Component-Driven Development is all about. Create the smaller components first and then you assemble them to create a larger component.\n\nNext, create the story file:\n\n``` javascript\n    // src/stories/Card.story.js\n    \n    import React from \"react\";\n    import { View } from \"react-native\";\n    import Card from \"../components/Card\";\n    \n    import { storiesOf } from \"@storybook/react-native\";\n    \n    storiesOf(\"Card\", module)\n      .addDecorator(getStory =\u003e (\n        \u003cView style={{ flex: 1, alignItems: \"center\" }}\u003e{getStory()}\u003c/View\u003e\n      ))\n      .add(\"default\", () =\u003e (\n        \u003cCard\n          image={require(\"../images/charizard.jpg\")}\n          text={\"Charizard\"}\n          is_favorite={false}\n          action={() =\u003e {\n            console.log(\"clicked!\");\n          }}\n        /\u003e\n      ))\n      .add(\"favorited\", () =\u003e (\n        \u003cCard\n          image={require(\"../images/lugia.jpg\")}\n          text={\"Lugia\"}\n          is_favorite={true}\n          action={() =\u003e {\n            console.log(\"clicked!\");\n          }}\n        /\u003e\n      ));\n```\n\nFrom the code above, you can see that we’re pretty much doing the same thing we did in the story for the IconButton component. Only this time, we’re passing the prop which determines what the IconButton’s state will be to the Card component.\n\nAnother new thing is the `addDecorator` method:\n\n``` javascript\n    .addDecorator(getStory =\u003e (\n      \u003cView style={{ flex: 1, alignItems: \"center\" }}\u003e{getStory()}\u003c/View\u003e\n    ))\n```\n\nIn Storybook, we use a [decorator](https://storybook.js.org/basics/writing-stories/#using-decorators) to specify a common wrapper for all the stories that we create for a specific component. In this case, we simply want to wrap all the stories in a `View` that’s aligned at the center of the screen. The `getStory` method is used for rendering the story within the wrapper. \n\nIf you’re using Redux, decorator’s are a good place to put your providers.\n\n\n### CardList component\n\nThe last component is the CardList component, and it looks like this:\n\n![react-native-storybook-card-list](//images.ctfassets.net/1es3ne0caaid/1P5X2oOkVyywoS6UIU8aoS/2d5f0e93a7cd66beca478903306bdbf4/react-native-storybook-card-list.png)\n\nAs you can see, this component brings together all the components we’ve built so far. This also means that we already need to add real functionality to it. That is to favorite and un-favorite each card.\n\nIn this component, we will be using Redux to add a global state to the app. This allows us to favorite or un-favorite cards.\n\nFirst, create the file where we define the different types of actions within the app. In this case, we only have one. This is the action to favorite or un-favorite a card:\n\n``` javascript\n    // src/actions/types.js\n    \n    export const FAVORITED_CARD = \"favorited_card\";\n```\n\nNext, create the function which will be called whenever the user clicks on an IconButton to favorite a Card. This returns the object which will be used by the reducer as a basis for updating the app state:\n\n``` javascript\n    // src/actions/index.js\n    \n    import { FAVORITED_CARD } from \"./types\";\n    \n    export const favoritedCard = id =\u003e {\n      return {\n        type: FAVORITED_CARD,\n        payload: id\n      };\n    };\n```\n \nNext, create the reducer. This is where we put the initial app state, as well as the code for handling the actions that have to do with the cards:\n\n``` javascript\n    // src/reducers/CardsReducer.js\n    \n    import React, { Component } from \"react\";\n    import { FAVORITED_CARD } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      cards: [\n        {\n          id: 1,\n          label: \"Charizard\",\n          image: require(\"../images/charizard.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 2,\n          label: \"Empoleon\",\n          image: require(\"../images/empoleon.jpg\"),\n          is_favorite: true\n        },\n        {\n          id: 3,\n          label: \"Entei\",\n          image: require(\"../images/entei.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 4,\n          label: \"Groudon\",\n          image: require(\"../images/groudon.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 5,\n          label: \"Lugia\",\n          image: require(\"../images/lugia.jpg\"),\n          is_favorite: true\n        },\n        {\n          id: 6,\n          label: \"Salamence\",\n          image: require(\"../images/salamence.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 7,\n          label: \"Torterra\",\n          image: require(\"../images/torterra.jpg\"),\n          is_favorite: true\n        }\n      ]\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case FAVORITED_CARD:\n          let cards = state.cards.map(item =\u003e {\n            return item.id == action.payload\n              ? { ...item, is_favorite: !item.is_favorite }\n              : item;\n          });\n    \n          return { ...state, cards };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNext, bring all the reducers together:\n\n``` javascript\n    // src/reducers/index.js\n    \n    import { combineReducers } from \"redux\";\n    import CardsReducer from \"./CardsReducer\";\n    \n    export default combineReducers({\n      cards: CardsReducer\n    });\n```\n\nAfter that, we can now proceed with the CardList component:\n\n``` javascript\n    // src/components/CardList.js\n    \n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    import PropTypes from \"prop-types\";\n    \n    import { connect } from \"react-redux\";\n    import { favoritedCard } from \"../actions\";\n    import Card from \"./Card\";\n    \n    class CardList extends Component {\n      render() {\n        return \u003cView style={styles.container}\u003e{this.renderCards()}\u003c/View\u003e;\n      }\n    \n      renderCards = () =\u003e {\n        return this.props.cards.map(item =\u003e {\n          return (\n            \u003cCard\n              key={item.id}\n              image={item.image}\n              text={item.label}\n              is_favorite={item.is_favorite}\n              action={this.props.favoritedCard.bind(this, item.id)}\n            /\u003e\n          );\n        });\n      };\n    }\n    \n    const styles = {\n      container: {\n        flex: 1\n      }\n    };\n    \n    CardList.propTypes = {\n      cards: PropTypes.array.isRequired,\n      favoritedCard: PropTypes.func.isRequired\n    };\n    \n    const mapStateToProps = ({ cards }) =\u003e {\n      return cards;\n    };\n    \n    export default connect(\n      mapStateToProps,\n      {\n        favoritedCard\n      }\n    )(CardList);\n```\n\nInside the story for the CardList component, we use a `Provider` component to provide the necessary data and functionality to it:\n\n``` javascript\n    // src/stories/CardList.story.js\n    \n    import React from \"react\";\n    import { ScrollView } from \"react-native\";\n    import { storiesOf } from \"@storybook/react-native\";\n    \n    import Provider from \"../components/Provider\";\n    import CardList from \"../components/CardList\";\n    \n    storiesOf(\"CardList\", module)\n      .addDecorator(getStory =\u003e \u003cProvider\u003e{getStory()}\u003c/Provider\u003e)\n      .add(\"with cards\", () =\u003e {\n        return \u003cCardList /\u003e;\n      });\n```\n\nHere’s the code for the `Provider` component:\n\n``` javascript\n    // src/components/Provider.js\n    \n    import React from \"react\";\n    import { ScrollView } from \"react-native\";\n    import { Provider as ReduxProvider } from \"react-redux\";\n    import { createStore } from \"redux\";\n    import reducers from \"../reducers\";\n    \n    import PropTypes from \"prop-types\";\n    \n    const store = createStore(reducers);\n    \n    const Provider = ({ children }) =\u003e {\n      return (\n        \u003cReduxProvider store={store}\u003e\n          \u003cScrollView contentContainerStyle={styles.content}\u003e{children}\u003c/ScrollView\u003e\n        \u003c/ReduxProvider\u003e\n      );\n    };\n    \n    const styles = {\n      content: {\n        alignItems: \"center\"\n      }\n    };\n    \n    Provider.propTypes = {\n      children: PropTypes.element.isRequired\n    };\n    \n    export default Provider;\n```\n\nAs you can see from the code above, all this file does is wrap the `CardList` within the Provider provided by `react-redux`.\n\nOnce that’s done, the components that you’ve created can now be used within the app. The stories you created should serve as a living document. Other developers can examine and test it whenever they’re unsure of how a specific component should behave and look like.\n\n\n## Snapshot testing\n\nOne of the benefits of using Storybook is that it gives us the ability to perform snapshot test on individual stories using [StoryShots](https://www.npmjs.com/package/@storybook/addon-storyshots). You can install it with the following command:\n\n```\n    yarn add --dev @storybook/addon-storyshots\n```\n\nNext, delete the `App.test.js` file at the root of the project directory. We won’t really test the whole app in this tutorial. If you don’t delete that file, you’ll be getting the error below if you run `yarn test`:\n\n![react-native-storybook-app-test](//images.ctfassets.net/1es3ne0caaid/29rexPzrPmAaQI8o0y4kAg/2105f45d09ce85d93fa9528d5675ca1c/react-native-storybook-app-test.png)\n\nNext, create the test file that Jest will use:\n\n``` javascript\n    // src/storybook.test.js\n    \n    import initStoryshots from \"@storybook/addon-storyshots\";\n    initStoryshots();\n```\n\nNext, install **jest-static-stubs**:\n\n```\n    yarn add jest-static-stubs\n```\n\nWe need this because the tests will break if you’re importing static assets inside your components. In this case, it’s not even the images that we’re rendering inside each card that is at fault. It’s one of the images from React Native itself:\n\n![react-native-storybook-static-assets-error](//images.ctfassets.net/1es3ne0caaid/dSs3ZlgBhYU04UaokeM4A/6da752ce3c700bc70181b1c29919e8f8/react-native-storybook-static-assets-error.png)\n\nThe **jest-static-stubs** package allows us to stub the static assets so that they work with Jest. If you don’t know what a stub is, it’s used in testing to simulate a specific functionality. In this case, **jest-static-stubs** simulates the functionality for requiring images.\n\nAdd the following Jest config in your `package.json` file to use **jest-static-stubs**:\n\n``` json\n    \"jest\": {\n      \"preset\": \"react-native\",\n      \"moduleNameMapper\": {\n        \".+\\\\.(png)$\": \"jest-static-stubs/png\"\n      }\n    },\n```\n\nOnce that’s done, if you run `yarn` `test`, you should get the following error:\n\n![react-native-storybook-type-error](//images.ctfassets.net/1es3ne0caaid/5kRDPcbKmWkwCC64ICOW84/ef44e3f38b8ee5604dcc62cd8b783bc7/react-native-storybook-type-error.png)\n\nThis is one caveat when using Jest. Because when we render the component inside the app, the type of variable we pass into the Card component is certainly a number.\n\nOn the other hand, when running the test with Jest, statements like `require(\"./src/images/something.jpg\")` return an object instead.\n\nYou can see for yourself by changing the prop type of `image` to `object`:\n\n``` javascript\n    // src/components/Card.js\n    \n    Card.propTypes = {\n      image: PropTypes.object.isRequired, // update this\n      text: PropTypes.string.isRequired,\n      // reset of the proptypes here...\n    };\n```\n\nAfter that, execute `yarn test` and then inspect the generated snapshot file, you can see that it’s indeed using an object:\n\n``` javascript\n    // src/__snapshots__/storybook.test.js.snap\n    \n    // Jest Snapshot v1, https://goo.gl/fbAQLP\n    \n    exports[`Storyshots Card default 1`] = `\n    \u003cView\n      style={\n        Object {\n          \"alignItems\": \"center\",\n          \"flex\": 1,\n        }\n      }\n    \u003e\n      \u003cView\n        style={\n          Object {\n            \"alignItems\": \"center\",\n            \"borderColor\": \"#ccc\",\n            \"borderWidth\": 1,\n            \"marginBottom\": 5,\n            \"marginTop\": 5,\n            \"padding\": 10,\n            \"width\": 710,\n          }\n        }\n      \u003e\n        \u003cImage\n          resizeMode=\"contain\"\n          source={\n            Object {\n              \"testUri\": \"../../../src/images/charizard.jpg\",\n            }\n          }\n          style={\n            Object {\n              \"width\": 650,\n            }\n          }\n        /\u003e\n```\n\nSo what’s the solution? Well, looks like the solution is to use the **RelativeImageStub** library which React Native already provides for mocking the `require` image statements so that Flow can use it. If you’re interested in looking at the code, it’s at `node_modules/react-native/Libraries/Image/RelativeImageStub.js`.\n\nIn your `package.json` file, you can use the **RelativeImageStub** library by simply specifying the string “RelativeImageStub”:\n\n``` json\n    \"jest\": {\n      \"preset\": \"react-native\",\n      \"moduleNameMapper\": {\n        \"^.+\\\\.(jpg|jpeg)$\": \"RelativeImageStub\", // add this\n        \".+\\\\.(png)$\": \"jest-static-stubs/png\"\n      }\n    },\n```\n\nAt this point, you can now run `yarn test` and all the tests should pass:\n\n![react-native-storybook-app-test-pass](//images.ctfassets.net/1es3ne0caaid/5dSr815rWw40EOOK0YIoAM/40109648cfff05080ad4a3849935f39c/react-native-storybook-app-test-pass.png)\n\nEvery time you update your components or stories, you should run `yarn test -u` instead. This will update the currently stored snapshot. Running `yarn test` will compare the old snapshot with the new one, and it will fail if there’s something different. After that, commit the changes to your repo to document the change.\n\n\n## Further reading\n\nIf you want to learn more, here are some links for further exploration:\n\n\n- [Component-Driven Development](https://blog.hichroma.com/component-driven-development-ce1109d56c8e)\n- [Learn Storybook](https://www.learnstorybook.com/)\n- [Testing a React-Redux app using Jest and Enzyme](https://medium.com/netscape/testing-a-react-redux-app-using-jest-and-enzyme-b349324803a9)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to use Storybook for fast prototyping of components for your React Native app. You’ve also learned how to use Jest and StoryShots to implement snapshot testing for the individual stories created using Storybook.\n\nYou can find the source code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNStorybook).","metaTitle":"Using Storybook with React Native","metaDescription":"This tutorial will show you how to build a React Native app using Storybook, following the principles of component driven design and development."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2fj8B2KT44emq8kKA6kMco","type":"Entry","createdAt":"2018-08-06T21:48:24.917Z","updatedAt":"2018-08-06T21:48:24.917Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a localized app with Laravel - Part 1: Internationalization and accessibility","url":"localized-laravel-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/build-an-international-app-laravel","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-08-06","description":"This four-part series explores how to build an accessible localized application in Laravel. In part one, examine various approached to localization, and how to address accessibility issues.","prerequisite":"Things that you need to install the software.\n1. Git, 2. PHP, 3. Composer, 4. Laravel CLI","content":"This is a simple implementation of how to build an International Application using Laravel. It has basic authentication features set up. \nIn this tutorial, we are going to see how to build an international application with support for multiple languages.\n\nWhen your application has users from different countries with different languages, having different content tailored to each region is a good step at improving the overall user experience of your application. You would have to worry about content, images, illustrations all appearing in the local language. You also need to consider multiple accessibility options to ensure every user can access your application and extract value from it.\n\n\n\n## Introduction\n\nWhen thinking about internationalization, it is easy for things like sorting out domain names, web server configuration, URL structure for website content, page layout and multiple translations for content and multiple currency support to be your priority. In many cases, they are the easy things to solve. What gets neglected the most are [accessibility specifications](https://www.w3.org/WAI/fundamentals/accessibility-intro/) and concerns, which are the little details that create a good user experience.\n\n[BCP-47](http://www.rfc-editor.org/rfc/bcp/bcp47.txt) provides a lot of specifications around multiple language support in our applications to improve user experience and guarantee high accessibility. Going through the document will help you understand how best to serve your content to users even when you have content in multiple languages on the same page. At the surface level, it is easy to ignore this, but we will look at why it is important to cater for these little things as we proceed with this guide.\n\nAnother thing to note when designing an international application is to clearly differentiate if you are making a multilingual application, a multi-regional application or both. In each of these situations, what you have to consider becomes a lot different.\n\n\n## A multi-regional website\n\nA multi-regional website explicitly targets users in various regions, generally different countries. An example is a website serving audience from Nigeria, Ghana and South Africa. They are all English speaking countries with a few distinctions like currency being the most common.\n\nMulti-regional websites try to create localized experiences for users. Users tend to feel a lot more comfortable with websites localized for them as webmasters put their cultural disposition into consideration and use items or phrases that are more relatable.\n\n\n## A multilingual website\n\nA website is multilingual if the content on the website exists in different languages. If you are making a website for a country like Canada or Switzerland, it should be a multilingual website because you will have to cater for people in the same region who speak different languages. The focus should be on a language of the content rather than on layout, or type of content.\n\n\n## Both multilingual and multi-regional\n\nFor example, if you have to make a website to be used in the US and Canada, you may be concerned with making a multi-regional application that is also multilingual. When a Canadian resident is accessing the website, you may wish to serve the website in either English or French to the users. For a US resident, you may choose to serve a totally different content to the user.\n\nIf you properly localize your website, when you use the $ on items, a Canadian will understand it to be Canadian Dollars while an American user will see it as USD. It will create convenience and improve the user experience, as they would not have to worry about converting from CAD to USD and vice versa.\n\n\n## A few accessibility issues you should address\n\n### Using proper language codes\n  \n\nThe first and maybe the most important thing you need to do for your international application is to specify the language the content you are serving exists in. This is important for your users who may use assistive devices to access your website.\n\nNot specifying a language would make the assistive device use the default language of the browser when interacting with your content. While it is fun hearing the browser read English words in Spanish, your users will not find that much fun at all.\n\nAlso, if you set the language of the entire page, you can take advantage of styles targeting specific languages on the page. We will learn more about this later in this series.\n\n\n\u003e To see the language subtag registry containing standard iso-codes for different languages, [click here](http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).\n\n### Selecting a primary language\n  \n\nSetting a primary language on the page is required when you have parts of your page in one or more other languages. An example is a situation where you have a section on your page that explains what an image means with French and German translations side by side.\n\nYour primary language is the language most of your content exists in. In the case of the example, if you have everything in English and then have those translations in French and German explaining an image, your primary language is English.\n\nYou should specify it at the start of your page like:\n\n``` language-html\n    \u003chtml lang=\"en\"\u003e\n```\n\n### Including another language different from the primary language\n\n  \n\nThe majority of web pages use one language at a time for serving their content. There are cases where you may need to have the content on the page in more than one language. Take the example used in “2. Selecting a primary language”, a good approach would be to mark off the section of your page in French so that any screen reader or assistive device used in surfing your website can interact with the text appropriately.\n\nIf you have your text in a `div` tag, you can mark off the languages of the text like this:\n\n``` language-html\n    \u003cdiv lang=\"fr\"\u003e\n      Salut! Ça va?\n    \u003c/div\u003e\n    \n    \u003cdiv lang=\"de\"\u003e\n      Hallo! Wie gehts?\n    \u003c/div\u003e\n```\n\nAlso, if you have a user who uses a translator, this will make translating each section as accurate as possible, because the translator can pick the language to use for each section.\n\n\n\u003e **NOTE**: Google does not use language tags on your page to determine the language of the page. It tries to figure out the language out by interacting with the content. This, according to Google, is to enable them to serve better results to searchers based on their location and/or preferences.\n\n### Link to content in a different language\n\nFor a multilingual website, each webpage may have alternate versions in different languages. You may include links on each page to indicate where it exists in different languages. This is good so users who find your website can easily find versions in a language they are most conversant with.\n\nWhen including the link, you should also specify that the link is in a different language like this:\n\n``` language-html\n    \u003ca href=\"\" hreflang=\"fr\"\u003eFrench\u003c/a\u003e\n```\n\nIf you want the text of the link to be in the language of the page it targets, you can do:\n\n``` language-html\n    \u003ca href=\"\" lang=\"fr\" hreflang=\"fr\"\u003eFrancais\u003c/a\u003e\n```\n\n\u003e NOTE: Do not use `hreflang` on any other tag that is not a link.\n\n### Font sizes\n\nWhen you have multiple language versions of your content, it is important to also consider changing the font sizes as languages change. For languages like English, French, German, they are very similar so you can use the same design and font sizes for them and they would come out fine.\n\nLanguages like Chinese, Japanese and Arabic might be difficult to read at font sizes that are suitable for English or related languages. You need to adjust the font sizes for these languages to make them legible to their readers.\n\nYou can use the CSS `:lang()` selector to target these languages and style appropriately. You can do this like:\n\n``` language-css\n    :lang(languagecode) {\n        css declarations;\n    }\n```\n\nTo be more specific to a particular element, say `p` element, you can do:\n\n``` language-css\n    p:lang(languagecode) {\n        css declarations;\n    }\n```\n\n### Language direction  \n\nYou may not encounter language direction accessibility issues except when making your website in a right to left language like Arabic. In this situation, you need to set the alignment of the content on your page to be right justified.\n\n### Character encoding  \n\nCharacter encoding helps computers understand your information. If you use the wrong encoding your pages may not be found by some search engines or the browser may not interpret them correctly.\n\nThe most widely used character encoding is **Unicode**. It contains characters for most languages and scripts in the world. It has wide support across multiple operating systems and platform. This means setting the encoding on your page to Unicode will make it accessible almost everywhere.\n\nTo set the character encoding on your page, use:\n\n``` language-html\n    \u003cmeta charset=\"UTF-8\"\u003e\n```\n\n### Layout of the page  \n\nYou may use the same layout structure for your all language versions of a page regardless of which language it is in. If this is the case, you should know that words in English may appear longer in other languages and vice versa. If you serve the same page in French, it may look messy with words falling out of alignment. In Japanese, you may have too much white space everywhere.\n\nYou should consider this when making your page translations. You should try to use phrases or words with similar length across multiple language versions of your page, to maintain its neat design. You may also consider taking items out of the page as you change the language of the page.\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/localized-laravel-part-1-amazon-1-1024x563.png\" alt=\"Amazon English\" width=\"770\" height=\"423\" class=\"aligncenter size-large wp-image-4700\" /\u003e\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/06/localized-laravel-part-1-amazon-2-1024x564.png\" alt=\"Amazon French\" width=\"770\" height=\"424\" class=\"aligncenter size-large wp-image-4699\" /\u003e\n\nIf you take a careful look at the two images, you would see a lot of differences in text size and how items align. You would also notice the header of the page looks a little cramped when viewing the French version. While the site is still very usable, you would notice how issues would arise if Amazon arranged their header a little differently.\n\n### URL structure  \n\nThe structure of your URLs are very important for several reasons. Here are a few of them:\n\n- Users can easily tell which version of your site they a viewing (or language).\n- Users can easily switch to a version of your site they are more comfortable with.\n- Search engines can show the localized version of your site to users looking for your content.\n\nIf you read [Working with multi-regional websites](https://webmasters.googleblog.com/2010/03/working-with-multi-regional-websites.html) on Google’s Webmaster Central Blog, you will see how Google uses the structure of your URL to determine what to return to the search page. Your focus is not to optimize your website URL for search engines, but to make your website easily accessible to users. You want people in Canada looking for your website to find the Canadian version of your website as opposed to not finding it at all. You also want them to know the page they are about to open is made for Canada and will suit their needs.\n\nLet us look at the common URL patterns you can use:\n\n\n- **The subdomain - en.example.com**\n  This is a great choice. It keeps your URL clean and makes it easy for users to know where they are. It will also be a great choice if you want to use analytics or separate users who visit your website as you can achieve it easily with subdomains.\n\n\n  However, it can make users not feel so sure of where they on your website and can get confused. Also, it can increase the cost of building and managing as you have to treat each subdomain like a unique domain and cater to its security needs.\n  \n-  **The sub directory - example.com/en**\nThis is my preferred pick. It is the least expensive to set up, the easiest to manage and the easiest for users to interact with. If you use the same URL across the different language versions, your users can just change the language or region and have the same content for that region or language. \n\nFor example, `example.com/en/great-tourist-locations` can be the main page and \n\n`example.com/fr/great-tourist-locations` would be the French version. Users can just change language codes and get alternative versions once they see a pattern.\n\n### Serving content based on user browser language preference  \n\nWhen a browser makes a request to the server, it also sends along with the request, the language it may like to accept. From the server, you can read the HTTP request to know what language to return to the user regardless of the URL the user is accessing from.\n\nThe browser sends language information in a header called `HTTP_ACCEPT_LANGUAGE`. The data will be in this form:\n\n```\n    es,en-us;q=0.3,de;q=0.1. \n```\n\nThis means the user can accept Spanish, English (US) and German. The `q=*` is part of the HTTP spec and must be a number between 0 and 1. If it is not specified, it is assumed to be 1. The number shows the degree of preference the browser has for the language the content should be returned in. \n\nFrom that, we can read:\n\n- Spanish is the preferred language.\n- In the absence of Spanish, send English content.\n- In the absence of English, send German content.\n\nBy addressing these issues, you will improve the user experience of your website and make it accessible to everyone, especially:\n\n- People who use screen readers or other technologies that convert text into synthetic speech.\n- People who find it difficult to read written material with fluency and accuracy, such as recognizing characters and alphabets or decoding words.\n- People with certain cognitive, language and learning disabilities who use text-to-speech software.\n- People who rely on captions for synchronized media.\n\n## Conclusion\n\nInternationalization is great when you want to serve a larger audience that cuts across multiple countries and regions. Considering important issues that may arise and addressing them will ensure that anyone using your application will extract value from it.\n\nYou want to ensure your users have a great experience when using your application. If they do not, then the time and resources you deploy to making an international application go to waste. To understand more about content authoring and markup of your webpage for internationalization, [read this w3c guide](https://www.w3.org/TR/i18n-html-tech-lang/).\n\nIn the [part - 2](https://pusher.com/tutorials/localized-laravel-part-2) of this guide, we are going to build the backend of our international application. We will build a simple tour guide booking platform targeted at users from France, Germany and English speaking countries coming to the US for a vacation.","metaTitle":"Build a localized app with laravel - part 1","metaDescription":"Using Laravel, this tutorial demonstrates how to build a localized app. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"L7RzUfarE4yOAgai4M4qS","type":"Entry","createdAt":"2018-08-06T21:49:29.664Z","updatedAt":"2018-08-06T22:01:53.681Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a localized app with Laravel - Part 2 : The setup and application backend","url":"localized-laravel-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/build-an-international-app-laravel","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}}],"reviewDate":"2018-08-06","description":"This four-part series explores how to build an accessible localized application in Laravel. In part two, set up your project and build the backend in Laravel.","prerequisite":"This tutorial requires the working knowledge of the [PHP](http://php.net/) (version \u003e= 7.1.3, [Laravel](https://laravel.com/) (version 5.6.*), and  [Composer](https://getcomposer.org/doc/00-intro.md) (version \u003e= 1.3.2), [Laravel installer](https://laravel.com/docs/5.6/installation) is installed on your computer","content":"In this tutorial, we will build our tour guide application. We will not do anything complicated so we can rapidly get to adding multilingual support. We will build the base application and make it work without any additional language or region support. In chapters following, we will look at adding all of that support.\n\nIn the [part 1](https://pusher.com/tutorials/localized-laravel-part-1), we looked at what an international application should be like. We covered some fundamental issues to consider when building an international application. We differentiated between what a multilingual application is and what a multi-regional application is. We also addressed what to do when building any of such applications.\n\n\n## Prerequisites\n1. Knowledge of [PHP](http://php.net/) (version \u003e= 7.1.3)\n2. Knowledge of [Laravel](https://laravel.com/) (version 5.6.*)\n3. [Composer](https://getcomposer.org/doc/00-intro.md) is installed on your computer (version \u003e= 1.3.2)\n4. [Laravel installer](https://laravel.com/docs/5.6/installation) is installed on your computer\n\n\n## What we are going to build\n\nWe are going to build a simple tour guide that will help users book our services. This service rendered will help users take a tour of our city. It will allow them to set a time and date they want the tour and how many persons they will come with.\n\nThe application will have a simple dashboard that serves as mission control for the administrator. It will let the admin see who booked a tour when they want the tour and where they want to tour.\n\nFinally, it will have a page that lists all the destinations users can tour. Users will also be able to click a link to see more information about their desired destination.\n\n\n## Getting started\n\nTo begin, we need to create a Laravel application. We will use the Laravel installer to make it easy and fast. Run the following command:\n\n```\n    $ laravel new tourGuide\n    $ cd tourGuide\n```\n\nIt will create the Laravel application, make the `.env` file and set the application. If you run `php artisan serve`, your application will come up right away.\n\nWe will use `SQLite` as our database. Create the `SQLite` database with the following command:\n\n```\n    $ touch database/database.sqlite\n```\n\nThen, update your `.env` file to use `SQLite`\n\n```\n    // replace\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n\n    // with\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/absolute/path/to/database.sqlite\n```\n\n\n## Creating the models and migration files\n\nNext thing we want to do is make the models and accompanying migrations for the database our application will use. It is important to plan this ahead of time to reduce the number of changes we will make to our application later.\n\nFor the tour guide, we want the following:\n\n### Booking information\n\n- Destination to visit\n- Date and time for visit\n- Number of people to visit\n- User who booked the visit\n\n### Destination information\n\n- Name\n- Image\n- Description\n- Location\n\n### User information\n\n- Name\n- Email\n- Phone\n- Country of residence\n\nNow that we are clear on what we want to make, let us create the [model](https://laravel.com/docs/5.6/eloquent#defining-models), controller and migrations for them:\n\n```\n    $ php artisan make:model Destination -mr\n    $ php artisan make:model Booking -mr\n```\n\n  \u003e There is a `User` model that ships with Laravel, so we will use it. It also comes with a migration file as well. Since we only register users, we will not need a `User` controller.\n\nNext, we edit the migration files. Open the users migration file in `./database/migrations` and replace with this:\n\n``` language-php\n    // database/migrations/\u003ctimestamp\u003e_create_users_table.php\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateUsersTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('users', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('name');\n                $table-\u003estring('email')-\u003eunique();\n                $table-\u003estring('country');\n                $table-\u003estring('phone');\n                $table-\u003eboolean('is_admin')-\u003edefault(false);\n                $table-\u003estring('password');\n                $table-\u003erememberToken();\n                $table-\u003etimestamps();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('users');\n        }\n    }\n```\n\nOpen the destinations migration file and replace with this:\n\n``` language-php\n    // database/migrations/\u003ctimestamp\u003e_create_destinations_table.php\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateDestinationsTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('destinations', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('name');\n                $table-\u003estring('image');\n                $table-\u003ejson('description');\n                $table-\u003estring('location');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('destinations');\n        }\n    }\n```\n\nOpen the bookings migration file and replace with this:\n\n``` language-php\n    // database/migrations/\u003ctimestamp\u003e_create_bookings_table.php\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateBookingsTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('bookings', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003eunsignedInteger('destination_id');\n                $table-\u003eunsignedInteger('user_id');\n                $table-\u003eunsignedInteger('number_of_tourists');\n                $table-\u003edatetime('visit_date');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('bookings');\n        }\n    }\n```\n\nOur migration files are now ready. We made them mirror the information we want to store. Next, we will edit the models to make them access our database correctly.\n\nOpen the `User` model in `./app` and replace with the following:\n\n``` language-php\n    // app/User.php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Notifications\\Notifiable;\n    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n    \n    class User extends Authenticatable\n    {\n        use Notifiable;\n    \n        protected $fillable = [\n            'name', 'email', 'country', 'phone', 'password',\n        ];\n    \n        protected $hidden = [\n            'password', 'remember_token',\n        ];\n    \n        public function bookings()\n        {\n            return $this-\u003ehasMany(Booking::class);\n        }\n    }\n```\n\nOpen the `Destination` model and edit:\n\n``` language-php\n    // app/Destination.php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Destination extends Model\n    {\n        protected $fillable = [\n            'name', 'image', 'location', 'description'\n        ];\n    \n        public function bookings()\n        {\n            return $this-\u003ehasMany(Booking::class);\n        }\n    }\n```\n\nOpen the `Booking` model and edit:\n\n``` language-php\n    // app/Booking.php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Booking extends Model\n    {\n        protected $fillable = [\n            'user_id', 'destination_id', 'number_of_tourists', 'visit_date'\n        ];\n    \n        protected $dates = [\n            'created_at',\n            'updated_at',\n            'visit_date'\n        ];\n    \n        public function user()\n        {\n            return $this-\u003ebelongsTo(User::class);\n        }\n    \n        public function destination()\n        {\n            return $this-\u003ebelongsTo(Destination::class);\n        }\n    }\n```\n\nAnd that is all the edits needed for our models now, we will update them as we progress.\n\nRun the following command to create the database tables:\n\n```\n    $ php artisan migrate\n```\n\n## The controllers\n\nFor the controllers, we need to keep it very simple. In subsequent chapters, we will extend the controllers to serve content based on the language a user requests. All the controllers can be found in `./app/Http/Controllers` directory.\n\nThe first thing we want to do is edit the `RegisterController` to include the `phone` and `country` fields. Open `Auth/RegisterController.php` and edit:\n\n``` language-php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers\\Auth;\n    [...]\n    \n    class RegisterController extends Controller\n    {\n        [...]\n    \n        protected function validator(array $data)\n        {\n            return Validator::make($data, [\n                'name' =\u003e 'required|string|max:255',\n                'email' =\u003e 'required|string|email|max:255|unique:users',\n                'phone' =\u003e 'required|string|unique:users',\n                'country' =\u003e 'required|string|max:255',\n                'password' =\u003e 'required|string|min:6|confirmed',\n            ]);\n        }\n    \n        protected function create(array $data)\n        {\n            return User::create([\n                'name' =\u003e $data['name'],\n                'email' =\u003e $data['email'],\n                'phone' =\u003e $data['phone'],\n                'country' =\u003e $data['country'],\n                'password' =\u003e Hash::make($data['password']),\n            ]);\n        }\n    }\n```\n\n\u003e Storing countries as a string means each user will type in their country. This is not very efficient because it will leave our database with a lot of redundant data. For this tutorial, we will ignore that since we will not be going live with it. If you intend to go live with it, please consider creating a table with countries and link them using their `id`. Learn about [database normalization](https://support.microsoft.com/en-gb/help/283878/description-of-the-database-normalization-basics).\n  \n## Destination controller\n\nIn our destination controller, we want to list all the destinations we tour. We also want to give users the ability to click on a destination and see more information on it. So, we are going to create a few methods to return the data we want.\n\nOpen the `DestinationController` and replace with the following:\n\n``` language-php\n    // app/Http/Controllers/DestinationController.php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Destination;\n    use Illuminate\\Http\\Request;\n    \n    class DestinationController extends Controller\n    {\n        public function index()\n        {\n            $destinations = Destination::all();\n            return view('destination.index', compact('destinations'));\n        }\n    \n        public function show(Destination $destination)\n        {\n            return view('destination.show', compact('destination'));\n        }\n    }\n```\n\n  \u003e We will [seed](https://laravel.com/docs/5.6/seeding) our destination table so there will be no need to create methods for creating, updating or deleting destination records. This is to keep it simple.\n\n\n## Booking controller\n\nThe booking controller should show us what users booked and also help users book tours. Open the controller and replace with the following:\n\n``` language-php\n    // app/Http/Controllers/BookingController.php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Booking;\n    use Illuminate\\Http\\Request;\n    use Illuminate\\Support\\Facades\\Validator;\n    use Carbon\\Carbon;\n    use Auth;\n    \n    class BookingController extends Controller\n    {\n        public function __construct()\n        {\n            $this-\u003emiddleware('auth');\n            $this-\u003emiddleware('admin')-\u003eonly(['index']);\n        }\n    \n        public function index()\n        {\n            $bookings = Booking::with(['destination','user'])-\u003eget();\n            return view('booking.index',compact('bookings'));\n        }\n    \n        public function create(\\App\\Destination $destination)\n        {\n            return view('booking.create',compact('destination'));\n        }\n    \n        public function store(Request $request)\n        {\n            $validator = Validator::make($request-\u003eall(), [ \n                'destination_id' =\u003e 'required|integer',  \n                'number_of_tourists' =\u003e 'required|integer', \n                'visit_date' =\u003e 'required'\n            ]);\n            $validator-\u003evalidate();\n            $input = $request-\u003eonly(['destination_id', 'number_of_tourists', 'visit_date']);\n            $input['user_id'] = Auth::id();\n            $input['visit_date'] = Carbon::createFromFormat('m/d/Y',$input['visit_date'])-\u003etoDateTimeString();\n    \n            $booking = Booking::create($input);\n            return redirect('/home');\n        }\n    \n        public function userPage()\n        {\n            $bookings = Auth::user()-\u003ebookings()-\u003ewith('destination')-\u003eget();\n            return view('booking.userpage', compact('bookings'));\n        }\n    }\n```\n\nOur booking controller has a constructor that defines a middleware for checking each request to it. We defined the `auth` middleware to ensure that only logged in users can access the pages linked to this controller. \n\nWe then defined an `admin` middleware to be sure **ONLY** admin users can see the page tied to the `index` method. We will define the admin middleware below.\n\n\n\u003e Middlewares are called in Laravel in the order which they are placed like first, second, … If the execution of a middleware is dependent on say `auth`, you have to place the `auth` middleware before it. This also applies to using route groups and adding middlewares to it.\n\nIn our `index` method, we are fetching all bookings and [eager loading](https://laravel.com/docs/5.6/eloquent-relationships#eager-loading) the users and destinations tied to them. This is a good option since we intend to use the data. It saves us some time with the number of queries we have to run and will make our application faster.\n\nThe `create` method returns the form for making a booking with information on the destination the user had clicked on from the previous page.\n\nThe `store` method stores the booking a user made. Because we set bootstrap datepicker to return the date in a format that is easy for users to read, we are doing a second conversion to a format that our application stores.\n\nThe `userPage` method returns the bookings the logged in user made with the destination information eager loaded.\n\n\n## Create the authentication\n\nWe will use [Laravel’s authentication](https://laravel.com/docs/5.6/authentication#authentication-quickstart) [scaffolding](https://laravel.com/docs/5.6/authentication#authentication-quickstart). To generate it, run the following command:\n\n```\n    $ php artisan make:auth\n```\n\nThis will publish the authentication routes in `routes/web.php` and also create the view files for different authentication actions like registration, login and more. They are all connected to the respective controllers handling them so we will not worry about setting that up anymore.\n\nWhen we use the scaffolding, it makes the `/home` route, which is where logged in users are redirected to. We can change this to what we want in the `LoginController`. For this app, we are going to set the route as the default for regular users and redirect admin users.\n\nFirst, open `.app/Http/Controllers/Auth/LoginController.php` and add the following:\n\n``` language-php\n    [...]\n    use Illuminate\\Http\\Request;\n    \n    class LoginController extends Controller\n    {        \n        [...]\n        protected function authenticated(Request $request, $user)\n        {\n            if ($user-\u003eis_admin) {\n                return redirect('/dashboard');\n            }\n        }\n    }\n```\n\nNow, when an admin user logs in, they get redirected to `dashboard`. We are going to make a middleware to restrict access to the dashboard page.\n\n\n## Making the middleware for the admin check\n\n[Middleware](https://laravel.com/docs/5.6/middleware) in Laravel provides a convenient mechanism for filtering HTTP requests entering our application. This middleware is going to check if a logged in user has an administrator account or not. This is important since we use a single users table for both regular users and administrators.\n\nRun the following command to create the middleware:\n\n```\n    $ php artisan make:middleware IsAdmin\n```\n\nThen open the `IsAdmin` middleware file in `./app/Http/Middleware` and add the following:\n\n``` language-php\n    \u003c?php\n    \n    namespace App\\Http\\Middleware;\n    \n    use Closure;\n    \n    class IsAdmin\n    {\n        public function handle($request, Closure $next)\n        {\n            if (!$request-\u003euser()-\u003eis_admin) {\n                abort(404);\n            }\n            return $next($request);\n        }\n    }\n```\n\nNext, we register the route in `./app/Http/Kernel.php`:\n\n``` language-php\n    protected $routeMiddleware = [\n            'admin' =\u003e \\App\\Http\\Middleware\\IsAdmin::class,\n            [...]\n        ];\n```\n\nWe used this middleware in our booking controller to protect the `index` method. This middleware will only allow admin users to see the page containing all bookings while other non-admin users are directed to a lovely 404 page.\n\n\n## Conclusion\n\nWe have looked at what an international application is and different things to consider when making the application. We also got started on a simple application for tourists to book a tour guide service.\n\nIn the [part 3](https://pusher.com/tutorials/localized-laravel-part-3), we will make the views for all of our pages. We will make the styles for multi-language support and make the pages as well. Then, we can proceed to adding content in multiple languages and see how to show content based on the users language.\n\nThe source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/build-an-international-app-laravel).","metaTitle":"Build a localized app with Larave l: Application Backend","metaDescription":"This four-part series explores how to build an accessible localized application in Laravel. In part two, set up your project and build the backend in Laravel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"44Tng6UfocKsqcwC4EukkW","type":"Entry","createdAt":"2018-07-31T17:20:01.358Z","updatedAt":"2018-07-31T17:22:27.474Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Writing an MVP for your backend with Kotlin","url":"mvp-backend-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5kvBF35rLaSAaYuq2AewiK","type":"Entry","createdAt":"2018-07-30T18:58:24.883Z","updatedAt":"2018-07-30T18:58:24.883Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Enrique Lopez Manas","url":"enrique-lopez-manas","email":"eenriquelopez@gmail.com","twitter":"https://twitter.com/eenriquelopez","github":"https://github.com/kikoso","guestWriter":true}}],"projectRepo":"https://github.com/kikoso/web-mvp-kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2018-07-29","description":"This tutorial guides you through building a minimum viable product for a Kotlin backend app. It uses a messenger application as an example. You will build the basic app, and add logging, documentation and testing functionality.","prerequisite":"You will need MySQL, IntelliJ and Postman installed on your machine. Some familiarity with Java web app development will be helpful.","content":"## Motivation\n\nKotlin is a popular language, but it is mostly associated with Android. This is not an accident: Google appointed it as a first-class language for Android. Since its conception, Kotlin was intimately related to the Android platform. But JetBrains has always emphasized its multiplatform nature. Nowadays Kotlin is used as a primary language for a variety of scenarios:\n\n\n- iOS or Raspberry Pi (hence the development of Kotlin/Native)\n- As a frontend language\n- One of my favorites: serving as a backend language.\n\nRecently I had to confront the dilemma of developing a small microservice (are all microservices small?) that would include some shared components with other J2EE applications. I would have total ownership over this microservice, as long as:\n\nA) Other services and entities at my client could be able to operate with this microservice, and\n\nB) Some shared components (i.e., models, DTOs...) could be shared among the platforms.\n\nI decided to go fully Kotlin for it. Since I observed that for some folks Kotlin was still new in the backend, I thought it could be a good idea to provide a sort of Minimum Viable Product (MVP). The idea sounded attractive at first, and as I implemented it turned out to be faster and more efficient than I thought.\n\nSo, an MVP must include minimal functionality desired in a product. It should not get very complex, or the purpose gets killed. I came up with the following points that would be desired to have in an MVP for a backend service:\n\n\n- A REST API providing CRUD operations for an entity.\n- Documentation\n- Testing\n- Dependency Injection\n- Environment separation\n\nChoosing a small example as an entity that could serve, something as simple as a message entity could serve. Let's consider a message being composed of an ID, a title, and some content.\n\nAs mentioned before, it can get much more complex the more features we add, but I considered this to be a good start for the MVP. Kotlin already makes a few things easy. I had to choose a few libraries to develop it as standard as I can. So after some research, I came up with the following thoughts:\n\n\n- I have used [Spring](https://spring.io/) previously in Java. It does its job, it is pretty standard and I am happy overall with it. Since Spring Version 5.0 support for Kotlin was introduced. So this was going to be an obvious choice.\n- [Jackson](https://github.com/FasterXML/jackson) is my choice for JSON conversation.\n\nMany backend services based on Java use Maven out of habit, which is not a bad thing. However, I consider Gradle to be more deeply linked to Kotlin since its inception. So we will use Gradle for this tutorial. However, this could be easily ported to other platforms. Remember as well to have Gradle 4+ installed in your environment. The entire code has been uploaded to [GitHub](https://github.com/kikoso/web-mvp-kotlin). You can direct yourself there anytime if you want to check the project entirely. However, if you want to start doing it from scratch (something we recommend in order to acquire knowledge solidly) follow the tutorial.\n\nLet's start getting our hands dirty.\n\n## Prerequisites\n- If you do not have an existing infrastructure on your computer, we can recommend you to one of the *AMP (WAMP, LAMP, MAMP) alternatives. The installation is straightforward, and it will provide you a functioning MySQL database. Note you do not need the Apache and PHP parts of the package for this tutorial.\n- We will also be using [IntelliJ](https://www.jetbrains.com/idea/), since it provides a great integration with Kotlin and Spring.\n- [Postman](https://www.getpostman.com/) to execute the requests.\n- The user must feel comfortable developing basic Java web apps and understanding the layers beneath it (endpoints, database, etc).\n- An SQL database reader. I use [SequelPro](https://www.sequelpro.com/) for Macintosh and I can endorse it. Other OS will offer different alternatives. I have heard good things of [SQLYog](https://github.com/webyog/sqlyog-community) for Windows.\n\n## Creating our brand new project\n\nIn your IntelliJ environment, click on **File -\u003e New Project**. Select Gradle, and click **Next**. The following screens refer to GroupID and Project name - choose the naming at your convenience.\n\nNow that the project is created, we need to add the Gradle dependencies. We will be using Spring, Jackson and the MySQL connector. There are a few sub packages from Spring that will need to be added as well. Please, check that your main Gradle file contains the following lines within the block dependencies.\n\n```\n    // build.gradle\n      \n      dependencies {\n          implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n          implementation('org.springframework.boot:spring-boot-starter-web')\n          implementation('org.springframework.boot:spring-boot-starter-data-jpa')\n          testCompile('org.springframework.boot:spring-boot-starter-test')\n          runtime('mysql:mysql-connector-java')\n          implementation \"com.fasterxml.jackson.module:jackson-module-kotlin\"\n      }\n```\n\nTo resolve the dependencies, make sure your block buildscript/dependencies looks like here:\n\n```\n    // build.gradle\n      \n    buildscript {\n        ext.kotlin_version = '1.2.41' \n        ext.spring_boot_version = '2.0.0.RELEASE'\n        ext.koin_version = '0.9.3'\n    \n        repositories {\n            mavenCentral()\n            jcenter()\n        }\n        dependencies {\n            classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n            classpath \"org.jetbrains.kotlin:kotlin-allopen:$kotlin_version\"\n            classpath \"org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version\"\n        }\n    }\n```\n\n\nLast, you need to apply the following plugins to your Gradle file\n\n```\n    // build.gradle\n    \n    apply plugin: 'kotlin'\n    apply plugin: \"kotlin-spring\"\n    apply plugin: 'org.springframework.boot'\n    apply plugin: 'io.spring.dependency-management'\n```\n\n## Implementation of basic functionality\n\nLet's start with the proper code. A Spring application will always need to have an Application class. This is the main entry point to our MVP. Create a class called `Application.kt` in your root folder, and include the following code:\n\n``` kotlin\n    // src/main/kotlin/com/kotlinmvpweb/demo/Application.kt\n    \n    import org.springframework.boot.SpringApplication\n    import org.springframework.boot.autoconfigure.SpringBootApplication\n    \n    @SpringBootApplication\n    class Application\n    \n    fun main(args: Array\u003cString\u003e) {\n        SpringApplication.run(Application::class.java, *args)\n    }\n```\n\nNow that our Spring application has been specified, we are going to define our entity. We agreed on using an entity called Message, but essentially every other class will serve for that purpose. We want to showcase how straightforward this implementation results with Kotlin.\n\nAs a reminder, we agreed on our Message being composed of ID, title, and content. Define your following class (`Message.kt`) in a new package (`model`) within your root folder:\n\n``` kotlin\n    // src/main/kotlin/com/kotlinmvpweb/demo/model/Message.kt\n    \n    import javax.persistence.Entity\n    import javax.persistence.GeneratedValue\n    import javax.persistence.GenerationType\n    import javax.persistence.Id\n    import javax.validation.constraints.NotBlank\n    \n    @Entity\n    data class Message (\n            @Id @GeneratedValue(strategy = GenerationType.IDENTITY)\n            val id: Long = 0,\n    \n            @get: NotBlank\n            val title: String = \"\",\n    \n            @get: NotBlank\n            val content: String = \"\"\n    )\n```\n\nJava would have traditionally needed a group of setters/getters to provide access to the fields. Kotlin simplifies this by using data classes.\n\nLet's create our Spring repository. Create the following class `MessageRepository` in a package called `repository` in your root folder:\n\n``` kotlin\n    // src/main/kotlin/com/kotlinmvpweb/demo/repository/MessageRepository.kt\n    \n    import com.kotlinmvpweb.demo.model.Message\n    import org.springframework.stereotype.Repository\n    import org.springframework.data.jpa.repository.JpaRepository\n    \n    @Repository\n    interface MessageRepository : JpaRepository\u003cMessage, Long\u003e\n```\n\nBy creating this interface we are actually fulfilling two purposes:\n\n\n- When we extend from JpaRepository, we essentially get all the required CRUD methods we will later need for our class message. \n- This will allow the Spring repository infrastructure to scan the classpath for this interface and create a Spring bean for it.\n\nNow let's create our last class to complete the basic setup. Create a folder `controller` in your root folder, a new class called  `MessageController.kt` ` with the following content:\n\n``` kotlin\n    // src/main/kotlin/com/kotlinmvpweb/demo/controller/MessageController.kt\n    \n    import com.kotlinmvpweb.demo.model.Message\n    import com.kotlinmvpweb.demo.repository.MessageRepository\n    import org.springframework.http.HttpStatus\n    import org.springframework.http.ResponseEntity\n    import org.springframework.web.bind.annotation.*\n    import javax.validation.Valid\n    \n    \n    \n    @RestController\n    @RequestMapping(\"/api\")\n    class MessageController(private val messageRepository: MessageRepository) {\n    \n        @GetMapping(\"/messages\")\n        fun getAllmessages(): List\u003cMessage\u003e =\n                messageRepository.findAll()\n    \n    \n        @PostMapping(\"/messages\")\n        fun createNewMessage(@Valid @RequestBody message: Message): Message =\n                messageRepository.save(message)\n    \n    \n        @GetMapping(\"/messages/{id}\")\n        fun getMessageById(@PathVariable(value = \"id\") messageId: Long): ResponseEntity\u003cMessage\u003e {\n            return messageRepository.findById(messageId).map { message -\u003e\n                ResponseEntity.ok(message)\n            }.orElse(ResponseEntity.notFound().build())\n        }\n    \n        @PutMapping(\"/messages/{id}\")\n        fun updateMessageById(@PathVariable(value = \"id\") messageId: Long,\n                              @Valid @RequestBody newMessage: Message): ResponseEntity\u003cMessage\u003e {\n    \n            return messageRepository.findById(messageId).map { existingMessage -\u003e\n                val updatedMessage: Message = existingMessage\n                        .copy(title = newMessage.title, content = newMessage.content)\n                ResponseEntity.ok().body(messageRepository.save(updatedMessage))\n            }.orElse(ResponseEntity.notFound().build())\n    \n        }\n    \n        @DeleteMapping(\"/messages/{id}\")\n        fun deleteMessageById(@PathVariable(value = \"id\") messageId: Long): ResponseEntity\u003cVoid\u003e {\n    \n            return messageRepository.findById(messageId).map { message  -\u003e\n                messageRepository.delete(message)\n                ResponseEntity\u003cVoid\u003e(HttpStatus.OK)\n            }.orElse(ResponseEntity.notFound().build())\n        }\n    }\n```\n\nEach method provides a different HTTP Endpoint (using the HTTP Operations GET, POST, PUT or DELETE based on the annotation). Inside the function, the logic for the operation is included: in our case, there is no complex logic, just a simple database operation using Spring. Check also the placeholder {id} in some of the methods - this must be specified in the query URL.\n\nLastly, we need to create a configuration file for Spring. In this file, we will write our information for accessing the database and some extra fields. Create a file called `application.properties` within your folder `resources` including this:\n\n```\n    // src/main/resources/application.properties\n    \n    ## Spring DATASOURCE (DataSourceAutoConfiguration \u0026 DataSourceProperties)\n    spring.datasource.url = jdbc:mysql://localhost:3306/your-db?autoReconnect=true\u0026useUnicode=true\u0026characterEncoding=UTF-8\u0026allowMultiQueries=true\u0026useSSL=false\n    spring.datasource.username = root\n    spring.datasource.password = root\n    \n    # The SQL dialect makes Hibernate generate better SQL for the chosen database\n    spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect\n    \n    # Hibernate ddl auto (create, create-drop, validate, update)\n    spring.jpa.hibernate.ddl-auto = update\n```\n\nIf you have installed one of the *AMP platforms, you generally have to start the database through their interface. In my case, I have installed MAMP. WAMP and LAMP have similar interfaces. Open the starting screen, and click on the button `Start Servers`. \n\n![mvp-backend-kotlin-mamp](//images.ctfassets.net/1es3ne0caaid/4YmVSFyoYwgMKU2Ae4CE0O/7cbeb15a9062f56edc9098c57ae07919/mvp-backend-kotlin-mamp.png)\n\nThis will initialise the database. Make sure that the database name you have referred to in your `application.properties` file exists beforehand (in our example, the name is `your-db`). If you open SequelPro, you can create a new database by clicking on **Database → Add Database**. The default encoding and collation will suffice for our example.\n\n![mvp-backend-kotlin-set-up-database](//images.ctfassets.net/1es3ne0caaid/43u6stUpkk6QsUug4KmsQg/078d5ba492cdda1209099a4bc5529392/mvp-backend-kotlin-set-up-database.png)\n\nNow, it is time to run your example. IntelliJ generally creates a run configuration with default values that works out for most of the environments. If you click on **Run → Run Application**, there should be a default option. If there isn’t, click on **Run → Edit Configurations**. In the screen that pops up, click on **+ Spring Boot**. This will create a default Spring Boot run configuration. You need to provide some values in this screen (mainly the name of your `Application` class). See in the following screen an example of configuration (the other options are advanced and not needed for this tutorial):\n\n![mvp-backend-kotlin-app-config](//images.ctfassets.net/1es3ne0caaid/2FIiJ75aAMOuYG2emwyuQo/fa03f04f277371ca004f0b43587e8188/mvp-backend-kotlin-app-config.png)\n\nYou are ready to go. When your configuration is set up, click on **Run → Run Your-Configuration-Name** and the application will start!\n\nLet's see how this works. Open Postman, and execute a POST request against http://localhost:8080/api/messages sending the following JSON object in the body:\n\n``` json\n    {\n        \"id\": 8,\n        \"title\": \"A message\",\n        \"content\": \"A content\"\n    }\n```\n\nIf everything has worked out, the backend will return you the object that has been created.\n\n![mvp-backend-kotlin-postman](//images.ctfassets.net/1es3ne0caaid/55CxCLSukM42OYYGAMOww8/86cc075c01fa8e3b3c07eef9d291c469/mvp-backend-kotlin-postman.png)\n\nAs mentioned, you can perform all the HTTP Operations (PUT, DELETE, POST, GET)\n\n## Documentation\n\nThe language that is being used in Kotlin to document code is called KDoc. If you are familiar with JavaDoc, they both work pretty similarly. KDoc has been extended to support Kotlin particularities. There is an open source alternative I would like to mention here, and it is called Dokka. Dokka has some more functionality than KDoc itself, and you might want to check [their GitHub repository](https://github.com/Kotlin/dokka). Coming back to Dokka, let's see how the syntax would work. Let's first write a documentation block for our class MessageController:\n\n```\n    /**\n     * This class is a controller that handles messages\n     *\n     * @property messageRepository the repository of messages\n     * @constructor Creates an empty controller.\n     */\n```\n\n\nSo far, simple and it might remind the potential reader of JavaDoc. The properties are specified through a `@property` annotation. The behavior of the constructor through the annotation `@constructor`. Let's observe how this would work in the case of a function `createNewMessage`:\n\n```\n    /**\n      * Stores a message in our backend\n      * @return the inserted message in case it was successful\n      */  \n```\n\nAgain, and similarly to JavaDoc, we do include a short description of the function behavior and functionality. We use the annotation `@return` to describe what the function will return.\n\n\n## Logging your code\n\nLogging is an overdiscussed topic in terms of usefulness and practicality. There are fierce discussions whether one library is better than another one, or whether a pattern is more suitable than a previously used. Same discussions happen all the time with code styling. I like to present here a TL;DR: do not lose too much time on those arguments, and use the library or mechanism that best suits your needs. Most of the logging frameworks have a very similar functionality. For our purpose, we will use [kotlin-logging](https://github.com/MicroUtils/kotlin-logging), but any other framework can serve you if you feel like it.\n\nIn order to add kotlin.logging to your project, make sure you add the following lines to your build.gradle file:\n\n```\n    compile 'io.github.microutils:kotlin-logging:1.5.4'\n```\n\nNow you are ready to go.\n\n## Testing your code\n\nTesting is a crucial part of any software system. It allows us to create iterative improvements and add new features while keeping safe the already constructed code. JetBrains provides the library `kotlin.test`, which provides annotations and a set of utility functions for your tests. This library includes a set of modules. One of the most interesting is `kotlin-test-junit5`. This module provides an implementation of Asserter on top of JUnit 5.\n\nIn order to start developing your own tests, you need to import the library `kotlin.test` in your project. Make sure the following lines have been included in your Gradle file.\n\n```\n    testCompile \"org.jetbrains.kotlin:kotlin-test-junit\"\n```\n\nAfter synchronizing your Gradle file, you should be able to access the classes included within this library. Now, next to your main folder, create the following path:  `test/kotlin/com/kotlinmvpweb/demo`. This folder will be the responsible to host your tests. Now create inside a Kotlin file that can be named `HelloWorldTest.kt`. Within the folder, write the following content:\n\n``` kotlin\n    // src/test/kotlin/com/kotlinmvpweb/demo/ExampleTests.kt\n    \n    import mu.KotlinLogging\n    import org.junit.After\n    import org.junit.Assert\n    import org.junit.Before\n    import org.junit.Test\n    import kotlin.test.assertTrue\n    \n    class ExampleTests {\n    \n        private val logger = KotlinLogging.logger {}\n    \n        @Before\n        fun prepareYourTest() {\n            logger.debug { \"We are preparing our test\" }\n        }\n    \n        @Test\n        fun exampleTestInline() {\n            logger.debug { \"We are executing our test\" }\n            assertTrue {\n                logger.debug { \"Here an assertion will take place\" }\n                true\n            }\n        }\n    \n        @Test\n        fun testOk() {\n            Assert.assertEquals(\"A string\", \"A different string\" )\n        }\n    \n        @After\n        fun after() {\n            logger.debug { \"We finished executing our test\" }\n        }\n    }\n```\n\nThe code is easy to read. You see that we have two functions annotated with `@Before` and `@After`. Those functions will be executed before and after the actual tests are executed, in case you need to set up or tear down any of your variables. This was actually the syntax in Junit 3.x, fortunately, the world always gravitates towards a better place. The functions executing a test are annotated with `@Test`. One of them includes an inline assertion, whereas the other one includes an assert function from the JUnit suite. Tests can get more complex as your software grows but is not the nature of this tutorial to provide a deep inside. We can refer you to a nice article written by [Philipp Hauer](https://blog.philipphauer.de/best-practices-unit-testing-kotlin/) where he explores it more intensively.\n\nIf you want to run the tests, you just need to right click on the test file, and select **Run filename.kt** The tests will execute, and a panel will be displayed at the bottom showing the result. You can change the test output, to see how some of them might fail and how some of them might pass.\n\n![mvp-backend-kotlin-test](//images.ctfassets.net/1es3ne0caaid/A3As8kYliKwsa2iwe2aqM/90473c537d842e9bf6e387c3bb6286b7/mvp-backend-kotlin-test.png)\n\n## Conclusion\n\nAfter reading this article, a reader should have ended up with a functioning MVP. This MVP provides a backend, CRUD operations to the database and its correspondent endpoints. This is just the beginning of the journey. Software gets unapologetically complex over time. But it is paramount to start with a stable and fresh basis in order to provide sustainable growth. The repository can be [accessed here](https://github.com/kikoso/web-mvp-kotlin).\n\nAfter this introduction, a reader might want to take a look at the following topics:\n\n\n- Dependency injection\n- Further architecturing the app\n- Advanced testing\n- Database migrations\n\nI would like to thank my colleagues and friend [Inaki Villar](https://twitter.com/inyaki_mwc) and [Marius Budin](https://twitter.com/mariusbudin) for their friendly and helpful review.","metaTitle":"Writing an MVP for your backend with Kotlin","metaDescription":"Build a basic application in Kotlin. Create an MVP, including logging, documentation and testing, as well as the application itself. Use IntelliJ, Postman and Spring Boot."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"53e34Sergc88IA8e4AE2aK","type":"Entry","createdAt":"2018-07-26T07:40:42.110Z","updatedAt":"2018-07-26T07:40:42.110Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with Go","url":"chat-app-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-07-25","description":"This brief tutorial helps you create a simple chat application. You will build the backend in Go, and the frontend in vanilla JavaScript. Users will be able to message in realtime.","prerequisite":"You will need Go 0.10.0+ installed on your machine. A basic knowledge of Go and JavaScript will be helpful.","content":"Communication is an important part of the society we live in. Over the years, the forms of communication available have changed and have been refined to be both far-reaching and fast. With communication today, we can talk to people who are on the other side of the globe in an instant.\n\nTo power this sort of communication, there are some platforms that allow instant messaging such as Facebook, Twitter, Slack.\n\nIn this application, we will consider how to build a realtime chat application using [Go](https://golang.org/doc/install), JavaScript and [Pusher](http://pusher.com/). \n\nHere’s a demo of the final application:\n\n![go-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/4VfVpdecD6ackgA08yAwkc/7150bd3d5e452232f7b8839c13c342ed/go-chat-app-demo.gif)\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- An IDE of your choice like Visual Studio Code.\n- Go (version \u003e= 0.10.x) installed on your computer. Here’s how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript.\n\nOnce you have all the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you have already signed up with Pusher and created an application.\n\n\n## Setting up Pusher\n\nThe realtime feature of this chat app will depend on Pusher Channels so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one. After signing up, you will be asked to create a new application. Do so.\n\n### Enabling client events\n\nWe need to enable the Pusher application to trigger events from the client-side (browser) of the chat app. This is important because it is with this feature that users will be able to send private messages without hitting the backend server. Follow the steps below to activate client events from the [dashboard](https://dashboard.pusher.com):\n\n\n- Select the Channel application.\n- Click on **App Setting** from the horizontal options list.\n- Check the **Enable client events** option.\n![chat-app-go-enable-client-events](//images.ctfassets.net/1es3ne0caaid/r2p5Sr6hLq4eeWMoII8YE/78f08355870ee274ed621530d5fd9f16/chat-app-go-enable-client-events.png)\n- Click on the **Update** button.\n\n\n## Setting up the codebase\n\nLet’s write the terminal commands to create a new folder in the `src` directory that is located in the `$GOPATH`, this folder will be the root directory for this project:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-chat-app\n    $ cd go-pusher-chat-app\n```\n\nIn this folder, we will create the main Go file which will be the entry point for the application and call it `chat.go`. We also need to install the Go Pusher library that we will reference in the `chat.go` file.\n\nRun the following code in the terminal to pull in the Go Pusher package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️ If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this GitHub issue.\n\nOpen the `chat.go` file in your IDE and paste the following code:\n\n``` go\n    // File: ./chat.go\n    package main\n    \n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n    \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    type user struct {\n        Name  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    func main() {\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n    \n        http.HandleFunc(\"/new/user\", registerNewUser)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        log.Fatal(http.ListenAndServe(\":8090\", nil))\n    }\n```\n\n\u003e ⚠️ Replace `PUSHER_APP_*` keys with the app credentials found on your Pusher dashboard.\n\nIn the code above, we first imported a list of packages then registered a new Pusher client with the credentials from the app we created earlier on the dashboard.\n\nNext, we defined a user struct and included extra definitions to its properties so that Go knows how to handle incoming payloads and bind their various structures with a new instance of the user struct.\n\nLastly, in the main function, we registered three endpoints:\n\n\n- `/` — returns the static files that define the view of the chat app. The static files will be served from a `public` directory.\n- `/new/user` — creates a new user.\n- `/pusher/auth` — authorizes users from the client-side so they can subscribe to private channels and trigger client events.\n\nEach of the last two endpoints has an associated handler function that we will define below. Add the following code to the `chat.go` file before the `main` function:\n\n``` go\n    // File: ./chat.go\n    \n    // [...]\n    \n    func registerNewUser(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        \n        var newUser user\n        \n        err = json.Unmarshal(body, \u0026newUser)\n        if err != nil {\n            panic(err)\n        }\n        \n        client.Trigger(\"update\", \"new-user\", newUser)\n        \n        json.NewEncoder(rw).Encode(newUser)\n    }\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        response, err := client.AuthenticatePrivateChannel(params)\n        if err != nil {\n            panic(err)\n        }\n        \n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nIn the `registerNewUser` function, we trigger a Pusher event, `new-user`, on the public channel `update`, so that the new user’s details are sent to the subscribed clients.\n\nThe syntax for triggering a Pusher event over a public channel in Go is:\n\n```\n    client.Trigger(channel, event, data)\n```\n\n## Building the frontend\n\nLet’s create the `public` folder in the root directory of our project because this is where all of the static files will live:\n\n```\n    $ mkdir public\n```\n\nNext, we will navigate into the `public` folder and create two sub-folders to hold our CSS and JavaScript files:\n\n```\n    $ cd public\n    $ mkdir css js\n```\n\nLastly, create an `index.html` file in the root of the `public` folder. This is where we will write the markup for our application.\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eChat with friends in realtime\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/app.css\" \u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eWelcome\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"registerScreen\"\u003e\n                    \u003ch3 style=\"text-align: center\"\u003eType in your details to chat\u003c/h3\u003e\n                    \u003chr/\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cform id=\"loginScreenForm\"\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                              \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name\" required\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                              \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address\" required\u003e\n                            \u003c/div\u003e\n                            \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eSubmit\u003c/button\u003e\n                          \u003c/form\u003e\n                      \u003c/div\u003e\n                \u003c/main\u003e\n    \n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" style=\"display: none\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove we have the HTML for the home page. Let’s add some styling. Create a new file `app.css` in the `public/css` directory and add the following code:\n\n``` css\n    /* File: ./public/css.app.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    .chat {\n        max-width: 80%;\n        margin: 0 auto;\n    }\n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    .sidebar .nav-item {\n        width: 100%;\n    }\n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    tr .sender span {\n        color: #676767;\n    }\n    .response {\n        display: none;\n    }\n```\n\nNext, let’s write the JavaScript for the application. Create a new `app.js` file in the `public/js` directory and add the following code:\n\n``` javascript\n    // File: ./public/js/app.js\n    (function () {\n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            name: undefined,\n            email: undefined,\n            endUserName: undefined,\n            currentRoom: undefined,\n            currentChannel: undefined,\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        var publicChannel = pusher.subscribe('update');\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        const helpers = {\n            clearChatMessages: () =\u003e {\n                $('#chat-msgs').html('')\n            },\n            \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.email) {\n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n    \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n                chat.endUserName =  evt.target.dataset.userName\n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text('Write a message to ' + evt.target.dataset.userName+ '.')\n                }\n    \n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n    \n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n                \n                let createdAt = new Date().toLocaleString()            \n                let message = $('#replyMessage input').val().trim()\n                let event = 'client-' + chat.currentRoom\n                \n                chat.subscribedChannels[chat.currentChannel].trigger(event, {\n                    'sender': chat.name,\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n                \n                $('#chat-msgs').prepend(\n                    `\u003ctr\u003e\n                        \u003ctd\u003e\n                            \u003cdiv class=\"sender\"\u003e\n                                ${chat.name} @ \u003cspan class=\"date\"\u003e${createdAt}\u003c/span\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message}\u003c/div\u003e\n                        \u003c/td\u003e\n                    \u003c/tr\u003e`\n                )\n                \n                $('#replyMessage input').val('')\n            },\n    \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n                \n                chat.name = name;\n                chat.email = email;\n    \n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n                \n                let validName = (name !== '' \u0026\u0026 name.length \u003e= 3)\n                let validEmail = (email !== '' \u0026\u0026 email.length \u003e= 5)\n                \n                if (validName \u0026\u0026 validEmail) {\n                    axios.post('/new/user', {name, email}).then(res =\u003e {\n                        chatBody.find('#registerScreen').css(\"display\", \"none\");\n                        chatBody.find('#main').css(\"display\", \"block\");\n                        \n                        chat.myChannel = pusher.subscribe('private-' + res.data.email)\n                        chat.myChannel.bind('client-' + chat.email, data =\u003e {\n                            helpers.displayChatMessage(data)\n                        })\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n                \n                evt.preventDefault()\n            }\n        }\n    \n    \n        publicChannel.bind('new-user', function(data) {\n            if (data.email != chat.email){\n                chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n                chat.subscribedUsers.push(data);\n                \n                $('#rooms').html(\"\");\n        \n                chat.subscribedUsers.forEach((user, index) =\u003e {\n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-user-name=\"${user.name}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n                })\n            }\n        })\n    \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n    }());\n```\n\nIn the script above, we instantiated the Pusher object (replace the `PUSHER_APP_*` keys with the credentials on your Pusher dashboard). \n\nNext, we define some helper methods that will help us interact with the chat window and with the backend API. Some of the methods defined in the `helpers` object are:\n\n\n- `clearChatMessages` - clears the chat message window.\n- `displayChatMessage` - displays a new chat message in the current window.\n- `loadChatRoom` - shows a users chat messages in the general chat window after a room is selected.\n- `replyMessage` - sends a chat message to the current room.\n- `LogIntoChatSession` - creates a new chat session.\n\nAfter defining the `helpers` object, we bind to the `new-user` event on the `publicChannel`. In the callback, we subscribe to private channels so the communication is secure. \n\nAt the bottom of the script, we register all the event listeners and start the chat session.\n\n\n## Running the application\n\nTo test the chat app, we can start the Go backend server with this command:\n\n```\n    $ go run chat.go\n```\n\nTo see the app in action, we will visit this address, http://127.0.0.1:8090, on a web browser in multiple windows and test the instant messaging features. \n\nHere’s a demo of the chat app:\n\n![go-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/4VfVpdecD6ackgA08yAwkc/7150bd3d5e452232f7b8839c13c342ed/go-chat-app-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating a chat application powered by a Go backend server. \n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/go-pusher-chat-app).","metaTitle":"Build a chat app with Go","metaDescription":"Use Go and JavaScript to create a simple realtime messenger application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2R3OOdRWOcK8gi8mkcom8i","type":"Entry","createdAt":"2018-07-29T20:22:52.067Z","updatedAt":"2018-07-29T20:22:52.067Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Android messenger app with online presence using Kotlin","url":"android-messenger-presence-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-07-25","description":"This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB to create a simple backend, and Kotlin to program the app. Users will be able to log in and see who is online.","prerequisite":"You will need Android Studio 3+, Node, npm and MongoDB installed on your machine. Some familiarity with Android development is required.","content":"When building a chat application, it is essential to have an online presence feature. It is essential because your users will like to know when their friends are online and are more likely to respond to their messages.\n\nIn this article, we will be building a messenger app with online presence using Pusher Channels, Kotlin and Node.js. \n\nHere is a demo of what we will build:\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n# Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- A Pusher Channel app. You can create one [here](https://pusher.com/channels).\n- Android Studio installed on your machine. You can check [here](https://developer.android.com/studio/index.html) for the latest stable version. A minimum of version 3.0 is recommended.\n- Basic knowledge of Android development and the Android Studio IDE.\n- Basic knowledge of Kotlin. Here are the [official docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM (Node Package Manager) installed on your machine. Download [here](https://nodejs.org/en/).\n- Mongo DB installed on your machine. You can install it following the instructions [here](https://docs.mongodb.com/manual/installation/).\n\n\n## Building the backend server\n\nOur server will be built using Node.js. To start, create a new project directory:\n\n```\n    $ mkdir backend-server\n```\n\nNext, create a new `index.js` file inside the project directory and paste the following code:\n\n``` javascript\n    // File: ./index.js\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    const mongoose = require('mongoose');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER'\n    });\n    \n    mongoose.connect('mongodb://127.0.0.1/db');\n    \n    const Schema = mongoose.Schema;\n    const userSchema = new Schema({\n        name: { type: String, required: true, },\n        count: {type: Number}\n    });\n    \n    var User = mongoose.model('User', userSchema);\n    userSchema.pre('save', function(next) {\n        if (this.isNew) {\n            User.count().then(res =\u003e {\n              this.count = res; // Increment count\n              next();\n            });\n          } else {\n            next();\n          }\n    });\n    \n    module.exports = User;\n    \n    var currentUser;\n    \n    /* \n    =================================\n    We will add our endpoints here!!!\n    =================================\n    */\n    \n    var port = process.env.PORT || 5000;\n    \n    app.listen(port);\n```\n\nIn the snippet above, we initialized Pusher, Express, and MongoDB. We are using [Moongose](http://mongoosejs.com/) to connect to our MongoDB instance.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the ones on your Pusher dashboard.\n  \n\nNow let’s add our endpoints. The first endpoint we will add will be to log a user in. Paste the code below in your `index.js` file below the `currentUser` declaration:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/login', (req,res) =\u003e {\n        User.findOne({name: req.body.name}, (err, user) =\u003e {\n            if (err) {\n                res.send(\"Error connecting to database\");\n            }\n            \n            // User exists\n            if (user) {\n                currentUser = user;\n                return res.status(200).send(user)\n            }\n            \n            let newuser = new User({name: req.body.name});\n    \n            newuser.save(function(err) {\n                if (err) throw err;\n            });\n            \n            currentUser = newuser;\n            res.status(200).send(newuser)\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint receives a `username` with the request, and either create a new user or returns the data of the existing user. \n\nLet’s add the next endpoint below the one above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.get('/users', (req,res) =\u003e {\n        User.find({}, (err, users) =\u003e {\n            if (err) throw err;\n            res.send(users);\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint above fetches all the users from the database and returns them. \n\nSince we will be using a Pusher presence channel, we need an endpoint to authenticate the user. In the same file, paste this code below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/presence', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n      \n        let presenceData = {\n            user_id: currentUser._id,\n            user_info: {count: currentUser.count, name: currentUser.name}\n        };\n      \n        let auth = pusher.authenticate(socketId, channel, presenceData);\n    \n        res.send(auth);\n    });\n    \n    // [...]\n```\n\nSince we are going to be using private channels, we need an endpoint for authentication. Add the following endpoint below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/private', (req, res) =\u003e {\n        res.send(pusher.authenticate(req.body.socket_id, req.body.channel_name));\n    });\n    \n    // [...]\n\nFinally, the last endpoint will be to trigger an event `new-message` to a channel. Add the endpoint below the last one:\n\n\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/send-message', (req, res) =\u003e {\n        let payload = {message: req.body.message, sender_id: req.body.sender_id}\n        pusher.trigger(req.body.channel_name, 'new-message', payload);\n        res.send(200);\n    });\n    \n    // [...]\n```\n\nAfter adding all the endpoints, install the necessary NPM packages by running this command:\n\n```\n    $ npm install express body-parser mongoose pusher\n```\n\nBefore you run your application, make sure MongoDB is running already using this command:\n\n```\n    $ mongod --dbpath C:\\MongoDB\\data\\db # Windows\n    $ mongod --dbpath=/path/to/db/directory # Mac or Linux\n```\n\nNow you can run your application using the command below:\n\n```\n    $ node index.js\n```\n\nYour app will be available here: http://localhost:5000.\n\n\n## Building our Android application\n\nCreate your Android project. In the wizard, enter your project name, let’s say **MessengerApp.**  Next, enter your package name. You can use a minimum SDK of 19 then choose an **Empty Activity**. On the next page, change the **Activity Name** to `LoginActivity`. After this, Android Studio will build your project for you.\n\nNow that we have the project, let’s add the required dependencies for our app. Open your app module `build.gradle` file and add these:\n\n```\n    // File ../app/build.gradle\n    dependencies {\n      // [...]\n      \n      implementation 'com.android.support:design:28+'\n      implementation 'com.pusher:pusher-java-client:1.6.0'\n      implementation \"com.squareup.retrofit2:retrofit:2.4.0\"\n      implementation \"com.squareup.retrofit2:converter-scalars:2.4.0\"\n      implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    }\n```\n\nNotably, we added the dependencies for [Retrofit](http://square.github.io/retrofit/) and Pusher. Retrofit is an HTTP client library used for network calls. We added the design library dependency too as we want to use some classes from it. Sync your gradle files to pull in the dependencies.\n\nNext, let’s prepare our app to make network calls. Retrofit requires an interface to know the endpoints to be accessed. \n\nCreate a new interface named `ApiService` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ApiService.kt\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.GET\n    import retrofit2.http.POST\n    \n    interface ApiService {\n    \n      @POST(\"/login\")\n      fun login(@Body body:RequestBody): Call\u003cUserModel\u003e\n    \n      @POST(\"/send-message\")\n      fun sendMessage(@Body body:RequestBody): Call\u003cString\u003e\n    \n      @GET(\"/users\")\n      fun getUsers(): Call\u003cList\u003cUserModel\u003e\u003e\n    }\n```\n\nHere, we have declared three endpoints. They are for logging in, sending messages and fetching users. Notice that in some of our responses, we return `Call\u003cUserModel\u003e`. Let’s create the `UserModel`. Create a new class called `UserModel` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/UserModel.kt\n    import com.google.gson.annotations.Expose\n    import com.google.gson.annotations.SerializedName\n    \n    data class UserModel(@SerializedName(\"_id\") @Expose var id: String,\n                         @SerializedName(\"name\") @Expose var name: String,\n                         @SerializedName(\"count\") @Expose var count: Int,\n                         var online:Boolean = false)\n```\n\nAbove, we used a data class so that some other functions required for model classes such as `toString`, `hashCode` are added to the class by default. \n\nWe are expecting only the values for the `id` and `name` from the server. We added the `online` property so we can update later on. \n\nNext, create a new class named `RetrofitInstance` and paste the following code:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitInstance {\n    \n      companion object {\n        val retrofit: ApiService by lazy {\n          val httpClient = OkHttpClient.Builder()\n          val builder = Retrofit.Builder()\n              .baseUrl(\"http://10.0.2.2:5000/\")\n              .addConverterFactory(ScalarsConverterFactory.create())\n              .addConverterFactory(GsonConverterFactory.create())\n    \n          val retrofit = builder\n              .client(httpClient.build())\n              .build()\n          retrofit.create(ApiService::class.java)\n        }\n      }\n    }\n```\n\nThis class contains a class variable called `retrofit`. It provides us with an instance for Retrofit that we will reference in more than one class.\n\nFinally, to request for the internet access permission update the `AndroidManifest.xml` file like so:\n\n``` kotlin\n    // File: ./app/src/main/ApiService.kt\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.messengerapp\"\u003e\n    \n      \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n      [...]\n    \n    \u003c/manifest\u003e\n```\n\nNow we can make requests using Retrofit. \n\nThe next feature we will implement is login. Open the already created `LoginActivity` layout file `activity_login.xml` file and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_login.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:layout_margin=\"20dp\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editTextUsername\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/loginButton\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Login\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis layout contains an input field to take the username and a button to make a login request. \n\nNext, open the `LoginActivity.Kt` file and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/LoginActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.util.Log\n    import kotlinx.android.synthetic.main.activity_login.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class LoginActivity : AppCompatActivity() {\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_login)\n        loginButton.setOnClickListener {\n          if (editTextUsername.text.isNotEmpty()) {\n            loginFunction(editTextUsername.text.toString())\n          }\n        }\n      }\n    \n      private fun loginFunction(name:String) {\n        val jsonObject = JSONObject()\n        jsonObject.put(\"name\", name)\n        \n        val jsonBody = RequestBody.create(\n            MediaType.parse(\"application/json; charset=utf-8\"), \n            jsonObject.toString()\n        )\n    \n        RetrofitInstance.retrofit.login(jsonBody).enqueue(object:Callback\u003cUserModel\u003e {\n          override fun onFailure(call: Call\u003cUserModel\u003e?, t: Throwable?) {\n            Log.i(\"LoginActivity\",t!!.localizedMessage)\n          }\n    \n          override fun onResponse(call: Call\u003cUserModel\u003e?, response: Response\u003cUserModel\u003e?) {\n            if (response!!.code() == 200) {\n              Singleton.getInstance().currentUser = response.body()!!\n              startActivity(Intent(this@LoginActivity,ContactListActivity::class.java))\n              finish()\n            }\n          }\n        })\n      }\n    }\n```\n\nIn the file, we set up a listener for our login button so that when it is clicked, we can send the text to the server for authentication. We also stored the logged in user in a singleton class so that we can access the user’s details later. \n\nCreate a new class called `Singleton` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    class Singleton {\n      companion object {\n        private val ourInstance = Singleton()\n        fun getInstance(): Singleton {\n          return ourInstance\n        }\n      }\n      lateinit var currentUser: UserModel\n    }\n```\n\n\nWith this class, we will have access to the `currentUser`, which is the logged in user.\n\nNext, let’s create a new activity named `ContactListActivity`. For now, leave the class empty and open the corresponding layout file named `activity_contact_list` and paste the following:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_contact_list.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ContactListActivity\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:id=\"@+id/recyclerViewUserList\"\n        android:layout_height=\"match_parent\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\n\nThe layout contains a recycler view, which will give us all the list of our contacts fetched from the database. Since we are displaying items in a list, we will need an adapter class to manage how items are inflated to the layout. \n\nCreate a new class named `ContactRecyclerAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactRecyclerAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.ImageView\n    import android.widget.TextView\n    import java.util.*\n    \n    class ContactRecyclerAdapter(private var list: ArrayList\u003cUserModel\u003e, private var listener: UserClickListener)\n      : RecyclerView.Adapter\u003cContactRecyclerAdapter.ViewHolder\u003e() {\n      \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.user_list_row, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun showUserOnline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = true\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n    \n        }\n      }\n    \n      fun showUserOffline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = false\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n        }\n      }\n    \n      fun add(user: UserModel) {\n        list.add(user)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val nameTextView: TextView = itemView.findViewById(R.id.usernameTextView)\n        private val presenceImageView: ImageView = itemView.findViewById(R.id.presenceImageView)\n    \n        fun bind(currentValue: UserModel) = with(itemView) {\n          this.setOnClickListener {\n            listener.onUserClicked(currentValue)\n          }\n          nameTextView.text = currentValue.name\n          if (currentValue.online){\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon_online))\n          } else {\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon))\n    \n          }\n    \n        }\n      }\n    \n      interface UserClickListener {\n        fun onUserClicked(user: UserModel)\n      }\n    }\n```\n\nThis adapter has some overridden methods and some custom methods. \n\nThe `onCreateViewHolder` inflates how each row will look like. `onBindViewHolder` binds the data to each item by calling the `bind` method in the inner `ViewHolder` class. The `getItemCount` gives the size of the list. \n\nFor our custom methods, `showUserOffline` updates the user and shows when they are offline. While `showUserOnline` does the opposite. Finally, we have the `add` method, which adds a new contact to the list and refreshes it.\n\nIn the adapter class above, we used a new layout named `user_list_row`. Create a new layout `user_list_row` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/user_list_row.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\n      android:orientation=\"horizontal\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"20dp\"\n      android:gravity=\"center\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cImageView\n        android:id=\"@+id/presenceImageView\"\n        android:layout_width=\"15dp\"\n        android:layout_height=\"15dp\"\n        app:srcCompat=\"@drawable/presence_icon\" /\u003e\n    \n      \u003cTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"Neo\"\n        android:textSize=\"20sp\"\n        android:layout_marginStart=\"10dp\"\n        android:id=\"@+id/usernameTextView\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\"\n        /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\nThis layout is the visual representation of how each item on the layout will look like. The layout has an image view that shows the users online status. The layout also has a textview that shows the name of the contact beside the icon. The icons are vector drawables. Let’s create the files. \n\nCreate a new drawable named `presence_icon_online` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon_online.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#3FFC3C\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\n\nCreate another drawable named `presence_icon` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#C0C0C6\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\nNext, open the `ContactListActivity` class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactListActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PresenceChannelEventListener\n    import com.pusher.client.channel.User\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_contact_list.*\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class ContactListActivity : AppCompatActivity(),\n        ContactRecyclerAdapter.UserClickListener {\n    \n      private val mAdapter = ContactRecyclerAdapter(ArrayList(), this)\n      \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_contact_list)\n        setupRecyclerView()\n        fetchUsers()\n        subscribeToChannel()\n      }\n    \n    }\n```\n\nIn this class, we initialized the `ContactRecyclerAdapter`, then called three functions in the `onCreate` method. Let’s create these new functions. \n\nIn the same class, add the following methods:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewUserList) {\n        layoutManager = LinearLayoutManager(this@ContactListActivity)\n        adapter = mAdapter\n      }\n    }\n    \n    private fun fetchUsers() {\n      RetrofitInstance.retrofit.getUsers().enqueue(object : Callback\u003cList\u003cUserModel\u003e\u003e {\n        override fun onFailure(call: Call\u003cList\u003cUserModel\u003e\u003e?, t: Throwable?) {}\n        override fun onResponse(call: Call\u003cList\u003cUserModel\u003e\u003e?, response: Response\u003cList\u003cUserModel\u003e\u003e?) {\n          for (user in response!!.body()!!) {\n            if (user.id != Singleton.getInstance().currentUser.id) {\n              mAdapter.add(user)\n            }\n          }\n        }\n      })\n    }\n    \n    private fun subscribeToChannel() {\n    \n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/presence\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      pusher.subscribePresence(\"presence-channel\", object : PresenceChannelEventListener {\n        override fun onUsersInformationReceived(p0: String?, users: MutableSet\u003cUser\u003e?) {\n          for (user in users!!) {\n            if (user.id!=Singleton.getInstance().currentUser.id){\n              runOnUiThread {\n                mAdapter.showUserOnline(user.toUserModel())\n              }\n            }\n          }\n        }\n    \n        override fun onEvent(p0: String?, p1: String?, p2: String?) {}\n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n    \n        override fun userSubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOnline(user.toUserModel())\n          }\n        }\n    \n        override fun userUnsubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOffline(user.toUserModel())\n          }\n        }\n      })\n    }\n    \n    override fun onUserClicked(user: UserModel) {\n      val intent = Intent(this, ChatRoom::class.java)\n      intent.putExtra(ChatRoom.EXTRA_ID,user.id)\n      intent.putExtra(ChatRoom.EXTRA_NAME,user.name)\n      intent.putExtra(ChatRoom.EXTRA_COUNT,user.count)\n      startActivity(intent)\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\n\n- `setupRecyclerView` assigns a layout manager and an adapter to the recycler view. For a recycler view to work, you need these two things. \n- `fetchUsers` fetches all the users from the server and displays on the list. It exempts the current user logged in.\n- `subcribeToChannel` subscribes to a presence channel. When you subscribe to one, the `onUsersInformationReceived` gives you all the users subscribed to the channel including the current user. So, in that callback, we call the `showUserOnline` method in the adapter class so that the icon beside the user can be changed to signify that the user is online.\n- `onUserClicked` is called when a contact is selected. We pass the details of the user to the next activity called `ChatRoom`.\n\nIn the previous snippet, we used an extension function to transform the `User` object we receive from Pusher to our own `UserModel` object. Let’s define this extension.\n\nCreate a new class called `Utils` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/Utils.kt\n    import com.pusher.client.channel.User\n    import org.json.JSONObject\n    \n    fun User.toUserModel():UserModel{\n      val jsonObject = JSONObject(this.info)\n      val name = jsonObject.getString(\"name\")\n      val numb = jsonObject.getInt(\"count\")\n      return UserModel(this.id, name, numb)\n    }\n```\n\nNow, since we referenced a `ChatRoom` activity earlier in the `onUserClicked` method, let’s create it. \n\nCreate a new activity called `ChatRoom`. The activity comes with a layout file `activity_chat_room`, paste this in the layout file:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_chat_room.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ChatRoom\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerViewChat\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" /\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16dp\"\n        android:hint=\"Enter a message\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/sendButton\"\n        app:layout_constraintStart_toStartOf=\"parent\" /\u003e\n    \n      \u003candroid.support.design.widget.FloatingActionButton\n        android:id=\"@+id/sendButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"16dp\"\n        android:src=\"@android:drawable/ic_menu_send\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThe layout above contains a recycler view for the chat messages, an edit text to collect new messages, and a floating action button to send the message. \n\nNext, create a new class called `ChatRoomAdapter` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoomAdapter.kt\n    import android.support.v7.widget.CardView\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.RelativeLayout\n    import android.widget.TextView\n    import java.util.*\n    \n    class ChatRoomAdapter (private var list: ArrayList\u003cMessageModel\u003e)\n      : RecyclerView.Adapter\u003cChatRoomAdapter.ViewHolder\u003e() {\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.chat_item, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun add(message: MessageModel) {\n        list.add(message)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val messageTextView: TextView = itemView.findViewById(R.id.text)\n        private val cardView: CardView = itemView.findViewById(R.id.cardView)\n    \n        fun bind(message: MessageModel) = with(itemView) {\n          messageTextView.text = message.message\n          val params = cardView.layoutParams as RelativeLayout.LayoutParams\n          if (message.senderId==Singleton.getInstance().currentUser.id) {\n            params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n          }\n        }\n      }\n    }\n```\n\nThis adapter works in a similar fashion as the one we created earlier. One difference though is that the show online and offline methods are not needed here.\n\nNext, create another class named `MessageModel` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/MessageModel.kt\n    data class MessageModel(val message: String, val senderId: String)\n```\n\nThe `chat_item` layout used in the `onCreateViewHolder` method of the adapter class represents how each layout will look like. Create a new layout called `chat_item` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/chat_item.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"16dp\"\n      android:orientation=\"vertical\"\u003e\n    \n      \u003candroid.support.v7.widget.CardView\n        android:id=\"@+id/cardView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"start\"\n        app:cardCornerRadius=\"8dp\"\n        app:cardUseCompatPadding=\"true\"\u003e\n    \n        \u003cLinearLayout\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:gravity=\"start\"\n          android:orientation=\"vertical\"\n          android:padding=\"8dp\"\u003e\n    \n          \u003cTextView\n            android:id=\"@+id/text\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_vertical|start\"\n            android:layout_marginBottom=\"4dp\"\n            android:textStyle=\"bold\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n      \u003c/android.support.v7.widget.CardView\u003e\n    \n    \u003c/RelativeLayout\u003e\n```\n\nFinally, open the `ChatRoom` activity class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoom.kt\n    import android.app.Activity\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.View\n    import android.view.inputmethod.InputMethodManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PrivateChannelEventListener\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_chat_room.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import java.lang.Exception\n    import java.util.*\n    \n    class ChatRoom : AppCompatActivity() {\n    \n      companion object {\n        const val EXTRA_ID = \"id\"\n        const val EXTRA_NAME = \"name\"\n        const val EXTRA_COUNT = \"numb\"\n      }\n    \n      private lateinit var contactName: String\n      private lateinit var contactId: String\n      private var contactNumb: Int = -1\n      lateinit var nameOfChannel: String\n      val mAdapter = ChatRoomAdapter(ArrayList())\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chat_room)\n        fetchExtras()\n        setupRecyclerView()\n        subscribeToChannel()\n        setupClickListener()\n      }\n    }\n```\n\nIn this file, we declared constants used to send data to the activity through intents. We also initialized variables we will use later like the adapter the contact details. We then called some additional methods in the `onCreate` method. Let’s add them to the class.\n\nAdd the `fetchExtras` method defined below to the class. The method gets the extras sent from the chatroom activity.\n\n``` kotlin\n    private fun fetchExtras() {\n      contactName = intent.extras.getString(ChatRoom.EXTRA_NAME)\n      contactId = intent.extras.getString(ChatRoom.EXTRA_ID)\n      contactNumb = intent.extras.getInt(ChatRoom.EXTRA_COUNT)\n    }\n```\n\nThe next method is the `setupRecyclerView` method. This initializes the recycler view with an adapter and a layout manager. Paste the function in the same class as before:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewChat) {\n        layoutManager = LinearLayoutManager(this@ChatRoom)\n        adapter = mAdapter\n      }\n    }\n```\n\nThe next method is the `subscribeToChannel` method. This method subscribes the user to a private channel with the selected contact. Paste the following code to the same class as before:\n\n``` kotlin\n    private fun subscribeToChannel() {\n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/private\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      nameOfChannel = if (Singleton.getInstance().currentUser.count \u003e contactNumb) {\n        \"private-\" + Singleton.getInstance().currentUser.id + \"-\" + contactId\n      } else {\n        \"private-\" + contactId + \"-\" + Singleton.getInstance().currentUser.id\n      }\n    \n      Log.i(\"ChatRoom\", nameOfChannel)\n    \n      pusher.subscribePrivate(nameOfChannel, object : PrivateChannelEventListener {\n        override fun onEvent(channelName: String?, eventName: String?, data: String?) {\n          val obj = JSONObject(data)\n          val messageModel = MessageModel(obj.getString(\"message\"), obj.getString(\"sender_id\"))\n    \n          runOnUiThread {\n            mAdapter.add(messageModel)\n          }\n        }\n    \n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n      }, \"new-message\")\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\nThe code above allows a user to subscribe to a private channel. A private channel requires authorization like the presence channel. However, it does not expose a callback that is triggered when other users subscribe. \n\nNext method to be added is the `setupClickListener`. Paste the method to the same class as before:\n\n``` kotlin\n    private fun setupClickListener() {\n      sendButton.setOnClickListener{\n        if (editText.text.isNotEmpty()) {\n          val jsonObject = JSONObject()\n          jsonObject.put(\"message\",editText.text.toString())\n          jsonObject.put(\"channel_name\",nameOfChannel)\n          jsonObject.put(\"sender_id\",Singleton.getInstance().currentUser.id)\n          \n          val jsonBody = RequestBody.create(\n              MediaType.parse(\"application/json; charset=utf-8\"), \n              jsonObject.toString()\n          )\n    \n          RetrofitInstance.retrofit.sendMessage(jsonBody).enqueue(object: Callback\u003cString\u003e{\n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {}\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {}\n          })\n          \n          editText.text.clear()\n          hideKeyBoard()\n        }\n    \n      }\n    }\n```\n\nThe method above assigns a click listener to the floating action button to send the message to the server.  After the message is sent, we clear the text view and hide the keyboard. \n\nAdd a method to the same class for hiding the keyboard like this:\n\n``` kotlin\n    private fun hideKeyBoard() {\n      val imm = getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n      var view = currentFocus\n      \n      if (view == null) {\n        view = View(this)\n      }\n      \n      imm.hideSoftInputFromWindow(view.windowToken, 0)\n    }\n```\n\nThat’s all for the application. Now you can run your application in Android Studio and you should see the application in action.\n\n\n\u003e Make sure the Node.js API we built earlier is running before running the Android application.\n\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n\n## Conclusion\n\nIn this article, you have been introduced yet again to some Pusher’s capabilities such as the private and presence channel. We learned how to authenticate our users for the various channels. We used these channels to implement a private chat between two persons and an online notification for a contact. \n\nThe source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status).","metaTitle":"Build an Android messenger app with online presence","metaDescription":"Use Kotlin, Node.js and MongoDB to build an Android messaging app, featuring online presence. Users are able to log in and see who else is online."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"26"}}},"page":"/tutorials","query":{"page":"26"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=26 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:55 GMT -->
</html>