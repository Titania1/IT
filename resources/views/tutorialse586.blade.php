<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Node.js&page=11 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:44:39 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">133</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Node.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials124f.html?tag=Node.js" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd3fd.html?product=Beams&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#C223CE" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Node.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/realtime-payment-dashboard-stripe.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime payment dashboard with Stripe</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a live admin dashboard with Vue.js and Node.js, accepting payments through Stripe.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed in Android </h3><p class="css-k12xad e5jrto45">Discover how you can create a realtime activity feed for your Android app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracker-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Trading<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a cryptocurrency tracker using Vue.js</h3><p class="css-k12xad e5jrto45">In this tutorial, learn how to build a live cryptocurrency tracking view with Progressive Web Apps, Vue.js and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-map-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime map using Kotlin</h3><p class="css-k12xad e5jrto45">In this tutorial, you will learn how to build a realtime map using Kotlin, Node.js and Google Maps API.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-comments-nestjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime comments feature with Nest.js</h3><p class="css-k12xad e5jrto45">Leverage from the power of Next.js and TypeScript and build a live comments feature into your application.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Android </h3><p class="css-k12xad e5jrto45">In this tutorial, build a simple live table for Android devices with Java.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/trade-platform-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Realtime Graph</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a trade platform using JavaScript</h3><p class="css-k12xad e5jrto45">In this tutorial we will be building a trade platform that portrays the experience for stock markets using Vanilla JavaS...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-geolocation-arkit-corelocation.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">AR-VR<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime geolocation app with ARKit and CoreLocation</h3><p class="css-k12xad e5jrto45">Discover how to build a AR experience for ride hailing apps focused on location and realtime features.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-likes-nodejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build realtime likes with Node.js</h3><p class="css-k12xad e5jrto45">In this tutorial, you will enrich your app with realtime social features such as likes using Node.js and MongoDB.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsc216.html?product=Channels&amp;tag=Node.js&amp;page=10" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsc190.html?product=Channels&amp;tag=Node.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials9a05.html?product=Channels&amp;tag=Node.js&amp;page=9" class="css-za1ua3 edg0byb1">9</a><a href="tutorialsc216.html?product=Channels&amp;tag=Node.js&amp;page=10" class="css-za1ua3 edg0byb1">10</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialse586.html?product=Channels&amp;tag=Node.js&amp;page=11" class="css-2wakph edg0byb1">11</a><a href="tutorials1720.html?product=Channels&amp;tag=Node.js&amp;page=12" class="css-za1ua3 edg0byb1">12</a><a href="tutorials302a.html?product=Channels&amp;tag=Node.js&amp;page=13" class="css-za1ua3 edg0byb1">13</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials6b27.html?product=Channels&amp;tag=Node.js&amp;page=15" class="css-5s6711 edg0byb1">15</a><a href="tutorials1720.html?product=Channels&amp;tag=Node.js&amp;page=12" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":133,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5PGtao88o0iWAGs6kaocMc","type":"Entry","createdAt":"2018-02-28T12:35:03.059Z","updatedAt":"2018-02-28T12:35:03.059Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime payment dashboard with Stripe","url":"realtime-payment-dashboard-stripe","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-payment-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Build a live admin dashboard with Vue.js and Node.js, accepting payments through Stripe.","prerequisite":"A basic understanding of Vue.js and Node.js is needed to follow this tutorial.","content":"In this article, we are going to be looking at how to accept payments from a user using [Stripe](https://stripe.com) and displaying sales on an admin dashboard in realtime using*text in italic* [Pusher](https://pusher.com).\n\n## How it works\n\nStripe is used to handle user payments and Pusher adds realtime functionality to our application.\n\n![realtime-payment-dashboard-stripe-demo](//images.contentful.com/1es3ne0caaid/1LkoYsTPec4goWWyAGYaSu/fe6153d7fc28ccc4a5e74c6ffbc4ba33/realtime-payment-dashboard-stripe-demo.gif)\n\n## Dependencies\n\nBefore you begin, you need [Node](https://nodejs.org/) and Node Package Manager( [npm](https://npmjs.com) ) installed on your machine. To verify your installation, please run the following commands on your terminal\n\n```\n    npm -v\n    node -v\n```\n\nIf you get version numbers as your response, then it means that you already have them installed and you are good to go.\n\n## Setting up a Stripe account\n\n[Stripe](https://stripe.com) is a platform that helps process online payment. We will use this to process payments in our store.\n\nTo set up a Stripe account, head over [here](https://dashboard.stripe.com/register) and then fill out the form.\n\n![realtime-payment-dashboard-stripe-signup](//images.contentful.com/1es3ne0caaid/1fQGvRyQIYEsgY2WOMymy0/025045bdb5c077268f01e9226935c3e0/realtime-payment-dashboard-stripe-signup.png)\n\nOnce this step is completed, you will be redirected to your [dashboard](https://dashboard.stripe.com/test/dashboard):\n\n![realtime-payment-dashboard-stripe-dashboard](//images.contentful.com/1es3ne0caaid/3zxY5XAJJYgIYAksWKOkqA/a846796ec876519937068bd59d0c4dfb/realtime-payment-dashboard-stripe-dashboard.png)\n\n![realtime-payment-dashboard-stripe-api-keys](//images.contentful.com/1es3ne0caaid/2fY7XiOmeQYAAiEIEsmqY8/857b3b2dee3d73a20f9c41935bb00ed4/realtime-payment-dashboard-stripe-api-keys.png)\n\nNote your `STRIPE_PUBLISHABLE_KEY` and `STRIPE_SECRET_KEY`. We are going to use them later on as we build our application\n\n## Setting up a Pusher account\n\n[Pusher](https://pusher.com) allows you to incorporate realtime functionality into your applications. To get started with Pusher, head over [here](https://dashboard.pusher.com/accounts/sign_up).\n\nOnce you're signed in, you will be redirected to your dashboard. You then need to create a new app.\nAfter your new app is created, you need to note your `PUSHER_APP_ID`, `PUSHER_API_KEY`, `PUSHER_API_SECRET`, `PUSHER_API_CLUSTER` .\n\nOnce you have these details, you are ready to begin building your app.\n\n**Note** : All source code is available [here](https://github.com/oreHGA/realtime-payment-dashboard) \n\n## Setting up the backend server\n\nTo handle your API calls to Stripe and Pusher, we will use an Express server.\n\n### Install node modules\n\nWe need some node modules that are essential for our application to work:\n\n- cors - to enable cross origin resource sharing on our app\n- express - this is our web server\n- pusher - this package enables us and makes it easy to make calls to pushers api\n- body-parser - used in parsing the contents of a request in a json format\n- multipart - to enable multipart on our app\n- stripe - to allow us communicate seamlessly with our stripe api\n- ejs - this will be our view engine for the user facing side of the application\n\nMake a new directory and change directory into it:\n\n```\n    mkdir realtime-dashboard \u0026\u0026 cd realtime-dashboard\n```\n\nThen initialize a node project and install the node modules:\n\n```\n    # Initialze\n    npm init -y\n    # Install\n    npm install cors express ejs body-parser connect-multiparty pusher stripe --save\n```\n\nYou have now installed all the modules necessary for you to build the project.\n\n### Create our server.js file\n\nNow we need to create a file that will contain the instructions needed for our server to work\nIn your `realtime-dashboard` directory:\n\n```\n    touch server.js\n```\n\nThis is the start up file that will be referenced when your server is running\nIn your server.js file, you need to:\n\n#### Import the node modules\n\n```\n    const cors  = require('cors')\n    const Pusher = require('pusher')\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const multipart = require('connect-multiparty')\n    const stripe = require('stripe')('STRIPE_API_KEY')\n        [...]\n```\n\nOnce you have imported your node modules, you can then use them freely all through your script.\n\n#### Create your express app\n\nNow we create our express app by adding the following to the `server.js`:\n\n```\n    [...]\n    const app = express()\n    [...]\n```\n\n#### Load the middleware\n\nWe load the middleware in our `server.js` by adding the following:\n\n```\n    ...\n    app.use(cors());\n    app.set('view engine', 'ejs');\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false}));\n    const multipartMiddleware = multipart();\n    ...\n```\n\nHere, we set our app to use `cors` and set the view engine to `ejs`. We also instructed the app the parse the requests in JSON format.\n\n#### Create the Pusher client\n\nWe need to create our Pusher client to enable us to trigger events from our app to a specific channel. Our admin dashboard will also be listening for events on the same channel (more details on this as we progress). \nWe create the client by adding this to our file:\n\n```\n    [...]\n    const pusher = new Pusher({\n        appId: 'PUSHERE_APP_ID',\n        key: 'PUSHER_API_KEY',\n        secret: 'PUSHER_API_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    [...]\n```\n\nOnce this is done, we have successfully created our Pusher client.\n\n#### Create app routes\n\nWe need to decide what the user sees when visiting different parts of our app. Since this is a simple application, we only need two routes for the user facing side:\n\n- Route that loads the checkout page.\n- Route that handles the payment and communicated with the stripe API.\n\nEarlier on, we set our  `view engine` to `ejs` and we will use this here:\n\n```\n    [...]\n    app.get('/', function(req, res){\n        res.render('index');\n    });\n    \n    app.post('/gen-payment', multipartMiddleware, function(req, res){\n        let amount = 500;\n        stripe.customers.create({\n            email: req.body.stripeEmail,\n            source: req.body.stripeToken\n        })\n        .then(customer =\u003e\n            stripe.charges.create({\n                amount,\n                description: 'One camera bought from shop',\n                currency: \"usd\",\n                customer: customer.id\n            })\n        )\n        .then(charge =\u003e {\n            pusher.trigger('sales', 'payment-completed', {\n                \"time\" : new Date().toDateString(),\n                \"value\" : `\\$${charge.amount/100}`,\n                \"message\" : \"payment complete...duh!\",\n                \"description\" : charge.description\n            });\n            console.log( charge );\n            res.render(\"charge\");\n        });\n    });\n    [...]\n```\n\nLet's shed more light on the `gen-payment` route. We accept the `stripeEmail` and the `stripeToken` which would be passed as part of the body in the post request to the route. We then create a new `customer` using the `stripeEmail` and the `stripeToken`. The `create` function returns a `promise` and so once the customer is created, we initiate a new `charge` for the customer. If this charge is successful, i.e we are able to completely charge the customer, then we trigger a `payment-completed` event to the `sales` channel.\n\n#### Assign a port to your app\n\nYou need to choose a port you want your app to run on. You do this by adding this following to your `server.js` file:\n\n```\n    [...]\n    app.listen('3120')\n    [...]\n```\n\nAt this point the backend server is all set up. Now we need to go to the views to see how data is passed to the server.\n\n## Setting up the frontend\n\nCreate a `views` directory. In the views directory create your `index.ejs` and `charge.ejs`:\n\n```\n    mkdir views \u0026\u0026 cd views\n    touch index.ejs charge.ejs\n```\n\nIn our `index.ejs` we need to accept user payment. To make it more secure when handling card information, Stripe has an embedded payment form called [Checkout](https://stripe.com/docs/checkout/tutorial) which we will use to collect user's card data securely. The following is a truncated version of the form that sends data to our server. You can see the complete [code on github](https://github.com/christiannwamba/realtime-payment-dashboard/blob/master/views/index.ejs).\n\n```\n    \u003cform method=\"POST\" action=\"http://localhost:3120/gen-payment\" enctype=\"multipart/form-data\"/\u003e\n        \u003cscript\n            src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\n            data-key=\"PUSBLISHABLE_API_KEY\"\n            data-amount=\"500\"\n            data-name=\"Pay OG\"\n            data-description=\"Send money to OG\"\n            data-image=\"https://stripe.com/img/documentation/checkout/marketplace.png\"\n            data-locale=\"auto\"\u003e\n        \u003c/script\u003e\n    \u003c/form\u003e\n```\n\nWe submit the form to the `/gen-payment` route on our server. We include the `checkout.js` script and the following :\n\n- data-key: your publishable `API_KEY` gotten from your [dashboard](https://dashboard.stripe.com/account/apikeys)\n- data-amount: the amount you plan on charging\n- data-name: name of the store\n- data-description: description of your payment\n- data-image: store image\n\nOnce this is sent to the server and the request is completed successfully, we render the `charge.ejs` view to the user telling the use that their payment is complete:\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime Payment Dashboard\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e \n        \u003clink rel=\"stylesheet\" href=\"https://codepen.io/drehimself/pen/VvYLmV.css\"\u003e \n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cnav\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cul class=\"navbar-left\"\u003e\n                \u003cli\u003e\u003ca href=\"#\"\u003eHome\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#about\"\u003eAbout\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n            \n                \u003cul class=\"navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"#\" id=\"cart\"\u003e\u003ci class=\"fa fa-shopping-cart\"\u003e\u003c/i\u003e Cart \u003cspan class=\"badge\"\u003e0\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e \n        \u003c/nav\u003e\n                \n        \u003cscript\u003e\n            alert(\"Payment Complete\");\n        \u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n## Setting up the admin dashboard\n\nWe want our admin dashboard to show completed payments as they are made without having to refresh the page. To do this, we are going to make use of [Vue.js](https://vuejs.org) and [Pusher](https://pusher.com).\n\nBefore we begin, we need to install the `vue-cli` by running the following command:\n\n```\n    npm install -g vue-cli\n```\n\nThis will install it globally on our local machine. To confirm your installation of the `vue-cli` you can run:\n\n```\n    vue --version\n```\n\nIf you get the version number as a result then you're all set!\n\nTo create the `admin` server, run the following command in the `realtime-dashboard` directory:\n\n```\n    vue init webpack admin\n```\n\nThis will ask you a few questions on project name, description, author, etc. then it will create a new Vue project for us with some boilerplate already set up.\n\n## Installing the pusher-js module\n\nWe need to install `pusher-js` module that allows us to use pusher with our vue frontend. To do this, change directory into the admin directory and run the following command:\n\n```\n    npm install -S pusher-js\n```\n\n### Creating the dashboard component\n\nNow we want to create our `dashboard` component:\n\n```\n    cd admin/src/components\n    touch Dashboard.vue\n```\n\nIn the `Dashboard.vue`, we need to import the `pusher.js` module:\n\n```\n    \u003cscript\u003e\n    import Pusher from 'pusher-js'\n    [...]\n```\n\nWe then create some mock payments to populate the dashboard:\n\n```\n    [...]\n    const MOCK_PAYMENTS = [\n      {time : '12th Dec, 2017', description: \"Shoes\", value : \"$5\"},\n      {time : '12th Dec, 2017', description: \"Maga don pay\", value : \"$12\"}\n    ]\n    [...]\n```\n\nNow we describe our component itself:\n\n```\n    [...]\n    export default {\n      name: 'Dashboard',\n      data () {\n        return {\n          payments : MOCK_PAYMENTS\n        }\n      },\n      created () {\n        this.subscribe();\n      },\n      methods: {\n        subscribe () {\n          let pusher = new Pusher('PUSHER_API_KEY', {\n              cluster: 'PUSHER_CLUSTER',\n              encrypted: true\n          });\n          pusher.subscribe('sales');\n          pusher.bind('payment-completed', data =\u003e {\n            this.payments.unshift(data);\n          });\n        }\n      }\n    }\n    \u003c/script\u003e\n    [...]\n```\n\nIn the `subscribe` method above, we subscribe to the `sales` channel and then listen for the `payment-completed` event. When a new `payment-completed` event is broadcast from the backend server on the `sales`, our frontend server picks it up and the adds it to the `payments` array of the component.\n\nThe `Dashboard.vue` also has a template which looks like this:\n\n```\n    [...]\n    \u003ctemplate\u003e\n      \u003cdiv class=\"container-fluid\"\u003e\n        \u003ctable class=\"table table-striped\"\u003e\n          \u003cthead\u003e\n            \u003ctr\u003e\n              \u003ctd\u003eTime\u003c/td\u003e\n              \u003ctd\u003eValue\u003c/td\u003e\n              \u003ctd\u003eDescription\u003c/td\u003e\n            \u003c/tr\u003e\n          \u003c/thead\u003e\n    \n          \u003ctbody\u003e\n            \u003ctr v-for=\"payment in payments\"\u003e\n              \u003ctd\u003e{{ payment.time }}\u003c/td\u003e \n              \u003ctd\u003e{{ payment.value }}\u003c/td\u003e   \n              \u003ctd\u003e{{ payment.description }}\u003c/td\u003e   \n            \u003c/tr\u003e \n          \u003c/tbody\u003e\n        \u003c/table\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    [...]\n```\n\nAnd some scoped css styling: \n\n```\n    \u003cstyle scoped\u003e\n    h1, h2 {\n      font-weight: normal;\n    }\n    ul {\n      list-style-type: none;\n      padding: 0;\n    }\n    li {\n      display: inline-block;\n      margin: 0 10px;\n    }\n    a {\n      color: #42b983;\n    }\n    .table{\n      background-color : white;\n    }\n    \u003c/style\u003e\n```\n\n### Importing the dashboard component in our App.vue\n\nNow that our dashboard component is ready, we need to import it in our `App.vue` so that I would be picked up when the view is being compiled\n\n```\n    [...]\n    import Dashboard from './components/Dashboard'\n    export default {\n      name: 'app',\n      components: {\n        Dashboard\n      }\n    }\n    [...]\n```\n\nOnce this is done, you should be ready to run your frontend server. You can can do this using the command:\n\n```\n    npm run dev\n```\n\nNow you can run the `Dashboard` side-by-side with the `Store` and then see as purchases are being made in realtime:\n\n![realtime-payment-dashboard-stripe-demo](//images.contentful.com/1es3ne0caaid/1LkoYsTPec4goWWyAGYaSu/fe6153d7fc28ccc4a5e74c6ffbc4ba33/realtime-payment-dashboard-stripe-demo.gif)\n\n## Conclusion\n\nWe have seen how to build a realtime payment dashboard using Pusher, Stripe and some Vue.js. There are many more use cases where realtime functionality will give you an edge. A big advantage is that you get to obtain realtime insights as to how users interact with your application.","metaTitle":"Build a realtime payment dashboard with Stripe","metaDescription":"Learn how to build a live payment dashboard with Stripe, Vue.js and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2U9mAVUR3aeeW2YIM24W2O","type":"Entry","createdAt":"2018-02-22T15:02:42.776Z","updatedAt":"2018-02-28T14:43:57.656Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed in Android ","url":"activity-feed-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/feed-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Discover how you can create a realtime activity feed for your Android app.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"We'd like to track and visualize our applications in a central place. Feeds are great for this! Let's build an Android app with an activity feed showing the temperature of your home.\n\nIn this tutorial, using [Pusher](https://pusher.com), we are going to build a feed as an Android app to monitor the activity of a [Node.js](https://nodejs.org) REST API. Every time an endpoint of the API is hit, it will publish an event with some information (let's say temperatures) to a channel. This event will be received in realtime, on all the connected Android devices.\n\nThis is how our final Android app will look like:\n\n![activity-feed-android-demo](//images.contentful.com/1es3ne0caaid/1WGAtH6OC86GEaAKKWm2YS/1b76e83dad7a0470f499e2ccbd382b59/activity-feed-android-demo.gif)\n\nFor the back-end, we will be using [Node.js](https://nodejs.org) with [Express](https://expressjs.com) to create a simple REST API. A basic knowledge of Node/Express is required to understand the code, but we won't be using a database or anything special so you can replace this stack with the one you're most comfortable with. The source code of this part is also available on [Github](https://github.com/eh3rrera/node-api-pusher).\n\nSo let's get started!\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![activity-feed-android-create-app](//images.contentful.com/1es3ne0caaid/2yiZXxFDc4ys0Ui0acuK8E/e942424e38712df4c88e55a5e4d0ad44/activity-feed-android-create-app.png)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as your back-end tech. This will give you some sample code to get you started:\n\n![activity-feed-android-pusher-libraries](//images.contentful.com/1es3ne0caaid/4Yi7ILOJhCE46KmqeKC4yy/acef29d86deb38cdf3d95d1b1b739e12/activity-feed-android-pusher-libraries.png)\n\nBut don't worry, this won't lock you into this specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## The Node server\n\nFirst, let's create a default `package.json` configuration file with:\n\n``` \nnpm init -y\n```\n\nWe'll need Express, Pusher, and other dependencies, let's add them with:\n\n``` \nnpm install --save express body-parser pusher\n```\n\nIn case a future version of a dependency breaks the code, here's the dependencies section on the `package.json` file:\n\n```\n{\n  ...\n    \"dependencies\": {\n    \"body-parser\": \"1.16.0\",\n    \"express\": \"4.14.1\",\n    \"pusher\": \"1.5.1\"\n  }\n}\n```\n\nNext, create a [server.js](https://github.com/eh3rrera/node-api-pusher/blob/16b75dcd39cde3bb0f454bfed808a7e80e8c8c93/server.js) file. First, let's require the modules we're going to need:\n\n```\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar crypto = require('crypto');\nvar Pusher = require('pusher');\n```\n\nThen, configure the Express object:\n\n```\nvar app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n\nNext, the Pusher object is created by passing the configuration object with the ID, key, and the secret for the app created in the [Pusher Dashboard](https://dashboard.pusher.com):\n\n```\nvar pusher = new Pusher({\n  appId      : process.env.PUSHER_APP_ID,\n  key        : process.env.PUSHER_APP_KEY,\n  secret     : process.env.PUSHER_APP_SECRET,\n  encrypted  : true,\n});\n```\n\nPusher will be used to publish any events that happen in our application. These events have a *channel*, which allows events to relate to a particular topic, an *event-name* used to identify the type of the event, and a *payload*, which you can attach any additional information to the message.\n\nWe are going to publish an event to a Pusher channel when an endpoint of our API is called to create/update/delete a record, and send the information as an attachment so we can show it in an activity feed.\n\nHere's the definition of our API's REST endpoints. Notice how an ID for the record is created using the first four characters of the `hex` string generated by `crypto.randomBytes(16)` (to avoid using an external library):\n\n```\napp.post('/api', function (req, res) {\n  var event = {\n    data: req.body.data,\n    id: crypto.randomBytes(16).toString('hex').substring(0, 4),\n  };\n\n  // Do something with the data...\n\n  // Publish event to the Pusher channel\n  pusher.trigger(channel, 'created', event);\n\n  res.status(200).json(event);\n});\n\napp.route('/api/:id')\n  // PUT  endpoint to update a record\n  .put(function (req, res) {\n    var event = {\n     data: req.body.data,\n     id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'updated', event);\n\n    res.status(200).json(event);\n  })\n\n  // DELETE  endpoint to delete a record\n  .delete(function (req, res) {\n    var event = {\n      id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'deleted', event);\n\n    res.status(200).json(event);\n  });\n```\n\nThis way, a POST request like this:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\"\n}\n```\n\nWill return something like the following:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\",\n  \"id\": \"d2t6\"\n}\n```\n\nWe start the server with:\n\n```\napp.listen(3000, function () {\n  console.log('Node server running on port 3000');\n});\n```\n\nAnd that's all. To run the server, execute the following command passing your Pusher credentials:\n\n``` \nPUSHER_APP_ID=XXXXXX PUSHER_APP_KEY=XXXXXX PUSHER_APP_SECRET=XXXXXX node server.js\n```\n\n## The android app\n\nOpen Android Studio and create a new project:\n\n![activity-feed-android-create-project](//images.contentful.com/1es3ne0caaid/1Kv2lAKIY4mwoY2Mywq0gI/8c26426d81ec3da7247246baff95fc9a/activity-feed-android-create-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![activity-feed-android-target-device](//images.contentful.com/1es3ne0caaid/27mSDfxqYowQs80KIOcQAM/96714408b4c7866569e31c57eaa54aa3/activity-feed-android-target-device.png)\n\nNext, create an initial empty activity:\n\n![activity-feed-android-add-activity](//images.contentful.com/1es3ne0caaid/5LmK2Ij7NemKwsmoe4Es84/47eb17b20b83969fd71ce839df85865c/activity-feed-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![activity-feed-android-customize-activity](//images.contentful.com/1es3ne0caaid/3q9QEPf3NmOKco6S2aiciM/121fdec6ed6f91779d08ddd69e0488b8/activity-feed-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.android.support:cardview-v7:25.1.1'\n    compile 'com.github.curioustechizen.android-ago:library:1.3.2'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\n\nAt the time of this writing, the latest SDK version is 25, so that's my target SDK version.\n\nWe're going to use the `RecyclerView` and `CardView` components from the [Support Library](https://developer.android.com/topic/libraries/support-library/features.html), so make sure you have it installed (in *Tools -\u003e Android -\u003e SDK Manager -\u003e SDK Tools tab* the *Android Support Repository* must be installed).\n\nSync the Gradle project so the modules can be installed and the project built.\n\nBefore we forget (I always do), let's add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.feed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\nIf you want to modify the style of the app, in the `res/values` folder, modify the [colors.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/colors.xml) file so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003cresources\u003e\n    \u003ccolor name=\"primary\"\u003e#03A9F4\u003c/color\u003e\n    \u003ccolor name=\"primary_dark\"\u003e#0288D1\u003c/color\u003e\n    \u003ccolor name=\"primary_light\"\u003e#B3E5FC\u003c/color\u003e\n    \u003ccolor name=\"accent\"\u003e#FF4081\u003c/color\u003e\n    \u003ccolor name=\"primary_text\"\u003e#212121\u003c/color\u003e\n    \u003ccolor name=\"secondary_text\"\u003e#757575\u003c/color\u003e\n    \u003ccolor name=\"icons\"\u003e#FFFFFF\u003c/color\u003e\n    \u003ccolor name=\"divider\"\u003e#BDBDBD\u003c/color\u003e\n\u003c/resources\u003e\n```\n\nAs well as the [styles.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/styles.xml) file to match these color definitions:\n\n```\n\u003cresources\u003e\n\n    \u003c!-- Base application theme. --\u003e\n    \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n        \u003c!-- Customize your theme here. --\u003e\n        \u003citem name=\"colorPrimary\"\u003e@color/primary\u003c/item\u003e\n        \u003citem name=\"colorPrimaryDark\"\u003e@color/primary_dark\u003c/item\u003e\n        \u003citem name=\"colorAccent\"\u003e@color/accent\u003c/item\u003e\n    \u003c/style\u003e\n\n\u003c/resources\u003e\n```\n\nNow, modify the layout file [activity_main.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/activity_main.xml) so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.pusher.feed.MainActivity\"\u003e\n\n    \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_alignParentLeft=\"true\"\n        android:layout_alignParentStart=\"true\"\n        android:id=\"@+id/recycler_view\"\n        android:scrollbars=\"vertical\" /\u003e\n\u003c/RelativeLayout\u003e\n```\n\nWe're going to use a [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html) to display the events, which we'll store in a list. Each item in this list is displayed in an identical manner, so let's define another layout file to inflate each item.\n\nCreate the file [event_row.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/event_row.xml) with the following content:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    card_view:cardCornerRadius=\"4dp\"\n    card_view:cardElevation=\"4dp\"\n    card_view:cardUseCompatPadding=\"true\"\n    card_view:contentPadding=\"8dp\"\u003e\n\n    \u003cRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceLarge\"\n            android:text=\"Event\"\n            android:id=\"@+id/event\"\n            android:layout_alignParentTop=\"true\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceMedium\"\n            android:text=\"ID\"\n            android:id=\"@+id/id\"\n            android:layout_below=\"@+id/event\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003ccom.github.curioustechizen.ago.RelativeTimeTextView\n            android:id=\"@+id/timestamp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceSmall\"\n            android:layout_below=\"@+id/id\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Data\"\n            android:id=\"@+id/data\"\n            android:layout_below=\"@+id/timestamp\"\n            android:textAlignment=\"center\"\n            android:layout_marginTop=\"8dp\" /\u003e\n    \u003c/RelativeLayout\u003e\n\n\u003c/android.support.v7.widget.CardView\u003e\n```\n\nHere we're using a [CardView](https://developer.android.com/reference/android/support/v7/widget/CardView.html) to show the information inside a card, with shadows and rounded corners. For each item, we're going to present:\n\n- A `TextView` for the name of the event (*created*, *updated*, or *deleted*).\n- A `TextView` for the ID of the record (for example, *c2d6*).\n- A [RelativeTimeTextView](https://github.com/curioustechizen/android-ago), a custom `TextView` that displays the relative time with respect to the reference point (the moment the event is received), automatically refreshing the text as needed.\n- A `TextView` for the data contained in the record (anything the user sends, for example, *Temperature: 80°F*).\n \nNow, to store the information of each event, let's create a class, [com.pusher.feed.Event](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/Event.java):\n\n```\npublic class Event  {\n    private String name;\n    private String id;\n    private String data;\n\n    public Event(String name, String eventId, String data) {\n        this.name = name;\n        this.id = eventId;\n        this.data = data;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getData() {\n        return data;\n   }\n}\n```\n\n`RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source (in this case a list of `Event` instances), and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item, so first create the class [com.pusher.feed.EventAdapter](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/EventAdapter.java) with the following code:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private List\u003cEvent\u003e items;\n\n    public EventAdapter(List\u003cEvent\u003e items) {\n        this.items = items;\n    }\n\n    public void addEvent(Event event) {\n        // Add the event at the beginning of the list\n        items.add(0, event);\n        // Notify the insertion so the view can be refreshed\n        notifyItemInserted(0);\n    }\n\n    @Override\n    public int getItemCount() {\n        return items.size();\n    }\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n\n    }\n}\n```\n\nWe initialize the class with a list of `Event`, provide a method to add `Event` instances at the beginning of the list (`addEvent(Event)`) and then notify the insertion so the view can be refreshed, and implement `getItemCount` so it returns the size of the list.\n\nThen, let's add the `ViewHolder` as an inner class, it references the `View` components for each item in the list:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private ArrayList\u003cEvent\u003e items;\n\n    public static class EventViewHolder extends RecyclerView.ViewHolder {\n        // Card fields\n        public TextView event;\n        public TextView id;\n        public RelativeTimeTextView timestamp;\n        public TextView data;\n\n        public EventViewHolder(View v) {\n            super(v);\n            event = (TextView) v.findViewById(R.id.event);\n            id = (TextView) v.findViewById(R.id.id);\n            timestamp = (RelativeTimeTextView) v.findViewById(R.id.timestamp);\n            data = (TextView) v.findViewById(R.id.data);\n        }\n    }\n\n    ...\n}\n```\n\nAnd implement the methods `onCreateViewHolder` and `onBindViewHolder`:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    ...\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.event_row, viewGroup, false);\n\n        return new EventViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n        Event event = items.get(i);\n\n        viewHolder.event.setText(event.getName());\n        viewHolder.id.setText(event.getId());\n        viewHolder.timestamp.setReferenceTime(System.currentTimeMillis());\n        viewHolder.data.setText(event.getData());\n    }\n}\n```\n\nIn the `onCreateViewHolder` method, we inflate the layout with the content of the `event_row.xml` file we created earlier, and in `onBindViewHolder`, we set the values of the views with the event in turn. Notice how we set the reference time on `RelativeTimeTextView` so it can display a text like *Just now* or *10 minutes ago*.\n\nIn the class [com.pusher.feed.MainActivity](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/MainActivity.java), let's start by defining the private fields we're going to need:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    private RecyclerView.LayoutManager lManager;\n    private EventAdapter adapter;\n    private Pusher pusher = new Pusher(\"ENTER_PUSHER_APP_KEY_HERE\");\n    private static final String CHANNEL_NAME = \"events_to_be_shown\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ....\n    }\n}\n```\n\n`RecyclerView` works with a [LayoutManager](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html) to handle the layout and scroll direction of the list. We declare the `EventAdapter`, the `Pusher` object and the identifier for the Pusher channel. Remember to replace your Pusher app key, if you still don't have one, this would be a good time to [sign up for a free account](https://pusher.com/signup) and [create you app](https://dashboard.pusher.com).\n\nInside the `onCreate` method, let's assign a [LinearLayoutManager](https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html) to the `RecyclerView` and create the `EventAdapter` with an empty list:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get the RecyclerView\n        RecyclerView recycler = (RecyclerView) findViewById(R.id.recycler_view);\n\n        // Use LinearLayout as the layout manager\n        lManager = new LinearLayoutManager(this);\n        recycler.setLayoutManager(lManager);\n\n        // Set the custom adapter\n        List\u003cEvent\u003e eventList = new ArrayList\u003c\u003e();\n        adapter = new EventAdapter(eventList);\n        recycler.setAdapter(adapter);\n    }\n}\n```\n\nFor the Pusher part, we first subscribe to the channel:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n}\n```\n\nThen, we create the listener that will be executed when an event arrives:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    ...\n    SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Event evt = gson.fromJson(data, Event.class);\n                        evt.setName(event + \":\");\n                        adapter.addEvent(evt);\n                        ((LinearLayoutManager)lManager).scrollToPositionWithOffset(0, 0);\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\nHere, the JSON string that we receive is converted to an `Event` object, the name of the event is set to the name of the event received, and the object is added to the adapter. Finally, we move to the top of the list.\n\nNext, bind the events to this listener and call the `connect` method on the Pusher object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        channel.bind(\"created\", eventListener);\n        channel.bind(\"updated\", eventListener);\n        channel.bind(\"deleted\", eventListener);\n\n        pusher.connect();\n    }\n}\n```\n\nThe `connect` method can take a listener that can be helpful to debug problems you might have:\n\n```\npusher.connect(new ConnectionEventListener() {\n    @Override\n    public void onConnectionStateChange(ConnectionStateChange change) {\n        System.out.println(\"State changed to \" + change.getCurrentState() +\n            \" from \" + change.getPreviousState());\n    }\n\n   @Override\n    public void onError(String message, String code, Exception e) {\n        System.out.println(\"There was a problem connecting!\");\n        e.printStackTrace();\n    }\n});\n```\n\nFinally, `MainActivity` also needs to implement the `onDestroy()` method so we can have the opportunity to unsubscribe from Pusher when the activity is destroyed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n}\n```\n\nAnd that's all the code on the Android part. Let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![activity-feed-android-deploy-app](//images.contentful.com/1es3ne0caaid/CFHd4HGgfYmmOc42MgO40/f530f27b6586deb77c4d711817697e80/activity-feed-android-deploy-app.png)\n\nYou'll be presented with an almost blank screen:\n\n![activity-feed-android-app](//images.contentful.com/1es3ne0caaid/63EKVtRYqcssUa6MmcwGY4/27d4d24fdb3dc81d4366dba37fc441f1/activity-feed-android-app.png)\n\nFor the back-end, you can use something to call the API endpoints with a JSON payload, like [cURL](https://curl.haxx.se/):\n\n``` \n# POST\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"data\":\"Temperature: 80°F\"}' http://localhost:3000/api\n# PUT\ncurl -H \"Content-Type: application/json\" -X PUT -d '{\"data\":\"Temperature: 85°F\"}' http://localhost:3000/api/aqw3\n# DELETE\ncurl -X DELETE http://localhost:3000/api/aqw3\n\n# In Windows, change single quotes to quotation marks and escape the ones inside curly brackets\ncurl -H \"Content-Type: application/json\" -X POST -d \"{\\\"data\\\":\\\"Temperature: 80°F\\\"}\" http://localhost:3000/api\n\n# Or use file, for example data.json\ncurl -H \"Content-Type: application/json\" -X POST --data @data.json http://localhost:3000/api\n```\n\nOr use a tool like [Postman](https://www.getpostman.com/):\n\n![activity-feed-android-postman](//images.contentful.com/1es3ne0caaid/3jUxsuEEgUM8c6mmEwiuGU/ab37f83253c98a637d66b8837a45baf9/activity-feed-android-postman.png)\n\nWhen a request is received on the API side, the event will show up in the app:\n\n![activity-feed-android-app-test](//images.contentful.com/1es3ne0caaid/4XKXil7es0EGkICAqgUA4S/cb52327f73792a6adb269b506bbd36fa/activity-feed-android-app-test.png)\n\nOr if you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![activity-feed-android-pusher-debug-console](//images.contentful.com/1es3ne0caaid/74tDZ8NMlyosmg6MU6kWIG/1cfe3514ad6666e8578c3e196a53431b/activity-feed-android-pusher-debug-console.png)\n\n## Conclusion\n\nHopefully, this tutorial has shown you in an easy way how to build an activity feed for Android apps with Pusher. You can improve the app by changing the design, showing more information, or saving it to a database.\n\n## Further reading\n\n- [Pusher Java client](https://github.com/pusher/pusher-websocket-java)\n- [Android-ago](https://github.com/curioustechizen/android-ago)\n- [Activity's lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle.html)\n- [Creating Lists and Cards](https://developer.android.com/training/material/lists-cards.html)","metaTitle":"Build an activity feed in Android ","metaDescription":"Build a live activity feed in Android using Java, Node.js and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"BYMUj9H49E08Wi8GKWM0E","type":"Entry","createdAt":"2018-02-28T12:21:17.268Z","updatedAt":"2018-06-21T09:23:00.104Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a cryptocurrency tracker using Vue.js","url":"cryptocurrency-tracker-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/sample-vue-pwa-cryptocurrency-watcher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-09","description":"In this tutorial, learn how to build a live cryptocurrency tracking view with Progressive Web Apps, Vue.js and Node.js.","prerequisite":"A basic understanding of Vue.js, Node.js and PWA is needed to follow this tutorial.","content":"PWAs (Progressive Web Applications) has already been identified as the future of web applications and the reason is quite obvious. PWAs let you build web apps that are capable of delivering native app-like experiences to users.\n\nFrom sending push notifications, to caching data for offline retrieval, to background sync, Progressive web apps have got you completely covered. PWAs can also ensure that users are engaged and up to date with dynamic data even with very poor network connections.\n\n\u003e Progressive Web App (PWA) is a term used to denote web applications that use the latest web technologies. Progressive Web Apps, also known as Installable Web Apps or Hybrid Web Apps, are regular web pages or websites but can appear to the user like traditional applications or native mobile applications. The application type attempts to combine features offered by most modern browsers with the benefits of mobile experience. - [Wikipedia](https://en.wikipedia.org/wiki/Progressive_web_app)\n\nThis article demonstrates how to build a simple realtime PWA with Vue.js and Pusher.\nVue.js is a Progressive Web Framework for JavaScript, it’s easy to use, and requires relatively little code to produce awesome results.\n\nFor the realtime part of this application, we will be plugging in Pusher’s JavaScript library. Pusher is a realtime engine that makes it easy to add realtime functionalities to applications.\n\n## What we’ll be building\n\nIn this article, we will be building a cryptocurrency application called “KryptoWatcher”. Its function is to display the price updates of three cryptocurrencies (Bitcoin, Ethereum, and Litecoin) in realtime. The price updates will be obtained from the Cryptocompare API.\n\nKryptoWatcher will also be able to travel five days into the past and retrieve coin data for those days. Here’s a visual display of what the final application will look like:\n\n![cryptocurrency-tracker-vue-demo](//images.contentful.com/1es3ne0caaid/70YNXoNPl6cuAOAmS0SW8a/3b318c61b0a19378604ac5607a3201eb/cryptocurrency-tracker-vue-demo.gif)\n\nThe best part of it all is that, after this app runs once, it can run again and display coin data even without an internet connection. This is possible because we’ll build `KryptoWatcher` to cache the coin data on the first run.\n\nLet’s start putting the pieces together.\n\n## Requirements\n\nTo follow along in this tutorial, you will need to have the following:\n- Knowledge of [Vue.js](https://vuejs.org/).\n- [Vue CLI](https://vuejs.org/v2/guide/installation.html#CLI) installed on your machine.\n- [Node and NPM](https://docs.npmjs.com/getting-started/installing-node) installed on your machine.\n- Knowledge of Node.js and Express framework.\n- Knowledge of JavaScript.\n- A Pusher Application. [Create one here](https://pusher.com).\n\nOnce you have requirements we can move on to setting up our application.\n\n## Setting up your Pusher application\n\nCreate a [Pusher account](https://pusher.com/), if you have not already, and then set up your application as seen in the screenshot below.\n\n![cryptocurrency-tracker-vue-create-app](//images.contentful.com/1es3ne0caaid/4dQB7DXuQEyecCwE06AuSy/3d775f17a03b1895f67c6e8b80e65e2f/cryptocurrency-tracker-vue-create-app.png)\n\nWhen you have completed the set up, take note of your Pusher application keys as we will need them later on.\n\n## Setting up our Vue.js PWA application\n\nYou can think of the Vue CLI tool as a lightweight tool for scaffolding Vue.js projects. To start building our application we will use the Vue CLI tool to pull in the [Vue PWA template](https://github.com/vuejs-templates/pwa) that we will be working with. \n\nTo create our application run the following command on your terminal:\n\n```\n    $ vue init pwa krypto-watcher\n```\n\nYou’ll be presented with prompts and a few ‘Yes’ or ‘No’ questions. You can answer most as you see fit, however, for the “Y” or “N” prompts, since we do not require the additional functionalities and features, let’s respond with “N” to all the queries.\n\n\n![cryptocurrency-tracker-vue-project-details](//images.contentful.com/1es3ne0caaid/64HwW3fkUouk2OuuGMkmeC/d7b56613d14ecc9f66bb25b55b3e248a/cryptocurrency-tracker-vue-project-details.png)\n\n\nThe template gives us awesome PWA features out of the box. One such feature is the service worker. The service worker allows our application to work offline.\n\n\n\u003e 💡  A service worker is a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction.\n\nTo install the dependencies, go to your terminal window and run the following command:\n \n```\n    $ cd krypto-watcher \u0026\u0026 npm install\n```\n\nIf you take a look at your project directory, you will find that it contains a few subfolders: `build`, `config`, `src`, `static`, `test`. Let’s open the `build/webpack.prod.conf.js` file and take a quick peek at the `SWPrecacheWebpackPlugin` object:\n\n```\n    new SWPrecacheWebpackPlugin({\n        cacheId: 'krypto-watcher',\n        filename: 'service-worker.js',\n        staticFileGlobs: ['dist/**/*.{js,html,css}'],\n        minify: true,\n        stripPrefix: 'dist/'\n    })\n```\n\nWhat this does is generate a new service worker when the application is built (with the `npm run build` command).\n\nThe service worker will cache all the files that match the glob expression, for offline access, in `staticFileGlobs` which currently points to a non-existent `dist` folder. The `dist` directory will be created when we build our application.\n\nLet’s start building out our application component by component.\n\n### Vue.js components\n\nSimilar to other modern JavaScript libraries and frameworks like React, Vue allows us to create components when building applications. Components help us keep our application modular and ensure that apps can be separated into reusable modules.\n\nLet’s build `KryptoWatcher` by creating three reusable components:\n\n1. The `Intro` component which will hold the introductory markup and styles for the application.\n2. The `Current` component which will display coin prices in realtime.\n3. The `Previous` component which will display coins prices from ‘x days ago’.\n\nLet us start creating the components. We will be doing them manually however you can always use an NPM package like [this](https://www.npmjs.com/package/vue-generate-component) to make it easier to create components. Create a `src/components` directory and create the following files in the directory: `Intro.vue`, `Current.vue`, and `Previous.vue`.\n\n### The intro component\nThis component has no special functionalities as it just holds the intro markup and styles that will make the app presentable. The HTML goes between the `template` tags and the styles go in the `styles` tag.\n\nIn the `Intro.vue` file paste the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cheader class=\"hero\"\u003e\n        \u003cdiv class=\"bar logo\"\u003e\n          \u003ch3\u003eKryptoWatcher\u003c/h3\u003e\n          \u003cspan class=\"monitor\"\u003e\u003cspan class=\"monitorText\"\u003ereceive updates\u003c/span\u003e\u003c/span\u003e\n        \u003c/div\u003e\n        \u003ch1\u003eRealtime PWA that displays updates on cryptocurrencies\u003c/h1\u003e\n        \u003ch2\u003eBitcoin, Ethereum, Litecoin?\u003c/h2\u003e\n      \u003c/header\u003e\n    \u003c/template\u003e\n    \u003cscript\u003eexport default { name: 'app' }\u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    header {\n        background: linear-gradient(to bottom right, rgb(0, 193, 131),rgb(50, 72, 95));\n        padding: 1em;\n        margin-bottom: 1em;\n        text-align: center;\n        height: 300px;\n        color: #fff;\n    }\n    header h3 {\n        color: white;\n        font-weight: bold;\n        text-transform: uppercase;\n        float: left;\n    }\n    bar { padding: 20px; height: 48px; }\n    .monitor{\n        text-transform: uppercase;\n        float:right;\n        background-color: rgba(255, 255, 255, 0.2);\n        line-height: 23px;\n        border-radius: 25px;\n        width: 175px;\n        height: 48px;\n        margin: auto;\n    }\n    .monitor:hover, monitorText:hover { cursor:pointer; }\n    .monitorText{\n        width: 104px;\n        height: 23px;\n        font-weight: bold;\n        line-height: 50px;\n        font-size: 14px;\n    }\n    header h1 { padding-top: 80px; width: 80%; margin: auto; }\n    header h2{ padding-top:20px; }\n    \u003c/style\u003e\n```\n\nThat is all for the intro component.\n\n### The current component\nIn the `Current.vue` component, we’ll write some HTML that displays the prices in realtime as they are updated. Open the file and paste the following inside the file:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch2\u003eCurrent prices of coins\u003c/h2\u003e\n        \u003cdiv id=\"btc\" class=\"currency\"\u003e\n          \u003clabel\u003e1 BTC\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.BTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"eth\"class=\"currency\"\u003e\n          \u003clabel\u003e1 ETH\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.ETH}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"ltc\"class=\"currency\"\u003e\n          \u003clabel\u003e1 LTC\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nBelow the `template` tags, we will have the `script` tag. This will be where we will handle the scripting of the component. Below the `template` tag in the same file, paste the following code:\n\n```\n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      props: {\n        currentCurrency: { type: Object }\n      }, \n      data () {\n        return {}\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe script above specifies the `props` the `Current` component should expect. It will be getting it, `currentCurrency`, from the parent component `App.vue`.\n\nLastly, below the `script` tag, let’s include the `style` for the component. Paste the following code after the `script` tag:\n\n```\n    \u003cstyle scoped\u003e\n    .currency {\n      border: 1px solid #F5CE00;\n      border-radius: 15px;\n      padding: 2em 0em;\n      display: inline-block;\n      width: 30%;\n    }\n    div p { font-size: 2rem; }\n    h2 { font-size: 1.5em; }\n    \u003c/style\u003e\n```\n\nThat’s all for the `Current` component.\n\n### The previous component\nThis component should display the prices of coins in the past, five days at most. We’ll also display the dates of each of the days.\n\nInside the `Previous.vue` file paste the following code:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch2\u003ePrevious prices of coins\u003c/h2\u003e\n        \u003cdiv id=\"first\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.yesterday.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.yesterday.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.yesterday.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.yesterday.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"second\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.twoDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.twoDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.twoDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.twoDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"third\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.threeDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.threeDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.threeDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.threeDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"fourth\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.fourDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.fourDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.fourDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.fourDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"fifth\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.fiveDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.fiveDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.fiveDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.fiveDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nIn the `script` section, we’ll be receiving the `previousCurrency` object from the parent component, `App.vue`. In the same file paste the following code after the `template` tag:\n\n```\n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      props: {\n        previousCurrency: { type: Object }\n      },\n      data () {\n        return {}\n      }\n    }\n    \u003c/script\u003e\n```\n\nLastly, some styles to help things stay pretty:\n\n```\n    \u003cstyle scoped\u003e\n    #first, #second, #third, #fourth, #fifth {\n      border: 1px solid #F5CE00;\n      padding: 2em 0em;\n      max-width: 90%;\n      margin: 3px auto;\n    }\n    #first p, #second p, #third p, #fourth p, #fifth p {\n      display: inline-block;\n      padding: 0em 1.5em;\n      font-size: 1.5rem;\n    }\n    h2 { font-size: 1.5em; }\n    \u003c/style\u003e\n```\n\nThat’s pretty much all the business we have with the three components, they are pretty straightforward. Most of the complexity and app logic are buried in the root component, `App.vue`. Let’s explore that next.\n\n### Setting up the root component\n\nThe root component is included by default in every fresh Vue installation in the `src/App.vue` file, so we don’t need to create it. Unlike the other components we created earlier, the root component holds the logic and is more complex than them. \n\nWe’ll keep the `template` tag of the root component simple. We include the earlier components, `Intro.vue`, `Current.vue`, and `Previous.vue`, as custom tags and pass in the appropriate `props`.\n\nIn the `App.vue` file, replace the contents with the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003cintro\u003e\u003c/intro\u003e\n        \u003cdiv id=\"body\"\u003e\n          \u003cdiv id=\"current\"\u003e\n            \u003ccurrent v-bind:currentCurrency=\"currentCurrency\"\u003e\u003c/current\u003e\n          \u003c/div\u003e\n          \u003cdiv id=\"previous\"\u003e\n            \u003cprevious v-bind:previousCurrency=\"previousCurrency\"\u003e\u003c/previous\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nNext, let’s add some `script` and start adding logic in the `script` section. Paste the following below the `template` tag:\n\n```\n    \u003cscript\u003e\n    import Intro from './components/Intro.vue';\n    import Current from './components/Current.vue';\n    import Previous from './components/Previous.vue';\n    \n    export default {\n      name: 'app',\n      components: {Intro, Current, Previous},\n      data() {\n        return {\n          currentCurrency: {BTC: '', ETH: '', LTC: ''},\n          previousCurrency: {\n            yesterday: {}, twoDays: {}, threeDays: {}, fourDays: {}, fiveDays: {}\n          }\n        }\n      },\n      methods: {\n        // Stub\n      },\n      created() {\n        // Stub\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe script above does not do much but it sets the stage for our logic. We have set all the defaults for the `data` we will be using in the application and we have defined the `created` method that is called automatically during Vue’s component lifecycle. We also imported the components we will be using in the application.\n\nBefore we start adding script logic, let’s add some style for the root component. Below the `script` tag, paste the following code:\n\n```\n    \u003cstyle\u003e\n    @import url('https://fonts.googleapis.com/css?family=Lato');\n    * {\n      margin : 0px;\n      padding : 0px;\n      font-family: 'Lato', sans-serif;\n    }\n    body { height: 100vh; width: 100%; }\n    .row { display: flex; flex-wrap: wrap; }\n    h1 { font-size: 48px; }\n    a { color: #FFFFFF; text-decoration: none; }\n    a:hover { color: #FFFFFF; }\n    a:visited { color: #000000; }\n    .button {\n      margin: auto;\n      width: 200px;\n      height: 60px;\n      border: 2px solid #E36F55;\n      box-sizing: border-box;\n      border-radius: 30px;\n    }\n    #body {\n      max-width: 90%;\n      margin: 0 auto;\n      padding: 1.5em;\n      text-align: center;\n      color:rgb(0, 193, 131);\n    }\n    #current { padding: 2em 0em; }\n    #previous { padding: 2em 0em; }\n    \u003c/style\u003e\n```\n\n### Adding methods to our root component\n\nWe need to populate the `method` object with actual methods. We’ll start by defining the methods that will retrieve coin prices for previous days.\n\n### Pulling in dependencies\nSince we are getting data from a remote API, we need an HTTP client to pull in the data for us. In this article, we’ll be using the promise based HTTP client [axios](https://github.com/axios/axios) to make our HTTP requests. We also need [moment](https://momentjs.com/) to easily work with dates.\n\nTo add Axios and Moment.js to our project, run the following command in your terminal:\n\n```\n    npm install --save vue-axios axios vue-momentjs moment\n```\n\n\u003e 💡  `vue-axios` and `vue-momentjs` are Vue wrappers around the Axios and Moment.js packages.\n\nWhen the installation is complete, we will globally import the packages to our application. Open the `src/main.js` file and in there replace:\n\n```\n    import App from './App'\n```\n\nwith:\n\n```\n    import App from './App'\n    import moment from 'moment';\n    import VueMomentJS from 'vue-momentjs';\n    import axios from 'axios'\n    import VueAxios from 'vue-axios'\n     \n    Vue.use(VueAxios, axios)\n    Vue.use(VueMomentJS, moment);\n```\n\n### Building the methods logic\nNext, we want to go back to our root component and build out the `methods` object. In the `methods` object, let’s create the first method. Paste the following code inside the `methods` object in the `App.vue` file:\n\n```\n    _fetchDataFor: (key, daysAgo) =\u003e {\n      var date = this.$moment().subtract(daysAgo, 'days').unix()\n      let fetch = (curr, date) =\u003e this.axios.get(`https://min-api.cryptocompare.com/data/pricehistorical?fsym=${curr}\u0026tsyms=USD\u0026ts=${date}`)\n      \n      this.axios\n          .all([fetch('BTC', date), fetch('ETH', date), fetch('LTC', date)])\n          .then(this.axios.spread((BTC, ETH, LTC) =\u003e {\n              this.previousCurrency[key] = {\n                  BTC: BTC.data.BTC.USD,\n                  LTC: LTC.data.LTC.USD,\n                  ETH: ETH.data.ETH.USD,\n                  DATE: this.$moment.unix(date).format(\"MMMM Do YYYY\"),\n              }\n              \n              localStorage.setItem(`${key}Prices`, JSON.stringify(this.previousCurrency[key]));\n          }))\n    },\n```\n\nThe method above is a helper method for fetching the coin exchange rate within a specified period and saving the response in `localStorage` and the `this.previousCurrency` object. We will use this later in the code.\n\nNext, paste the following function inside the `methods`  object alongside the one we added above:\n\n```\n    _fetchDataForToday: () =\u003e {\n      let url = 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD'\n      \n      this.axios.get(url).then(res =\u003e {\n        localStorage.setItem('BTC', this.currentCurrency.BTC = res.data.BTC.USD),\n        localStorage.setItem('ETH', this.currentCurrency.ETH = res.data.ETH.USD),\n        localStorage.setItem('LTC', this.currentCurrency.LTC = res.data.LTC.USD)\n      })\n    },\n```\n\nThe method above simply fetches the coin data for the current date and saves the response to `localStorage` and the `this.currentCurrency` object.\n\nNext, inside the `created()` method of the root component, paste in the following code:\n\n```\n    if ( ! navigator.onLine) {\n      this.currentCurrency = {\n        BTC: localStorage.getItem('BTC'),\n        ETH: localStorage.getItem('ETH'),\n        LTC: localStorage.getItem('LTC'),\n      }\n      \n      this.previousCurrency = {\n        yesterday: JSON.parse(localStorage.getItem('yesterdayPrices')),\n        twoDays:   JSON.parse(localStorage.getItem('twoDaysPrices')),\n        threeDays: JSON.parse(localStorage.getItem('threeDaysPrices')),\n        fourDays:  JSON.parse(localStorage.getItem('fourDaysPrices')),\n        fiveDays:  JSON.parse(localStorage.getItem('fiveDaysPrices'))\n      }\n    } else {\n      this._fetchDataFor('yesterday', 1)\n      this._fetchDataFor('twoDays', 2)\n      this._fetchDataFor('threeDays', 3)\n      this._fetchDataFor('fourDays', 4)\n      this._fetchDataFor('fiveDays', 5)\n      this._fetchDataForToday()\n    }\n```\n\nIn the code above, we have defined the code to fetch the current currency from `localStorage` if the client is offline. If the client is online though, it fetches the data from the API.\n\nEverything should be working now except the realtime functionality.\n\n![cryptocurrency-tracker-vue-draft](//images.contentful.com/1es3ne0caaid/70EsAUqmNqSogEYYgwg640/c70439aeb26fd7963309b4cfb39dce7f/cryptocurrency-tracker-vue-draft.png)\n\n### Integrating realtime functionality using Pusher\n\nNow that we have a functional application, we would like to add some realtime functionality so we see updates as they happen. \n\nWe will be using Pusher to provide this functionality, if you haven’t, create your Pusher application from the Pusher dashboard as you will need the: `app_id`, `key`, `secret` and `cluster`.\n\n#### Building a Node.js backend for our application\nWe need a backend server to trigger events to Pusher, we will be using Node.js to build the backend for this article.\n\nTo get started, create a new file in the root directory of our application and call it `server.js`.\nIn this `server.js` file, we’ll be using `Express` as the web framework so we need to pull that in. We’ll also pull in `axios`, `Pusher` and `body-parser` since we’d be making references to them in our code.\n\nIn your terminal type in the following command:\n\n```\n    $ npm install --save express axios body-parser pusher\n```\n\nWhen the installation is complete, open the `server.js` file and in the file paste in the following code:\n\n```\n    const express = require('express');\n    const path = require('path');\n    const bodyParser = require('body-parser');\n    const app = express();\n    const Pusher = require('pusher');\n    const axios = require('axios');\n    \n    \n    // Initialise Pusher\n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // Body parser middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // CORS middleware\n    app.use((req, res, next) =\u003e {\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        next()\n    });\n    \n    // Routes\n    app.get('/', _ =\u003e res.send('Welcome'));\n    \n    // Simulated Cron\n    setInterval(_ =\u003e {\n      let url = 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD';\n      \n      axios.get(url).then(res =\u003e {\n        pusher.trigger('price-updates', 'coin-updates', {coin: res.data})\n      })\n    }, 5000)\n    \n    // Start app\n    app.listen(8000, () =\u003e console.log('App running on port 8000!'));\n```\n\n\u003e 💡  You need to replace `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, and `PUSHER_APP_CLUSTER` with the details from your Pusher application dashboard.\n\nIn the Express app above, we import our dependencies and then instantiate Pusher. We then register some middleware including the [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) middleware so we don’t get cross origin request errors.\n\nNext, we have a “Simulated Cron” that runs after 5 seconds. The job is to fetch the updates from the server and send the updates to Pusher. Our Vue application can then subscribe to the Pusher channel, pull the changes and display them.\n\nFinally, we tell the Node app to listen on port **8000**. To start the Node server, run the command below:\n\n```\n    $ node server.js \n```\n\nThis will start a Node server and the simulated cron will start running and sending events to Pusher.\n\n## Creating an API proxy\n\nTo access our API server from the Vue application, we can create a proxy in `config/index.js` and run the dev server and the API backend side-by-side. All requests to `/api` in our frontend code will be proxied to the backend server.\n\nOpen the `config/index.js` and make the following modifications:\n\n```\n    // config/index.js\n    module.exports = {\n      // ...\n      dev: {\n        // ...\n        proxyTable: {\n            '/api': {\n            target: 'http://localhost:8000',\n            changeOrigin: true,\n            pathRewrite: {\n              '^/api': ''\n            }\n          }\n        },\n        // ...\n      }\n    }\n```\n\nIn the `proxyTable` we attempt to proxy requests from `/api` to `localhost:8000`. \n\n### Using Pusher in our Vue.js application\nTo use `Pusher` on the client side of our application we need to pull in the `pusher-js`. Run the following command in your terminal:\n\n```\n    $ npm install --save pusher-js\n```\n\nWhen the installation is complete, we will import `pusher-js` to the root component. Within the `script` tag add the following at the top:\n\n```\n    import Pusher from 'pusher-js'\n```\n\nNext we will initialize Pusher with the app credentials from the Pusher dashboard and subscribe to a channel in the `created()` life cycle hook. Open the `App.vue` and add this to the bottom of the `created()` method in the `else` block:\n\n```\n    let pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    let channel = pusher.subscribe('price-updates');\n    \n    channel.bind('coin-updates', data =\u003e {\n      this.currentCurrency = {\n        BTC: data.coin.BTC.USD, \n        ETH: data.coin.ETH.USD, \n        LTC: data.coin.LTC.USD\n      }\n    });\n```\n\nIn the code above, we subscribe to receive updates on the `price-updates` channel. Then we bind to the `coin-updates` event on the channel. When the event is triggered, we get the data and update the `currentCurrency`.\n\nThat’s all now. You can build the application by running the command below:\n\n```\n    $ npm run dev\n```\n\nThis should start and open the Vue PWA on your browser. To make sure you receive updates, make sure your Node server is running. \n\n![cryptocurrency-watcher-vue-demo](//images.contentful.com/1es3ne0caaid/4beBtBCJjqiWK4GKa0Mw0i/13f64db1b24726b8b3e19ccb17aa92a6/cryptocurrency-watcher-vue-demo.gif)\n\n## Using service workers and offline capability\n\nAs it is, the application already functions but is not a PWA in true sense of the term. So let us work on making the application a PWA with offline storage. The build process already automatically generates the service worker when the application is built so let’s build the application. Run the following command to build the application:\n\n```\n    $ npm run build\n```\n\nThis command creates a `dist` folder in our working directory and also registers a new service worker. Let’s serve this `dist` directory and take a peek at the generated service worker in a Chrome web browser.\n\nWe’ll serve this application using an NPM package called [Serve](https://www.npmjs.com/package/serve). Run the following command to install it:\n\n```\n    $ npm i serve -g\n```\n\nWhen the installation is complete, we will use the package to serve the application. Run the following command to serve the application:\n\n```\n    $ serve dist\n```\n\nWe should get an output that looks like this:\n\n\n![cryptocurrency-tracker-vue-output](//images.contentful.com/1es3ne0caaid/5D35dFM7PGssemAeMO0IcS/2563dfc1d3b90732117be8babc5ae2d0/cryptocurrency-tracker-vue-output.png)\n\n\nIf we navigate to this address `http://localhost:5000` on our web browser, we’d see our application as it was the last time, no obvious changes except for the fact that the app is now a PWA.\n\nWe can inspect this feature by opening the browser’s dev tools and clicking on the “Application” tab. Here’s what we should see:\n\n\n![cryptocurrency-tracker-vue-service-workers](//images.contentful.com/1es3ne0caaid/1V3EsE6wwoicCOo6KQgiG0/35da6aa92c35a46419c58dacb08b7a3a/cryptocurrency-tracker-vue-service-workers.png)\n\n\nOur app registered a service worker that caches the app shell on the first run, thanks to the Vue PWA template.\n\n\n\u003e 💡  An application shell (or app shell) refers to the local resources that your web app needs to load the skeleton of your user interface (UI). Think of your app's shell like the bundle of code you would publish to a native app store when building a native app.\n\n\n## Conclusion\n\nIn this tutorial, we have seen how to write a simple realtime PWA with Vue.js, Pusher and Service Workers. We also saw how to cache dynamic values from a remote API using the Web Storage API’s storage object. There is a lot more you can do with PWAs and Vue, but this is a good introduction so far.","metaTitle":"Build a cryptocurrency tracker using Vue.js","metaDescription":"In this tutorial, learn how to build a realtime cryptocurrency tracker using Progressive Web Apps, Vue.js, Node.js and and Service Workers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1W0o3xrMZWMK4SuGQUAIo","type":"Entry","createdAt":"2018-02-28T11:57:19.883Z","updatedAt":"2018-02-28T11:57:19.883Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime map using Kotlin","url":"realtime-map-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-map-example-kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-09","description":"In this tutorial, you will learn how to build a realtime map using Kotlin, Node.js and Google Maps API.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"Just as the name implies, the aim of this article is to show the realtime movement of a marker on a map. This feature is common in location tracking applications. We see taxi apps and food ordering apps making use of features like this. Google provides an extremely easy map API, which we will take advantage of, while the realtime functionalities will be taken care of by Pusher. \n\n## What we will build\n\nWe will build an application that will receive coordinates from the server based on the initial coordinates we inject into it. When these coordinates are received, we update the map on our app.\n\n![realtime-map-kotlin-demo](//images.contentful.com/1es3ne0caaid/5u93CRuILe084MwgCgwym6/e3ad9d2c35219aa3f3c2820d3f8fae3d/realtime-map-kotlin-demo.gif)\n\n## Requirements\n\nFor this tutorial, we need the following:\n- [Android studio](https://developer.android.com/studio/archive.html) - version 3.0.1 or higher is recommended.\n- [Node JS](https://nodejs.org/) and npm installed on your machine.\n- A [Pusher](https://dashboard.pusher.com) application.\n- [Google Maps API key](https://developers.google.com/maps/documentation/android-api/signup).\n- An Android device with Google Play Services installed.\n\n## Building our server\n\nWe will build our server using Node JS. The server will generate random coordinates for us. To start with, create a new folder. Inside it, create a new file named `package.json` and paste this:\n\n```\n    {\n        \"main\": \"index.js\",\n        \"dependencies\": {\n            \"body-parser\": \"^1.16.0\",\n            \"express\": \"^4.14.1\",\n            \"pusher\": \"^1.5.1\"\n        }\n    }\n```\n\nNext, create file called `index.js` in the root directory and paste this:\n\n```\n    // Load the required libraries\n    let Pusher = require('pusher');\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    \n    // initialize express and pusher\n    let app = express();\n    let pusher = new Pusher(require('./config.js'));\n    \n    // Middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Generates 20 simulated GPS coords and sends to Pusher\n    app.post('/simulate', (req, res, next) =\u003e {\n      let loopCount = 0\n      let operator  = 0.001000  \n      let longitude = parseFloat(req.body.longitude)\n      let latitude  = parseFloat(req.body.latitude)\n    \n      let sendToPusher = setInterval(() =\u003e {\n        loopCount++;\n    \n        // Calculate new coordinates and round to 6 decimal places...\n        longitude = parseFloat((longitude + operator).toFixed(7))\n        latitude  = parseFloat((latitude - operator).toFixed(7))\n    \n        // Send to pusher\n        pusher.trigger('my-channel', 'new-values', {longitude, latitude})\n    \n        if (loopCount === 20) {\n          clearInterval(sendToPusher)\n        }\n      }, 2000);\n      \n      res.json({success: 200})\n    })\n    \n    // Index\n    app.get('/', (req, res) =\u003e res.json(\"It works!\"));\n    \n    // Serve app\n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'));\n```\n\nThe code above is an Express application. In the `/simulate` route, we are simulating longitude and latitude values and then sending them to Pusher. These will then be picked by our application. \n\n\u003e 💡 The longitude and latitude values will typically be obtained from the device being tracked in a real-life scenario.\n\nFinally, we will create the configuration file, named `config.js`. Paste this snippet there:\n\n```\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n    };\n```\n\nReplace the values there with the keys from your Pusher dashboard. Then install the modules needed by our server by running this command in the root directory:\n\n```\n    $ npm install\n```\n\nOur server should be up and running on port **4000**.\n\n\n## Building our realtime map in Android Studio\n\n### Create a new Android project\nOpen Android studio and create a new project. Enter your application details, include Kotlin support, choose a minimum SDK (this should not be less than API 14), choose an Empty Activity, and finish the process. Here is a quick GIF of the process:\n\n![realtime-map-kotlin-create-project](//images.contentful.com/1es3ne0caaid/1VNHmrSYbuOCuWUGMsQS4i/97fc57e24e9d9bfce38468218383b651/realtime-map-kotlin-create-project.gif)\n\n### Adding app dependencies\nThis demo has several dependencies. We need the Pusher dependency for realtime functionality, the Google Maps API for easy integration of maps into our app, and Retrofit to access our server with ease. \n\nOpen your app-module `build.gradle` file and paste the following dependencies:\n\n```\n    // Pusher dependency\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n    \n    // Google maps API\n    implementation 'com.google.android.gms:play-services-maps:11.8.0'\n    \n    // Retrofit dependencies\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nSync your Gradle files so that the libraries can be downloaded and made available.\n\n### Building our layout\nOpen the `activity_main.xml` and paste this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\u003e\n        \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:tools=\"http://schemas.android.com/tools\"\n            android:layout_marginTop=\"50dp\"\n            android:id=\"@+id/map\"\n            android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            tools:context=\"com.example.mapwithmarker.MapsMarkerActivity\" /\u003e\n        \u003cButton\n            android:id=\"@+id/simulateButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Simulate\" /\u003e\n    \n    \u003c/FrameLayout\u003e\n```\n\nIn the snippet above, we have a fragment which will hold our map and a button.\n\n### Setting up Google Maps API key\nIt is expected that at this point, you have obtained your API key. You can follow the steps [here](https://developers.google.com/maps/documentation/android-api/signup) to get it. We now want to configure the application with our key. Open your `strings.xml` file and paste it in. This is located at `name-of-project/app/src/main/res/values`:\n\n```\n    \u003cresources\u003e\n        \u003c!-- ... --\u003e\n        \u003cstring name=\"google_maps_key\"\u003eGOOGLE_MAPS_KEY\u003c/string\u003e\n    \u003c/resources\u003e\n```\n\n\u003e ⚠️  Replace the `GOOGLE_MAPS_KEY` placeholder with the actual key from Google.\n\nThis file contains all strings used during the development of the application. All raw strings within the app are kept here. It is required when there is a need to translate your app into multiple languages.\n\nNext, open the `AndroidManifest.xml` file and paste these under the `\u003capplication\u003e` tag:\n\n```\n    \u003cmeta-data\n        android:name=\"com.google.android.gms.version\"\n        android:value=\"@integer/google_play_services_version\" /\u003e\n    \u003cmeta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"@string/google_maps_key\" /\u003e\n```\n\nWith this, our app knows how and where to fetch our key.\n\n### Setting up Retrofit\nWe already have Retrofit available as a dependency, but we need two more things - an interface to show endpoints/routes to be accessed and our retrofit object. First create a new Kotlin file name `ApiInterface.kt` and paste this:\n\n```\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.POST\n    \n    interface ApiInterface {\n        @POST(\"/simulate\")\n        fun sendCoordinates(@Body coordinates: RequestBody): Call\u003cString\u003e\n    }\n```\n\nSince we will make just one request in this demo, we will limit the scope of our Retrofit object to the `MainActivity.kt` class. This means we will create a function within a class for it. Paste this function into the class:\n\n```\n    fun getRetrofitObject(): ApiInterface {\n        val httpClient = OkHttpClient.Builder()\n        val builder = Retrofit.Builder()\n                .baseUrl(\"http://10.0.3.2:4000/\")\n                .addConverterFactory(ScalarsConverterFactory.create())\n    \n        val retrofit = builder\n                .client(httpClient.build())\n                .build()\n        return retrofit.create(ApiInterface::class.java)\n    }\n```\n\nI used a Genymotion emulator and the recognized localhost address for it is `10.0.3.2`.\n\nAdd the internet permission to the `AndroidManifest.xml` file:\n\n```\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\n### Configuring our map and getting realtime updates\nFor us to initialize and use the map, our the `MainActivity.kt` class must implement the `OnMapReadyCallback` interface and override the `onMapReady` method. We also need to setup Pusher to listen to events and receive the simulated coordinates in realtime. Open your `MainActivity.kt` and paste this:\n\n```\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.util.Log\n    import com.google.android.gms.maps.*\n    import com.google.android.gms.maps.model.MarkerOptions\n    import com.google.android.gms.maps.model.LatLng\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import okhttp3.MediaType\n    import okhttp3.OkHttpClient\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    import okhttp3.RequestBody\n    import com.google.android.gms.maps.model.CameraPosition\n    import com.google.android.gms.maps.model.Marker\n    \n    class MainActivity : AppCompatActivity(), OnMapReadyCallback {\n        private lateinit var markerOptions:MarkerOptions\n        private lateinit var marker:Marker\n        private lateinit var cameraPosition:CameraPosition\n        var defaultLongitude = -122.088426\n        var defaultLatitude  = 37.388064\n        lateinit var googleMap:GoogleMap\n        lateinit var pusher:Pusher\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            markerOptions = MarkerOptions()\n            val latLng = LatLng(defaultLatitude,defaultLongitude)\n            markerOptions.position(latLng)\n            cameraPosition = CameraPosition.Builder()\n                    .target(latLng)\n                    .zoom(17f).build()\n    \n        }\n    \n        override fun onMapReady(googleMap: GoogleMap?) {\n            this.googleMap = googleMap!!\n            marker = googleMap.addMarker(markerOptions)\n            googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n        }\n    }\n```\n\nWe first created some class variables to hold our initial coordinates and other map utilities like the camera position and the marker position. We initialized them in the `onCreate` function. Next, we added a click listener to the simulate button. \n\nThe next thing to do is still in the `MainActivity.kt` class. In the `onCreate` method, paste this:\n\n```\n    simulateButton.setOnClickListener {\n        callServerToSimulate()\n    }\n```\n\nWhen the button is clicked, it calls the `callServerToSimulate` function. Create a function `callServerToSimulate` within the class like this:\n\n```\n    private fun callServerToSimulate() {\n        val jsonObject = JSONObject()\n        jsonObject.put(\"latitude\",defaultLatitude)\n        jsonObject.put(\"longitude\",defaultLongitude)\n    \n        val body = RequestBody.create(\n            MediaType.parse(\"application/json\"), \n            jsonObject.toString()\n        )\n    \n        getRetrofitObject().sendCoordinates(body).enqueue(object:Callback\u003cString\u003e{\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                Log.d(\"TAG\",response!!.body().toString())\n            }\n    \n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                Log.d(\"TAG\",t!!.message)\n            }\n        })\n    }\n```\n\nIn this function, we sent our initial coordinates to our server. The server then generates twenty coordinates similar to the initial ones sent and uses Pusher to send them to channel `my-channel`, firing the `new-values` event.\n\nNext, we create and initialize a `SupportMapFragment` object with the view ID of the map:\n\n```\n    val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\n    mapFragment.getMapAsync(this)\n    setupPusher()\n```\n                \nNext add the the `setupPusher` function to the class and it should looks like this:\n\n```\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(PUSHER_CLUSTER)\n        pusher = Pusher(PUSHER_API_KEY, options)\n    \n        val channel = pusher.subscribe(\"my-channel\")\n    \n        channel.bind(\"new-values\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val lat:Double = jsonObject.getString(\"latitude\").toDouble()\n            val lon:Double = jsonObject.getString(\"longitude\").toDouble()\n    \n            runOnUiThread {\n                val newLatLng = LatLng(lat, lon)\n                marker.position = newLatLng\n                cameraPosition = CameraPosition.Builder()\n                        .target(newLatLng)\n                        .zoom(17f).build()\n                googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n            }\n        }\n    }\n```\n\nWe initialized Pusher here and listened for coordinate updates. When we receive any update, we update our marker and move the camera view towards the new point. You are expected to replace the Pusher parameters with the keys and details found on your Pusher dashboard.\n\nWe then call the disconnect and connect functions in the `onPause` and `onResume` functions respectively in the class. These functions are inherited from the parent class `AppCompatActivity`:\n\n```\n    override fun onResume() {\n        super.onResume()\n        pusher.connect()\n    }\n    \n    override fun onPause() {\n        super.onPause()\n        pusher.disconnect()\n    }\n```\n\n## Conclusion\n\nWe have been able to leverage the power of Pusher, Kotlin and Google Maps API to create a realtime location tracking app. Hopefully you have picked up a thing or two from the tutorial and can use the knowledge to build beautiful realtime apps using Pusher and Kotlin.","metaTitle":"Build a realtime map using Kotlin","metaDescription":"The intersection of geolocation and technology has become a very important part of our live. This tutorial is going to help your on how you can create a live map with Kotlin and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ceAhJsxrIkC8A8AkggoEE","type":"Entry","createdAt":"2018-02-28T12:44:04.737Z","updatedAt":"2018-05-29T09:15:34.681Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime comments feature with Nest.js","url":"realtime-comments-nestjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/live-comments-nest","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}}],"reviewDate":"2018-01-23","description":"Leverage from the power of Next.js and TypeScript and build a live comments feature into your application.","prerequisite":"A basic understanding of TypeScript and Node.js is needed to follow this tutorial.","content":"In this article, I will show you how to simply add realtime functionality to a Nest.js application by leveraging the powerful features offered by Pusher. Nest.js is a sever-side Node framework which leverages the power of TypeScript. It’s progressive and scales with whatever size of project you throw at it.\n\nTypescript is the modern style of writing JavaScript, making it easy to debug and organize code base for very large and complicated apps. The obvious difference is that TypeScript  adds type information to the code.\n\nAlthough there are a handful of libraries to develop web applications in Node.js, mostly with JavaScript, here I will introduces a robust Node.js framework called Nest.js. It introduces a new way of building scalable applications by using TypeScript. \n\nDespite being built with TypeScript, Nest.js still preserves compatibility with pure JavaScript. This means you can still write pure JavaScript while developing applications with Nest.js.\n\nWhat we will build in this article will keep you acquainted with the essential building blocks of a Nest.js application. And you can easily improve on this and explore some other structures and architecture of Nest.js. \n\n## Why Nest.js\n\nNest.js focuses on solving the issues of Architecture on the server-side. According to the documentation [here](https://docs.nestjs.com/), Nest.js aims to provide an applications architecture out of the box. This will allow developers to seamlessly create highly scalable, loosely coupled and easily maintainable applications. \n\n## Building block of Nest.js\n\nBefore building with Nest.js, lets have a quick overview of the important building blocks used when building applications:\n\n- Modules: The `@Module()` decorator provides metadata, which **Nest** uses to organize the application structure.\n- Controllers: The controllers layer is responsible for handling incoming **requests**, and return a **response** to the client.\n- Components: Almost everything is a component – Service, Repository, Factory, Helper [...] and they can be **injected** into controllers or into other components through `constructor`.\n\nYou can read more about these [here](https://docs.nestjs.com/controllers).\n\n## What we’ll build\n\nWe are going to create a very simple commenting system, where a user can post comments and see the posted message in realtime. To simplify things, there won’t be any need to persist posted comments into the database. We will basically emit an event with added comment(s), subscribe to the channel and update data in realtime.\n\n![realtime-comments-nestjs-demo](//images.contentful.com/1es3ne0caaid/2OLeu9OMEwsO8SuYiG0qEm/f76bf6bd5682b3939827b24d5cc380d7/realtime-comments-nextjs-demo.gif)\n\n## Install Node\n\nNest.js is basically a Node.js appplication and, as such, it will require Node and NPM to install the required dependency. Download Node and Npm [here](https://nodejs.org/en/).\n\n## Set up the application\n\nWe will set up Nest.js applications quickly by cloning the starter project on GitHub:\n\n```\n    git clone https://github.com/nestjs/typescript-starter.git nest-comment\n```\n\nThis will download a copy of the starter project in a local directory `nest-comment`. Now you can change directory into the new folder, install all the required dependencies and finally run the application:\n\n```\n    // change directory\n      cd nest-comment\n      \n    // install dependencies\n      npm install\n```\n\n## Running the application\n\nAfter installing all dependencies, we now can start the application:\n\n```\n    npm run start\n```\n\nThen navigate to the browser and open `localhost:300`:\n\n![realtime-comments-nestjs-hello-world](//images.contentful.com/1es3ne0caaid/6oJOyWQhz2SyIAW8iQoMEw/6cc32a2b32df6ccf134f6b8a75872a7d/realtime-comments-nextjs-hello-world.png)\n\n## Pusher setup\n\n[Register for a free pusher account](https://pusher.com/signup), if you don’t have one already. Then go ahead and create an app from your dashboard and copy out the credentials as you will be required to use them later in this tutorial.\n\n![realtime-comments-nestjs-create-app](//images.contentful.com/1es3ne0caaid/5B1dwpJiAo0gmC6KOScUeW/fd5db316ad359100462c3bbaf21b0668/realtime-comments-nextjs-create-app.png)\n\nWe are building a JavaScript frontend and backend so we choose JavaScript and Node.js respectively.\n\n## Create first controller\n\nControllers in Nest.js are responsible for handling incoming HTTP requests and returning a response to the client, just like every other HTTP framework. The starter project we just downloaded has a controller already created within `./src/modules/app.controller.ts`. For the purpose of this tutorial, we will create a basic controller to handle the necessary requests for our application to function as specified. \n\nTo have a proper folder structure, create a new directory for comments `./src/modules/comments`. \n\nNow create the controller  `./src/modules/comments/comments.controller.ts` and paste the following code in it:\n\n```\n    import { Controller, Get, Post, Body, Req, Res } from '@nestjs/common';\n    import { Comment } from './interface/comment';\n    import { CommentService } from './comments.service';\n    \n    @Controller('comments')\n    export class CommentsController {\n        constructor(private commentsService: CommentService){}\n        @Get()\n        getComments(@Req() req, @Res() res, err) {\n            res.render('index');\n        }\n    \n        @Post()\n        createComment(@Res() res, @Body() comment: Comment) {\n            this.commentsService.create(comment);\n            res.status(201).send('created');\n        }\n    }\n```\n\nIn the code above, we only imported modules necessary to create a basic controller for a Nest.js application. The metadata attached to the class allows Nest.js to know how the controller needs to be mapped to the appropriate routes. To do this, we are using the decorators `@Controller('comments')` , where `comments` represent a prefix for each route registered in the class.\n\nIn order to define the syntax that needs to be adhered to when parameters are being inputted by users, we created and included a TypeScript class. This helps provides a standard structure that should be followed if you have more than one property that needs to be used. This is basic and has only one property `message`:\n\n```\n    // .src/modules/comments/interface/comment.ts\n    \n    export class Comment {\n        message: string;\n        constructor(message: string) {\n            this.message  = message;\n        }\n    }\n```\n\nAlso a `CommentService` class was imported and injected into the controller through the constructor. This service is a component in Nest.js. It handles any complex tasks instead of them being handled by the controller. We will create this service in a bit.\n\nInstall the following node modules:\n\n```\n    npm install body-parser pusher ejs \n```\n\n## Create component\n\nComponents are plain TypeScript class decorators. It plays, amongst other things, the role of abstracting the business logic away from the controller. \n\nAs evident from the code below, the service created for this application contains one method, `create()`, which is responsible for creating comments.  Lets create a component `./src/modules/comments/comments.service.``ts`:\n\n```\n    import {Component, OnModuleInit } from '@nestjs/common';\n    import { Comment } from './interface/comment';\n    \n    @Component()\n    export class CommentService implements OnModuleInit {\n        \n        create(comment: Comment) {\n        ...\n        }\n    }\n```\n\n## Realtime features on the server\n\nWe want to send the payload to all connected clients when an item is created. Here, we initialise Pusher with the required credentials obtained from the application dashboard:\n\n```\n    create(comment: Comment) {\n            const Pusher = require('pusher');\n            \n            var pusher = new Pusher({\n                appId: 'YOUR_PUSHER_APP_ID',\n                key: 'YOUR_PUSHER_APP_KEY',\n                secret: 'YOUR_PUSHER_SECRET',\n                cluster: 'YOUR_CLUSTER',\n                encrypted: true\n              });\n        \n              pusher.trigger('comment', 'comment_data', comment);\n        }\n```\n\n\nLastly, to make both the controller and the component created available, we need to import and add them to the root module `./src/modules/app.module.ts` . Open it and fill with this:\n\n```\n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    import { CommentsController } from './comments/comments.controller';\n    import { CommentService } from './comments/comments.service';\n    @Module({\n      modules: [],\n      controllers: [AppController, CommentsController],\n      components: [CommentService],\n    })\n    export class ApplicationModule {} \n```\n\n## Set up the views\n\nAt the moment, we have completed setting up the backend of this application as most of the logic has been handled by nest’s Controller and Component. To render the content within the view, we install the EJS module earlier on for this purpose. EJS is a JavaScript templating library. Let’s configure our application to use EJS. Open `./src/server.ts`:\n\n\n```\n    import { NestFactory } from '@nestjs/core';\n    import { ApplicationModule } from './modules/app.module';\n    import * as bodyParser from 'body-parser';\n    import * as Express from 'express';\n    \n    let server = new Express();\n    \n    async function bootstrap() {\n        const app = await NestFactory.create(ApplicationModule, server);\n        app.use(bodyParser.json());\n        server.set('view engine', 'ejs');\n        await app.listen(3000);\n    }\n    bootstrap();\n```\n\nTo configure our application to use EJS, we imported Express and created an instance with the name `server`. This was use to set EJS as the view engine as evident from the code above. By default the `NestFactory``.create()` method takes an Express instance as a second argument. This is deliberate as Nest.js allows developers to have full control of the Express instance life cycle.\n\nNext, within the root directory make a new folder `views` and create an `index.``ejs` file within it:\n\n\n```\n    // ./views/index.ejs\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\"\u003e        \n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/pusher/4.2.2/pusher.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.17.1/axios.js\"\u003e\u003c/script\u003e\n        \u003ctitle\u003eDocument\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cnav class=\"navbar navbar-default\" role=\"navigation\"\u003e\n            \u003cdiv class=\"container-fluid\"\u003e\n                \n                \u003cdiv class=\"navbar-header\"\u003e\n                    \u003ca class=\"navbar-brand\" href=\"#\"\u003e\n                        \u003cspan class=\"glyphicon glyphicon glyphicon-tree-deciduous\"\u003e\u003c/span\u003e\n                        Nest Js\n                    \u003c/a\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003cdiv class=\"container\" id=\"app\"\u003e\n            \u003cmain\u003e            \n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-md-8\"\u003e\n                        \u003cform method=\"post\" action=\"/comments\"\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                                \u003cinput type=\"text\" class=\"form-control\" name=\"message\" placeholder=\"Type your comments\"\u003e\n                            \u003c/div\u003e\n                            \n                            \u003cdiv class=\"form-group\"\u003e\n                                \u003cbutton class=\"btn btn-success\" type=\"submit\"\u003eSubmit\u003c/button\u003e\n                            \u003c/div\u003e\n                        \u003c/form\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e \n            \u003c/main\u003e\n        \u003c/div\u003e\n        \u003cscript\u003e\n        //.....\n        //.....\n        //.....\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code imports Vue, Pusher, and Axios. Vue will simplify how we interact with the DOM while the Pusher client helps us to connect with our Pusher instance on the server. Axios will be used to send the HTTP Post request to the `/comments` endpoint.\n\nUpdate the script tag before the body closing tag to show this log:\n\n```\n    new Vue({\n                el: '#app',\n                data() {\n                    return {\n                        comments: [],\n                        comment: {\n                            message: ''\n                        }\n                    }\n                },\n                created() {\n                    let pusher = new Pusher('PUSHER_KEY', {\n                        cluster: 'PUSHER_CLUSTER',\n                        encrypted: true\n                    });\n                    const channel = pusher.subscribe('comment');\n                    channel.bind('comment_data', data =\u003e {\n                        this.comments.push(data);\n                    });\n                },\n                methods: {\n                    submitComment() {\n                        axios.post('/comments', this.comment).then((data) =\u003e {\n                            console.log(data)\n                        })\n                    }\n                }\n            })\n```\n\nAs you can see, the `created` lifecycle method listens for changes and updates our DOM based on the new comments emitted by the server. The `submitComment` method is triggered every time we submit the comment form. It uses Axios to send the `comment` payload to the server.\n\n## Run the application\n\nStop and run the sever again. Then navigate to this endpoint  `http://localhost:3000/comments`:\n\n\n![realtime-comments-nextjs-hello-world](//images.contentful.com/1es3ne0caaid/4R8q1mzyTKqIwaoQisAWsi/3424502ebdd67b2a6d1f8795136ff4bb/realtime-comments-nextjs-hello-world.png)\n\n\nThis basically renders the content within `index.ejs`. It contains a header bar and form to post comments.\n\n\nRemember we already subscribed to the channel that emits data once comments are being posted. To display the comments, we will iterate over the `comments`:\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n    ...\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cnav class=\"navbar navbar-default\" role=\"navigation\"\u003e\n        ...\n    \u003c/nav\u003e\n    \n    \u003cdiv class=\"container\" id=\"app\"\u003e\n        \u003cmain\u003e\n            \u003cdiv class=\"jumbotron\"\u003e\n                \u003ch3\u003eComments\u003c/h3\u003e\n                \u003cul\u003e\n                    \u003cli v-for=\"comment in comments\"\u003e\n                        {{comment.message}}\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/main\u003e\n                    \n        \u003cdiv class=\"row\"\u003e\n            ...\n         \u003c/div\u003e\n    \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n# \n```\n\nStop and run the sever again. Then navigate to this endpoint  `http://localhost:3000/comments`:\n\nhttps://www.youtube.com/watch?v=xaMUyaYUvoQ\n\nNow, you can post a comment and see it updated in realtime.\n\n## Final thoughts\n\nNest.js introduces a new approach to building web applications in Node.js. The usage of TypeScript helps to manage and create a properly structured application. As we saw in this article, with the help of Pusher, we were able to add realtime functionality to Nest.js. The source code for the app can be found on [GitHub](https://github.com/christiannwamba/live-comments-nest).","metaTitle":"Build a realtime comments feature with Nest.js","metaDescription":"In this tutorial, learn more about Next.js and how you can build a live comments feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Oj0XeT59CGOEuY24sUwEK","type":"Entry","createdAt":"2018-02-28T14:04:12.045Z","updatedAt":"2020-06-19T13:18:43.153Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Android ","url":"realtime-table-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-android-table","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}}],"reviewDate":"2018-01-19","description":"In this tutorial, build a simple live table for Android devices with Java.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"If you are building an app that handles extensive amounts of data, you might want to implement realtime tables at some point. Let’s take a content management system for instance. Large amounts of data are added and removed often, and we would like the changes to be available to consumers in realtime. \n\nIn this tutorial, we will be utilizing the Pusher Android SDK's client-side library to quickly and easily build a realtime data table. \n\nWe’ll be using a few developer tools to achieve this fit, including:\n\n- [Android Studio](https://developer.android.com/studio/intro/index.html) - The Official IDE for Android Development, it provides the fastest tools for building apps on every type of Android device.\n- [Pusher](https://pusher.com/) - A free, realtime, easy to use pub/sub service. Pusher makes realtime as easy as using basic events.\n\nThe flow of our app is that the user will fill out a form to add a new employee to an employees table and click a “save” button. This will send a POST request to our server. In this tutorial, we will use a simple NodeJS server to provide a single API endpoint.\nOnce our server receives the POST request, it will render the data to all connected clients, which will show the data on their tables in realtime.\n\nHere is a glimpse of what we are going to build:\n\n![realtime-table-android-add-employee](//images.contentful.com/1es3ne0caaid/2GYgpYFQIESI8eaEMaICIC/269bb72f1bbfd90ebbe4e7fbef85438e/realtime-table-android-add-employee.jpg)\n\n![realtime-table-android-employee-1](//images.contentful.com/1es3ne0caaid/58oMsLwdvq4EA0U8S0eacM/d7c0b9a0204d906e19411cae59743f63/realtime-table-android-employee-1.jpg)\n\n![realtime-table-android-employee-3](//images.contentful.com/1es3ne0caaid/1aHlfafnXuoqmqsg0Uiq8/92d5b45f60e9d8b2b063abf446680343/realtime-table-android-employee-3.jpg)\n\n## Set Up\n### Create a new project:\n\n\n1. Open Android Studio and select New Project from the File menu.\n2. Set the minimum SDK for the app to be API 16 (Android 4.1, Jelly Bean).\n3. Click through the wizard, ensuring that Empty Activity is selected. Leave the Activity Name set to `MainActivity`, and leave the Layout Name set to `activity_main`.\n\n\n### Add the Pusher Android SDK to gradle:\n\nOnce you’ve set up your application on Android Studio, or your preferred IDE, then install Pusher as a dependency. In the `build.gradle` file of your application module, add:\n \n```\n    repositories {\n      maven { url 'http://clojars.org/repo' }\n    }\n    \n    dependencies {\n      compile 'com.pusher:pusher-java-client:1.0.0'\n      compile 'com.loopj.android:android-async-http:1.4.9' \n      compile 'com.google.code.gson:gson:2.2.4' \n    }\n```\n\nSync the gradle project. Pusher along with other modules we’ll need later, should now be installed. \n\nHowever, you can find your Pusher credentials when you create an app after [signing up for a free account](https://pusher.com/signup). Be sure to keep them handy for when we start adding some realtime features. \n\n## Client-Side\n### Creating the form\n\nIn the created project, open the `activity_main.xml` file and create the input form to collate the user details:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"#fff\"\u003e\n    \u003cScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\u003e\n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            android:layout_margin=\"10dp\"\n            android:layout_centerVertical=\"true\"\n            android:background=\"@drawable/layoutstyle\"\n            android:layout_centerHorizontal=\"true\"\u003e\n    \n            \u003cTextView\n                android:layout_gravity=\"center\"\n                android:layout_margin=\"16dp\"\n                android:textSize=\"20sp\"\n                android:textStyle=\"bold\"\n                android:textColor=\"#000\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Add Employee\"/\u003e\n    \n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtName\"\n                android:padding=\"8dp\"\n                android:fontFamily=\"serif\"\n                android:textColor=\"#fff\"\n                android:hint=\"Name\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n    \n            \u003cEditText\n                android:padding=\"8dp\"\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtAge\"\n                android:fontFamily=\"serif\"\n                android:textColor=\"#fff\"\n                android:layout_width=\"match_parent\"\n                android:hint=\"Age\"\n                android:layout_height=\"wrap_content\" /\u003e\n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtPosition\"\n                android:padding=\"8dp\"\n                android:textColor=\"#fff\"\n                android:hint=\"Position\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:fontFamily=\"serif\"\n                android:id=\"@+id/edtAddress\"\n                android:padding=\"8dp\"\n                android:textColor=\"#fff\"\n                android:hint=\"Address\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n    \n            \u003cButton\n                android:id=\"@+id/BtnSave\"\n                android:layout_gravity=\"center\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:onClick=\"AddEmployee\"\n                android:text=\"Save\"/\u003e\n    \n          \u003c/LinearLayout\u003e\n        \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e \n```\n\nNext we define some custom button styles and layout styles to give our app the desired user interface as can be seen in the snapshots earlier posted. So create two new drawable files called buttonstyle.xml and layoutstyle.xml and copy the codes therein into them.\nThese files only add round shapes to the EditText fields and LinearLayout. Hence, you could decide not to add my designs to your own work. However, to run the app with my designs and avert any xml errors, simply copy these files from the gist we attached above and paste in your own drawable files or simply delete every occurrence of `buttonstyle.xml` or `layoutstyle``.xml` in your xml. Your app will work just fine either way.\n\nThen open the `MainActivity.java` class and update it as follows to provide references to the EditText objects. This allows us to get the text from them:\n\n```\n    package com.example.ekene.pushapp;\n    \n    import android.support.v7.app.AppCompatActivity;\n    import android.os.Bundle;\n    import android.widget.EditText;\n    \n    public class MainActivity extends AppCompatActivity {\n    \n      private EditText edtName, edtAge, edtPosition, edtAddress;\n      private Button btnSave;\n      @Override\n      protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    \n        edtName = (EditText)findViewById(R.id.edtName);\n        edtAddress = (EditText)findViewById(R.id.edtAddress);\n        edtAge = (EditText)findViewById(R.id.edtAge);\n        edtPosition = (EditText)findViewById(R.id.edtPosition);\n       }\n    }\n```\n\n### Creating the table\n\nNext we create the Employee’s Table where we’ll render the form data. We’ll do this with Android Studio’s [TableLayout](https://developer.android.com/reference/android/widget/TableLayout.html) and [TableRow](https://developer.android.com/reference/android/widget/TableLayout.html). So inside the `activity_main.xml` file, just below the form’s Linear Layout, we add:\n\n```\n    \u003cTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textColor=\"#000\"\n        android:textSize=\"20sp\"\n        android:fontFamily=\"serif\"\n        android:text=\"Employees\"\n        android:gravity=\"center\"/\u003e\n    \n        \u003cTableLayout\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/table_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cTableRow\n                android:layout_height=\"wrap_content\"\n                android:layout_width=\"match_parent\"\n                android:id=\"@+id/table_row1\"\n                android:padding=\"10dp\"\u003e\n    \n                \u003cTextView\n                    android:id=\"@+id/name\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:textColor=\"#000\"\n                    android:text=\"Name\"/\u003e\n                \u003cTextView\n                    android:id=\"@+id/age\"\n                    android:textColor=\"#000\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Age\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/position\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Position\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/address\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"location\"/\u003e\n    \n            \u003c/TableRow\u003e\n            \u003cView\n                android:layout_height=\"3dip\"\n                android:layout_width=\"match_parent\"\n                android:background=\"#ff0000\"/\u003e\n          \u003c/TableLayout\u003e\n        \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```    \n\nBasically, this table is temporarily serving as a mock up for our application at this point. Later on we’’ll be creating the table dynamically with a `ListView`*.*\n\n## Adding new employees to the table\n\nTo add new records to our table, we set up the event listener for the ‘Save’ button like so:\n\n```\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    \n        private EditText edtName, edtAge, edtPosition, edtAddress;\n        private Button btnSave;\n    \n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.activity_main);\n    \n            // get our input fields by its ID        \n              edtName = (EditText)findViewById(R.id.edtName);\n              edtAddress = (EditText)findViewById(R.id.edtAddress);\n              edtAge = (EditText)findViewById(R.id.edtAge);\n              edtPosition = (EditText)findViewById(R.id.edtPosition);\n    \n             // get our button by its ID\n            btnSave = (Button) findViewById(R.id.BtnSave);\n    \n            // set its click listener\n            btnSave.setOnClickListener(this);\n        }\n```\n\nWe’ll then define a method that will execute when the save button is clicked to get the data from our input fields and post to the server.\n\n```\n        @Override\n        public void onClick(View v) {\n            addEmployee();\n        }\n    \n        private void addEmployee()  {\n        }\n```\n\nThe `addEmployee()` method will simply get the values from the `EditText` objects and POST it to the server. In this tutorial, we’ll be using the [AsyncHTTPClient](https://github.com/AsyncHttpClient/async-http-client) library to send records to our server.\n\nSo let’s go ahead with creating and sending our request parameters in the `MainActivity.java` file:\n\n```\n    package com.example.ekene.pushapp;\n    \n    import com.loopj.android.http.AsyncHttpClient;\n    import com.loopj.android.http.JsonHttpResponseHandler;\n    import com.loopj.android.http.RequestParams;\n    import org.json.JSONArray;\n    import android.text.TextUtils;\n    \n    public class MainActivity extends AppCompatActivity {\n    \n        private void addEmployee(View v)  {\n    \n            String employeeName = edtName.getText().toString();\n            String employeeAge = edtAge.getText().toString();\n            String employeePosition = edtPosition.getText().toString();\n            String employeeAddress = edtAddress.getText().toString();\n    \n             // return if the input fields are blank\n                if (TextUtils.isEmpty(employeeName) \u0026\u0026 TextUtils.isEmpty(employeeAge) \u0026\u0026 \n                    TextUtils.isEmpty(employeePosition)\u0026\u0026 \n                    TextUtils.isEmpty(employeeAddress)) {\n                return;\n            }\n            \n            RequestParams params = new RequestParams();\n            // set our JSON object\n            params.put(\"name\", employeeName);\n            params.put(\"age\", employeeAge);\n            params.put(\"position\", employeePosition);\n            params.put(\"address\", employeeAddress);\n    \n            // create our HTTP client\n            AsyncHttpClient client = new AsyncHttpClient();\n            ...\n        }\n```\n\nWe’ll then define a String variable called  `RECORDS_ENDPOINT` in `MainActivity` and set it to point to the URL of our server e.g:\n\n```\n    private static final String RECORDS_ENDPOINT = \"http://localhost:3000/records\";\n```\n\nThen let’s make it so that when the request is successful it clears the `inputFields`, or when it fails it alerts the user that it “Couldn’t Post” with a Toast.\nSo we continue creating our HTTP client inside the `MainActivity` like so:\n\n```\n    ....\n    client.post(RECORDS_ENDPOINT, params, new JsonHttpResponseHandler(){\n    \n        @Override\n        public void onSuccess(\n        int statusCode, \n        cz.msebera.android.httpclient.Header[] headers, \n        JSONArray response) {\n            super.onSuccess(statusCode, headers, response);\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    edtName.setText(\"\");\n                    edtAge.setText(\"\");\n                    edtPosition.setText(\"\");\n                    edtAddress.setText(\"\");\n                }\n            });\n        }\n    \n        @Override\n        public void onFailure(\n        int statusCode, \n        cz.msebera.android.httpclient.Header[] headers, \n        String responseString, \n        Throwable throwable) {\n            super.onFailure(statusCode, headers, responseString, throwable);\n                  Toast.makeText(\n                          getApplicationContext(), \"Couldn't Post!\",\n                          Toast.LENGTH_LONG\n                  ).show();\n          }\n        });\n      }\n    }\n```\n\nAt this point the client is set up to send the input to the server. Next we’ll set up our mini API \n\n## Server-side\n\nAt this point we will integrate Pusher at the back end. Pusher is a simple hosted API for quickly, easily and securely implementing realtime two-way functionality on web and mobile apps. To achieve this, we’ll need to set it up on the server-side.\n\nInstall [NodeJS](https://nodejs.org/en/) and [Express](http://expressjs.com/) if you haven’t already. Generate your table-backend with:\n\n```\n    $ express table-backend \n    $ cd table-backend \n    $ npm install\n```\n\nNow install the [Pusher Node library](http://github.com/pusher-http-node) with:\n\n```\n    $ npm install pusher --save\n```\n\nNow we initialize the `Pusher` object in our `app.js` file with the application credentials:\n\n```\n    var Pusher = require('pusher');\n    var express = require('express');\n    var options = PusherOptions();\n        options.setCluster(PUSHER_APP_CLUSTER);\n    var pusher = new Pusher({\n        appId: \"your app id\",\n        key: \"your app key\",\n        secret: \"your app secret\"    \n    });\n```\n\nNext we create the endpoint that receives JSON from the client. Then we’ll fire up a Pusher event called `new_record` on a channel called `records`, passing along the data we received from the client.\n\n```\n    app.post('/records', function(req, res){\n      var record = req.body;\n      pusher.trigger('records', 'new_record', record);\n      res.json({success: 200});\n    });\n```\n\nNext open your `AndroidManifest.xml` file and enable internet permissions. Just before the Application tag, add:\n\n`\u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e`\n\nNow let’s fire up our server, and run the mobile app either on an emulator or on any android device. Meanwhile, open up the Pusher Debug Console for your app on [your dashboard](http://dashboard.pusher.com/). Then on your emulator or device, you should see the Add Employee form, fill in the fields and and click the `Save` button, you should see the information you just supplied pop up in realtime on your Debug Console. \n\n## Render Live Table Records\n\nWe’ve come a long way but we are not done, Let’s now have our Android client listen for incoming employee records, and show them in a list.\nSo in `activity_main.xml`, add a `ListView` as the last child of `LinearLayout` and above the `TableLayout` that wraps our table headings. Your layout XML starting from the TableLayout  should look like so:\n\n```\n    \u003cTableLayout\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/table_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cTableRow\n                android:layout_height=\"wrap_content\"\n                android:layout_width=\"match_parent\"\n                android:id=\"@+id/table_row1\"\n                android:padding=\"10dp\"\u003e\n    \n                \u003cTextView\n                    android:id=\"@+id/name\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:textColor=\"#000\"\n                    android:text=\"Name\"/\u003e\n                \u003cTextView\n                    android:id=\"@+id/age\"\n                    android:textColor=\"#000\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Age\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/position\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Position\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/address\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"location\"/\u003e\n    \n            \u003c/TableRow\u003e\n            \u003cView\n                android:layout_height=\"3dip\"\n                android:layout_width=\"match_parent\"\n                android:background=\"#ff0000\"/\u003e\n        \u003c/TableLayout\u003e\n        // add a listview to display our table records \n        \u003cListView\n        android:id=\"@+id/records_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"500dp\"\n        android:layout_marginTop=\"16dp\"\u003e\n        \u003c/ListView\u003e\n       \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```\n\nIn order to display each message within the `ListView`, we’ll have to create an adapter that turns a list into a set of views. In our MainActivity `onCreate` method, let’s bind our `ListView` to this adapter like so: **NB** *we haven’t created the adapter yet, we’ll do that in a bit.*\n\n```\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener {\n        ...\n        private RecordAdapter recordAdapter;\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            ...\n            recordAdapter= new RecordAdapter(this, new ArrayList\u003cRecord\u003e());\n            final ListView recordsView = (ListView) findViewById(R.id.records_view);\n            recordsView.setAdapter(recordAdapter);\n        }\n```\n\nNext we create the `Record.java` class which comprises a single row in the List:\n\n```\n    public class Record {\n        public String age;\n        public String name;\n        public String position;\n        public String address;\n    }\n```\n\nNext we create the adapter. Create a new class `RecordAdapter`. We initialized it in the `MainActivity` Class with our `MainActivity`‘s context. We’ll create it like so:\n\n```\n    public class RecordAdapter extends BaseAdapter {\n    \n        private Context recordContext;\n        private List\u003cRecord\u003e recordList;\n    \n        public RecordsAdapter(Context context, List\u003cRecord\u003e records) {\n            recordList = records;\n            recordContext = context;\n        }\n```\n\nBecause we extended `BaseAdapter`, Android Studio will prompt us to implement it’s three associating methods `getCount`, `getItem` and `getItemId`, which we can do like so:\n\n```\n    @Override\n    public int getCount() {\n        return recordList.size();\n    }\n    @Override\n    public Object getItem(int i) {\n        return recordList.get(i);\n    }\n    @Override\n    public long getItemId(int i) {\n        return i;\n    }\n```\n\nFinally we’ll have to implement a method called `getView()` that will convert an item in the `ArrayList` of `Records` to a view. But first we need to create a `RecordViewHolder`  private class to encapsulate the views we would like to be part of the message. In this case, we’re going to have a:\n\n- nameView - for the employees name\n- ageView - for the employees name\n- nameView - for the employees name\n- nameView - for the employees name\n\nSo within our `RecordAdapter`, add a private nested class:\n\n```\n    private static class RecordViewHolder {\n    \n        public TextView nameView;\n        public TextView positionView;\n        public TextView ageView;\n        public TextView addressView;\n    }\n```\nNext we create another layout resource file called `record.xml`. This layout will hold the views we defined in the `RecordViewHolder` class and render it to the list. Hence it’ll contain four `TextViews` for the name, age, position and address respectively.\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cTextView\n            android:id=\"@+id/record_name\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:textColor=\"#000\"\n            android:text=\"Name\"/\u003e\n        \u003cTextView\n            android:id=\"@+id/record_age\"\n            android:textColor=\"#000\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Age\"/\u003e\n        \u003cTextView\n            android:textColor=\"#000\"\n            android:id=\"@+id/record_position\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Position\"/\u003e\n        \u003cTextView\n            android:textColor=\"#000\"\n            android:id=\"@+id/record_address\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"location\"/\u003e        \n    \u003c/LinearLayout\u003e\n```\n\nNow that we have a `RecordViewHolder` to encapsulate the visual elements that comprise a record, and a `record.xml` layout to inflate those elements into, we can go ahead and implement our  `getView` method inside our RecordAdapter class like so:\n\n```\n    @Override\n    public View getView(int i, View view, ViewGroup viewGroup) {\n            RecordViewHolder holder;\n            \n        if (view ==null){\n            LayoutInflater recordInflater = (LayoutInflater) \n            recordContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);\n            view = recordInflater.inflate(R.layout.record, null);\n            \n            holder = new RecordViewHolder();\n            holder.ageView = (TextView) view.findViewById(R.id.record_age);\n            holder.nameView = (TextView) view.findViewById(R.id.record_name);\n            holder.positionView = (TextView) view.findViewById(R.id.record_position);\n            holder.addressView = (TextView) view.findViewById(R.id.record_address);\n            view.setTag(holder);\n            \n        }else {\n            holder = (RecordViewHolder) view.getTag();\n        }\n        \n            Record record = (Record) getItem(i);\n            holder.nameView.setText(record.name);\n            holder.ageView.setText(record.age);\n            holder.positionView.setText(record.position);\n            holder.addressView.setText(record.address);\n            return view;\n    }\n```\n\nWhat we want to do now is, when we receive an event from Pusher about a new record, we want to add that new record to our `RecordAdapter` and update our `recordsList` with that new employee record. Here’s how we achieve that:\n\n```\n    //...\n    public class RecordsAdapter extends BaseAdapter {\n      //...\n      public void add(Record record) {\n        recordList.add(record);\n        notifyDataSetChanged();\n      }\n    }\n```\n\nThis will add the record to the `recordsList` and `notifyDataSetChange()` will refresh the adapter, showing the new record.\nNow we can go back to `MainActivity` and start listening for Pusher records:\n\n```\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n             ...\n             // initialize Pusher\n            Pusher pusher = new Pusher(\"pusher_key\"); \n            pusher.setCluster(\"app_cluster\");\n             // subscribe to our \"records\" channel\n            Channel channel = pusher.subscribe(\"records\"); \n              // listen for the \"new_record\" event\n            channel.bind(\"new_record\", new SubscriptionEventListener() {\n                ...\n            }); \n            // connect to the Pusher API\n            pusher.connect(); \n        }\n```\n\nNow that we have initialized Pusher, connected to the API, and subscribed to the `records` channel, we can add our `SubscriptionEventListener` to execute when an event comes in. All we’ll need to do is parse the JSON (for this example we used the [Gson library](https://github.com/google/gson) to parse it into the `Record` object) and then add it to the `RecordAdapter` inside the `MainActivity` like so:\n\n```\n    channel.bind(\"new_record\", new SubscriptionEventListener() {\n        @Override\n        public void onEvent(String channelName, String eventName, final String data) {\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    Gson gson = new Gson();\n                    Record record = gson.fromJson(data, Record.class);\n                    recordAdapter.add(record);\n                    recordsView.setSelection(recordsAdapter.getCount() - 1);\n                }\n            });\n        }\n    });\n```\n\nAt this point, whenever we have a `new_record` event come in, we simply add it to our `RecordAdapter`, and the new record will appear in realtime! wow, that was amazing!\n\nNow run your app on an emulator or any android device, and give it a spin. If you encounter any issues, do consult the [source code](https://github.com/christiannwamba/pusher-android-table).\nIf you have an android device, you can [install the app here](https://drive.google.com/file/d/1yicGkXQyOLCnhhkmIHjVTDgAB_j-_9jm/view?usp=sharing) and see how it works.\n\n## Conclusion\n\nWith this walk through, you should be able to build cross platform realtime apps with ease. Other Pusher features are available but their use depends on the requirements of your app. You can have a look at [Pusher’s](https://pusher.com/docs/) documentation for a deeper comprehension of the project.\n\n### Appendix: Pusher Setup\n\n1. [Sign up](https://dashboard.pusher.com/accounts/sign_in) for a free Pusher account:\n![realtime-table-android-signup](//images.contentful.com/1es3ne0caaid/qUrCl4R2BauEiIckOwCAS/fc02e2b21cfdc56c05a09d2e3525bcff/realtime-table-android-signup.png)\n\n2. Create a new app by selecting **Apps** on the sidebar and clicking **Create New** button on the bottom of the sidebar:\n![realtime-table-android-dashboard](//images.contentful.com/1es3ne0caaid/4Z3RALCwV2AO42YcmcayII/8b534c87265b7eacb6be6c00de639954/realtime-table-android-dashboard.png)\n\n3. Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n![realtime-table-android-create-app](//images.contentful.com/1es3ne0caaid/47GBScjOI0MWIq2GsokAU8/0ab3ef594630f3548b39b7cfd4e760a6/realtime-table-android-create-app.png)\n\n4. You can retrieve your keys from the **App Keys** tab:\n![realtime-table-android-api-keys](//images.contentful.com/1es3ne0caaid/50Epp9EnvqmOOWUUUuE0Sy/71df392b707f50ed6fd04da9d375ee65/realtime-table-android-api-keys.png)","metaTitle":"Build a realtime table with Android ","metaDescription":"In this tutorial, we will be using our Android library to quickly and easily build a live data table. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3YsJOBBO8Egy26M4YIM2U8","type":"Entry","createdAt":"2018-02-28T14:00:27.432Z","updatedAt":"2018-02-28T14:00:27.432Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a trade platform using JavaScript","url":"trade-platform-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-stock","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-12-13","description":"In this tutorial we will be building a trade platform that portrays the experience for stock markets using Vanilla JavaScript and Node.js.","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"Stock market data becomes more valuable as it essentially delivers an opportunity for traders who seek analysis and statistics. \n\nIn this tutorial we will be building a trade platform that portrays the experience for stock markets, where trades in prices can be visualized in realtime. This will be built using JavaScript, Chart.js and realtime capabilities powered by [Pusher](https://pusher.com).\n\nPusher is a platform that specializes in building realtime infrastructures for developers in order to build realtime applications as efficiently as possible. We will be leveraging the powerful features of Pusher to show updated prices on our chart directly from the server and also add an extra feature to display a table depicting the prices as shown below: \n\nhttps://www.youtube.com/watch?v=5Tee_2EkCW0\u0026\n\n## Getting started\n\nAs stated earlier, Pusher will be used to easily deliver the realtime functionality necessary for our chart to function as specified. If you don’t have an account with Pusher, you can [sign up for free](https://pusher.com/signup). Once you are done, go ahead and create a new app from your dashboard. Don’t forget to take note of your **app_id**, **key**, **secret** and **cluster** as you will be required to use them later in this tutorial. \n\n![realtime-trade-platform-javascript-create-app](//images.contentful.com/1es3ne0caaid/tb6MguejiCe4E2gimcMOC/dcb84ffa27a6735f39190a9953ce3607/realtime-trade-platform-javascript-create-app.png)\n\n## Set up application\n\nNow that we have set up an account and obtained the necessary credentials, we will need to set up a server and the view for our application. This is to ensure communication between our application and [Pusher](https://pusher.com/). If you do not have Node and npm installed on your machine yet, kindly download them from [here](https://nodejs.org/) in order to follow along. Otherwise, proceed creating a new directory with any name and run the command below :\n\n```\n    npm init -y\n```\n\nYou will be asked a bunch of questions, and then a package.json file will be created for you.  Update the file with the following:\n\n```\n    ## package.json\n    {\n      \"name\": \"sample-stock\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\",\n        \"serve\": \"node server.js\",\n        \"dev\": \"serve --port 5200\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\"\n    }\n```   \n\nNow edit the file above by adding the script to start our local server, we will set this up in a bit.\n\n```\n    ## package.json\n    {\n      ...\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\",\n        \"serve\": \"node server.js\",\n        \"dev\": \"serve --port 5200\"\n      },\n     ...\n    }\n```\n\nWe need to install the Pusher SDK and also `serve` to help us launch the client app:\n\n```\n    # Pusher\n    npm install --save pusher\n    \n    # Serve\n    npm install --save-dev serve\n```\n\nWe also need some existing dummy data in order to create a proper simulation of stock trades and price variations. For this reason, I downloaded a data sample of previous stock history we can play with. Below is the truncated version of the `stock.json`. You can find the complete file [here](https://github.com/christiannwamba/pusher-stock/blob/master/stock.json).\n\n```\n    {\n    ...\n            \"Timestamp\": \"06/15/2011 09:30:00.050\",\n            \"Quantity\": 6820,\n            \"Price\": 23.98,\n            \"Exchange\": \"The NASDAQ Stock Market LLC\",\n            \"MarketCenter\": \"Q\",\n            \"SubMarketCenter\": \" \",\n            \"TRDI\": \"@O X\",\n            \"CanceledIndicator\": null,\n            \"DOTT\": \"F\",\n            \"ITY\": \"Q\",\n            \"MSN\": 2059,\n            \"OMSN\": 0\n          },\n          ...\n```\n\nNext, we need to create our project files. In the project folder add the following files and leave them blank. We will fill up the content as we go:\n\n```\n    - app.js \n    - server.js \n    - index.html\n    - style.css \n    - stock.json\n```\n\n## Create a simple server\n\nWithin `server.js`, import the `stock``.json` file and initialise Pusher with the required credentials obtained from the application dashboard.\n\n```\n    // ./server.js\n    const stockData = require('./stock.json');\n    const Pusher = require('pusher');\n    \n    \n    var pusher = new Pusher({\n      appId: 'APP_ID',\n      key: 'APP_KEY',\n      secret: 'APP_SECRET',\n      cluster: 'APP_CLUSTER',\n      encrypted: true\n    });\n    ...\n```\n\nFor our clients to receive realtime payloads, we need to emit those payloads from our sever using Pusher: \n\n```\n    // ./server.js\n    let i = 0;\n    setInterval(() =\u003e {\n      const GOOG = stockData[1]['Trades'][i];\n      pusher.trigger('trade', 'stock', GOOG);\n      i++;\n    }, 2000);\n```\n\nEvery 2 second, we query the JSON file for `GOOG` stock prices and and emit this price alongside some other payload (like the stock name) as JSON using the Pusher’s `trigger` method. This method takes channel, event, and payload as arguments.\n \nRun the following command to start the server:\n \n```\n    npm run serve\n```\n\n## Build the client app\n\nFirst things first, update your `index.html` with the following:\n\n```\n    \u003chtml\u003e\n        \n        \u003chead\u003e\n          \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003c/head\u003e\n        \n        \u003cbody\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"chart-container row\"\u003e\n                \u003cdiv class=\"col-md-8\"\u003e\n                    \u003cdiv class=\"\"\u003e\n                        \u003ccanvas id=\"chart\"\u003e\u003c/canvas\u003e\n                      \u003c/div\u003e\n                \u003c/div\u003e\n            \n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"table-container\"\u003e\n                        \u003ch2\u003eTrending Tickers\u003c/h2\u003e\n                        \u003ctable class=\"table\"\u003e\n                            \u003cthead\u003e\n                              \u003ctr\u003e\n                                \u003cth\u003e Name\u003c/th\u003e\n                                \u003cth\u003e Price\u003c/th\u003e\n                              \u003c/tr\u003e\n                            \u003c/thead\u003e\n                            \u003ctbody\u003e\n                              \u003ctr\u003e\n                                \u003ctd\u003eGOOG\u003c/td\u003e\n                                \u003ctd id=\"price\"\u003e\u003c/td\u003e\n                              \u003c/tr\u003e\n                            \u003c/tbody\u003e\n                          \u003c/table\u003e\n                      \n                    \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n        \u003c/div\u003e\n        \n          \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n        \n        \u003c/html\u003e\n```\n\nYou have a `canvas` where you will launch the chart as well as a simple table to show the current prices as they are updated in realtime. We also included the Pusher and Chart SDK which we will use soon.\n\n### App Class\nTo receive the payload sent in from the server, we need to subscribe to the Pusher event emitted by the server. And to visualize it, you need to create a chart and keep updating it’s data points using the payload received from the server. We will need a couple of functions:\n\n```\n    // app.js\n    class App {\n      constructor() {\n        this.pusher = null;\n        this.chart = null;\n        this.lowestPrice = 505;\n        this.initializeChart();\n        this.initializePusher();\n      }\n      initializePusher() {\n       ...\n      }\n      subscribeToEventChannel() {\n       ...\n      }\n      updateChartData(data) {\n      ...    \n      }\n    \n      initializeChart() {\n       ...\n      }\n    }\n    new App();\n```\n\nWe just created the methods bodies. Next is to start implementing their functionalities one after the other. \n\nFirst, let’s initialize Pusher\n\n```\n    // app.js\n    initializePusher() {\n      Pusher.logToConsole = true;\n      this.pusher = new Pusher('APP_ID', {\n        cluster: 'APP_CLUSTER',\n        encrypted: true\n      });\n      this.subscribeToEventChannel();\n    }\n```\n\nFor debug purposes only, we are setting `Pusher.logToConsole` to `true` so as to see the realtime activities logged to the console. Remember to remove that in production so you don’t leave your user’s console bloated with debug logs.\n\nNext, we create an instance of `Pusher`. The constructor function is available in the `pusher-js` file we included earlier.\n\nRemember the server is still emitting data. We need to subscribe to it and start consuming the data coming in:\n\n```\n    // app.js\n    subscribeToEventChannel() {\n        const channel = this.pusher.subscribe('trade');\n        channel.bind('stock', data =\u003e {\n          this.updateChartData(data)\n        });\n      }\n```\n\nThe `subscribe` method on Pusher takes a channel we need to subscribe and returns a subscription. We can then bind to this subscription using `bind` and passing it the event’s name and a callback function. \n\nIn the event, we called `updateChartData` and passed it the data to keep updating the chart. We create an instance variable in the constructor called `chart`. We also called the `initializeChart` method to setup the chart in the constructor as well. Before we see the update chart logic, let’s see how this chart is initialized:\n\n```\n    // app.js\n     initializeChart() {\n        const ctx = document.getElementById('chart').getContext('2d');\n        const data = {\n          labels: [],\n          datasets: [\n            {\n              label: 'GOOG',\n              backgroundColor: 'rgb(125, 195, 242)',\n              borderColor: 'rgb(54, 162, 235)',\n              data: [],\n              // fill: false\n            }\n          ]\n        };\n        this.chart = new Chart(ctx, {\n          type: 'line',\n          data: data,\n          options: {\n            responsive: true,\n            title: {\n              display: true,\n              text: 'Chart.js Line Chart'\n            },\n            tooltips: {\n              mode: 'index',\n              intersect: false\n            },\n            hover: {\n              mode: 'nearest',\n              intersect: true\n            },\n            scales: {\n              xAxes: [\n                {\n                  display: true,\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Time  '\n                  }\n                }\n              ],\n              yAxes: [\n                {\n                  display: true,\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Price'\n                  },\n                  ticks: {\n                    min: 504,\n                    max: 507\n                }\n                }\n              ]\n            }\n          }\n        });\n      }\n```\n\nIt might look overwhelming, but a closer look shows that we are just defining a chart and describing what kind of data it should expect, how it should label the data, and how it should look.\n\nNow, the update chart method uses the chart instance to update the chart every single time data comes in from the Pusher server.\n\n```\n     // app.js\n    updateChartData(data) {\n      this.chart.data.labels.push(data.Timestamp.split(' ')[1].split('.')[0]);\n      this.chart.data.datasets[0].data.push(data.Price);\n      this.chart.update();\n    }\n```\n\nYou can launch the client app with the following command:  \n\n```\n    ## Run the web application\n    npm run dev\n```\n\nThis will start the web application on port 5200. Open up up your browser:\n\n![realtime-trade-platform-javascript-chart](//images.contentful.com/1es3ne0caaid/3IUcHYgz3GAAswIcG0SW4A/de71dd4353bfda654feee81c26ec3386/realtime-trade-platform-javascript-chart.gif)\n\n## Realtime ticker\n\nAt the moment, thanks to Pusher’s functionality, we are able to update the chart in realtime with the payload sent in by the server. Let’s proceed by adding another feature to display the prices on a table.\n\nWe will choose a random price to be set as a threshold in order to determine when the price increases or decreases as it is being received from the server. These changes in prices will be indicated with different colors as it is obtainable in any stock market chart. \n\nRemember we had the following table in our `index.html`:\n\n```\n    \u003chtml\u003e\n    \u003ch2\u003eTrending Tickers\u003c/h2\u003e\n    \u003ctable class=\"table\"\u003e\n        \u003cthead\u003e\n          \u003ctr\u003e\n            \u003cth\u003e Name\u003c/th\u003e\n            \u003cth\u003e Price\u003c/th\u003e\n          \u003c/tr\u003e\n        \u003c/thead\u003e\n        \u003ctbody\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eGOOG\u003c/td\u003e\n            \u003ctd id=\"price\"\u003e\u003c/td\u003e\n          \u003c/tr\u003e\n        \u003c/tbody\u003e\n      \u003c/table\u003e\n```\n\nTo make this work we will edit the `updateChartData()` method and also create a new one called  `flashColor``()`. The new method will be used to change the colors based on the changes in prices.\n\n\n```\n    ## app.js\n    updateChartData(data) {    \n        ...\n        \n        document.getElementById('price').innerHTML = data.Price;\n        this.chart.data.datasets.forEach(dataset =\u003e {\n          var currentPrice = document.getElementById('price');\n          var tag = currentPrice.innerHTML;\n          tag = data.Price;\n          this.flashColor(this.threshold, tag, currentPrice);\n        });\n        this.chart.update();\n      }\n```\n\nDon’t forget to include the threshold price within the constructor like this :\n\n```\n    // app.js\n    class App {\n      constructor() {\n        ...\n        ## add this\n        this.threshold = 505;\n      }\n    }\n    new App();\n```\n\nFor visual cues, here is a function that changes the color of the price text every single time the threshold is beat :\n\n```\n    // app.js\n    flashColor(threshold, tag, currentPrice) {\n        let color = \" \";\n        if (tag \u003e threshold ) {\n          color = \"green\";\n        } else if(tag == threshold){\n          color = \"blue\";\n        } else {\n          color = \"red\";\n        }\n        currentPrice.style.color = color;\n        currentPrice.style.fontWeight = \"bolder\";\n      }\n```\n\nAnd that is it :\n\nhttps://www.youtube.com/watch?v=5Tee_2EkCW0\u0026\n\nFrom the chart, the green color for prices means that the price has gone above the threshold while red indicates reduction in price and blue means it is exactly the same as the threshold price.\n\n## Conclusion\n\nFrom this tutorial, we have seen how to build a stock market like platform where changes in prices are being updated in realtime. This can be built upon and used with any chart library. In case you miss anything, the complete code can be found on GitHub. You can find it [here](https://github.com/christiannwamba/pusher-stock) and please feel free to submit a pull request.","metaTitle":"Build a trade platform using JavaScript","metaDescription":"In this tutorial, discover how to build a realtime trade platform using Vanilla JavaScript and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"20S3RCpd722OmkKW4kO8ci","type":"Entry","createdAt":"2018-03-05T16:13:08.393Z","updatedAt":"2018-03-06T11:54:25.659Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":13,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime geolocation app with ARKit and CoreLocation","url":"realtime-geolocation-arkit-corelocation","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/ARKitCarGeolocation","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4FiKU27gk88US4gKMGI222","type":"Entry","createdAt":"2018-02-12T15:08:02.376Z","updatedAt":"2018-02-26T12:31:12.773Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"AR-VR","url":"ar-vr","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-12-11","description":"Discover how to build a AR experience for ride hailing apps focused on location and realtime features.","prerequisite":"A basic understanding of Swift is needed to follow this tutorial.","content":"Augmented Reality (AR) has a lot of interesting and practical use cases. One of them is location.\n\nWith iOS 11, the ability to use ARKit to create AR apps and combine them with multiple libraries has opened a lot of possibilities.\n\nIn this tutorial, we’re going to combine the power of ARKit, CoreLocation, and Pusher to create a geolocation AR app. \n\nLet’s think of a taxi service. Some services allow you to track on a map the car that is going to pick you up, but wouldn’t be great to have an AR view to see the route of the car and how it gets closer to you?\n\nSomething like this:\n\nhttps://www.youtube.com/watch?v=XBe65KD3CL4\u0026\n\nAs you can see, the information to position the car in the AR world is not always accurate, both on the CoreLocation side and on the ARKit side, however, for this use case, most of the time it will be enough.\n\nHere’s what you’ll need:\n\n- A device with an A9 or later processor (iPhone 6s or better, iPhone SE, any iPad Pro, or the 2017 iPad)\n- iOS 11\n- [Xcode 9.1](https://developer.apple.com/download/)  (or newer)\n- A 3D model of a car (in DAE format)\n\nYou can find free 3D models on sites like [Free3D](https://free3d.com), [Turbosquid](https://www.turbosquid.com/), or [Google’s Poly](https://poly.google.com). \n\nThe most common format is OBJ (with the its textures defined in a MTL file), which can be converted to DAE with a program like Blender.\n\nFor this project I chose [this model](https://free3d.com/3d-model/low-poly-car-40967.html), which it’s available in DAE format.\n\nThe math for this project is a bit heavy. I’ll dedicate more time to explain the operations related to geolocation than the ones related to rotating and translating a model with ARKit. \n\nIf you don’t know about transformation matrices or how to convert your 3D model to the DAE format, take a look at my previous [tutorial about ARKit](https://blog.pusher.com/building-an-ar-app-with-arkit-and-scenekit/).\n\nLet’s start by setting up a Pusher app.\n\n\n## Setting up Pusher\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/). Then, go to your Dashboard and create an app, choosing a name, the cluster closest to your location, and *iOS* as your front-end technology:\n\n![realtime-geolocation-arkit-corelocation-create-app](//images.contentful.com/1es3ne0caaid/2BPxSA65lik4WEyyOySMCS/2a050a70c16fab5e19175de1f681aa41/realtime-geolocation-arkit-corelocation-create-app.png)\n\nThis will give you some sample code to get started:\n\n![realtime-geolocation-arkit-corelocation-sample-code](//images.contentful.com/1es3ne0caaid/48VCUradlucio8uU8ccKg4/145dfc2af882e9289104f0bfd0d6d522/realtime-geolocation-arkit-corelocation-sample-code.png)\n\nSave your app id, key, secret and cluster values. We’ll need them later. \n\nFinally, go to the *App Setting* tab, check the option *Enable client events* and click on *Update*:\n\n![realtime-geolocation-arkit-corelocation-app-settings-enable-client-events](//images.contentful.com/1es3ne0caaid/4aUiNklNVuaKGQWOg40Ywy/b3fe51cd46f255507434facb2439b817/realtime-geolocation-arkit-corelocation-app-settings-enable-client-events.png)\n\nThrough this app, the drivers will send their locations as latitude/longitude coordinates along with the direction they’re heading (in degrees) as a client [event](https://pusher.com/docs/client_api_guide/client_events).\n\nBut let’s not get ahead of ourselves, let’s set up the Xcode project first.\n\n## Setting up the project\n\nOpen Xcode 9 and create a new *Single View App*: \n\n![realtime-geolocation-arkit-corelocation-single-view-app](//images.contentful.com/1es3ne0caaid/2NQrFCbyL6EIkek0EEcCeS/7080003f5de1796b6f5118efbbb35b09/realtime-geolocation-arkit-corelocation-single-view-app.png)\n\nWe’re choosing this option because we are going to manually set up an AR view along with other controls.\n\nEnter the project information, choosing *Swift* as the language:\n\n![realtime-geolocation-arkit-corelocation-new-project](//images.contentful.com/1es3ne0caaid/283bRIrm3qG6GMEYAUu6ao/7623035dc93c6e197c5d69f5df496861/realtime-geolocation-arkit-corelocation-new-project.png)\n\nCreate the project and close it. We’re going to use [CocoaPods](https://cocoapods.org/) to install the project’s dependencies. Open a terminal window, go to the root directory of your project and, in case you don’t have CocoaPods installed (or if you want to update it), execute:\n\n```\n    sudo gem install cocoapods\n```\n\nOnce installed, create the file `Podfile` with the command:\n\n```\n    pod init\n```\n \nEdit this file to set the platform to iOS 11 and add the [Pusher’s Swift library](https://github.com/pusher/pusher-websocket-swift) as a dependency of the project:\n\n```\n    # Uncomment the next line to define a global platform for your project\n     platform :ios, '11.0'\n    \n    target 'ARKitCarGeolocation' do\n      # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n      use_frameworks!\n    \n      # Pods for ARKitCarGeolocation\n      pod 'PusherSwift', '~\u003e 5.0.1'\n    end \n```\n\nOnce you’ve edited the `Podfile`, execute the following command to install the dependency:\n\n```\n    pod install\n```\n\nIn case version 5.0.1 (or later) is not installed (the output of the installation will tell you the installed version), you can update your CocoaPod repository and install the latest version of the library with the command:\n\n```\n    pod install --repo-update\n```\n\nNow open the Xcode workspace instead of the project file. The workspace has the dependency already configured:\n\n``` swift\n    open ARKitCarGeolocation.xcworkspace\n```\n\nIf you build your project at this point, a couple of warnings may show up, but the operation should be successful.\n\nNext, select the file `Info.plist`, add a row of type *Privacy - Camera Usage Description* (`NSCameraUsageDescription`) and give it a description. This is required for ARKit to access the camera.\n\nWe’ll also need a row of type *Privacy - Location When In Use Usage Description* (`NSLocationWhenInUseUsageDescription`). This is required to get the location from your device’s GPS (only when the app is being used, not all the time):\n\n![realtime-geolocation-arkit-corelocation-privacy-camera-location](//images.contentful.com/1es3ne0caaid/32iLL63z8QIsMsgkCss4CU/1d2e2851d141d8a6489eac7dceb2d2e9/realtime-geolocation-arkit-corelocation-privacy-camera-location.png)\n\nFinally, configure a team so you can run the app on your device:\n\n![realtime-geolocation-arkit-corelocation-team-none](//images.contentful.com/1es3ne0caaid/2cAxRPwM0YkiWCoEQY6Uqe/8e17160f8f97d328f0404e95c354b289/realtime-geolocation-arkit-corelocation-team-none.png)\n\nNow let’s build the user interface.\n\n## Building the user interface \n\nGo to `Main.storyboard` and drag an *ARKit SceneKit View* to the view:\n\n![realtime-geolocation-arkit-corelocation-controller-scene-view](//images.contentful.com/1es3ne0caaid/6sz6zrtewMogOS8MKU2SmO/c8891405447dc7236d3077569686dc01/realtime-geolocation-arkit-corelocation-controller-scene-view.png)\n\nNext, add constraints to all sides of this view so that it fills the entire screen. You do this by pressing the `ctrl` key while dragging a line from the ARSCNView to each side of the parent view and choosing leading, top, trailing, and bottom to the superview, with a value of `0`:\n\n![realtime-geolocation-arkit-corelocation-add-constraints-arscnview](//images.contentful.com/1es3ne0caaid/44MZcus1cIIMog2KQ4COky/e1dd766cf1d6ff7722ad888ea0506d78/realtime-geolocation-arkit-corelocation-add-constraints-arscnview.png)\n\nNext, add a text view and disable its *Editable* and *Selectable* behaviors in the *Attributes inspector:*\n\n![realtime-geolocation-arkit-corelocation-text-view](//images.contentful.com/1es3ne0caaid/14vAOITk4ACQ6qkG4IKmg8/de6952a765af291b2200ab8eb201ef31/realtime-geolocation-arkit-corelocation-text-view.png)\n\nChange its background color (I chose a white color with `50%` opacity):\n\n![realtime-geolocation-arkit-corelocation-text-view-background](//images.contentful.com/1es3ne0caaid/23XPYoLBzuCmoAMmWU4OEK/87b76d3a5487af017b37bef99ab3c101/realtime-geolocation-arkit-corelocation-text-view-background.png)\n\nAdd a height constraint with a value of `90` and leading, top, and trailing constraints with the value `0` so it remains fixed to the top of the screen:\n\n![realtime-geolocation-arkit-corelocation-text-view-constraints](//images.contentful.com/1es3ne0caaid/ZAptCvyKyIw0QUwMAuo02/4acf0e021c00577b58d5059195d6ae8d/realtime-geolocation-arkit-corelocation-text-view-constraints.png)\n\nIn `ViewController.swift`, import ARKit:\n\n``` swift\n    import ARKit\n```\n\nThen, create two `IBOutlet`s, one to the scene view and another one to the text view:\n\n![realtime-geolocation-arkit-corelocation-iboutlets](//images.contentful.com/1es3ne0caaid/4GLk4xx3ywCeaeGoMcWgem/d58b8c89e032a44586e1ba3edf0bb76b/realtime-geolocation-arkit-corelocation-iboutlets.png)\n\nYou’re ready to start coding the app, but before that, let me explain what needs to be done. However, if you’re already familiar with geolocation concepts or if you’re not interested, feel free to skip the next section.\n\n## Understanding how the app works\n\nImagine you are standing at some point in the world. It doesn’t matter where or in what direction you’re looking at.\n\nYour location is given by two numbers, latitude and longitude.\n\nLatitude is the distance between the North or the South Pole and the equator (an imaginary circle around the Earth halfway between the poles).  It goes from `0º` to `90º` for places to the north of the equator, and `0º` to `-90º` for places to the south of the equator.\n\nLongitude is the distance from the prime meridian (an imaginary line running from north to south through Greenwich, England) to a point at the west or east. It goes from `0º` to `180º` for places to the east of the prime meridian, and `0º` to `-180º` for places to the west of the prime meridian.\n\nFor example, if you’re in Brazil, your latitude and longitude will be negative because you are on the southwest side of the Earth:\n\n![realtime-geolocation-arkit-corelocation-map-brazil](//images.contentful.com/1es3ne0caaid/1SKZuR9fvSS00A6qgecek4/a12c4f85ac4b8f279ba11f13c1cc4e17/realtime-geolocation-arkit-corelocation-map-brazil.png)\n\nAnd if you’re in Japan, for example, your latitude and longitude will be positive because you are on the northeast side of the Earth:\n\n![realtime-geolocation-arkit-corelocation-map-japan](//images.contentful.com/1es3ne0caaid/1q9SM0sdMI2CIs02AOKUoY/bdf979d5361a4373c7bf70ab3c2a914c/realtime-geolocation-arkit-corelocation-map-japan.png)\n\nThis app will take into account your position and the driver’s position in a latitude and longitude coordinate system:\n\n![realtime-geolocation-arkit-corelocation-driver-location](//images.contentful.com/1es3ne0caaid/kAcdEX88yO0mYWcmMug6e/79b8933804fcad3e35ca9fa1b5208b61/realtime-geolocation-arkit-corelocation-driver-location.png)\n\nBut if it’s easier to you, you can think of your position as the origin (`0`, `0`):\n\n![realtime-geolocation-arkit-corelocation-origin](//images.contentful.com/1es3ne0caaid/5c2gs1JCAg8Y2MgemMq62k/3db4c763c03ffd5f876694f8d03fa788/realtime-geolocation-arkit-corelocation-origin.png)\n\nYou need to calculate two things:\n\n- The distance between you and the driver \n- The angle between the north (or south) line of the Earth and the line connecting you and the driver, which is called [bearing](https://en.wikipedia.org/wiki/Bearing_(navigation)).\n\n![realtime-geolocation-arkit-corelocation-bearing-distance](//images.contentful.com/1es3ne0caaid/5jBer4ROXeQeayC2W2Yq0U/f2304f50098a9734d3e07f67f9d6edc5/realtime-geolocation-arkit-corelocation-bearing-distance.png)\n\nThe distance will tell you how far you have to position the 3D model in the AR world.\n\nThe bearing will help you create a rotation transformation to position your model in the right direction at the above distance.\n\nIf we were talking about a simple `x` and `y` coordinate system, we could get those calculations by applying the [Pythagorean theorem](https://en.wikipedia.org/wiki/Pythagorean_theorem) and some simple trigonometry, with [sine](https://en.wikipedia.org/wiki/Sine) and [cosine](https://en.wikipedia.org/wiki/Law_of_cosines) operations.\n\nBut we are talking about latitudes and longitudes of the Earth. And as the Earth is not a flat plane, the math gets more complex.\n\nThe distance is calculated by calling just a [method](https://developer.apple.com/documentation/corelocation/cllocation/1423689-distance) of the class [CLLocation](https://developer.apple.com/documentation/corelocation/cllocation). It uses the [Haversine Formula](http://www.igismap.com/haversine-formula-calculate-geographic-distance-earth/) which, from two different latitude/longitude pairs of values, calculates the distance by tracing a line between them that follows the curvature of the Earth.\n\nOn the other hand, we have to calculate the bearing between two different latitude/longitude pairs of values manually. [This is the formula](http://www.igismap.com/formula-to-find-bearing-or-heading-angle-between-two-points-latitude-longitude/):\n\n``` swift\n    atan2 ( X, Y )\n```\n\nWhere `X` equals:\n\n``` swift\n    sin(long2 - long1) * cos(long2)\n```\n\nAnd `Y` equals:\n\n``` swift\n    cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(long2 - long1)\n```\nAnother thing to consider is that for the matrix transformation, you’ll have to use [radians](https://en.wikipedia.org/wiki/Radian) instead of degrees as angle units. As the length of an entire circumference is equal to `2π` radians ( `360º`), one radian is equal to `180/π` degrees. \n\nSo this is the plan.\n\nUsing Pusher, the drivers will publish their location and direction they’re heading in realtime.\n\nUsing CoreLocation, the AR app is going to get your location. It will also listen to the driver’s location updates.\n\nWhen a location update is received, using the formulas explained above, the app will place a 3D model of a car in a position relative to your location inside the AR world, and it will orient the model to the same direction the driver is heading.\n\nThe app is only going to get your location once, so it assumes your location is fixed (which is true most of the time).\n\nIn addition, an arrow emoji (⬇️) will be shown on top of the model at all times so you can spot it easily, and the text view you added in the last section will show the status of the app and the distance between you and the car.\n\nNow that you know what to do, let’s get into the code.\n\n## Building the app with ARKit and CoreLocation\n\nLet’s start by defining two extensions.\n\nOne to provide conversion methods to radians and degrees to all floating point types. Create a new Swift file, `FloatingPoint+Extension.swift`, with the following content:\n\n``` swift\n    import Foundation\n    \n    extension FloatingPoint {\n        func toRadians() -\u003e Self {\n            return self * .pi / 180\n        }\n        \n        func toDegrees() -\u003e Self {\n            return self * 180 / .pi\n        }\n    }\n```\n\nAnd another extension to create an image from a string. Create another Swift file, `String+Extension.swift`, with the following content (taken from this [StackOverflow answer](https://stackoverflow.com/a/47164529/3593852)):\n\n``` swift\n    import UIKit\n    \n    extension String {\n        func image() -\u003e UIImage? {\n            let size = CGSize(width: 100, height: 100)\n            UIGraphicsBeginImageContextWithOptions(size, false, 0)\n            UIColor.clear.set()\n            let rect = CGRect(origin: CGPoint(), size: size)\n            UIRectFill(CGRect(origin: CGPoint(), size: size))\n            (self as NSString).draw(in: rect, withAttributes: [NSAttributedStringKey.font: UIFont.systemFont(ofSize: 90)])\n            let image = UIGraphicsGetImageFromCurrentImageContext()\n            UIGraphicsEndImageContext()\n            return image\n        }\n    }\n```\n\nYou’ll use this extension to create an image out of the arrow emoji (a string). It creates a rectangle of width `100` and height `100` , with a transparent background, to draw the string inside of it with a font size of `90`.\n\nNext, open the *New File* dialog and scroll down to choose the *Asset Catalog* type:\n\n![realtime-geolocation-arkit-corelocation-assets-catalog](//images.contentful.com/1es3ne0caaid/5b67DLlS2QqaK8OIWm4Ig/a9045fb5b9d2478f3e329d05d797a474/realtime-geolocation-arkit-corelocation-assets-catalog.png)\n\nEnter `art.scnassets` as the file name (confirming the use of the extension `scnassets`):\n\n![realtime-geolocation-arkit-corelocation-confirm-extension](//images.contentful.com/1es3ne0caaid/Hfu7f39xIcImoE88M6GSW/654f347952f50535d3111bb99a1e1ea9/realtime-geolocation-arkit-corelocation-confirm-extension.png)\n\nNow copy your model to this folder:\n\n![realtime-geolocation-arkit-corelocation-import-model](//images.contentful.com/1es3ne0caaid/3EF3mAODwQWc06gQGG0GQC/621fd22e3fc946c8b6442cf983c9cda8/realtime-geolocation-arkit-corelocation-import-model.png)\n\nOpen the Scene Graph View, select the main node of your model and, in the properties tab, give it a name, which you’ll use to reference it in the code:\n\n![realtime-geolocation-arkit-corelocation-model-car](//images.contentful.com/1es3ne0caaid/6xtL4bGfsWMkyqkIaEG2kC/a5d3765469225414d45fdbd652f6cfb7/realtime-geolocation-arkit-corelocation-model-car.png)\n\nBack to `ViewController.swift`, let’s add the `import` statements we’ll need:\n\n``` swift\n    import SceneKit\n    import CoreLocation\n    import PusherSwift\n```\n\nAnd the delegates the controller will use:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n    }\n```\n\nNext, let’s add some instance variables.\n\nFirst, a `CLLocationManager` to request the user location and another variable to store it:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      let locationManager = CLLocationManager()\n      var userLocation = CLLocation()\n      \n      ...\n    }\n```\n\nThen, a variable to store the direction the drivers are heading, the distance between them and the user, and the status of the app:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      var heading : Double! = 0.0\n      var distance : Float! = 0.0 {\n        didSet {\n          setStatusText()\n        }\n      }\n      var status: String! {\n        didSet {\n          setStatusText()\n        }\n      }\n      \n      ...\n      \n      func setStatusText() {\n        var text = \"Status: \\(status!)\\n\"\n        text += \"Distance: \\(String(format: \"%.2f m\", distance))\"\n        statusTextView.text = text\n      }\n    }\n```\n\nWhenever a new value for the distance or the status is set, the text view will be updated. Notice that the distance is calculated in meters.\n\nNext, a variable to store the root node of the car model and the name of this node, which should be the same than the one you set at the SceneKit editor:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      var modelNode:SCNNode!\n      let rootNodeName = \"Car\"\n      \n      ...\n    }\n```\n\nYou’ll also need the original (first) transformation of that node:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      var originalTransform:SCNMatrix4!\n      \n      ...\n    }\n```\n\nWhy?\nTo calculate the orientation (rotation) of the model in the best possible way.\nIdeally, the driver’s device will always give you the correct heading so you can take the first received reading, rotate the model in that direction, and then calculate the next rotations relative to the first one.\n\nHowever, if the first reading is wrong (which happens sometimes), the next rotations will be wrong even if the rest of the readings are correct.\n\nSo you always need to calculate the orientation as if it was the first time you rotate the model, because once you rotate the model a certain angle the following rotations will be done relative to that angle. Resetting the rotation to `0º` won’t work either because of the way transformations work (matrix multiplication).\n\nFinally, you’ll need to store the Pusher object and channel to receive the updates:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      let pusher = Pusher(\n        key: \"YOUR_PUSHER_APP_KEY\",\n        options: PusherClientOptions(\n            authMethod: .inline(secret: \"YOUR_PUSHER_APP_SECRET\"),\n            host: .cluster(\"YOUR_PUSHER_APP_CLUSTER\")\n        )\n      )\n      var channel: PusherChannel!\n      \n      ...\n    }\n```\n\nNotice the value of the `authMethod` option.\n\nYou’ll be receiving the updates through a private channel. They need to be authenticated by a server. However, at development time, you can use the `inline` option to bypass the need to set up an auth endpoint as part of a server. \n\nYou can learn more about the object’s options [here](https://github.com/pusher/pusher-websocket-swift#configuration).  If you need it, you can learn how to create an [authentication endpoint on this page](https://pusher.com/docs/authenticating_users#implementing_endpoints).\n\nIn the `viewDidLoad` function, set up the SceneKit scene and the location service:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Set the view's delegate\n        sceneView.delegate = self\n            \n        // Create a new scene\n        let scene = SCNScene()\n            \n        // Set the scene to the view\n        sceneView.scene = scene\n            \n        // Start location services\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        \n        // Set the initial status\n        status = \"Getting user location...\"\n            \n        // Set a padding in the text view\n        statusTextView.textContainerInset = UIEdgeInsetsMake(20.0, 10.0, 10.0, 0.0)\n    }\n```\n\nNext, configure the AR session:\n\n``` swift\n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n            \n        // Create a session configuration\n        let configuration = ARWorldTrackingConfiguration()\n        configuration.worldAlignment = .gravityAndHeading\n    \n        // Run the view's session\n        sceneView.session.run(configuration)\n    }\n        \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n            \n        // Pause the view's session\n        sceneView.session.pause()\n    }\n```\n\nThe option [gravityAndHeading](https://developer.apple.com/documentation/arkit/arconfiguration.worldalignment/2873776-gravityandheading) will set the y-axis to the direction of gravity as detected by the device, and the x- and z-axes to the longitude and latitude directions as measured by Location Services.\n\nFor the users position, when they have authorized the use of the location services, you have to request the location (the [requestLocation](https://developer.apple.com/documentation/corelocation/cllocationmanager/1620548-requestlocation) method is used so the location is requested only once):\n\n``` swift\n    //MARK: - CLLocationManager\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        // Implementing this method is required\n        print(error.localizedDescription)\n    }\n        \n    func locationManager(_ manager: CLLocationManager, \n          didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            locationManager.requestLocation()\n        }\n    }\n```\n\nOnce the user’s location is received, take the last element of the array, update the status, and connect to Pusher (it doesn’t make sense to connect to Pusher before having the users location because all the calculations will be wrong):\n\n``` swift\n    func locationManager(_ manager: CLLocationManager, \n          didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n          userLocation = location\n          status = \"Connecting to Pusher...\"\n                \n          self.connectToPusher()\n        }\n    }\n```\n\nIn the method `connectToPusher` you subscribe to `private-channel` and, when a `client-new-location` event is received, extract the driver’s latitude, longitude, and heading and update the status and location of the 3D model with the method `updateLocation`:\n\n``` swift\n    //MARK: - Utility methods\n    func connectToPusher() {\n        // subscribe to channel and bind to event\n        let channel = pusher.subscribe(\"private-channel\")\n            \n        let _ = channel.bind(eventName: \"client-new-location\", callback: { (data: Any?) -\u003e Void in\n          if let data = data as? [String : AnyObject] {\n            if let latitude = Double(data[\"latitude\"] as! String),\n                let longitude = Double(data[\"longitude\"] as! String),\n                let heading = Double(data[\"heading\"] as! String)  {\n                    self.status = \"Driver's location received\"  \n                    self.heading = heading\n                    self.updateLocation(latitude, longitude)\n            }\n          }\n        })\n            \n        pusher.connect()\n        status = \"Waiting to receive location events...\"\n    }\n```\n\nIn `updateLocation`, create a [CLLocation](https://developer.apple.com/documentation/corelocation/cllocation) object to calculate the distance between the user and the driver. Remember that the [distance](https://developer.apple.com/documentation/corelocation/cllocation/1423689-distance) is calculated in meters:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        let location = CLLocation(latitude: latitude, longitude: longitude)\n        self.distance = Float(location.distance(from: self.userLocation))\n    }\n```\n\nIf this is the first update received, `self.modelNode` will be `nil`, so you have to instantiate the model:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            let modelScene = SCNScene(named: \"art.scnassets/Car.dae\")!\n            self.modelNode = modelScene.rootNode.childNode(withName: rootNodeName, recursively: true)!\n            \n        }\n    }\n```\n\nNext, you need to move the [pivot](https://developer.apple.com/documentation/scenekit/scnnode/1408044-pivot) of the model to its center in the y-axis, so it can be rotated without changing its position:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n            // Move model's pivot to its center in the Y axis\n            let (minBox, maxBox) = self.modelNode.boundingBox\n            self.modelNode.pivot = SCNMatrix4MakeTranslation(0, (maxBox.y - minBox.y)/2, 0)\n        }\n    }\n```\n\nSave the model’s transform to calculate future rotations, position it, and add it to the scene:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n            // Save original transform to calculate future rotations\n            self.originalTransform = self.modelNode.transform\n                \n            // Position the model in the correct place\n            positionModel(location)\n                \n            // Add the model to the scene\n            sceneView.scene.rootNode.addChildNode(self.modelNode)\n        }\n    }\n```\n\nNotice that there’s no need to create an [ARAnchor](https://developer.apple.com/documentation/arkit/aranchor) to add the node as a child of it. An `ARAnchor` gives you the ability to track positions and orientations of models relative to the camera.\n\nBut in this case, it’s better to work with the child directly. Mostly because you cannot delete or change the position of the whole `ARAnchor` manually -only of its children.\n\nFinally, create the arrow from an emoji, position it on top of the car (using the y-axis, I got the value by trial and error), and add it as a child of the model (so it stays with it at all times):\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n            // Create arrow from the emoji\n            let arrow = makeBillboardNode(\"⬇️\".image()!)\n            // Position it on top of the car\n            arrow.position = SCNVector3Make(0, 4, 0)\n            // Add it as a child of the car model\n            self.modelNode.addChildNode(arrow)\n        }\n    }\n```\n \nThis is the definition of the `makeBillboardNode` method (taken from this [StackOverflow answer](https://stackoverflow.com/a/44403042/3593852), modifying the width and height of the plane so the arrow can be properly seen):\n\n``` swift\n    func makeBillboardNode(_ image: UIImage) -\u003e SCNNode {\n        let plane = SCNPlane(width: 10, height: 10)\n        plane.firstMaterial!.diffuse.contents = image\n        let node = SCNNode(geometry: plane)\n        node.constraints = [SCNBillboardConstraint()]\n        return node\n    } \n```\n\nNow, if this is not the first update, you just need to position the model, animating the movement so it looks nice:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n        } else {\n            // Begin animation\n            SCNTransaction.begin()\n            SCNTransaction.animationDuration = 1.0\n                \n            // Position the model in the correct place\n            positionModel(location)\n                \n            // End animation\n            SCNTransaction.commit()\n        }\n    }\n```\n\nTo position the model, you just need to rotate first, then translate it to the correct position and scale it:\n\n``` swift\n    func positionModel(_ location: CLLocation) {\n        // Rotate node\n        self.modelNode.transform = rotateNode(Float(-1 * (self.heading - 180).toRadians()), self.originalTransform)\n            \n        // Translate node\n        self.modelNode.position = translateNode(location)\n            \n        // Scale node\n        self.modelNode.scale = scaleNode(location)\n    }\n```\n\nThe order is important because of how matrix multiplication works (`a * b` is not the same than `b * a`).\n\nIn ARKit, rotation in the y-axis is counterclockwise (and handled in radians), so we need to subtract `180º` and make the angle negative. This is the definition of the method `rotateNode`:\n\n``` swift\n    func rotateNode(_ angleInRadians: Float, _ transform: SCNMatrix4) -\u003e SCNMatrix4 {\n        let rotation = SCNMatrix4MakeRotation(angleInRadians, 0, 1, 0)\n        return SCNMatrix4Mult(transform, rotation)\n    }\n```\n\nI scale the node in proportion to the distance. They are inversely proportional -the greater the distance, the less the scale. In my case, I just divide `1000` by the distance and don’t allow the value to be less than `1.5` or great than `3`:\n\n``` swift\n    func scaleNode (_ location: CLLocation) -\u003e SCNVector3 {\n        let scale = min( max( Float(1000/distance), 1.5 ), 3 )\n        return SCNVector3(x: scale, y: scale, z: scale)\n    }\n```\n\nI got these values from trial and error. They will vary depending on the model you’re using.\n\nTo translate the node, you have to calculate the transformation matrix and get the position values from that matrix (from its fourth column, referenced by a zero-based index):\n\n``` swift\n    func translateNode (_ location: CLLocation) -\u003e SCNVector3 {\n        let locationTransform = \n            transformMatrix(matrix_identity_float4x4, userLocation, location)\n        return positionFromTransform(locationTransform)\n    }\n    \n    func positionFromTransform(_ transform: simd_float4x4) -\u003e SCNVector3 {\n        return SCNVector3Make(\n            transform.columns.3.x, transform.columns.3.y, transform.columns.3.z\n        )\n    }\n```\n\nTo calculate the transformation matrix: \n\n- You use an identity matrix (you don’t have to use the matrix of the camera or something like that, the position and orientation of the driver are independent of your position and orientation.\n- You have to calculate the bearing using the formula explained in the previous section:\n    atan2 ( \n        sin(long2 - long1) * cos(long2),\n        cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(long2 - long1)\n    )\n- Using an identity matrix, get a rotation matrix in the y-axis using that bearing.\n- The distance is given by the z-axis, so create a four element vector with the distance in the z position to get a translation matrix.\n- Multiply both matrices (remember, the order is important) to combine them.\n- Get the final transformation by multiplying the result of the previous step with the matrix passed as an argument. \n\nAll this is done with the following methods:\n\n``` swift\n    func transformMatrix(_ matrix: simd_float4x4, _ originLocation: CLLocation, _ driverLocation: CLLocation) -\u003e simd_float4x4 {\n        let bearing = bearingBetweenLocations(userLocation, driverLocation)\n        let rotationMatrix = rotateAroundY(matrix_identity_float4x4, Float(bearing))\n            \n        let position = vector_float4(0.0, 0.0, -distance, 0.0)\n        let translationMatrix = getTranslationMatrix(matrix_identity_float4x4, position)\n            \n        let transformMatrix = simd_mul(rotationMatrix, translationMatrix)\n            \n        return simd_mul(matrix, transformMatrix)\n    }\n        \n    func getTranslationMatrix(_ matrix: simd_float4x4, _ translation : vector_float4) -\u003e simd_float4x4 {\n        var matrix = matrix\n        matrix.columns.3 = translation\n        return matrix\n    }\n        \n    func rotateAroundY(_ matrix: simd_float4x4, _ degrees: Float) -\u003e simd_float4x4 {\n        var matrix = matrix\n        \n        matrix.columns.0.x = cos(degrees)\n        matrix.columns.0.z = -sin(degrees)\n            \n        matrix.columns.2.x = sin(degrees)\n        matrix.columns.2.z = cos(degrees)\n        return matrix.inverse\n    }\n        \n    func bearingBetweenLocations(_ originLocation: CLLocation, _ driverLocation: CLLocation) -\u003e Double {  \n        let lat1 = originLocation.coordinate.latitude.toRadians()\n        let lon1 = originLocation.coordinate.longitude.toRadians()\n            \n        let lat2 = driverLocation.coordinate.latitude.toRadians()\n        let lon2 = driverLocation.coordinate.longitude.toRadians()\n            \n        let longitudeDiff = lon2 - lon1\n            \n        let y = sin(longitudeDiff) * cos(lat2);\n        let x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(longitudeDiff);\n            \n        return atan2(y, x)\n    }\n```\n\nAbout how to rotate in the y-axis, the method returns the inverse of the matrix because rotations in ARKit are counterclockwise. [Here’s an answer from Mathematics Stack Exchange that explains rotation matrices pretty well](https://math.stackexchange.com/a/1616461).\n\nAnd that’s it, time to test the app.\n\n\nThe first time you run the app, you’ll have to give permissions to the camera:\n\n![realtime-geolocation-arkit-corelocation-camera-permission](//images.contentful.com/1es3ne0caaid/1len5eGbVm0aMcAQMYseo8/2133654186603aed30f295ff245e649c/realtime-geolocation-arkit-corelocation-camera-permission.png)\n\nAnd to the location service:\n\n![realtime-geolocation-arkit-corelocation-location-permission](//images.contentful.com/1es3ne0caaid/2YLXGZu19miIY0uWWgsEGm/548ce8a657e39d8de95e9abcfab5653f/realtime-geolocation-arkit-corelocation-location-permission.png)\n\nAnd wait for a few seconds so the app can get the location and connect to Pusher.\n\nTo test it, you’ll need someone that publishes location events while driving.\n\nOn [this GitHub repository](https://github.com/eh3rrera/PublishLocationiOSPusher), you can find an app for iOS that publishes location events. \n\nIt uses CoreLocation, and the code is pretty similar to the one shown in the previous section but it requests the location information every one or two seconds. \n\nAs a note, for the heading measurement, it’s important to hold the device in the direction the driver is heading.\n\nFor a quick test, you can use the [following Node.js script](https://gist.github.com/eh3rrera/6a643e77d5dfdc6564b84921372f51ad) to manually send some location coordinates (that you can get [from this site](https://www.latlong.net/convert-address-to-lat-long.html)) every two seconds:\n\n``` javascript\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: 'YOUR_PUSHER_APP_',\n      key: 'YOUR_PUSHER_APP_KEY',\n      secret: 'YOUR_PUSHER_APP_SECRET',\n      cluster: 'YOUR_PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    const locations = [\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"}\n    ];\n    \n    locations.forEach((loc, index) =\u003e {\n        setTimeout(() =\u003e {\n            console.log(loc);\n            pusher.trigger('private-channel', 'client-new-location', loc);\n        }, 2000*index);\n    });\n```\n\nOnce you have Node.js installed, you just have to copy this script to a file, let’s say `publish.js`, create a `package.json` file with the command:\n\n``` javascript\n    npm init\n```\n\nInstall the [Pusher Node.js library](https://github.com/pusher/pusher-http-node) with:\n\n``` javascript\n    npm install --save pusher\n```\n\nEnter your Pusher and location info and execute the script with:\n\n```  javascript\n    node publish.js\n```\n\nOnce the app starts receiving location events, the 3D model of the car will appear in the direction where it is in the real world (with a small size if it’s far from you):\n\nhttps://www.youtube.com/watch?v=XBe65KD3CL4\u0026\n\n## Conclusion\n\nYou have learned how to combine the power of ARKit, CoreLocation and Pusher to create an AR app.\n\nYou can add more features to make it more useful:\n\n- Adding more information to the screen. For example, you can [convert the coordinates of the driver to an address](https://stackoverflow.com/a/38977983/3593852).\n- Adding a map so, in addition to seeing the 3D model moving in the world, you can see in which street the car is at any given time.\n- Add more car models.\n- Change the mechanism to get the car orientation. For example, by using deltas of the location.\n\nHowever, keep in mind that the app depends on the quality of the information received.\n\nIn my tests, for a few seconds after starting the driver’s app, the heading information was completely wrong, and overall, the position was off a few meters. \n\nARKit occasionally gets confused too. Sometimes this can be a problem, and it is another area of improvement. However, we’re just at the beginning. Without a doubt, these frameworks will be improved over time.","metaTitle":"Build a realtime geolocation app with ARKit and CoreLocation","metaDescription":"In this tutorial, build futuristic features for you ride hailing app by including a AR experience to find where is your car using ARKit, CoreLocation and Pusher for the realtime capabilities."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3XHz1LNPWMoIq8iSU2oaIq","type":"Entry","createdAt":"2018-02-28T11:35:06.790Z","updatedAt":"2018-03-01T17:51:41.230Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build realtime likes with Node.js","url":"realtime-likes-nodejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/poster","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-12-08","description":"In this tutorial, you will enrich your app with realtime social features such as likes using Node.js and MongoDB.","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"In June 2017, Twitter updated their web and Android apps with an interesting feature: realtime tweet statistics. In case you’re not familiar with Twitter, it simply means that you get to see the number of Likes or Retweets of a tweet increase (or decrease) as people around the world like or retweet it, without having to refresh the page. \n\nIn this article, I’ll walk you through implementing your own realtime post statistics (we’ll limit ourselves to Likes) in a simple Node.js app. Here’s how the app will work when done:\n\n![realtime-likes-nodejs-demo](//images.contentful.com/1es3ne0caaid/uFNPM8Sl7Eg6Y2U0OUYyA/5a280590f9c939393a1e3cf3b0ae0494/realtime-likes-nodejs-demo.gif)\n\nOn the home page of our app, users will see all posts and they can click a button to Like or Unlike a post. Whenever a user likes or unlikes a post, the likes count displayed next to the post should increment or decrement in every other browser tab or window where the page is open. \n\n\n## Setup the project\n\nThis tutorial assumes you have Node.js and MongoDB installed. We’ll be using Express, a popular lightweight Node.js framework. Let’s get our app set up quickly by using the [express application generator](https://expressjs.com/en/starter/generator.html):\n\n```\n    # if you don't already have it installed\n    npm install express-generator -g\n    \n    # create a new express app with view engine set to Handlebars (hbs)\n    express --view=hbs poster\n    cd poster \u0026\u0026 npm install\n[ ] \n```\n\nThen we’ll add our dependencies:\n\n```\n    npm install --save dotenv faker mongoose pusher\n```\n\nHere’s a breakdown of what each module is for.\n\n- We’re using MongoDB for our data store, so we’ll use **Mongoose** to map our models (JavaScript objects) to MongoDB documents.\n- **Faker** will help us generate fake data for our app, since we just want to demonstrate the likes feature.\n- We need **pusher** to talk to Pusher’s APIs.\n- Lastly, **dotenv** is a small package that helps us load our private configuration variables (like our Pusher app credentials) from a `.env` file.\n\nFirst, let’s define our data structures. We’ll limit the scope of this demo to two entities: **users** and **posts**. For users. we’ll store only their names. For posts, we’ll store:\n\n- the text\n- the date it was posted\n- the user who posted it (the author), and \n- the number of likes it has received\n\nSince the only detail we need about our users is their names, we won’t set up a User model; we’ll reference the user’s name directly from our Post model. So, let’s create a file, `models/post.js`:\n\n```\n    let mongoose = require('mongoose');\n    \n    let Post = mongoose.model('Post', {\n        text: String,\n        posted_at: Date,\n        likes_count: Number,\n        author: String\n    });\n    \n    module.exports = Post;\n```\n\nNow, we’ll write a small script to get some fake data into our database. Create a file called `seed.js` in the `bin` directory, with the following contents:\n\n```\n    #!/usr/bin/env node\n    \n    let faker = require('faker');\n    let Post = require('../models/post');\n    \n    // connect to MongoDB\n    require('mongoose').connect('mongodb://localhost/poster');\n    \n    // remove all data from the collection first\n    Post.remove({})\n        .then(() =\u003e {\n            let posts = [];\n            for (let i = 0; i \u003c 30; i++) {\n                posts.push({\n                    text: faker.lorem.sentence(),\n                    posted_at: faker.date.past(),\n                    likes_count: Math.round(Math.random() * 20),\n                    author: faker.name.findName()\n                });\n            }\n            return Post.create(posts);\n        })\n        .then(() =\u003e {\n            process.exit();\n        })\n        .catch((e) =\u003e {\n            console.log(e);\n            process.exit(1);\n        });\n```\n\nRun the seed using `node` (remember to start your MongoDB server by running `sudo mongod` first):\n\n```\n    node bin/seed.js\n```\n\nLet’s set up the route and view for our home page.\nThe first thing we’ll do is add our MongoDB connection setup to our `app.js`, so the connection gets created when our app gets booted. \n\n```\n    // below this line:\n    var app = express();\n    \n    // add this\n    require('mongoose').connect('mongodb://localhost/poster');\n```\n\nNext up, the route where we retrieve all posts from the db and pass them to the view. Replace the code in `routes/index.js` with this:\n\n```\n    let router = require('express').Router();\n    \n    let Post = require('./../models/post');\n    \n    router.get('/', (req, res, next) =\u003e {\n        Post.find().exec((err, posts) =\u003e {\n            res.render('index', { posts: posts });\n        });\n    \n    });\n    \n    module.exports = router;\n```\n\nLastly, the view where we render the posts. We’ll use Bootstrap for some quick styling.\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"/\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n    \n    \u003cdiv class=\"container-fluid text-center\"\u003e\n    \n        {{#each posts }}\n            \u003cdiv class=\"jumbotron\"\u003e\n                \u003cdiv\u003eby\n                    \u003cb\u003e{{ this.author.name  }}\u003c/b\u003e\n                    on\n                    \u003csmall\u003e{{ this.posted_at }}\u003c/small\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv\u003e\n                    \u003cp\u003e{{ this.text }}\u003c/p\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"row\"\u003e\n                    \u003cbutton onclick=\"actOnPost(event);\"\n                            data-post-id=\"{{ this.id }}\"\u003eLike\n                    \u003c/button\u003e\n                    \u003cspan id=\"likes-count-{{ this.id }}\"\u003e{{ this.likes_count }}\u003c/span\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        {{/each}}\n    \n    \u003c/div\u003e\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nA few notes:\n\n- We attach a **data-post-id** attribute to each Like button so we can easily identify which post it points to.\n- We  give each `likes_count` field an `id` which includes the post ID, so we can directly reference the correct `likes_count` with just the post ID.\n- We have a click handler on the Like button (`actOnPost`) . This is where we’ll toggle the button text (Like → Unlike) and increment the `likes_count`. (And the reverse for when it’s an Unlike button). We’ll implement that in a bit.\n\n## Liking and unliking logic\n\nWhen a user clicks on 'Like', here’s what we want to happen:\n\n1. The text on the button changes from \"Like\" to \"Unlike\".\n2. The likes count displayed next to the post increases by 1.\n3. An AJAX request is made to the server to increment the `likes_count` in the database by 1.\n4. The likes count displayed next to the post increases by 1 in all other tabs/windows where the page is open. (This is where Pusher comes in.)\n\nFor unliking:\n\n1. The text on the button changes from \"Unlike\" to \"Like\".\n2. The likes count displayed next to the post decreases by 1.\n3. An AJAX request is made to the server to decrement the `likes_count` in the database by 1.\n4. The likes count displayed next to the post decreases by 1 in all other tabs/windows where the page is open. (Once again, via Pusher.)\n\nWe’ll classify both Likes and Unlikes as **actions** that can be carried out on a post, so we can handle them together.\n\nLet’s add some JavaScript to our home page for the `actOnPost` method. We’ll pull in [Axios](https://github.com/axios/axios) for easy HTTP requests.\n\n```\n    \u003c!-- in index.hbs --\u003e\n    \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var updatePostStats = {\n            Like: function (postId) {\n                document.querySelector('#likes-count-' + postId).textContent++;\n            },\n            Unlike: function(postId) {\n                document.querySelector('#likes-count-' + postId).textContent--;\n            }\n        };\n    \n        var toggleButtonText = {\n            Like: function(button) {\n                button.textContent = \"Unlike\";\n            },\n            Unlike: function(button) {\n                button.textContent = \"Like\";\n            }\n        };\n    \n        var actOnPost = function (event) {\n            var postId = event.target.dataset.postId;\n            var action = event.target.textContent.trim();\n            toggleButtonText[action](event.target);\n            updatePostStats[action](postId);\n            axios.post('/posts/' + postId + '/act', { action: action });\n        };\n    \u003c/script\u003e\n```\n\nThen we define the **act** route. We’ll add it in our `routes/index.js`:\n\n```\n    router.post('/posts/:id/act', (req, res, next) =\u003e {\n        const action = req.body.action;\n        const counter = action === 'Like' ? 1 : -1;\n        Post.update({_id: req.params.id}, {$inc: {likes_count: counter}}, {}, (err, numberAffected) =\u003e {\n            res.send('');\n        });\n    });\n```\n\nHere, we change the `likes_count` using MongoDB’s built-in `$inc` operator for update operations.\n\n\n## Notifying other clients with Pusher\n\nAt this point, we’ve got our regular Liking and Unliking feature in place. Now it’s time to notify other clients when such an action happens. \nLet’s get our Pusher integration set up.  [Create a free Pusher account](https://pusher.com/signup) if you don’t have one already. Then visit [your dashboard](http://dashboard.pusher.com) and create a new app and take note of your app’s credentials. Since we’re using the `dotenv` package, we can put our Pusher credentials in a `.env` file in the root directory of our project:\n\n```\n    PUSHER_APP_ID=WWWWWWWWW\n    PUSHER_APP_KEY=XXXXXXXXX\n    PUSHER_APP_SECRET=YYYYYYYY\n    PUSHER_APP_CLUSTER=ZZZZZZZZ\n```\n\nReplace the stubs above with your app credentials from your Pusher dashboard. Then add the following line to the top of your `app.js`:\n\n``` language-javascript\n    require('dotenv').config();\n```\n\nNext we’ll modify our route handler to trigger a Pusher message whenever an action updates the `likes_count` in the database. We’ll initialise an instance of the Pusher client and use it to send a message by calling `pusher.trigger`. \nThe `trigger` method takes four parameters:\n\n- the name of the **channel** to send this message on\n- the name of the **message**\n- the **payload** (any data you wish to send with the message) \n- the **socket ID**. If this is supplied, Pusher will send this message to every client except the client with this ID. This is useful so we can exclude the client who caused the action from being notified of it again.\n\nHere’s what we want our payload to look like in the case of a `Like` action:\n\n```\n    {\n      \"action\": \"Like\",\n      \"postId\": 1234\n    }\n```\n\nSo let’s add this logic to our route handler:\n\n```\n    let Pusher = require('pusher');\n    let pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER\n    });\n    \n    router.post('/posts/:id/act', (req, res, next) =\u003e {\n        const action = req.body.action;\n        const counter = action === 'Like' ? 1 : -1;\n        Post.update({_id: req.params.id}, {$inc: {likes_count: counter}}, {}, (err, numberAffected) =\u003e {\n            pusher.trigger('post-events', 'postAction', { action: action, postId: req.params.id }, req.body.socketId);\n            res.send('');\n        });\n    });\n```\n\nOn the client side (`index.hbs`) we need to handle two things:\n\n- subscribe each client to the `post-events` channel\n- .add the client’s socket ID to our `act` API request, so the server can use it to exclude the client\n\nWe’ll pull in the Pusher SDK\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \n    \u003cscript\u003e\n        var pusher = new Pusher('your-app-id', {\n            cluster: 'your-app-cluster'\n        });\n        var socketId;\n    \n        // retrieve the socket ID on successful connection\n        pusher.connection.bind('connected', function() {\n            socketId = pusher.connection.socket_id;\n        });\n    \n    \n        var channel = pusher.subscribe('post-events');\n        channel.bind('postAction', function(data) {\n            // log message data to console - for debugging purposes\n            console.log(data);\n            var action = data.action;\n            updatePostStats[action](data.postId);\n        });\n    \u003c/script\u003e\n```\n\nAll done! Start your app by running:\n\n```\n    npm start\n```\n\nNow, if you open up http://localhost:3000 in two (or more) tabs in your browser, you should see that liking a post in one instantly reflects in the other. Also, because of our `console.log` statement placed earlier, you’ll see the event is logged:\n\n![realtime-likes-nodejs-console](//images.contentful.com/1es3ne0caaid/262xM0ZuzCuaCYe04SA4y8/0cd712b39dc85fc61547093d90731828/realtime-likes-nodejs-console.png)\n\n## Conclusion\n\nIn this article, we’ve seen how Pusher’s publish-subscribe messaging system makes it straightforward to implement a realtime view of activity on a particular post. Of course, this is just a starting point; we look forward to seeing all the great things you’ll build.","metaTitle":"Build realtime likes with Node.js","metaDescription":"Create a rich social features in your app like realtime likes using Node.js and MongoDB."}}],"defaultValue":"Channels \u0026 Node.js","queryType":"tag","pages":15,"route":"/tutorials","query":{"product":"Channels","tag":"Node.js","page":"11"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Node.js","page":"11"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Node.js&page=11 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:44:39 GMT -->
</html>