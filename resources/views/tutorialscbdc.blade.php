<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=React&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:15 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">60</span> tutorials for “<span class="css-npldjc ehwuahf2">React</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsb028.html?product=Channels&amp;tag=React" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials9a85.html?product=Beams&amp;tag=React" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="React"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/continuous-integration-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with continuous integration in React Native - Part 1: Introduction</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This three-part series will guide you through setting up continuous integration for your React Native projects. In part ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-feed-react-cloudinary.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live photo feed using React and Cloudinary</h3><p class="css-k12xad e5jrto45">In this short tutorial, create a live photo feed using Node, React and Cloudinary. Upload and publish photos in realtime...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chatbot-preact-witai.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a chatbot with Preact and Wit.ai</h3><p class="css-k12xad e5jrto45">Build a chatbot using Preact and Wit.ai, with a Node.js backend. Create custom entities, and implement realtime function...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-blog-kubeless.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kubernetes<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Adding realtime functionality to a blog using Kubeless</h3><p class="css-k12xad e5jrto45">In this tutorial you will create a simple blog using serverless architecture for the backend, specifically Kubeless. You...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/accessible-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making accessible React Native apps</h3><p class="css-k12xad e5jrto45">This tutorial looks at ways to improve the accessibility of React Native apps. You will take a (provided) starter app an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/storybook-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Using Storybook with React Native</h3><p class="css-k12xad e5jrto45">Learn how to use Storybook for React Native development. The tutorial introduces Storybook and the concepts of component...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/football-feed-go-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a football results feed with Go and React</h3><p class="css-k12xad e5jrto45">Build a realtime football results feed, using Go for the backend and React for the frontend. Admins will be able to send...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-comments-gatsby-blog.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Add realtime comments to a Gatsby blog</h3><p class="css-k12xad e5jrto45">Build a simple blog with a live commenting feature. Use Gatsby, the React-based static site generator, to create the blo...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-comments-gatsby.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Add live comments in Gatsby</h3><p class="css-k12xad e5jrto45">Build a simple website with Gatsby and React featuring realtime comments. Create a football blog, where users can post c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials1767.html?tag=React&amp;page=3" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials6ea5.html?tag=React&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorialsf233.html?tag=React&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials1767.html?tag=React&amp;page=3" class="css-5s6711 edg0byb1">3</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialscbdc.html?tag=React&amp;page=4" class="css-2wakph edg0byb1">4</a><a href="tutorialsb734.html?tag=React&amp;page=5" class="css-5s6711 edg0byb1">5</a><a href="tutorials69d4.html?tag=React&amp;page=6" class="css-5s6711 edg0byb1">6</a><a href="tutorials43f9.html?tag=React&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorialsb734.html?tag=React&amp;page=5" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":60,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xDhRZpEsViceuYY0iyQuo","type":"Entry","createdAt":"2018-09-18T17:58:02.532Z","updatedAt":"2018-09-20T21:05:51.684Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with continuous integration in React Native - Part 1: Introduction","url":"continuous-integration-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/ReactNativeCI.git","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-09-17","description":"This three-part series will guide you through setting up continuous integration for your React Native projects. In part one, learn about the principles of continuous integration, and get an overview of the tools and app we will use in the series.","prerequisite":"Knowledge of React and React Native is required. Your machine should be set up for React Native development.","content":"As React Native continues to grow as a platform, so do the tools and development practices revolving around it. One such practice is continuous integration. It has been a staple for the web development community for quite some time, and for good reason. Manual processes tend to be brittle, and mistakes can’t really be avoided if things are done by hand. One can say that it’s only natural for the React Native community to embrace the continuous integration practice, after all, we use the same language (JavaScript) to develop React Native apps. \n\nIn this series, we’ll take a look at how we can implement continuous integration in React Native. Specifically, we’re going to tackle the following topics:\n\n- Part 1: Introduction to continuous integration\n- Part 2: Starting CI with App Center\n- Part 3: Advanced CI with Bitrise\n\nNote that we’ll only cover continuous integration in this series. Continuous deployment is a whole other topic.\n\nIn this part, I’ll introduce you to continuous integration. You’ll learn what CI is, its importance, and how CI is done in React Native. Next, I'll introduce you to the CI services that we will be using. Lastly, I'll introduce you to the app that we’re going to work on throughout the series.\n\nYou can find the code used in this series on its [GitHub repo](https://github.com/anchetaWern/ReactNativeCI.git). The `starter` branch contains the pre-coded app. While the final output for each part will have their own branch (`part2` and `part3`). There’s no `part1`  because we’re not really making any changes to the starter project in this part. The `master` branch contains the final output for the entire series.\n\n\n## Prerequisites\n\nTo follow this series, you need to have basic knowledge of React and React Native. Since continuous integration is more of like an advanced topic, I assume that you have already developed a few apps before. It doesn’t matter if it was released in the app stores or not.\n\nThe project that we will be working on uses Redux, so experience on using that will be helpful as well.\n\nKnowledge of testing tools such as Jest and Detox will be helpful but not required.\n\nYou also need to have experience in using version control software such as [Git](https://git-scm.com/). We’ll be specifically using Git in this series.\n\nYour machine should also be set up for React Native development. So either Android or Xcode needs to be installed. This series will provide instructions for both platforms. We’ll be using [Yarn](https://yarnpkg.com/) to install packages, so you should have that installed as well.\n\n\n## What is continuous integration?\n\nContinuous integration is the practice of frequently committing small changes to a shared repository. This can range from once per day to multiple times per day. \n\nAutomated tests (unit, functional, integration) are then run to check if the whole system is still working correctly. If it is, the changes can either be deployed to production or reviewed further. If it doesn’t work, then the developer can easily fix the problem because the change is only minimal.\n\nThe main benefit of using continuous integration is to be able to detect errors early so that they can be fixed immediately. That way, we can put more time into developing new features and making sure our apps are as user-friendly as possible.\n\n\n## CI workflow in React Native\n\nIf you’re coming from a web development background, the continuous integration workflow in React Native should be fairly familiar. \n\nOne huge part of the CI workflow is the server which will ensure that the app is running correctly. But unlike in a web project where the CI server usually only installs dependencies then performs some tests, in a mobile CI setup, the server also has the responsibility to build the app. That is, to come up with the `.apk` or `.ipa` file. This ensures that the app is building correctly each time new code is introduced.\n\nHere’s what the workflow looks like. This assumes that you already have an existing React Native project, and a code repository:\n\n\n1. You connect your code repo to the CI server.\n2. You set up your CI server to build the app every time new code is committed to the `develop` branch of your repo.\n3. You create a new branch called `awesome-feature-1` off of your `develop` branch.\n4. You add the code for the new feature and add some tests. \n5. You test the changes locally by running the tests, building the app, and manually testing the new feature.\n6. Once you’re fairly sure that the app is working, you merge the `awesome-feature-1` branch to the `develop` branch and push it to your repo.\n7. The CI server “sees” that a new code has been added to the `develop` branch so it installs the dependencies and builds the app. \n8. After the app is successfully built, it runs the unit and functional tests.\n9. Once the tests pass, the `.apk` or `.ipa` files become available for download.\n10. If at some point, an error occurred while the CI server is doing all of those, an email is automatically sent to inform you that the build broke.\n11. You create a new branch off of the `awesome-feature-1` branch and call it `awesome-feature-1-fix-1`. From there, you work on the fix and merge it back to the `awesome-feature-1` branch and then to the `develop` branch once you’re done with the local tests.\n12. You push the `develop` branch to your repo and the cycle continues.\n\nNote that the steps above are highly dependent on the [Git workflow](https://www.atlassian.com/git/tutorials/comparing-workflows) that you’ve adopted. Your branching model might look different from the one used above, and that’s ok. But no matter which model you’ve adopted or CI services you use, the general workflow will pretty much look the same: you implement a new feature → you push it to the code repo → CI server builds the app.\n\n\n## CI services for React Native\n\nIn this section, I’ll give you an overview of the services that we’re going to use throughout the series:\n\n\n- [Visual Studio App Center](https://visualstudio.microsoft.com/app-center/)\n- [Bitrise](https://www.bitrise.io/)\n\n### Visual Studio App Center\n\nApp Center is a platform that allows you to continuously build, test, release, and monitor apps. It supports [GitHub](https://github.com/), [Bitbucket](https://bitbucket.org/), and [Visual Studio Team Services](https://visualstudio.microsoft.com/team-services/). That means you can connect your code repo to any of these services. So every time you push some changes to a specific branch, it will automatically build your app.\n\nApp Center supports the following mobile app development platforms:\n\n\n- Swift \n- Objective-C\n- Java\n- Xamarin\n- React Native\n\nIf you’re doing any sort of development in any of these platforms, expect that there is some form of support that allows you to implement continuous integration in an easier way (compared to when you’re doing it by hand). \n\nFor example, App Center supports automated UI testing with frameworks such as Espresso, Appium, and XCUITest. Those frameworks are great if you’re developing a native Android or iOS app because you’re most likely using them already. But if you’re a React Native developer and you’re using something like [Detox](https://github.com/wix/detox), you have no choice but to implement it by hand. \n\nThe good thing about App Center is that it supports [custom build scripts](https://docs.microsoft.com/en-us/appcenter/build/custom/scripts/) which allows you to use tools which aren’t supported by default.\n\nLastly, App Center is also a continuous delivery platform so it provides the following services as well:\n\n\n- Beta app distribution via Test Flight and Google Play Store\n- Live code updates via CodePush\n- App monitoring\n- App analytics\n- Push notifications\n\nYou might say that’s all well and good but how much is it? Well, fret not, because they have a very generous [free tier](https://visualstudio.microsoft.com/app-center/pricing/) so we can test most (if not all) of its services without having to dish out a few dollars.\n\n### Bitrise\n\nBitrise is a continous integration and delivery platform. Its main focus is on mobile app development so the following platforms are supported:\n\n\n- Native iOS and Android\n- Cordova\n- Xamarin\n- React Native\n\nThe main power of Bitrise comes from its 180+ [integrations](https://www.bitrise.io/integrations/). Any tool or service that you’re already using for the continuous integration and delivery of your app is supported. Well, maybe not all, but in those 180+ integrations, there’s bound to be a handful of those that support what you need to accomplish.\n\nBitrise is also beginner-friendly. When it’s your first time using it, their built-in project scanner automatically detects the platform that you’re working with. From there, it creates a base workflow that builds, tests, and deploys your app.\n\nOnce you’re ready to explore, you can use their [workflow editor](https://www.bitrise.io/features/workflow-editor) to customize each step of the build process. There is already a [ton of scripts](https://github.com/bitrise-io/bitrise-steplib) you can choose from. For example, you want to deploy a specific release to App Center’s CodePush. Or upload the `.apk` or `.ipa` file to your Dropbox account.\n\nOnce you become confident in using the workflow editor, you can actually start editing the `bitrise.yml` directly in order to customize the build script. This is where the real power of Bitrise comes in. Because other developers who have dealt with a specific problem you’re having have already written a script which allows you to solve that. From there, you can just customize it to fit your own needs.\n\nIn case you’re wondering if Bitrise is free to try. [Yes, it is](https://www.bitrise.io/pricing). They even have a specific pricing tier for that. Though the maximum amount of time that each of your builds can take is limited to 10 minutes. Don’t worry though, their servers are pretty fast and they use a smart cache so it doesn’t need to install your project dependencies for every build. To give you an example of how fast it is, the project that we will be working on only took 1.5 minutes to build.\n\n\n## Introduction to the project\n\nThroughout the series, we will be working on a single project which we will use for testing the CI services. Here’s what the project looks like:\n\n![rn-ci-demo-app](//images.ctfassets.net/1es3ne0caaid/1ZxSeHdLpCKS26QoyWiWIG/26a2946b70f38c910fe4f27bb7aaa33a/rn-ci-demo-app.png)\n\nTo keep the focus on continuous integration, the project is fairly simple. The users can scroll through a list of Pokemon and mark their favorites. Those favorites will be kept in local storage so the next time the user opens the app, they will still be marked as favorite.\n\nIf you switched to the `starter` branch, all of the features aren’t implemented yet. We will be implementing those as we progress through this series.\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned what continuous integration is and why it’s important. You also learned how CI is done in React Native and a couple of tools you can use to make it easier to set up.\n\nStay tuned for the second part where we’ll actually start to get our hands dirty with continuous integration.\n\nYou can find the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/ReactNativeCI.git).","metaTitle":"Continuous integration in React Native - Part 1","metaDescription":"This three-part series will guide you through setting up continuous integration for your React Native projects. In part one, learn about the principles of continuous integration, and get an overview of the tools and app we will use in the series."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7wyCFxpsoEwUKO8uGqm4IC","type":"Entry","createdAt":"2018-09-05T19:16:08.892Z","updatedAt":"2018-09-05T19:16:08.892Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live photo feed using React and Cloudinary","url":"live-feed-react-cloudinary","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/realtime-photo-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-09-05","description":"In this short tutorial, create a live photo feed using Node, React and Cloudinary. Upload and publish photos in realtime.","prerequisite":"You will need Node 6+ and npm installed on your machine. A basic knowledge of JavaScript (ES6) and React will be helpful.","content":"In this tutorial, we’ll go through how to build a photo feed with React and Cloudinary, while providing realtime updates to the feed using Pusher Channels. You can find the entire source code of the application in this [GitHub repository](https://github.com/ayoisaiah/realtime-photo-feed).\n\n## Prerequisites\n\nTo follow along, a basic knowledge of JavaScript (ES6) and React is required. You also need to have the following installed on your machine:\n\n- [Node.js](https://nodejs.org/en/) (v6 and above)\n- [npm](https://www.npmjs.com/)\n\n## Set up the server\n\nLet’s set up a simple Node server for the purpose of uploading images to Cloudinary and triggering realtime updates with Pusher.\n\nThe first step is to create a new empty directory and run `npm init -y` from within it. Next, install all the dependencies that we need for this project by running the command below:\n\n```\n    npm install express nedb cors body-parser connect-multiparty pusher cloudinary dotenv\n```\n\nWait for the installation to complete, then create a file named `server.js` in the root of your project directory and populate the file with the following contents:\n\n``` javascript\n    // server.js\n    \n    // import dependencies\n    require('dotenv').config({ path: 'variables.env' });\n    const express = require('express');\n    const multipart = require('connect-multiparty');\n    const bodyParser = require('body-parser');\n    const cloudinary = require('cloudinary');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const Pusher = require('pusher');\n    \n    // Create an express app\n    const app = express();\n    // Create a database\n    const db = new Datastore();\n    \n    // Configure middlewares\n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    // Setup multiparty\n    const multipartMiddleware = multipart();\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nHere, we’ve imported the dependencies into our entry file. Here’s an explanation of what they all do:\n\n\n- [express](https://expressjs.com): A minimal and flexible Node.js server.\n- [nedb](https://github.com/louischatriot/nedb): In memory database for Node.js.\n- [connect-multiparty](https://github.com/expressjs/connect-multiparty): Express middleware for parsing uploaded files.\n- [body-parser](https://github.com/expressjs/body-parser): Express middleware for parsing incoming request bodies.\n- [dotenv](https://www.npmjs.com/package/dotenv): Loads environmental variables from `.env` file into `process.env`.\n- [pusher](https://pusher.com/): Server SDK for Pusher Channels.\n- [cloudinary](http://cloudinary.com/): Cloudinary server SDK.\n\nCreate a `variables.env` file in the root of your project and add a `PORT` variable therein:\n\n```\n    // variables.env\n    \n    PORT:5000\n```\n\nHard-coding credentials in your code is a bad practice so we’ve set up `dotenv` to load the app’s credentials from `variables.env` and make them available on `process.env`.\n\n\n## Set up Pusher\n\nHead over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, retrieve your credentials from the API Keys tab, then add the following to your `variables.env` file:\n\n```\n    // variables.env\n    \n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nNext, initialize the Pusher SDK within `server.js`:\n\n``` javascript\n    // server.js\n    ...\n    const db = new Datastore();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n```\n\n## Set up Cloudinary\n\nVisit the Cloudinary website and [sign up for a free account](https://cloudinary.com/signup). Once your account is confirmed, retrieve your credentials from the dashboard, then add the following to your `variables.env` file:\n\n![react-cloudinary-credentials](//images.ctfassets.net/1es3ne0caaid/1SHB7e0OMQQsyq686Go8Q6/a42812880e0dd610159c324b1fe56f51/react-cloudinary-credentials.png)\n\n```\n    // variables.env\n    \n    CLOUDINARY_CLOUD_NAME=\u003cyour cloud name\u003e\n    CLOUDINARY_API_KEY=\u003cyour api key\u003e\n    CLOUDINARY_API_SECRET=\u003cyour api secret\u003e\n```\n\nNext, initialize the Cloudinary SDK within `server.js` under the `pusher` variable:\n\n``` javascript\n    // server.js\n    \n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n```\n\n## Create routes\n\nWe are going to create two routes for our application: the first one will serve all gallery images, while the second one handles the addition of a new image to the database.\n\nHere’s the one that handles sending all images to the client. Add this above the `port` variable:\n\n``` javascript\n    // server.js\n    \n    app.get('/', (req, res) =\u003e {\n      db.find({}, (err, data) =\u003e {\n        if (err) return res.status(500).send(err);\n        res.json(data);\n      });\n    });\n```\n\nWhen this endpoint is hit, a JSON representation of all images that exist in the database will be sent to the client, except if an error is encountered, in which case a 500 server error will be sent instead.\n\nNext, let’s add the route that adds new images sent from the client to the database.\n\n``` javascript\n    // server.js\n    \n    app.post('/upload', multipartMiddleware, (req, res) =\u003e {\n      // Upload image\n      cloudinary.v2.uploader.upload(req.files.image.path, {}, function(\n        error,\n        result\n      ) {\n        if (error) {\n          return res.status(500).send(error);\n        }\n        // Save image to database\n        db.insert(Object.assign({}, result, req.body), (err, newDoc) =\u003e {\n          if (err) {\n            return res.status(500).send(err);\n          }\n          //\n          pusher.trigger('gallery', 'upload', {\n            image: newDoc,\n          });\n          res.status(200).json(newDoc);\n        });\n      });\n    });\n```\n\nHere, the image is uploaded to Cloudinary and, on successful upload, a database entry is created for the image and a new `upload` event is emitted for the `gallery` channel along with the payload of the newly created item.\n\nThe code for the server is now complete. You can start it by running `node server.js` in your terminal.\n\n\n## Set up React app\n\nLet's bootstrap our project using the create-react-app which allows us to quickly get a React application up and running. Open a new terminal window, and run the following command to install `create-react-app` on your machine:\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process is done, you can run the command below to setup your react application:\n\n```\n    create-react-app client\n```\n\nThis command will create a new folder called `client` in the root of your project directory, and install all the dependencies needed to build and run the React application.\n\nNext, `cd` into the newly created directory and install the other dependencies which we’ll be needing for our app’s frontend:\n\n```\n    npm install pusher-js axios react-spinkit\n```\n\n- [pusher-js](https://pusher.com): Client SDK for Pusher.\n- [axios](https://github.com/axios/axios): Promise based HTTP client for the browser and Node.\n- [react-spinkit](https://www.npmjs.com/package/react-spinkit): Loading indicator component.\n\nFinally, start the development server by running `yarn start` from within the root of the `client` directory.\n\n## Add the styles for the app\n\nWithin the `client` directory, locate `src/App.css` and change its contents to look like this:\n\n``` css\n    // src/App.css\n    \n    body {\n      font-family: 'Roboto', sans-serif;\n    }\n    \n    .App {\n      margin-top: 40px;\n    }\n    \n    .App-title {\n      text-align: center;\n    }\n    \n    img {\n      max-width: 100%;\n    }\n    \n    form {\n      text-align: center;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      font-size: 18px;\n    }\n    \n    .label {\n      display: block;\n      margin-bottom: 20px;\n      font-size: 20px;\n    }\n    \n    input[type=\"file\"] {\n      margin-bottom: 20px;\n    }\n    \n    button {\n      border: 1px solid #353b6e;\n      border-radius: 4px;\n      color: #f7f7f7;\n      cursor: pointer;\n      font-size: 18px;\n      padding: 10px 20px;\n      background-color: rebeccapurple;\n    }\n    \n    .loading-indicator {\n      display: flex;\n      justify-content: center;\n      margin-top: 30px;\n    }\n    \n    .gallery {\n      display: grid;\n      grid-template-columns: repeat(3, 330px);\n      grid-template-rows: 320px 320px 320px;\n      grid-gap: 20px;\n      width: 100%;\n      max-width: 1000px;\n      margin: 0 auto;\n      padding-top: 40px;\n    }\n    \n    .photo {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n      background-color: #d5d5d5;\n      box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);\n    }\n```\n\n## Application logic\n\nOpen up `src/App.js` and change its contents to look like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import Spinner from 'react-spinkit';\n    import './App.css';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          images: [],\n          selectedFile: null,\n          loading: false,\n        };\n      }\n    \n      componentDidMount() {\n        this.setState({\n          loading: true,\n        });\n    \n        axios.get('http://localhost:5000').then(({ data }) =\u003e {\n          this.setState({\n            images: [...data, ...this.state.images],\n            loading: false,\n          });\n        });\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('gallery');\n        channel.bind('upload', data =\u003e {\n          this.setState({\n            images: [data.image, ...this.state.images],\n          });\n        });\n      }\n    \n      fileChangedHandler = event =\u003e {\n        const file = event.target.files[0];\n        this.setState({ selectedFile: file });\n      };\n    \n      uploadImage = event =\u003e {\n        event.preventDefault();\n    \n        if (!this.state.selectedFile) return;\n    \n        this.setState({\n          loading: true,\n        });\n    \n        const formData = new FormData();\n        formData.append(\n          'image',\n          this.state.selectedFile,\n          this.state.selectedFile.name\n        );\n    \n        axios.post('http://localhost:5000/upload', formData).then(({ data }) =\u003e {\n          this.setState({\n            loading: false,\n          });\n        });\n      };\n    \n      render() {\n        const image = (url, index) =\u003e (\n          \u003cimg alt=\"\" className=\"photo\" key={`image-${index} }`} src={url} /\u003e\n        );\n    \n        const images = this.state.images.map((e, i) =\u003e image(e.secure_url, i));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003ch1 className=\"App-title\"\u003eLive Photo Feed\u003c/h1\u003e\n    \n            \u003cform method=\"post\" onSubmit={this.uploadImage}\u003e\n              \u003clabel className=\"label\" htmlFor=\"gallery-image\"\u003e\n                Choose an image to upload\n              \u003c/label\u003e\n              \u003cinput\n                type=\"file\"\n                onChange={this.fileChangedHandler}\n                id=\"gallery-image\"\n                accept=\".jpg, .jpeg, .png\"\n              /\u003e\n              \u003cbutton type=\"submit\"\u003eUpload!\u003c/button\u003e\n            \u003c/form\u003e\n    \n            \u003cdiv className=\"loading-indicator\"\u003e\n              {this.state.loading ? \u003cSpinner name=\"spinner\" /\u003e : ''}\n            \u003c/div\u003e\n    \n            \u003cdiv className=\"gallery\"\u003e{images}\u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nI know that’s a lot of code to process in one go, so let me break it down a bit.\n\nThe `state` of our application is initialized with three values: `images` is an array that will contain all images in our photo feed, while `selectedFile` represents the currently selected file in the file input. `loading` is a Boolean  property that acts as a flag to indicate whether the loading component, `Spinner`, should be rendered on the page or not.\n\nWhen the user selects a new image, the `fileChangedHandler()` function is invoked, which causes `selectedFile` to point to the selected image. The **Upload** button triggers a form submission, causing `uploadImage()` to run. This function basically sends the image to the server and through an `axios` post request.\n\nIn the `componetDidMount()` lifecycle method, we try  to fetch all the images that exist in the database (if any) so that on page refresh, the feed is populated with existing images.\n\nThe Pusher client library provides a handy  `bind` function that allows us to latch on to events emitted by the server so that we can update the application state. You need to update the `pusher` variable with your app key and cluster before running the code. Here, we’re listening for the `upload` event on the `gallery` channel. Once the `upload` event is triggered, our application is updated with the new image as shown below:\n\n![react-cloudinary-demo](//images.ctfassets.net/1es3ne0caaid/4tWSUnHBt6OI64cOMAQQeC/e3ef4e5b1721a278c65d948956136e7b/react-cloudinary-demo.gif)\n\n## Conclusion\n\nYou have now learned how easy it is to create a live feed and update several clients with incoming updates in realtime with Pusher. \n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository.](https://github.com/ayoisaiah/realtime-photo-feed)","metaTitle":"Build a live photo feed using React and Cloudinary","metaDescription":"Use Node, React and Cloudinary to create a live photo feed. Upload and publish photos in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2XflDszQXuWmUW82mC0KWs","type":"Entry","createdAt":"2018-08-16T18:40:59.286Z","updatedAt":"2018-08-16T18:40:59.286Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a chatbot with Preact and Wit.ai","url":"chatbot-preact-witai","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/preact-chatbot","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-08-16","description":"Build a chatbot using Preact and Wit.ai, with a Node.js backend. Create custom entities, and implement realtime functionality to allow users to interact with the bot instantly.","prerequisite":"You will need a recent version of Node and npm installed on your machine. A basic understanding of React or Preact will be helpful.","content":"In this tutorial, we will consider how to build a realtime chatbot that incorporates NLP using [Preact](https://preactjs.com), [Wit.ai](https://wit.ai) and [Pusher Channels](https://pusher.com/docs). You can find the entire source code of the application in this [GitHub](https://github.com/ayoisaiah/preact-chatbot) [repository](https://github.com/ayoisaiah/preact-chatbot).\n\nChatbots have become more and more prevalent over the past few years, with several businesses taking advantage of them to serve their customers better.\n\nMany chatbots integrate natural language processing (NLP) which adds a more human touch to conversations, and helps them understand a wider variety of inputs.\n\n## Prerequisites\n\nBefore you continue, make sure  you have [Node.js](https://nodejs.org/en/), [npm](https://www.npmjs.com/) and `curl` installed on your computer. [You can find out how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node).  \n\nThe versions I used while creating this tutorial are as follows:\n\n- Node.js v10.4.1\n- npm v6.3.0\n\nYou can view the version of Node and `npm` you have installed by running the following commands in your terminal:\n\n```\n    node -v\n    npm -v\n```\n\nI believe the code will still work even if you’re on an older version of Node, but if you have any trouble completing the tutorial, try upgrading to the versions I used to see if it fixes your problem.\n\nAlso investigate how to install `curl` on your favorite operating system, or use [this website](https://onlinecurl.com/).\n\nFinally, you need to have a basic understanding of JavaScript and Preact or React, but no prior experience with Pusher or Wit.ai is required.\n\n## Getting started\n\nLet's bootstrap our project using the [preact-cli](https://github.com/developit/preact-cli) tool which allows us to quickly get a Preact application up and running.\n\nOpen up your terminal, and run the following command to install `preact-cli` on your machine:\n\n```\n    npm install -g preact-cli\n```\n\nOnce the installation completes, you'll have access to the `preact` command that will be used to setup the project. Run the following command in the terminal to create your Preact app:\n\n```\n    preact create simple preact-chatbot\n```\n\nThe above command will create a new directory called `preact-chatbot` and install `preact` as well as its accompanying dependencies. It may take a while to complete, so sit tight and wait. Once it’s done, you should see a some information in the terminal informing you of what you can do next.\n\n![preact-new-project](//images.ctfassets.net/1es3ne0caaid/1mPFykN3V2A4MO0asuwEgm/4b6dcebf806b0e17d8290c72be1e61fd/preact-new-project.png)\n\nNext, change into the newly created directory and run `npm run start` to start the development server.\n\nOnce the application compiles, you will be able to view it at http://localhost:8080. When you open up that URL in your browser, you should see a page on your screen that looks like this:\n\n![preact-hello-world](//images.ctfassets.net/1es3ne0caaid/4edVeotl7WI2kU4IAgoAq2/1d6982ab1a8a55ed299fee2ff931a5d3/preact-hello-world.png)\n\n## Create your application frontend with Preact\n\nOpen up `index.js` in your text editor, and change its contents to look like this:\n\n``` javascript\n    // index.js\n    \n    import './style';\n    import { Component } from 'preact';\n    \n    export default class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          userMessage: '',\n          conversation: [],\n        };\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    \n      handleChange(event) {\n        this.setState({ userMessage: event.target.value });\n      }\n    \n      handleSubmit(event) {\n        event.preventDefault();\n        const msg = {\n          text: this.state.userMessage,\n          user: 'user',\n        };\n    \n        this.setState({\n          conversation: [...this.state.conversation, msg],\n        });\n    \n        fetch('http://localhost:7777/chat', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            message: this.state.userMessage,\n          }),\n        });\n    \n        this.setState({ userMessage: '' });\n      }\n    \n      render() {\n        const ChatBubble = (text, i, className) =\u003e {\n          const classes = `${className} chat-bubble`;\n          return (\n            \u003cdiv key={`${className}-${i}`} class={`${className} chat-bubble`}\u003e\n              \u003cspan class=\"chat-content\"\u003e{text}\u003c/span\u003e\n            \u003c/div\u003e\n          );\n        };\n    \n        const chat = this.state.conversation.map((e, index) =\u003e\n          ChatBubble(e.text, index, e.user)\n        );\n    \n        return (\n          \u003cdiv\u003e\n            \u003ch1\u003eRealtime Preact Chatbot\u003c/h1\u003e\n            \u003cdiv class=\"chat-window\"\u003e\n              \u003cdiv class=\"conversation-view\"\u003e{chat}\u003c/div\u003e\n              \u003cdiv class=\"message-box\"\u003e\n                \u003cform onSubmit={this.handleSubmit}\u003e\n                  \u003cinput\n                    value={this.state.userMessage}\n                    onInput={this.handleChange}\n                    class=\"text-input\"\n                    type=\"text\"\n                    autofocus\n                    placeholder=\"Type your message and hit Enter to send\"\n                  /\u003e\n                \u003c/form\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nIf you have some experience with Preact or React, the above code should be straightforward to understand. The state of the application is initialized with two values:  `userMessage` which contains the value of whatever the user types into the input field, and `conversation` which is an array that will hold each message in the conversation.\n\nThe `handleChange` function runs on every keystroke to update `userMessage` which allows the displayed value to update as the user types. When the user hits the `Enter` button the form will be submitted and `handleSubmit` will be invoked. \n\n`handleSubmit` updates the  `conversation` state with the contents of the user's message and sends the message in a `POST` request to the `/chat` endpoint which we will soon setup in our app’s server component, before clearing the input field by setting `userMessage` to an empty string.\n\n## Add the styles for the application\n\nLet's add the styles for the app’s frontend. Open up `style.css` in your editor and replace its contents with the following styles:\n\n``` css\n    // style.css\n    \n    html, body {\n      font: 14px/1.21 'Helvetica Neue', arial, sans-serif;\n      font-weight: 400;\n      box-sizing: border-box;\n    }\n    \n    *, *::before, *::after {\n      box-sizing: inherit;\n      margin: 0;\n      padding: 0;\n    }\n    \n    h1 {\n      text-align: center;\n      margin-bottom: 40px;\n    }\n    \n    .chat-window {\n      width: 750px;\n      margin: auto;\n      border: 1px solid #eee;\n    }\n    \n    .conversation-view {\n      width: 100%;\n      min-height: 300px;\n      padding: 20px 40px;\n    }\n    \n    .message-box {\n      width: 100%;\n      background-color: #d5d5d5;\n      padding: 10px 20px;\n    }\n    \n    .text-input {\n      width: 100%;\n      border-radius: 4px;\n      border: 1px solid #999;\n      padding: 5px;\n    }\n    \n    .chat-bubble {\n      font-size: 20px;\n      margin-bottom: 20px;\n      width: 100%;\n      display: flex;\n    }\n    \n    .chat-bubble.ai {\n      justify-content: flex-end;\n    }\n    \n    .chat-bubble.ai .chat-content {\n      background-color: #eec799;\n    }\n    \n    .chat-content {\n      display: inline-block;\n      padding: 8px 15px;\n      background-color: #bada55;\n      border-radius: 10px;\n    }\n```\n\nNow, the application should look like this:\n\n![preact-demo-1](//images.ctfassets.net/1es3ne0caaid/3E3qH2JZlKokeCwCeqC2e8/427d30a0046bf3fc09ea865372edbcf5/preact-demo-1.png)\n\n\n## Setup your Wit.ai application\n\nHead over to the [Wit.ai website](https://wit.ai) and create a free account.\n\nOnce you are signed in, hit the **+** icon at the top right of the page to create a new application. Enter your app name and click the **+Create App** button at the bottom.\n\n![witai-create-app](//images.ctfassets.net/1es3ne0caaid/3pNYuoHdgkwcom6AeeMmKa/331b33fab6db187d4bb2b3ff51ae15d1/witai-create-app.png)\n\nYou should see the following page once your app has been created.\n\n![witai-new-app](//images.ctfassets.net/1es3ne0caaid/34M4WfEdWwswGAWQi0U4u0/157b5b6650b5ad9b1f9f53fc5549f3f3/witai-new-app.png)\n\n## Create your first entity\n\nWit.ai uses entities to help you understand user queries and extract meaningful information from them. Let's setup an entity that will enable our bot to understand common greetings like \"Hi\" or \"Hello\". \n\nType the word \"Hello\" in the \"User says…\" input field, then select the “wit/greetings” entity in the **Add a new entity** field. Use the dropdown on the right to set the value of the entity to **true**.\n\n![witai-new-entity](//images.ctfassets.net/1es3ne0caaid/3cpWaboPnO4Q8a2y0QMkYS/d6eeec27f83db214a5fc8789a4948263/witai-new-entity.png)\n\nOnce done, hit the **Validate** button to add the entity to your application. You can repeat the steps for other greetings such as \"Hi\", \"Hey\", \"Good morning\" etc.\n\n![witai-entity-validate](//images.ctfassets.net/1es3ne0caaid/35NxRkXs40uWu6CQM4we8q/5572518f63a427f90a7b52b047e4c66a/witai-entity-validate.png)\n\nIf you click on the **wit/greetings** entry at the bottom, you will be directed to the entity page that contains all the expressions under that entity.\n\n![witai-expressions](//images.ctfassets.net/1es3ne0caaid/2flNrPZj0kgYeq2mCMo0eE/5560609feebdf8e0c65eb352248a7e49/witai-expressions.png)\n\n## Create a custom entity\n\n`wit/greetings` is an example of a [built-in entity.](https://wit.ai/docs/built-in-entities/20180601) These built-in entities are prefixed by `wit/`, and are defined to extract common expressions from messages. Things like age, money, email address, location and the likes are all covered by Wit.ai’s built-in entities.\n\nYou can train our bot to understand other things that the built-in entities do not cover. For example, let's add an entity that allows our bot to understand a request for a joke.\n\nType \"Tell me a joke\" in the **User says...** input field, and add a new entity called \"getJoke\". As before, use the dropdown on the right to set the value of the entity to **true** and hit the **Validate** button.\n\n![witai-custom-entity](//images.ctfassets.net/1es3ne0caaid/v3wP6YwgGkyuMugQgKkIg/4df89a482c1591f9c01b30a1776a4bc1/witai-custom-entity.png)\n\n## Test your Wit.ai chatbot with curl\n\nGo to the settings page, and type \"Hello\" in the input field that says **Type something to cURL**, then copy the command to your clipboard using the copy icon on the right.\n\n![witai-curl-test-1](//images.ctfassets.net/1es3ne0caaid/l8yw7etu6WKkEAmmy2GAw/f606daeb4dd84584905e900604cca448/witai-curl-test-1.png)\n\nOpen a terminal window and paste in the command, then press Enter. This would produce some output in your terminal that shows the entity that your query matches.\n\n![witai-curl-test-2](//images.ctfassets.net/1es3ne0caaid/6xRWJ4lpOoooMc8aAyYcAO/b68aaf6d165bb588ba538613525b88d1/witai-curl-test-2.png)\n\n## Set up the server component\n\nWe need to setup a server component so that we can pass messages sent through the frontend of the app to Wit.ai for processing.\n\nRun the following command to install the dependencies we’ll be needing on the server side:\n\n```\n    npm install --save express body-parser cors node-wit dotenv\n```\n\nNext, create a new file called `server.js` in the root of your project directory and paste in the following code to set up a simple express server:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const { Wit } = require('node-wit');\n    \n    const client = new Wit({\n      accessToken: process.env.WIT_ACCESS_TOKEN,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.post('/chat', (req, res) =\u003e {\n      const { message } = req.body;\n      \n      client\n        .message(message)\n        .then(data =\u003e {\n          console.log(data);\n        })\n        .catch(error =\u003e console.log(error));\n    });\n    \n    app.set('port', process.env.PORT || 7777);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nWe've also set up a `/chat` endpoint that receives messages from the frontend of our app and sends it off to the [Wit message API](https://wit.ai/docs/http/20160330#get-intent-via-text-link). Whatever response is received is then logged to the console.\n\nBefore you start the server, create a `variables.env` file in the root of your project directory. You should add this file to your `.gitignore` so that you do not commit it into your repository by accident.\n\nHere’s how your `variables.env` file should look like:\n\n```\n    // variables.env\n    \n    PORT=7777\n    WIT_ACCESS_TOKEN=\u003cyour server access token\u003e\n```\n\nYou can grab your Wit.ai server access token by heading to the settings under API Details.\n\n![witai-server-key](//images.ctfassets.net/1es3ne0caaid/5mNVf378PuCw0a24YOQUiW/1b0b95da1db1be193ed6defa609011ec/witai-server-key.png)\n\nSave the file and run `node server.js` from the root of your project directory to start the server.\n\nNow, send a few messages in the chat window, and watch the terminal where your Node server is running. You should see some output in your terminal that shows the entity that your query matches.\n\n![preact-demo-2](//images.ctfassets.net/1es3ne0caaid/18JOCTILrK8qGWgKu0qowY/b01a7693713d12707214e54209ebb4e2/preact-demo-2.png)\n\n\n![preact-demo-cli](//images.ctfassets.net/1es3ne0caaid/4eAIENajO8yaesgqIom2kK/e3832f087d3fd84f79e31626e1c8c337/preact-demo-cli.png)\n\n## Set up responses for your chatbot\n\nNow that user messages are being passed on to Wit.ai successfully, we need to add a way to detect which entity was matched and send an appropriate response to the user.\n\nWe'll achieve that by setting up a `responses` object that contains a variety of responses for each entity that we defined, and then send a random message when the appropriate entity is matched.\n\nInside the `/chat` route and under the `message` variable, paste in the following code:\n\n``` javascript\n    // server.js\n    \n    const responses = {\n      greetings: [\"Hey, how's it going?\", \"What's good with you?\"],\n    \n      jokes: [\n        'Do I lose when the police officer says papers and I say scissors?',\n        'I have clean conscience. I haven’t used it once till now.',\n        'Did you hear about the crook who stole a calendar? He got twelve months.',\n      ],\n    };\n    \n    const firstEntityValue = (entities, entity) =\u003e {\n      const val =\n        entities \u0026\u0026\n        entities[entity] \u0026\u0026\n        Array.isArray(entities[entity]) \u0026\u0026\n        entities[entity].length \u003e 0 \u0026\u0026\n        entities[entity][0].value;\n        \n      if (!val) {\n        return null;\n      }\n      \n      return val;\n    };\n    \n    const handleMessage = ({ entities }) =\u003e {\n      const greetings = firstEntityValue(entities, 'greetings');\n      const jokes = firstEntityValue(entities, 'getJoke');\n    \n      if (greetings) {\n        return console.log(responses.greetings[\n          Math.floor(Math.random() * responses.greetings.length)\n        ]);\n      }\n    \n      if (jokes) {\n        return console.log(responses.jokes[\n          Math.floor(Math.random() * responses.jokes.length)\n        ]);\n      }\n    \n      return console.log('I can tell jokes! Say \\'tell me a joke\\'')\n    };\n```\n\nThen change the line that says `console.log(data)` to `handleMessage(data)`:\n\n``` javascript\n    // server.js\n    \n    client\n      .message(message)\n      .then(data =\u003e {\n        handleMessage(data);\n      })\n      .catch(error =\u003e console.log(error));\n```\n\nOnce we find an entity that matches, a random message from the appropriate property in the `responses` object is logged to the console. Otherwise the default response is logged.\n\n\n## Set up Pusher Channels for realtime responses\n\nNow, let's integrate Pusher into the app so that our bot can respond to the user in realtime. Head over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app.\n\nOnce your app is created, retrieve your credentials from the API Keys tab, then add the following to your `variables.env` file:\n\n```\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Integrate Pusher Channels into your Preact application\n\nFirst, install the Pusher Channels client library by running the command below:\n\n```\n    npm install pusher-js\n```\n\nThen import it at the top of `index.js`:\n\n``` javascript\n    import Pusher from 'pusher-js';\n```\n\nNext, we’ll open a connection to Channels and use the  `subscribe()` method from Pusher to subscribe to a new channel called `bot`. Finally, we’ll listen for the `bot-response` on the `bot` channel using the `bind` method and update the application state once we receive a message.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholder with the appropriate details from your Pusher account dashboard.\n\n``` javascript\n    // index.js\n    \n    componentDidMount() {\n      const pusher = new Pusher('\u003cyour app key\u003e', {\n        cluster: '\u003cyour app cluster\u003e',\n        encrypted: true,\n      });\n    \n      const channel = pusher.subscribe('bot');\n      channel.bind('bot-response', data =\u003e {\n        const msg = {\n          text: data.message,\n          user: 'ai',\n        };\n        this.setState({\n          conversation: [...this.state.conversation, msg],\n        });\n      });\n    }\n```\n\n## Trigger events from the server\n\nAdd the Pusher server library though npm:\n\n```\n    npm install pusher\n```\n\nThen import it at the top of `server.js`:\n\n``` javascript\n    // server.js\n    \n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n```\n\nChange the `handleMessage` function to look like this:\n\n``` javascript\n    // server.js\n    \n    onst handleMessage = ({ entities }) =\u003e {\n      const greetings = firstEntityValue(entities, 'greetings');\n      const jokes = firstEntityValue(entities, 'getJoke');\n      \n      if (greetings) {\n        return pusher.trigger('bot', 'bot-response', {\n          message:\n            responses.greetings[\n              Math.floor(Math.random() * responses.greetings.length)\n            ],\n        });\n      }\n    \n      if (jokes) {\n        return pusher.trigger('bot', 'bot-response', {\n          message:\n            responses.jokes[\n              Math.floor(Math.random() * responses.jokes.length)\n            ],\n        });\n      }\n    \n      return pusher.trigger('bot', 'bot-response', {\n        message: 'I can tell jokes! Say \\'tell me a joke\\'',\n      });\n    };\n```\n\nStop the node server if it is currently running by pressing `Ctrl + C` in the terminal and restart it with `node server.js`. Now you can go ahead and test your bot! Send messages like “hey”, or “Tell me a joke” and you will get replies from the bot.\n\n![preact-demo-3](//images.ctfassets.net/1es3ne0caaid/47YtBeZqT6QUakm8cACS8a/ffaed43b52eeed12e87420590f04f7cc/preact-demo-3.png)\n\n## Conclusion\n\nYou have now learned how easy it is to create a chatbot that incorporates natural language processing with Wit.ai and how to respond in realtime with Pusher Channels.\n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/preact-chatbot).","metaTitle":"How to build a chatbot with Preact and Wit.ai","metaDescription":"This tutorial shows how to create a simple chatbot using Preact, Node.js and Wit.ai. The bot will respond to queries in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2d4PDsL23OUcUGAYceGw8g","type":"Entry","createdAt":"2018-08-23T18:19:02.151Z","updatedAt":"2018-08-23T19:55:19.188Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Adding realtime functionality to a blog using Kubeless","url":"realtime-blog-kubeless","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-kubeless-blog","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4sfpYwaAdiGWy2gW6Ak2Yc","type":"Entry","createdAt":"2018-08-23T19:44:54.047Z","updatedAt":"2018-08-23T19:53:29.265Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kubernetes","url":"kubernetes","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-08-15","description":"In this tutorial you will create a simple blog using serverless architecture for the backend, specifically Kubeless. You will add basic blogging functionality, including realtime post publishing. You will use React for your frontend.","prerequisite":"You will need a functioning Kubernetes system (1.8+). This tutorial was created and tested using Kubernetes 1.10 inside Docker 18.05 on macOS 10. It assumes you can debug Kubernetes problems on your own system.","content":"## Introduction\n\nIn this article, we are going to examine how to create a simple blog using a serverless architecture - in specific, Kubeless. This will show how we can connect simple handlers together to make everything work, and how we can add new functionality easily to the system without any major upheaval. \n\n![kubeless-realtime-demo](//images.ctfassets.net/1es3ne0caaid/50s0MKQDgAYuAEg44SMOCI/844d2ce62cc17e55ca40e1a8c598095f/kubeless-realtime-demo.gif)\n\n\n### What is a serverless architecture?\n\nServerless development is a relatively recent architectural pattern that separates the business logic from the connectivity and deployment concerns. As a developer, you need only be interested in writing the actual core functionality of your application - for example, the code that will persist a blog post to the data store. You then deploy this small piece of code into the serverless framework and configure it to be triggered by appropriate events - for example, incoming HTTP requests. The framework then takes care of all the orchestration needed to make everything work together correctly.\n\n## Prerequisites\n\nThis article focuses on the use of Kubeless as a serverless architecture. This needs a functioning Kubernetes system (at least version 1.8) in order for it to work, and it is assumed that this is already available. If not then it can be set up on a local system using [Minikube](https://kubernetes.io/docs/setup/minikube/), or the [Edge channel of Docker for Desktop](https://blog.docker.com/2018/02/docker-compose-kubernetes-docker-desktop/). You will also need to install the *kubeless* CLI as described on the [Kubeless Quick Start page](https://github.com/kubeless/kubeless/blob/master/docs/quick-start.md). \n\n\n\u003e **Note:** it is assumed that Kubernetes is already installed and working on your system, and that you are able to work with it to diagnose any system-specific issues that might come up.\n\n\n\u003e **Note:** this article was tested using Kubernetes 1.10 running inside Docker 18.05 on macOS 10.13.5. \n\n\n\u003e **Note:**  you don’t need to actually set up kubeless inside your kubernetes cluster. We will cover that later on in this article.\n\nWe will be using Node.js to develop the serverless functions and Create React App for the user interface. Whilst there is no need to actually run the functions locally, npm is needed to configure their dependencies, and a full Node.js stack is needed for Create React App to be used, so ensure that these are available for use.\n\n### Create a Pusher account\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Then create a new Pusher Channels app and save the keys for later on.\n\n## Creating the blog backend\n\nOur backend architecture will be created using a series of small functions wired up in the Kubeless system. Our overall architecture will eventually look like this:\n\n![kubeless-realtime-architecture](//images.ctfassets.net/1es3ne0caaid/5TNtaKTsKA6ycUs4Uei8ms/b5a453c99e125a2a8ac335fcedc341f6/kubeless-realtime-architecture.png)\n\nThis looks a little daunting at first, but each of the five functions that we are going to write are very simple, and the rest of the system is handled for us by Kubeless.\n\n### Setting up Kubeless\n\nBefore we can do anything, we need to set up the underlying Kubeless architecture. This includes Kubeless itself, Kafka, MongoDB and Nginx for ingress.\n\n\n\u003e **Note:** at the time of writing, the latest version of Kubeless was v1.0.0-alpha.7. \n\n\n\u003e **Note:** ingress is the setup allowing HTTP calls to come in to the Kubeless infrastructure from outside on clean URLs. There are other alternatives available, but Nginx is easy to work with and does everything we need.\n\nIn order to set up Kubeless itself, we need to execute the following:\n\n```\n    $ kubectl create ns kubeless\n    namespace \"kubeless\" created\n    \n    $ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kubeless-non-rbac-v1.0.0-alpha.7.yaml\n    serviceaccount \"controller-acct\" created\n    customresourcedefinition.apiextensions.k8s.io \"functions.kubeless.io\" created\n    customresourcedefinition.apiextensions.k8s.io \"httptriggers.kubeless.io\" created\n    customresourcedefinition.apiextensions.k8s.io \"cronjobtriggers.kubeless.io\" created\n    configmap \"kubeless-config\" created\n    deployment.apps \"kubeless-controller-manager\" created\n```\n\nThis creates a Kubernetes namespace in which Kubeless will live, and creates the Kubeless resources from the specified resource definition. \n\nWe then can set up Kafka in the cluster in a very similar manner:\n\n```\n    $ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kafka-zookeeper-v1.0.0-alpha.7.yaml\n    customresourcedefinition.apiextensions.k8s.io \"kafkatriggers.kubeless.io\" created\n    service \"broker\" created\n    statefulset.apps \"kafka\" created\n    service \"kafka\" created\n    service \"zoo\" created\n    statefulset.apps \"zoo\" created\n    clusterrole.rbac.authorization.k8s.io \"kafka-controller-deployer\" created\n    clusterrolebinding.rbac.authorization.k8s.io \"kafka-controller-deployer\" created\n    service \"zookeeper\" created\n    deployment.apps \"kafka-trigger-controller\" created\n```\n\nAnd the Nginx ingress resources in the same way:\n\n```\n    $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/bc59b7ddeee6e252974853f167c299005c600781/deploy/mandatory.yaml\n    namespace \"ingress-nginx\" created\n    deployment.extensions \"default-http-backend\" created\n    service \"default-http-backend\" created\n    configmap \"nginx-configuration\" created\n    configmap \"tcp-services\" created\n    configmap \"udp-services\" created\n    serviceaccount \"nginx-ingress-serviceaccount\" created\n    clusterrole.rbac.authorization.k8s.io \"nginx-ingress-clusterrole\" created\n    role.rbac.authorization.k8s.io \"nginx-ingress-role\" created\n    rolebinding.rbac.authorization.k8s.io \"nginx-ingress-role-nisa-binding\" created\n    clusterrolebinding.rbac.authorization.k8s.io \"nginx-ingress-clusterrole-nisa-binding\" created\n    deployment.extensions \"nginx-ingress-controller\" created\n    \n    $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/bc59b7ddeee6e252974853f167c299005c600781/deploy/provider/cloud-generic.yaml\n    service \"ingress-nginx\" created\n```\n\n\u003e **Note:** at the time of writing, the current latest release of the ingress-nginx resource files were not working correctly, so this points at the last known commit that did work.\n\nFinally we want to set up MongoDB. There isn’t a convenient kubernetes resource definition for this, so we’ll write our own. Create a new file called `mongodb.yml` under your project directory as follows:\n\n``` yaml\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: mongo\n    spec:\n      ports:\n      - port: 27017\n      selector:\n        app: mongo\n      clusterIP: None\n    ---\n    apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2\n    kind: Deployment\n    metadata:\n      name: mongo\n    spec:\n      selector:\n        matchLabels:\n          app: mongo\n      strategy:\n        type: Recreate\n      template:\n        metadata:\n          labels:\n            app: mongo\n        spec:\n          containers:\n          - image: mongo:3.2.20\n            name: mongo\n            ports:\n            - containerPort: 27017\n              name: mongo\n```\n\nAnd then execute it:\n\n```\n    $ kubectl create -f mongodb.yml\n    service \"mongo\" created\n    deployment.apps \"mongo\" created\n```\n\nAt this point we have all of the infrastructure we need in order to build our application. \n\n### Creating articles\n\nOur first handler is the endpoint that will be called to create an article. This will ensure that we have the appropriate values in our request, and put a message onto the Kafka queue for other handlers to deal with. \n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir create-article\n    $ cd create-article\n    $ npm init -y\n    $ npm install --save uuid kafka-node\n```\n\nThe `uuid` module will be used to generate a new, unique ID for the article, and the `kafka-node` module is used to produce a new message onto the Kafka queue.\n\nOur actual handler is then written in `create-article/index.js` as follows:\n\n``` javascript\n    const uuid = require('uuid/v4');\n    const kafka = require('kafka-node');\n    \n    const kafkaClient = new kafka.KafkaClient({kafkaHost: 'kafka.kubeless:9092'});\n    const kafkaProducer = new kafka.Producer(kafkaClient);\n    \n    module.exports = {\n      createArticle: function (event, context) {\n    \n        return new Promise((resolve, reject) =\u003e {\n            if (!event.data.title) {\n                reject('Missing field: title');\n            } else if (!event.data.body) {\n                reject('Missing field: body');\n            } else {\n                resolve({\n                    id: uuid(),\n                    created: new Date(),\n                    title: event.data.title,\n                    body: event.data.body\n                });\n            }\n        }).then((article) =\u003e {\n            return new Promise((resolve, reject) =\u003e {\n                kafkaProducer.send([\n                    { topic: 'new-article-topic', messages: JSON.stringify(article), partition: 0 }\n                ], (err, data) =\u003e {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(article);\n                    }\n                });\n            });\n        }).then((article) =\u003e {\n            event.extensions.response.statusCode = 201;\n            return article;\n        }).catch((err) =\u003e {\n            event.extensions.response.statusCode = 400;\n            return err;\n        });\n      }\n    }\n```\n\n\u003e **Note:** we’re assuming that Kafka is installed on “kafka.kubeless:9092” and that we’re using a topic called “new-article-topic”. This is the default host and port if using the Kafka that deploys as part of Kubeless, but in a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this location.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy create-article --runtime nodejs8 --dependencies package.json --handler index.createArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `createArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create create-article --function-name create-article --path create --hostname localhost\n```\n\nThis means that calls to http://localhost/create **will trigger the function named `create-article` **- which we’ve just created.\n\nFinally we’ll create the Kafka topic that we are writing to:\n\n```\n    $ kubeless topic create new-article-topic\n```\n\nWe can test this now as well:\n\n```\n    $ curl http://localhost/create --data '{\"title\": \"My first post\", \"body\": \"This is my first post\"}' -H \"Content-type: application/json\"\n    {\"id\":\"6a61513b-06c8-4139-a816-a7188e75728e\",\"created\":\"2018-07-24T07:14:45.561Z\",\"title\":\"My first post\",\"body\":\"This is my first post\"}\n```\n\n### Persisting articles\n\nOnce we can handle the request to create an article, and put the message onto the Kafka topic, we can then handle this message to persist it into the MongoDB store.\n\nHandlers that are triggered by Kafka messages act in the exact same way as HTTP ones, including the fact that they are given an event that looks like an HTTP request. The data of this request is the message from the topic, ready to work with. We can also guarantee the contents of it, since it was put onto the topic by our own code and not by an external party.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir persist-article\n    $ cd persist-article\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `persist-article/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      persistArticle: function (event, context) {\n        const article = event.data;\n        const post = {\n          \"_id\": article.id,\n          \"created\": new Date(article.created),\n          \"title\": article.title,\n          \"body\": article.body\n        };\n    \n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect(\"mongodb://mongo.default:27017\", (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts').insert(post, (err, result) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve(post);\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\n\u003e **Note:** we’re assuming that MongoDB is installed on “mongo.default:27017” and that we’re using a database called “kubeless_blog”. This is the default host and port if using the MongoDB that deploys as part of the earlier deployment resource, but in a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy persist-article --runtime nodejs8 --dependencies package.json --handler index.persistArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `persistArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming Kafka messages on our topic to trigger this function:\n\n```\n    $ kubeless trigger kafka create persist-article --function-selector created-by=kubeless,function=persist-article --trigger-topic new-article-topic\n```\n\nAt this point, we have a setup where all successful calls to our first handler will put messages onto the Kafka topic, and then our second handler will read and process them to write into our MongoDB database.\n\n### Listing articles\n\nNow that we can get articles into our system, we need to get them out again. The first part of this is a handler to get a list of all articles. \n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir list-articles\n    $ cd list-articles\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `list-articles/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      listArticles: function (event, context) {\n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect('mongodb://mongo.default:27017', (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts')\n                    .find({})\n                    .sort({created: -1})\n                    .project({'_id': 1, 'title': 1, 'created': 1})\n                    .toArray((err, docs) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  resolve(docs.map((doc) =\u003e {\n                      return {\n                          id: doc['_id'],\n                          title: doc.title,\n                          created: doc.created\n                      };\n                  }));\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\nThis gets every article, with no pagination or filtering, and returns them in order so that the most recent ones are first. It also only returns the title of each article, not the entire text.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy list-articles --runtime nodejs8 --dependencies package.json --handler index.listArticles --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `listArticles` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create list-articles --function-name list-articles --path list --hostname localhost\n```\n\nThis means that calls to http://localhost/list **will trigger the function named `list-articles` **- which we’ve just created.\n\n### Getting individual articles\n\nFinally, we need to be able to get an individual article out so that we can display it.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir get-article\n    $ cd get-article\n    $ npm init -y\n    $ npm install --save mongodb\n```\n\nOur actual handler is then written in `get-article/index.js` as follows:\n\n``` javascript\n    const MongoClient = require('mongodb').MongoClient;\n    \n    module.exports = {\n      getArticle: function (event, context) {\n        const url = event.extensions.request.url;\n        const id = url.substring(1);\n    \n        return new Promise((resolve, reject) =\u003e {\n    \n          MongoClient.connect('mongodb://mongo.default:27017', (err, client) =\u003e {\n            if (err) {\n              console.log(err);\n              reject(err);\n            } else {\n              const db = client.db('kubeless_blog');\n    \n              db.collection('posts')\n                    .findOne({'_id': id}, (err, doc) =\u003e {\n                client.close();\n    \n                if (err) {\n                  console.log(err);\n                  reject(err);\n                } else {\n                  if (doc) {\n                    resolve({\n                      id: doc['_id'],\n                      created: doc.created,\n                      title: doc.title,\n                      body: doc.body\n                    });\n                  } else {\n                    event.extensions.response.statusCode = 404;\n                    resolve();\n                  }\n                }\n              });\n            }\n          });\n        });\n    \n      }\n    }\n```\n\nThis expects to be called with a URL containing the article ID, and then retrieves that article from the MongoDB store and returns it. If there is no matching article then an HTTP 404 is returned instead.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy get-article --runtime nodejs8 --dependencies package.json --handler index.getArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `getArticles` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming HTTP calls to trigger this function:\n\n```\n    $ kubeless trigger http create get-article --function-name get-article --path get --hostname localhost\n```\n\n\u003e **Note:** the ingress mechanism does prefix matching, not exact matching. This means that the above actually matches any calls that **start** with “/get”, such as “/get/123”.\n\nThis means that calls to http://localhost/get/123 will trigger the function named `get-article` - which we’ve just created.\n\n## Creating the blog UI\n\nNow that we have our backend functionality, we need a UI to actually drive it. This will be a [React](https://github.com/facebook/create-react-app) application, using [Semantic UI](https://react.semantic-ui.com/) for some structure and styling.\n\nFirstly we’ll create a new application using the Create React App tool:\n\n```\n    $ create-react-app ui\n```\n\nThen we’ll add some dependencies that we need:\n\n```\n    $ npm install --save axios semantic-ui-react semantic-ui-css\n```\n\nWe can now start up the UI, and it will automatically update as we make changes to it:\n\n```\n    $ npm start\n```\n\nOur UI is going to consist of two different parts - the list of articles, and the actual article that we’re looking at.\n\nFirstly, let’s create a component to represent the article list. For this, create a file called `src/ArticleList.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { List } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class ArticleList extends React.Component {\n        state = {\n            articles: []\n        };\n        _showArticle = this._handleShowArticle.bind(this);\n        loadList() {\n            axios.get('http://localhost/list')\n                .then((response) =\u003e {\n                    this.setState({\n                        articles: response.data\n                    });\n                });\n        }\n        _handleShowArticle(article) {\n            this.props.showArticle(article.id);\n        }\n        componentDidMount() {\n            this.loadList();\n        }\n        render() {\n            const articleEntries = this.state.articles.map((article) =\u003e {\n                return (\n                    \u003cList.Item key={article.id} onClick={() =\u003e this._showArticle(article)}\u003e\n                        \u003cList.Content\u003e\n                            \u003cList.Header as='a'\u003e{article.title}\u003c/List.Header\u003e\n                            \u003cList.Description as='a'\u003e{article.created}\u003c/List.Description\u003e\n                        \u003c/List.Content\u003e\n                    \u003c/List.Item\u003e\n                );\n            });\n            return (\n                \u003cList divided relaxed\u003e\n                    {articleEntries}\n                    \u003cList.Item onClick={this.props.newArticle}\u003e\n                        \u003cList.Content\u003e\n                            \u003cList.Header as='a'\u003eNew Article\u003c/List.Header\u003e\n                        \u003c/List.Content\u003e\n                    \u003c/List.Item\u003e\n                \u003c/List\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This gets the list of articles from http://localhost/list, which corresponds to the handler we defined above. \n\nNext we want a component to display a given article. For this, create a new file called `src/Article.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Card, Loader } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class Article extends React.Component {\n        state = {\n            article: undefined\n        };\n        componentDidMount() {\n            const id = this.props.id;\n            axios.get(`http://localhost/get/${id}`)\n                .then((response) =\u003e {\n                    this.setState({\n                        article: response.data\n                    });\n                });\n        }\n        render() {\n            const { article } = this.state;\n            if (!article) {\n                return \u003cLoader /\u003e;\n            }\n            return (\n                \u003cCard fluid\u003e\n                    \u003cCard.Content header={article.title} /\u003e\n                    \u003cCard.Content description={article.body} /\u003e\n                    \u003cCard.Content extra\u003e\n                        {article.created}\n                    \u003c/Card.Content\u003e\n                \u003c/Card\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This gets the article from http://localhost/get, which corresponds to the handler we defined above. \n\nFinally, we want a component to create a new article. This will be in `src/NewArticle.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Form, Button, Message } from 'semantic-ui-react';\n    import axios from 'axios';\n    export class NewArticle extends React.Component {\n        state = {\n            title: '',\n            body: ''\n        };\n        _changeTitle = this._handleChangeTitle.bind(this);\n        _changeBody = this._handleChangeBody.bind(this);\n        _postArticle = this._handlePostArticle.bind(this);\n        _handleChangeTitle(e) {\n            this.setState({\n                title: e.target.value\n            });\n        }\n        _handleChangeBody(e) {\n            this.setState({\n                body: e.target.value\n            });\n        }\n        _handlePostArticle() {\n            const { title, body } = this.state;\n            axios({\n                method: 'post',\n                url: 'http://localhost/create',\n                data: {\n                    title,\n                    body\n                },\n                headers: {\n                    'content-type': 'application/json'\n                }\n            })\n            .then(() =\u003e {\n                this.setState({\n                    title: '',\n                    body: '',\n                    success: true,\n                    error: undefined\n                });\n            }, (e) =\u003e {\n                this.setState({\n                    success: false,\n                    error: e.response.data\n                });\n            });\n        }\n        render() {\n            let message;\n            if (this.state.success) {\n                message = \u003cMessage positive\u003eArticle posted successfully\u003c/Message\u003e;\n            } else if (this.state.error) {\n                message = \u003cMessage error\u003e{this.state.error}\u003c/Message\u003e\n            }\n            return (\n                \u003cForm error={this.state.error} success={this.state.success}\u003e\n                {message}\n                \u003cForm.Field\u003e\n                  \u003clabel\u003eTitle\u003c/label\u003e\n                  \u003cinput placeholder='Title' value={this.state.title} onChange={this._changeTitle} autoFocus /\u003e\n                \u003c/Form.Field\u003e\n                \u003cForm.Field\u003e\n                  \u003clabel\u003eArticle\u003c/label\u003e\n                  \u003ctextarea placeholder=\"Article\" value={this.state.body} onChange={this._changeBody} /\u003e\n                \u003c/Form.Field\u003e\n                \u003cButton type='submit' onClick={this._postArticle} \u003ePost Article\u003c/Button\u003e\n              \u003c/Form\u003e\n            );\n        }\n    }\n```\n\n\u003e **Note:** This creates the article by POSTing to http://localhost/create, which corresponds to the handler we defined above. \n\nNow that we’ve got these components, we need to tie these together. This is done by replacing the existing `src/App.js` to read as follows:\n\n``` javascript\n    import React, { Component } from 'react';\n    import 'semantic-ui-css/semantic.min.css';\n    import { Grid, Header, Container } from 'semantic-ui-react';\n    import { ArticleList } from './ArticleList';\n    import { Article } from './Article';\n    import { NewArticle } from './NewArticle';\n    class App extends Component {\n      state = {\n        currentArticle: undefined\n      };\n      _newArticle = this._handleNewArticle.bind(this);\n      _showArticle = this._handleShowArticle.bind(this);\n      _handleShowArticle(article) {\n        this.setState({\n          currentArticle: article\n        });\n      }\n      _handleNewArticle() {\n        this.setState({\n          currentArticle: undefined\n        });\n      }\n      render() {\n        let body;\n        if (this.state.currentArticle) {\n          body = \u003cArticle id={this.state.currentArticle} /\u003e\n        } else {\n          body = \u003cNewArticle /\u003e;\n        }\n        return (\n          \u003cContainer\u003e\n            \u003cGrid\u003e\n              \u003cGrid.Row\u003e\n                \u003cGrid.Column\u003e\n                  \u003cHeader as=\"h2\"\u003e\n                    Kubeless Blog\n                  \u003c/Header\u003e\n                \u003c/Grid.Column\u003e\n              \u003c/Grid.Row\u003e\n              \u003cGrid.Row\u003e\n                \u003cGrid.Column width={12}\u003e\n                  { body }\n                \u003c/Grid.Column\u003e\n                \u003cGrid.Column width={4}\u003e\n                  \u003cArticleList showArticle={this._showArticle} newArticle={this._newArticle} /\u003e\n                \u003c/Grid.Column\u003e\n              \u003c/Grid.Row\u003e\n            \u003c/Grid\u003e\n          \u003c/Container\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nAt this point, we can use the UI to read and post articles:\n\n![kubeless-realtime-demo-no-realtime](//images.ctfassets.net/1es3ne0caaid/340Y10wn20Gscqc0a4S06g/ee857682c0b51fafe0ddfbd5c0764979/kubeless-realtime-demo-no-realtime.gif)\n\n## Adding realtime functionality to the blog\n\nCurrently, we can post articles to the blog and read ones that are posted. What we don’t get is any indication that a post has been made without refreshing the page. This can be achieved by adding Pusher in to the mix.\n\nWe are going to add a new handler into our Kubeless system that reacts to the same Kafka messages that are used to persist the messages, and which will trigger Pusher to indicate that a new post has been made.\n\n### Broadcasting articles\n\nOur new handler is going to react every time a new article is created, in the exact same way as the `persist-article` handler from above.\n\nFirstly, we need to set up a project directory and the dependencies for this:\n\n```\n    $ mkdir broadcast-article\n    $ cd broadcast-article\n    $ npm init -y\n    $ npm install --save pusher\n```\n\nOur actual handler is then written in `broadcast-article/index.js` as follows:\n\n``` javascript\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n          appId: 'PUSHER_APP_ID',\n          key: 'PUSHER_KEY',\n          secret: 'PUSHER_SECRET',\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true\n    });\n    \n    \n    module.exports = {\n      broadcastArticle: function (event, context) {\n        const article = event.data;\n        const post = {\n          \"_id\": article.id,\n          \"created\": new Date(article.created),\n          \"title\": article.title,\n          \"body\": article.body\n        };\n    \n        pusher.trigger('posts', 'new-post', post);\n      }\n    }\n```\n\n\u003e **Note:** we’re hard-coding the Pusher credentials here, which need to be updated to match those you obtained earlier. In a real-life situation you should use [Kubernetes Configmaps](https://kubernetes-v1-4.github.io/docs/user-guide/configmap/) to configure this.\n\nNow we need to deploy this into our cluster:\n\n```\n    $ kubeless function deploy broadcast-article --runtime nodejs8 --dependencies package.json --handler index.broadcastArticle --from-file index.js\n```\n\nThis creates a new serverless handler that will execute the exported function `broadcastArticle` from the file `index.js` whenever it is triggered, and which will determine all of the dependencies that this function needs based on `package.json`.\n\nThen we want to set up an Ingress URL to allow incoming Kafka messages on our topic to trigger this function:\n\n```\n    $ kubeless trigger kafka create broadcast-article --function-selector created-by=kubeless,function=broadcast-article --trigger-topic new-article-topic\n```\n\nThis is the exact same topic as was used before, so every message that triggers the `persist-article` handler will also trigger the `broadcast-article` one.\n\n### Updating the article list\n\nNow that we’re broadcasting events whenever articles are posted, we can automatically update the UI based on this. For this we want to listen to the Pusher events and react to them.\n\nFirstly, we need our Pusher dependency. From inside the UI project:\n\n```\n    $ npm install --save pusher-js\n```\n\nThen we need to update `src/ArticleList.js` to listen for the events and react accordingly. Firstly add the following to the top of the file:\n\n``` javascript\n    import Pusher from 'pusher-js';\n    \n    const pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_CLUSTER',\n        encrypted: true\n    });\n```\n\n\u003e **Note:** make sure you update this to include the App Key and Cluster from your Pusher Application you created earlier. These should exactly match those used in the `broadcast-article` handler.\n\nFinally, add the following to the `componentDidMount` method:\n\n``` javascript\n    pusher.subscribe('posts').bind('new-post', () =\u003e {\n       this.loadList();\n    });\n```\n\nThis will react to the `new-post` event that we are broadcasting by loading the full list of articles again. This means that whenever anyone posts an article, all active browsers will be told about it and get their article list updated.\n\nRestart your UI and we can see that the posts now appear automatically:\n\n![kubeless-realtime-demo](//images.ctfassets.net/1es3ne0caaid/50s0MKQDgAYuAEg44SMOCI/844d2ce62cc17e55ca40e1a8c598095f/kubeless-realtime-demo.gif)\n\n## Cleaning up\n\nOne thing that needs to be considered with a serverless application is deployment, and tearing it down if needed. We are actually running a large number of components here: five serverless functions, Kafka, Zookeeper, MongoDB, Nginx and the Kubeless framework itself. Each of these needs to be managed, and shut down, individually and correctly otherwise you leave bits hanging around.\n\nCleaning up this application can be done as follows if needed:\n\n```\n    # Broadcast Article Handler\n    kubeless trigger kafka delete broadcast-article\n    kubeless function delete broadcast-article\n    \n    # Get Article Handler\n    kubeless trigger http delete get-article\n    kubeless function delete get-article\n    \n    # List Articles Handler\n    kubeless trigger http delete list-articles\n    kubeless function delete list-articles\n    \n    # Persist Article Handler\n    kubeless trigger kafka delete persist-article\n    kubeless topic delete new-article-topic\n    kubeless function delete persist-article\n    \n    # Create Article Handler\n    kubeless trigger http delete create-article\n    kubeless function delete create-article\n    \n    # Nginx Ingress\n    kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/provider/cloud-generic.yaml\n    kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/mandatory.yaml\n    \n    # MongoDB\n    kubectl delete -f mongodb.yml\n    \n    # Kafka\n    kubectl delete -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kafka-zookeeper-v1.0.0-alpha.7.yaml\n    \n    # Kubeless\n    kubectl delete -f https://github.com/kubeless/kubeless/releases/download/v1.0.0-alpha.7/kubeless-non-rbac-v1.0.0-alpha.7.yaml\n    kubectl delete ns kubeless\n```\n\n## Summary\n\nThis article shows a brief introduction to using Kubeless to build a simple application, and then extending it by adding new functionality. We can easily see how adding this new functionality can be done later on, with no impact to the rest of the service. \n\nWhilst not shown here, there’s no reason that all of these handlers need to be written by the same team, or even in the same language. Serverless architectures, in the same way as Microservices, thrive on a disjoint ecosystem where each component is developed in the way that makes the most sense for that one component, rather than forcing a single language on the entire application.\n\nThe full source code for this can be seen on [GitHub](https://github.com/sazzer/pusher-kubeless-blog).","metaTitle":"Adding realtime functionality to a blog using Kubeless","metaDescription":"Create a basic blog using Kubeless to power a serverless backend, and React for the frontend. Learn how to create and deploy serverless functions."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1CtUK8rOmUWskec6qKQ04E","type":"Entry","createdAt":"2018-08-17T22:30:49.340Z","updatedAt":"2018-08-17T22:30:49.340Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making accessible React Native apps","url":"accessible-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNa11y","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-08-13","description":"This tutorial looks at ways to improve the accessibility of React Native apps. You will take a (provided) starter app and enhance it with various accessibility features. You will also learn how to test and measure your app's accessibility.","prerequisite":"You will need React Native and Yarn installed on your machine. Some familiarity with React Native will be helpful.","content":"In this tutorial, you’re going to learn how to make React Native apps more accessible. Specifically, we’re going to cover the following:\n\n- What is accessibility?\n- Designing apps with accessibility in mind\n- Accessibility in React Native apps\n- Accessibility testing tools\n\nOf course, we cannot hope to cover everything about accessibility. It’s a pretty big subject and it’s a continuous journey. There’s always something that you can improve in order to make the experience just a little bit more pleasant for a certain user. Instead, what we hope to achieve in this tutorial, is to take that first step into making more accessible apps.\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNa11y). The `starter` branch contains the not so accessible version of the app, while the `a11y` branch contains the more accessible version.\n\n\n## Prerequisites\n\nTo follow this tutorial, you need to know the basics of creating a React Native app. \nThe React Native development environment should also be set up on your machine.\n\nWe will be using React Native version 0.56 in this tutorial. We’ll also be using [Yarn](https://yarnpkg.com/en/) to install packages.\n\n\n## What is accessibility?\n\nBefore we proceed, it’s important that we all agree on what accessibility is, in the context of a mobile app. Accessibility or a11y, means making your apps usable to both normal users and users with disabilities. Any person can have one or more form of disability. That usually includes but not limited to the following:\n\n\n- **Visual impairments** - examples include low vision, color-blindness, and total blindness.\n- **Physical or motor disabilities** - cerebral palsy, bone and joint deformities.\n- **Mental disorders** - autism spectrum disorders such as Asperger’s syndrome, and autistic disorder.\n- **Hearing impairment** - deafness and partial hearing loss.\n- **Reading disabilities** - Dyslexia.\n\nAccessibility means designing your apps in such a way that it takes all of these disabilities into consideration in order to make the user experience pleasant for everyone. \n\n\n## What you’ll be building\n\nWe won’t actually be building anything from scratch. Instead, we’re going to make a pre-built app more accessible. Here’s what the starter app looks like:\n\n![accessible-rn-starter](//images.ctfassets.net/1es3ne0caaid/5o4PrPT43eGaCw8yGswg4A/1fe4265f13dd87224aae737a8c9f95b6/accessible-rn-starter.png)\n\nThis won’t be how the final output will look like because we’ll also be taking design into consideration (though, only a little because I’m not really a designer). \n\nIf you want to follow along, clone the repo, switch to the `starter` branch and install the dependencies:\n\n```\n    git clone https://github.com/anchetaWern/RNa11y.git\n    cd RNa11y\n    git checkout starter\n    yarn install\n    react-native upgrade\n    react-native link\n    react-native run-android\n    react-native run-ios\n```\n\n## Designing apps with accessibility in mind\n\nIn this section, we’ll redesign the app so that it becomes more accessible. We will be using the [dos and don'ts on designing for accessibility](https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/) from the [GOV.UK](https://accessibility.blog.gov.uk/2016/09/02/dos-and-donts-on-designing-for-accessibility/) website as a guide. Specifically, we’re going to adopt the following dos from their guide:\n\n\n- Use simple colors\n- Make buttons descriptive\n- Build simple and consistent layouts\n- Follow a linear, logical layout\n- Write descriptive links and heading\n- Use good contrasts and a readable font size\n- Use a combination of color, shapes, and text\n- Make large clickable actions\n\nRight off the bat, you can see that the starter app violates some of these rules. The app is already following a few, but we can still improve on it.\n\n### Use simple colors\n\nThe starter app violates this rule because it’s using a dark color for its background. It’s not really easy on the eyes, so we need to update the app and card background:\n\n``` javascript\n    // file: App.js\n    const styles = {\n      container: {\n        flex: 10,\n        backgroundColor: \"#FFF\" // update this\n      }\n    };\n```\n\n``` javascript\n    // src/components/Card.js\n    const styles = StyleSheet.create({\n      card: {\n        width: 120,\n        height: 140,\n        backgroundColor: \"#3e3e3e\", // update this\n      }\n    });\n```\n\nAlso, update the `Header` component to match. This is because the items in the status bar aren’t really very readable when using a dark background:\n\n``` javascript\n    // src/components/Header.js\n    const styles = StyleSheet.create({\n      header: {\n        paddingTop: 10,\n        backgroundColor: \"#ccc\" // update this\n      },\n      header_text: {\n        fontWeight: \"bold\",\n        color: \"#333\", // update this\n      }\n    });\n```\n\nOnce that’s done, the content should now be more readable.\n\n### Make large clickable actions\n\nNext, we need to make the buttons larger. This change is specifically useful for people with physical and motor disabilities, as they’re often the ones who have difficulty in pressing small buttons.\n\nIf you inspect the app right now, you’ll see that there’s not much space we can work with. So even if we make the buttons larger, it will still be difficult to target a specific one because there won’t be ample whitespace between them. Though we still have some free space between each card so we’ll make use of that instead.\n\nIn your `Card` component, include the `Dimensions` module so that we can get the device’s width. We’ll use it to determine how much width each card can use. In this case, we have two cards in each row so we’ll just divide it by two and add a padding. We’re also making the `height` bigger because we’re anticipating the buttons to become bigger:\n\n``` javascript\n    // src/components/Card.js\n    \n    import { View, Text, Image, StyleSheet, Dimensions } from \"react-native\"; // add Dimensions\n    \n    const { width } = Dimensions.get(\"window\");\n    \n    const cardPadding = 20;\n    const styles = StyleSheet.create({\n      card: {\n        width: (width / 2) - cardPadding, // update this\n        height: 150, // update this\n      }\n    });\n```\n\nNext, we can now proceed with updating the size and padding of the button:\n\n``` javascript\n    // src/components/IconButton.js:\n    \n    const icon_color = \"#586069\";\n    const icon_size = 25; // update this\n    \n    const styles = StyleSheet.create({\n      icon: {\n        // update these:\n        paddingLeft: 10, \n        paddingRight: 10\n      }\n    });\n```\n\nAt this point, each button should be huge and visible enough to click on.\n\n### Make buttons descriptive\n\nUnfortunately, this isn’t really something that can be implemented all the time because of design constraints. If you check the app now, you’ll see that there’s not really enough space to accommodate labels for each button. \n\nThere is a solution, but we will end up giving up the current layout (two cards per row) for a one card per row layout. So the only feasible solution is to have a walkthrough for new users. This way, you can teach what each button is used for. I won’t really be covering how to do that, but there’s a [good component](https://github.com/okgrow/react-native-copilot) which allows you to implement it easily.\n\n### Use good contrasts and a readable font size\n\nIn my opinion, the app already has pretty good contrast. But to be on the safe side, we’ll tweak it some more.\n\nFirst, we have to differentiate between each individual card and the app’s background. We can do that by applying a darker background color:\n\n``` javascript\n    // src/components/Card.js\n    const cardPadding = 20;\n    const styles = StyleSheet.create({\n      card: {\n        width: width / 2 - cardPadding,\n        height: 150,\n        backgroundColor: \"#e0e0e0\", // update this\n      }\n    });\n```\n\nNext, we need to differentiate between the card’s body and its contents:\n\n``` javascript\n    // src/components/Card.js\n    const styles = StyleSheet.create({\n      name: {\n        fontSize: 16,\n        color: \"#3a3f46\", // update this\n      }\n    });\n```\n\n``` javascript\n    // src/components/IconButton.js\n    \n    const icon_color = \"#3a3f46\"; // update this\n    const icon_size = 25;\n```\n\nLastly, we need to make the text larger. While there’s no general agreement as to what font size should we be using to optimize accessibility, a [few](https://ux.stackexchange.com/questions/102813/minimum-font-size-for-mobile-view) [people](https://accessibleweb.com/wcag_2_0_developers/minimum-font-size/) seem to swear by `16px` so we’re also going with that:\n\n``` javascript\n    const styles = StyleSheet.create({\n      name: {\n        fontSize: 16, // update this\n      }\n    });\n```\n\nWe’ve skipped the following because we’re already following them:\n\n\n- Write descriptive links and heading\n- Follow a linear, logical layout\n- Use a combination of color, shapes, and text\n- Build simple and consistent layouts\n\nOnce that’s done, the app’s design should be pretty accessible. \n\n\n## Accessibility in React Native apps\n\nThe previous section discussed mainly the visual component of accessibility. In this section, we’ll look at how to make the app more accessible for people who use screen readers.\n\nFor those unfamiliar, a screen reader reads to users what they’re currently touching on the screen. This technology is mainly used by blind or visually impaired people. If a screen reader is enabled, the user has to double tap in order to activate the intended action.\n\nIn order for a screen reader to be useful, we need to properly label all the relevant components that a user will most likely interact upon. In React Native, this can be done by adding accessibility props. Here’s an example of how we can add these props:\n \n``` javascript\n    // src/components/Header.js\n    const Header = ({ title }) =\u003e {\n      return (\n        \u003cView\n          style={styles.header}\n          accessible={true}\n          accessibilityLabel={\"Main app header\"}\n          accessibilityRole={\"header\"}\n        \u003e\n          \u003cText style={styles.header_text}\u003e{title}\u003c/Text\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nLet’s go through each of the accessibility props we’ve added to the `Header` component:\n\n\n- `accessible` - accepts a boolean value that’s used to mark whether a specific component is an accessible element or not. This means that the screen reader will read whatever label you put on it. Be careful with using this though, as it makes all of its children inaccessible. In the `Header` component above, this makes the `Text` component inside the `View` inaccessible. So the screen reader won’t actually read the title indicated in the header. It will only read the `accessibilityLabel` you’ve passed to the `View` instead. It’s a good practice to only set the `accessible` prop to `true` if you know that the component doesn’t have any child that’s supposed to be treated as an accessible element.\n- `accessibilityLabel` - the text you want the screen reader to read when the user touches over it. A good practice when using this prop is to be as descriptive as possible. Remember that the user will only rely on what’s being read by the screen reader. They actually have no idea of the context a specific component is in, so it’s always useful to repeat it in your labels. For example, each of the buttons in each card should still mention the name of the Pokemon.\n- `accessibilityRole` - the general role of the component in this app. Examples include: `button`, `link`, `image`, `text`, and in this case `header`. Note that `header` doesn’t only indicate the app’s main header. It can also indicate a section header or a list header.\n\nThe next component we’ll update is the IconButton because it’s important that the user knows that those buttons we’ve added are actually buttons:\n\n````javascript\n    // src/components/IconButton.js\n    const IconButton = ({ icon, onPress, data, label }) =\u003e {\n      return (\n        \u003cTouchableOpacity\n          accessible={true}\n          accessibilityLabel={label}\n          accessibilityTraits={\"button\"}\n          accessibilityComponentType={\"button\"}\n          onPress={() =\u003e {\n            onPress(data.name);\n          }}\n        \u003e\n          \u003cIcon\n            name={icon}\n            style={styles.icon}\n            size={icon_size}\n            color={icon_color}\n          /\u003e\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nFrom the code above, you can see that we’re accepting a new `label` prop which we then use as the value for the `accessibilityLabel`. We’ve also set the component to be `accessible` which means that when the user’s finger goes over it, the screen reader will read out the `accessibilityLabel`. \n\nBut what about `accessibilityTraits` and `accessibilityComponentType`? Well, they are the old way of setting the `accessibilityRole`. `accessibilityTraits` is only for iOS and `accessibilityComponentType` is only for Android. As [mentioned in the docs](https://facebook.github.io/react-native/docs/accessibility#accessibilitytraits-ios), these props will be deprecated soon. We’re only using it because `TouchableOpacity` doesn’t seem to be accepting `accessibilityRole`. The trait (button) wouldn’t show up as I was testing with the accessibility inspector. We’ll go over this tool in the next section.\n\nLastly, we update the `Card` component so it passes the correct labels to each of the IconButton. We’re also making the Pokemon Image and Text accessible:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ item, viewAction, bookmarkAction, shareAction }) =\u003e {\n      return (\n        \u003cView style={styles.card}\u003e\n          \u003cImage\n            source={item.pic}\n            style={styles.thumbnail}\n            accessible={true}\n            accessibilityRole={\"image\"}\n            accessibilityLabel={`${item.name} image`}\n          /\u003e\n          \u003cText style={styles.name} accessibilityRole={\"text\"}\u003e\n            {item.name}\n          \u003c/Text\u003e\n          \u003cView style={styles.icons}\u003e\n            \u003cIconButton\n              icon=\"search\"\n              onPress={viewAction}\n              data={item}\n              label={`View Pokemon ${item.name}`}\n            /\u003e\n            \u003cIconButton\n              icon=\"bookmark\"\n              onPress={bookmarkAction}\n              data={item}\n              label={`Bookmark Pokemon ${item.name}`}\n            /\u003e\n            \u003cIconButton\n              icon=\"share\"\n              onPress={shareAction}\n              data={item}\n              label={`Share Pokemon ${item.name}`}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nIn case you’re wondering why we didn’t add the `accessible` and `accessibilityLabel` prop in the Pokemon label, it’s because the `Text` component is [accessible by default](https://facebook.github.io/react-native/docs/text#accessible). This also means that the screen reader automatically reads the text inside of this component.\n\n\n## Accessibility testing tools\n\nIn this section, we’ll take a look at four tools you can use to test the accessibility of your React Native app.\n\n### Testing accessibility while developing the app\n\nIn iOS, you can use the Accessibility Inspector tool in Xcode. Because it’s in Xcode, you have to run the app from Xcode. You can do that by opening the `RNa11y.xcodeproj` or `RNa11y.xcworkspace` file inside your project’s `ios` directory. Then run the app using the big play button located on the upper left side of the screen. \n\nOnce the app is running, you can open the Accessibility Inspector tool by going to **Xcode** → **Open Developer Tool** → **Accessibility Inspector**.\n\nFrom there, you can select the running iOS simulator instance:\n\n![ios-accessibility-inspector-1](//images.ctfassets.net/1es3ne0caaid/6qNgPqBzxY2gQCya28EQCe/18c5511aaa2c0c91d2627c6e4af89e05/ios-accessibility-inspector-1.png)\n\nOnce you’ve selected the simulator, click on the target icon right beside the drop-down. This activates the inspection mode. You can then hover over the components which we updated earlier and verify whether the inspector is reading the labels correctly:\n\n![ios-accessibility-inspector-2](//images.ctfassets.net/1es3ne0caaid/2SeBUm2GQM08QYMyu8acM2/bc43ab7293dfc5cdb317cd5b92585106/ios-accessibility-inspector-2.png)\n\nFor Android testing, you can use the [Accessibility Scanner](https://play.google.com/store/apps/details?id=com.google.android.apps.accessibility.auditor) app. Unlike the Accessibility Inspector in iOS, you have to install it on your emulator or device in order to use it. Once installed, go to **Settings** → **Accessibility** → **Accessibility Scanner** and enable it. \n\n![android-accessibility-scanner](//images.ctfassets.net/1es3ne0caaid/23c3rdh3BeOOQuGCQoKEUk/ccd4b3393e5c944ef0d4dd661864fcd6/android-accessibility-scanner.png)\n\nOnce it’s enabled, switch to the app that we’re working on and click the floating blue button. This will scan the app for any accessibility issues. Once it’s done scanning, you can click on any of the indicated areas to view the suggestion:\n\n![image-contrast-warning](//images.ctfassets.net/1es3ne0caaid/4RRVksnQ3YsSsuQuYGo8Cg/91e7e74829222b88ac984bd166517f72/image-contrast-warning.png)\n\nThe easiest way to solve this issue is by making the card’s background color lighter. You can also try increasing the contrast of the image as suggested.\n\nInterestingly, if you remove the accessibility props from the image and scan again, you’ll see that it will no longer complain about the contrast:\n\n``` javascript\n    // src/components/Card.js\n    const Card = ({ item, viewAction, bookmarkAction, shareAction }) =\u003e {\n      return (\n        \u003cView style={styles.card}\u003e\n          \u003cImage\n            source={item.pic}\n            style={styles.thumbnail}\n          /\u003e\n          ...\n        \u003c/View\u003e\n      );\n    };\n```\n\nThis can mean that the scanner only gets picky when you’ve marked a component as accessible. To test this assumption, try removing the accessibility props from the IconButton:\n\n``` javascript\n    // src/components/IconButton.js\n    const IconButton = ({ icon, onPress, data, label }) =\u003e {\n      return (\n        \u003cTouchableOpacity\n          onPress={() =\u003e {\n            onPress(data.name);\n          }}\n        \u003e\n        ...\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n```\n\nIf you run the scanner again, you’ll see that it actually picks up on the issue:\n\n![item-description-warning](//images.ctfassets.net/1es3ne0caaid/5XT7FDpT32QQW640uuy664/b711061ff8d32bb41f09996a83c82cea/item-description-warning.png)\n\n### Manual accessibility testing\n\nAs with anything, it’s always important to test things manually so you know the actual experience your users are getting. After all, accessibility is all about improving the user experience that your users get when using the app. \n\n#### Testing in iOS\nTo test things manually in iOS, open Xcode and run the app on your iOS device. You can also do this from the simulator but that kinda beats the purpose of manual testing. You won’t really have an accurate “feel” of the experience if you’re just testing from a screen.\n\nOnce the app is running on your device, go to **Settings** → **Accessibility** → **VoiceOver**. From there, you can select the **Speech** menu to change the voice (I personally prefer Siri Female). You can also adjust the speaking rate. Adjust a little bit more from the mid-point should be fast enough for most people.\n\nOnce you’re done adjusting the settings, enable the **VoiceOver** setting then switch to the app. From there, you can tap on each of the accessibility areas that we’ve set to verify if it’s being read correctly.\n\n#### Testing in Android\nTo test in Android, run the app on your Android device. Once the app is running, go to **Settings** → **Language** and set it to your preferred language. \n\nNext, go to **Accessibility** → **Text-to-speech** options and make sure the **Default language status** is fully supported. If not, you have to go to the language settings again and select a supported language. \n\nThe equivalent of VoiceOver in Android is TalkBack, you can enable it by going to **Accessibility** → **TalkBack** then enable the setting**.** Once enabled, switch to the app and verify if the labels are read correctly as you tap.\n\n\n## Further reading\n\nHere are some resources to learn more about accessibility:\n\n\n- [Accessibility by Rob Dodson](https://www.youtube.com/watch?v=KPN31sB7v8c)\n- [React Native Accessibility: Creating Inclusive Apps in React Native](https://medium.com/@larenelg/creating-inclusive-apps-in-react-native-the-coding-bit-bd3832349009)\n- [React Native: Accessibility](https://facebook.github.io/react-native/docs/accessibility)\n- [Accessibility Testing on Android](https://robots.thoughtbot.com/accessibility-testing-on-android)\n- [iOS Accessibility Tutorial: Getting Started](https://www.raywenderlich.com/845-ios-accessibility-tutorial-getting-started)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to make React Native apps more accessible to a person with disabilities. I hope that you’ll use the knowledge you’ve gained in order to make accessibility a part of your development workflow. Because all of your users deserve an equal or similar ease of use.\n\nYou can view the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNa11y).","metaTitle":"Making accessible React Native apps","metaDescription":"Using a starter app, learn to implement improved accessibility in React Native apps. Work through practical examples, and discover accessibility tools."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3L3NK3r4VyQyemcMCqaeyo","type":"Entry","createdAt":"2018-08-09T20:55:38.106Z","updatedAt":"2018-08-09T21:45:00.036Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Using Storybook with React Native","url":"storybook-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNStorybook","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-08-07","description":"Learn how to use Storybook for React Native development. The tutorial introduces Storybook and the concepts of component driven design. It then walks through building a simple demo app.","prerequisite":"You will need a good working knowledge of React Native and Redux. The tutorial uses React Native 0.55.","content":"In this tutorial, we’re going to take a look at how you can use Storybook to speed up the development and testing of individual components for your React Native app.\n\nWe will be creating a React Native app which will show a list of Pokemon cards. Here’s what the final output will look like:\n\n![react-native-storybook-demo](//images.ctfassets.net/1es3ne0caaid/5GZ98aIgdUQwC22WkwqwYW/16e7007adb4af313a6dbf586580e06d8/react-native-storybook-demo.png)\n\nWe will be covering the following topics as we move along:\n\n\n- Setting up Storybook in a React Native app\n- Using Storybook to develop and visually test the UI components\n- Using StoryShots to automatically add snapshot tests to Storybook stories\n\nYou can find the source code for this tutorial [in its repo on GitHub](https://github.com/anchetaWern/RNStorybook). \n\n\n## Prerequisites\n\nTo follow this tutorial, you need to have good working knowledge of creating React Native apps. That usually means you already have developed a few apps without following a tutorial. We’ll also be using Redux so you should be familiar with basic Redux concepts as well.\n\nYour machine should also be set up with the React Native development environment. We will be using React Native version 0.55 in this tutorial and Yarn to install project dependencies.\n\n\n## What is Storybook?\n\nBefore we begin, it’s important to understand the following:\n\n\n- What is Storybook?\n- What does Storybook do? \n- How Storybook fits into the React Native app development workflow? \n\nStorybook is a development environment for rapid iteration and testing of UI components. By using Storybook, you can:\n\n\n- Visualize the different states of the individual components of your app.\n- Test the UI interactions.\n\nThis is all inside an isolated environment, so you can tweak your components as much as you want without having to worry about breaking something.\n\nStorybook fits in nicely to your existing component development and testing workflow. It integrates well with testing tools such as Jest and Enzyme. This means you can easily perform snapshot and interaction tests on your components. \n\nThe main idea of Storybook is for you to create “Stories”. These stories represent a specific state or behavior of an individual component. For example, there can be a story for the default state of a button, or a disabled button, or a button that’s currently active. \n\nA story can also be composed of tiny little components. For example, a Card component can be composed of a CardImage, CardText, and CardButton components. These stories can then be rendered within the same environment as a React Native app (either on a simulator or real device) so they can be tested. These stories also serve as a living and interactive style guide that documents how specific components should look and behave.\n\n\n## Setting up Storybook\n\nNow that you know what Storybook is, it’s time to set it up so we can use it within a React Native app.\n\nStart by installing [**Create React Native App (CRNA)**](https://github.com/react-community/create-react-native-app). We’ll be using it to generate a new React Native project that works with Storybook:\n\n```\n    npm install -g create-react-native-app\n```\n\nWe need to do this because projects created with `react-native init` [doesn’t work well](https://github.com/storybooks/storybook/issues/3897) with Storybook. At the time of writing this tutorial, the React Native version that was used is `0.55`. You can try installing that version with `react-native init`. But in this tutorial, we’ll use **CRNA** to generate a new project, and then use the “eject” feature to convert it to a standard React Native project. \n\nIf you’re coming here wanting to set up Storybook on an existing project, you’re welcome to follow along. But I can’t ensure that the setup we’ll be using here will work for you. You can skip right to the part where we install Storybook.\n\nNext, create a new project with **CRNA**:\n\n```\n    create-react-native-app RNStorybook\n```\n\nOnce created, navigate inside the project folder and eject the app:\n\n```\n    cd RNStorybook\n    npm run eject\n```\n\nHere are the responses you can use for the questions asked by the eject command:\n\n![react-native-storybook-eject-app](//images.ctfassets.net/1es3ne0caaid/14ek6Kezb6mMQEe0a6ygk2/440c584f0800b1331206204979d0e1be/react-native-storybook-eject-app.png)\n\nNext, install the Storybook command-line tool globally:\n\n```\n    npm install -g @storybook/cli\n```\n\nThis allows you to add Storybook to a React Native project.\n\n\n### Installing dependencies\n\nNext, install the dependencies of the app:\n\n```\n    yarn add prop-types redux react-redux react-native-vector-icons\n```\n\nAmong those dependencies, we have a native module (**react-native-vector-icons**), so we have to link it as well:\n\n```\n    react-native link\n```\n\nIf you’re having problems with the automatic linker, reset the changes made by the linker and follow the installation instructions [here](https://github.com/oblador/react-native-vector-icons#installation).\n\nNext, add Storybook to the project:\n\n```\n    getstorybook\n```\n\nThe command above should show an output similar to the following:\n\n![react-native-storybook-getstorybook](//images.ctfassets.net/1es3ne0caaid/6raNJnGknucsMm88SE0sKE/b2507af48d7c61c3bac18acb3f12caf5/react-native-storybook-getstorybook.png)\n\nOnce it’s done, it adds the following dependencies to the project. These are the [Storybook add-ons](https://storybook.js.org/addons/addon-gallery/). They provide additional features when working inside the Storybook environment:\n\n```\n    \"@storybook/react-native\": \"^3.4.8\", // for working with React Native\n    \"@storybook/addon-actions\": \"^3.4.8\", // for inspecting events triggered by your components\n    \"@storybook/addon-links\": \"^3.4.8\", // for linking stories together\n    \"@storybook/addons\": \"^3.4.8\", // for loading custom add-ons to Storybook\n```\n\nWe won’t really be using any of these in this tutorial, except for the React Native add-on. But they’re installed by default when using the `getstorybook` command, so just explore them on your own.\n\nAnother thing you’ll notice is the `storybook` folder:\n\n![react-native-storybook-file-structure](//images.ctfassets.net/1es3ne0caaid/60gxp33ZegUm2yeY0gyMOy/088e6cd840e3213ff14c77c01cf3ff94/react-native-storybook-file-structure.png)\n\nThis folder contains the template for how the Storybook can be structured. Inside are a few stories and files for initializing Storybook within your app. \n\nWe won’t really be using this structure because we want to be able to easily render the components in both Storybook and the app. \n\nThe next step is to delete all the contents of the `App.js` file at the root of your project directory and replace it with the following:\n\n```\n    export default from \"./storybook\";\n```\n\nThis renders the Storybook UI instead of the UI of the app. In this tutorial, we will only focus on developing the UI components using Storybook. We won’t actually be bringing everything together inside a standard React Native app, that’s why we’ve replaced it with the Storybook UI.\n\nIn reality though, at some point, you’ll want to bring everything together. That’s why it’s important to have a strategy on how you can switch between the app’s UI and the Storybook UI. The most common way to deal with this is to use [**react-native-config**](https://github.com/luggit/react-native-config). This allows you to create a `.env` file which contains the config on which UI to use:\n\n```\n    IS_STORYBOOK=true\n```\n\nThen in your `App.js` file, you can read the value of that variable to determine which UI to use. I won’t really be delving on that in this tutorial so feel free to explore it on your own.\n\nNext, run the app:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\nOnce the app is running on the simulator or device, you should get an error which looks like this:\n\n![react-native-storybook-connection-refused](//images.ctfassets.net/1es3ne0caaid/1zlTwLzGxWKsuWOUAyygEW/f3eb7d4bc95c77883db4b851fdf5844d/react-native-storybook-connection-refused.png)\n\nThe error is because the app is now expecting the Storybook bundler to be running instead of the default metro bundler. To solve this, you have to terminate the existing metro bundler and then run the Storybook bundler instead:\n\n```\n    yarn storybook\n```\n\nOnce it’s running, reload the app and you should see the following:\n\n![react-native-storybook-welcome](//images.ctfassets.net/1es3ne0caaid/2EtlAgOPIIsQq8Sw0Cia6I/6fd748920ffb3a61d3cdb1d40c82ce5a/react-native-storybook-welcome.png)\n\nIf you click on the burger menu, you should see the individual stories that are inside the `storybook` folder.\n\n\n### Automatically load stories\n\nAs mentioned earlier, we won’t really be using the default structure for the stories. Instead, the story files will live inside the `src/stories` folder. This way, the stories can easily access the components (`src/components`) they need to render. \n\nThese folders shouldn’t exist on your working copy yet. Create a `src` folder at the root of your project directory, then create the `stories` and `components` folder inside of it.\n\nTo make this easier, we can use React Native Storybook loader:\n\n```\n    yarn add react-native-storybook-loader -D\n```\n\nOnce installed, update `package.json` to include the `prestorybook` script and the config for the Storybook loader:\n\n``` json\n    {\n      // existing configs here...\n      \"scripts\": {\n        // existing scripts here...\n        \"storybook\": \"storybook start -p 7007\",\n        \"prestorybook\": \"rnstl\" // add this\n      },\n      // add these\n      \"config\": {\n        \"react-native-storybook-loader\": {\n          \"searchDir\": [\"./src/stories\"],\n          \"pattern\": \"**/*.story.js\", // the filename pattern of the stories within the indicated searchDir\n          \"outputFile\": \"./storybook/storyLoader.js\" // the loader file \n        }\n      }\n    }\n```\n\nThe `storyLoader.js` file is the one that’s going to automatically load the stories that are currently available inside the `searchDir` you defined. In this case, we have to put the components inside the `src/components` and their stories inside the `src/stories` folder.\n\nNext, open the `storybook/storybook.js` file and replace its contents with the following:\n\n``` javascript\n    import { AppRegistry } from \"react-native\";\n    import { getStorybookUI, configure } from \"@storybook/react-native\";\n    import { loadStories } from \"./storyLoader\";\n    \n    configure(() =\u003e {\n      loadStories();\n    }, module);\n    \n    const StorybookUI = getStorybookUI({\n      port: 7007,\n      host: \"localhost\",\n      onDeviceUI: true,\n      resetStorybook: true\n    });\n    \n    AppRegistry.registerComponent(\"RNStorybook\", () =\u003e StorybookUI);\n    \n    export { StorybookUI as default };\n```\n\nThis file calls the story loader so the stories will be included in the Storybook UI. \n\nNext, make sure that the `storybook/index.js` file contains the code below. This makes use of the `StorybookUI` you’ve exported in the `storybook/storybook.js` file:\n\n``` javascript\n    // storybook/index.js\n    \n    import StorybookUI from \"./storybook\";\n    \n    export default StorybookUI;\n```\n\nOnce that’s done, you should now be ready to develop the components of the app. Go ahead and run Storybook:\n\n```\n    yarn storybook\n```\n\nHere’s what the app will look like:\n\n![react-native-storybook-no-stories](//images.ctfassets.net/1es3ne0caaid/4IQwAvi9DGU6OmcWi846mg/2579aeaae4814c4f3cad84cb4a9473cd/react-native-storybook-no-stories.png)\n\nRemember to terminate the currently running process of Storybook and re-run `yarn` `storybook` every time you add a new story. This is because React Native Storyloader only re-generates the `storyLoader.js` file when you execute the `yarn storybook` command.\n\n\n## Developing the components\n\nTo develop the UI components of the app, we will be using [Component-Driven Development](https://blog.hichroma.com/component-driven-development-ce1109d56c8e). It’s a development methodology wherein the focus is on the individual components of the app. The main idea is to build the UI starting from the tiniest of components, then you incrementally build up to the screens by using those tiny components. In short, it’s a “bottom-up” approach in developing the UI of the app.\n\nSince you already have experience in developing React Native apps, I assume that you already have a clear idea on what components to build. But let’s try to follow the Component-Driven Development methodology and build the tinier components first before the bigger ones.\n\nBefore we proceed, please download the [Pokemon images from the repo](https://github.com/anchetaWern/RNStorybook/tree/master/src/images). If you’ve cloned the repo earlier, you can simply copy the `src/images` directory over to your `src` folder. While you’re at it, you can also create a `components` folder beside the `images` folder. This is where we will put the components.\n\n### IconButton component\n\nBased on the app’s screenshot from earlier, the smallest component which we can break down from the screen is the heart-shaped button. This button is used to favorite a specific Pokemon. Here’s what it looks like when rendered inside Storybook:\n\n![react-native-storybook-icon](//images.ctfassets.net/1es3ne0caaid/3MqChjGQfSeeiw6kQS8IUy/d3346a1a42457183ece820e6e37c0114/react-native-storybook-icon.png)\n\nGo ahead and create the component:\n\n``` javascript\n    // src/components/IconButton.js\n    \n    import React from \"react\";\n    import PropTypes from \"prop-types\";\n    import { TouchableOpacity } from \"react-native\";\n    import Icon from \"react-native-vector-icons/FontAwesome\";\n    \n    const IconButton = ({ icon, color, onPress }) =\u003e {\n      return (\n        \u003cTouchableOpacity onPress={onPress} style={styles.button}\u003e\n          \u003cIcon name={icon} size={30} color={color} /\u003e\n        \u003c/TouchableOpacity\u003e\n      );\n    };\n    \n    const styles = {\n      button: {\n        alignSelf: \"center\",\n        marginTop: 10\n      }\n    };\n    \n    IconButton.propTypes = {\n      icon: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      onPress: PropTypes.func.isRequired\n    };\n    \n    export default IconButton;\n```\n\nThe next step is to create the stories for the component. This is where we render the different states of the component so it’s visible within Storybook:\n\n``` javascript\n    // src/stories/IconButton.story.js\n    \n    import React from \"react\";\n    import { View } from \"react-native\";\n    import IconButton from \"../components/IconButton\";\n    import { storiesOf } from \"@storybook/react-native\";\n    \n    storiesOf(\"IconButton\", module)\n      .add(\"on\", () =\u003e (\n        \u003cIconButton\n          icon={\"heart\"}\n          color={\"#333\"}\n          onPress={() =\u003e console.log(\"un-favorited!\")}\n        /\u003e\n      ))\n      .add(\"off\", () =\u003e (\n        \u003cIconButton\n          icon={\"heart-o\"}\n          color={\"#333\"}\n          onPress={() =\u003e console.log(\"favorited!\")}\n        /\u003e\n      ));\n```\n\nLet’s break down what’s happening in the code above. First, we load the modules that we need. This includes the `IconButton` and the `storiesOf` function from the React Native Storybook package:\n\n``` javascript\n    import React from \"react\";\n    import { View } from \"react-native\";\n    import IconButton from \"../components/IconButton\"; // the component whose story we're creating\n    import { storiesOf } from \"@storybook/react-native\";\n```\n\nNext, we specify the name of the component whose story we’re creating:\n\n``` javascript\n    storiesOf(\"IconButton\", module)\n```\n\nThe second argument in the `storiesOf` function above serves as Storybook’s reference to the file where the story code is. This enables the hot-module replacement feature. It’s only needed in a browser environment because React Native already reloads the entire app if you have live-reloading enabled. The only reason why we’re including it is that Jest needs this reference for the snapshot tests to work.\n\nNext, we add the stories for this component. In this case, we only have two: one for the default state, and another for the favorited state:\n\n``` javascript\n    .add(\"off\", () =\u003e (\n      \u003cIconButton\n        icon={\"heart-o\"}\n        color={\"#333\"}\n        onPress={() =\u003e console.log(\"action: favorited\")}\n      /\u003e\n    ))\n    .add(\"on\", () =\u003e (\n      \u003cIconButton\n        icon={\"heart\"}\n        color={\"#333\"}\n        onPress={() =\u003e console.log(\"action: un-favorited\")}\n      /\u003e\n    ));\n```\n\nWhen rendering the tiny components, we don’t really care yet about testing their functionality. That’s why we only log the action we’re expecting. If the button is in the default state (meaning, it hasn’t been favorited yet), we expect the action to be “favorited” while the other one is just the opposite.\n\nA couple of things to remember when creating stories is that there should be only one story file for each component. And each story file should only be rendering that component alone. The other thing is that you don’t have to add a story for every possible state of the component, only the ones that makes sense. For example, if you’re in the React Native environment, and you’re creating a story for a component that makes use of `TouchableOpacity`. In this case, you don’t really have to add a story for “clicked” or “tapped”, because it all looks the same anyway. The default opacity value used by React Native already makes sense, so most of the time you don’t really want to change it.\n\n\n### Card component\n\nThe next component we’re going to create is the Card component. Here’s what it looks like:\n\n![react-native-storybook-favorited](//images.ctfassets.net/1es3ne0caaid/4BLoZKSv4IqSIScocGiCuq/61ddbddd61dfac9deeb5ceae0ae90535/react-native-storybook-favorited.png)\n\nHere’s the code:\n\n``` javascript\n    // src/components/Card.js\n    \n    import React from \"react\";\n    import { View, Image, Text, Dimensions } from \"react-native\";\n    import PropTypes from \"prop-types\";\n    import IconButton from \"./IconButton\";\n    \n    const { width, height } = Dimensions.get(\"window\");\n    \n    const Card = ({ image, text, is_favorite, action }) =\u003e {\n      const icon = is_favorite ? \"heart\" : \"heart-o\";\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cImage source={image} resizeMode={\"contain\"} style={styles.image} /\u003e\n          \u003cText style={styles.text}\u003e{text}\u003c/Text\u003e\n          \u003cIconButton icon={icon} color={\"#333\"} onPress={action} /\u003e\n        \u003c/View\u003e\n      );\n    };\n    \n    const styles = {\n      container: {\n        width: width - 40,\n        alignItems: \"center\",\n        borderWidth: 1,\n        borderColor: \"#ccc\",\n        padding: 10,\n        marginTop: 5,\n        marginBottom: 5\n      },\n      image: {\n        width: width - 100\n      },\n      text: {\n        fontSize: 20,\n        fontWeight: \"bold\"\n      }\n    };\n    \n    Card.propTypes = {\n      image: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n      is_favorite: PropTypes.bool.isRequired,\n      action: PropTypes.func.isRequired\n    };\n    \n    export default Card;\n```\n\nFrom the code above, you can see that we’re bringing in a smaller component. This is what Component-Driven Development is all about. Create the smaller components first and then you assemble them to create a larger component.\n\nNext, create the story file:\n\n``` javascript\n    // src/stories/Card.story.js\n    \n    import React from \"react\";\n    import { View } from \"react-native\";\n    import Card from \"../components/Card\";\n    \n    import { storiesOf } from \"@storybook/react-native\";\n    \n    storiesOf(\"Card\", module)\n      .addDecorator(getStory =\u003e (\n        \u003cView style={{ flex: 1, alignItems: \"center\" }}\u003e{getStory()}\u003c/View\u003e\n      ))\n      .add(\"default\", () =\u003e (\n        \u003cCard\n          image={require(\"../images/charizard.jpg\")}\n          text={\"Charizard\"}\n          is_favorite={false}\n          action={() =\u003e {\n            console.log(\"clicked!\");\n          }}\n        /\u003e\n      ))\n      .add(\"favorited\", () =\u003e (\n        \u003cCard\n          image={require(\"../images/lugia.jpg\")}\n          text={\"Lugia\"}\n          is_favorite={true}\n          action={() =\u003e {\n            console.log(\"clicked!\");\n          }}\n        /\u003e\n      ));\n```\n\nFrom the code above, you can see that we’re pretty much doing the same thing we did in the story for the IconButton component. Only this time, we’re passing the prop which determines what the IconButton’s state will be to the Card component.\n\nAnother new thing is the `addDecorator` method:\n\n``` javascript\n    .addDecorator(getStory =\u003e (\n      \u003cView style={{ flex: 1, alignItems: \"center\" }}\u003e{getStory()}\u003c/View\u003e\n    ))\n```\n\nIn Storybook, we use a [decorator](https://storybook.js.org/basics/writing-stories/#using-decorators) to specify a common wrapper for all the stories that we create for a specific component. In this case, we simply want to wrap all the stories in a `View` that’s aligned at the center of the screen. The `getStory` method is used for rendering the story within the wrapper. \n\nIf you’re using Redux, decorator’s are a good place to put your providers.\n\n\n### CardList component\n\nThe last component is the CardList component, and it looks like this:\n\n![react-native-storybook-card-list](//images.ctfassets.net/1es3ne0caaid/1P5X2oOkVyywoS6UIU8aoS/2d5f0e93a7cd66beca478903306bdbf4/react-native-storybook-card-list.png)\n\nAs you can see, this component brings together all the components we’ve built so far. This also means that we already need to add real functionality to it. That is to favorite and un-favorite each card.\n\nIn this component, we will be using Redux to add a global state to the app. This allows us to favorite or un-favorite cards.\n\nFirst, create the file where we define the different types of actions within the app. In this case, we only have one. This is the action to favorite or un-favorite a card:\n\n``` javascript\n    // src/actions/types.js\n    \n    export const FAVORITED_CARD = \"favorited_card\";\n```\n\nNext, create the function which will be called whenever the user clicks on an IconButton to favorite a Card. This returns the object which will be used by the reducer as a basis for updating the app state:\n\n``` javascript\n    // src/actions/index.js\n    \n    import { FAVORITED_CARD } from \"./types\";\n    \n    export const favoritedCard = id =\u003e {\n      return {\n        type: FAVORITED_CARD,\n        payload: id\n      };\n    };\n```\n \nNext, create the reducer. This is where we put the initial app state, as well as the code for handling the actions that have to do with the cards:\n\n``` javascript\n    // src/reducers/CardsReducer.js\n    \n    import React, { Component } from \"react\";\n    import { FAVORITED_CARD } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      cards: [\n        {\n          id: 1,\n          label: \"Charizard\",\n          image: require(\"../images/charizard.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 2,\n          label: \"Empoleon\",\n          image: require(\"../images/empoleon.jpg\"),\n          is_favorite: true\n        },\n        {\n          id: 3,\n          label: \"Entei\",\n          image: require(\"../images/entei.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 4,\n          label: \"Groudon\",\n          image: require(\"../images/groudon.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 5,\n          label: \"Lugia\",\n          image: require(\"../images/lugia.jpg\"),\n          is_favorite: true\n        },\n        {\n          id: 6,\n          label: \"Salamence\",\n          image: require(\"../images/salamence.jpg\"),\n          is_favorite: false\n        },\n        {\n          id: 7,\n          label: \"Torterra\",\n          image: require(\"../images/torterra.jpg\"),\n          is_favorite: true\n        }\n      ]\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case FAVORITED_CARD:\n          let cards = state.cards.map(item =\u003e {\n            return item.id == action.payload\n              ? { ...item, is_favorite: !item.is_favorite }\n              : item;\n          });\n    \n          return { ...state, cards };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNext, bring all the reducers together:\n\n``` javascript\n    // src/reducers/index.js\n    \n    import { combineReducers } from \"redux\";\n    import CardsReducer from \"./CardsReducer\";\n    \n    export default combineReducers({\n      cards: CardsReducer\n    });\n```\n\nAfter that, we can now proceed with the CardList component:\n\n``` javascript\n    // src/components/CardList.js\n    \n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    import PropTypes from \"prop-types\";\n    \n    import { connect } from \"react-redux\";\n    import { favoritedCard } from \"../actions\";\n    import Card from \"./Card\";\n    \n    class CardList extends Component {\n      render() {\n        return \u003cView style={styles.container}\u003e{this.renderCards()}\u003c/View\u003e;\n      }\n    \n      renderCards = () =\u003e {\n        return this.props.cards.map(item =\u003e {\n          return (\n            \u003cCard\n              key={item.id}\n              image={item.image}\n              text={item.label}\n              is_favorite={item.is_favorite}\n              action={this.props.favoritedCard.bind(this, item.id)}\n            /\u003e\n          );\n        });\n      };\n    }\n    \n    const styles = {\n      container: {\n        flex: 1\n      }\n    };\n    \n    CardList.propTypes = {\n      cards: PropTypes.array.isRequired,\n      favoritedCard: PropTypes.func.isRequired\n    };\n    \n    const mapStateToProps = ({ cards }) =\u003e {\n      return cards;\n    };\n    \n    export default connect(\n      mapStateToProps,\n      {\n        favoritedCard\n      }\n    )(CardList);\n```\n\nInside the story for the CardList component, we use a `Provider` component to provide the necessary data and functionality to it:\n\n``` javascript\n    // src/stories/CardList.story.js\n    \n    import React from \"react\";\n    import { ScrollView } from \"react-native\";\n    import { storiesOf } from \"@storybook/react-native\";\n    \n    import Provider from \"../components/Provider\";\n    import CardList from \"../components/CardList\";\n    \n    storiesOf(\"CardList\", module)\n      .addDecorator(getStory =\u003e \u003cProvider\u003e{getStory()}\u003c/Provider\u003e)\n      .add(\"with cards\", () =\u003e {\n        return \u003cCardList /\u003e;\n      });\n```\n\nHere’s the code for the `Provider` component:\n\n``` javascript\n    // src/components/Provider.js\n    \n    import React from \"react\";\n    import { ScrollView } from \"react-native\";\n    import { Provider as ReduxProvider } from \"react-redux\";\n    import { createStore } from \"redux\";\n    import reducers from \"../reducers\";\n    \n    import PropTypes from \"prop-types\";\n    \n    const store = createStore(reducers);\n    \n    const Provider = ({ children }) =\u003e {\n      return (\n        \u003cReduxProvider store={store}\u003e\n          \u003cScrollView contentContainerStyle={styles.content}\u003e{children}\u003c/ScrollView\u003e\n        \u003c/ReduxProvider\u003e\n      );\n    };\n    \n    const styles = {\n      content: {\n        alignItems: \"center\"\n      }\n    };\n    \n    Provider.propTypes = {\n      children: PropTypes.element.isRequired\n    };\n    \n    export default Provider;\n```\n\nAs you can see from the code above, all this file does is wrap the `CardList` within the Provider provided by `react-redux`.\n\nOnce that’s done, the components that you’ve created can now be used within the app. The stories you created should serve as a living document. Other developers can examine and test it whenever they’re unsure of how a specific component should behave and look like.\n\n\n## Snapshot testing\n\nOne of the benefits of using Storybook is that it gives us the ability to perform snapshot test on individual stories using [StoryShots](https://www.npmjs.com/package/@storybook/addon-storyshots). You can install it with the following command:\n\n```\n    yarn add --dev @storybook/addon-storyshots\n```\n\nNext, delete the `App.test.js` file at the root of the project directory. We won’t really test the whole app in this tutorial. If you don’t delete that file, you’ll be getting the error below if you run `yarn test`:\n\n![react-native-storybook-app-test](//images.ctfassets.net/1es3ne0caaid/29rexPzrPmAaQI8o0y4kAg/2105f45d09ce85d93fa9528d5675ca1c/react-native-storybook-app-test.png)\n\nNext, create the test file that Jest will use:\n\n``` javascript\n    // src/storybook.test.js\n    \n    import initStoryshots from \"@storybook/addon-storyshots\";\n    initStoryshots();\n```\n\nNext, install **jest-static-stubs**:\n\n```\n    yarn add jest-static-stubs\n```\n\nWe need this because the tests will break if you’re importing static assets inside your components. In this case, it’s not even the images that we’re rendering inside each card that is at fault. It’s one of the images from React Native itself:\n\n![react-native-storybook-static-assets-error](//images.ctfassets.net/1es3ne0caaid/dSs3ZlgBhYU04UaokeM4A/6da752ce3c700bc70181b1c29919e8f8/react-native-storybook-static-assets-error.png)\n\nThe **jest-static-stubs** package allows us to stub the static assets so that they work with Jest. If you don’t know what a stub is, it’s used in testing to simulate a specific functionality. In this case, **jest-static-stubs** simulates the functionality for requiring images.\n\nAdd the following Jest config in your `package.json` file to use **jest-static-stubs**:\n\n``` json\n    \"jest\": {\n      \"preset\": \"react-native\",\n      \"moduleNameMapper\": {\n        \".+\\\\.(png)$\": \"jest-static-stubs/png\"\n      }\n    },\n```\n\nOnce that’s done, if you run `yarn` `test`, you should get the following error:\n\n![react-native-storybook-type-error](//images.ctfassets.net/1es3ne0caaid/5kRDPcbKmWkwCC64ICOW84/ef44e3f38b8ee5604dcc62cd8b783bc7/react-native-storybook-type-error.png)\n\nThis is one caveat when using Jest. Because when we render the component inside the app, the type of variable we pass into the Card component is certainly a number.\n\nOn the other hand, when running the test with Jest, statements like `require(\"./src/images/something.jpg\")` return an object instead.\n\nYou can see for yourself by changing the prop type of `image` to `object`:\n\n``` javascript\n    // src/components/Card.js\n    \n    Card.propTypes = {\n      image: PropTypes.object.isRequired, // update this\n      text: PropTypes.string.isRequired,\n      // reset of the proptypes here...\n    };\n```\n\nAfter that, execute `yarn test` and then inspect the generated snapshot file, you can see that it’s indeed using an object:\n\n``` javascript\n    // src/__snapshots__/storybook.test.js.snap\n    \n    // Jest Snapshot v1, https://goo.gl/fbAQLP\n    \n    exports[`Storyshots Card default 1`] = `\n    \u003cView\n      style={\n        Object {\n          \"alignItems\": \"center\",\n          \"flex\": 1,\n        }\n      }\n    \u003e\n      \u003cView\n        style={\n          Object {\n            \"alignItems\": \"center\",\n            \"borderColor\": \"#ccc\",\n            \"borderWidth\": 1,\n            \"marginBottom\": 5,\n            \"marginTop\": 5,\n            \"padding\": 10,\n            \"width\": 710,\n          }\n        }\n      \u003e\n        \u003cImage\n          resizeMode=\"contain\"\n          source={\n            Object {\n              \"testUri\": \"../../../src/images/charizard.jpg\",\n            }\n          }\n          style={\n            Object {\n              \"width\": 650,\n            }\n          }\n        /\u003e\n```\n\nSo what’s the solution? Well, looks like the solution is to use the **RelativeImageStub** library which React Native already provides for mocking the `require` image statements so that Flow can use it. If you’re interested in looking at the code, it’s at `node_modules/react-native/Libraries/Image/RelativeImageStub.js`.\n\nIn your `package.json` file, you can use the **RelativeImageStub** library by simply specifying the string “RelativeImageStub”:\n\n``` json\n    \"jest\": {\n      \"preset\": \"react-native\",\n      \"moduleNameMapper\": {\n        \"^.+\\\\.(jpg|jpeg)$\": \"RelativeImageStub\", // add this\n        \".+\\\\.(png)$\": \"jest-static-stubs/png\"\n      }\n    },\n```\n\nAt this point, you can now run `yarn test` and all the tests should pass:\n\n![react-native-storybook-app-test-pass](//images.ctfassets.net/1es3ne0caaid/5dSr815rWw40EOOK0YIoAM/40109648cfff05080ad4a3849935f39c/react-native-storybook-app-test-pass.png)\n\nEvery time you update your components or stories, you should run `yarn test -u` instead. This will update the currently stored snapshot. Running `yarn test` will compare the old snapshot with the new one, and it will fail if there’s something different. After that, commit the changes to your repo to document the change.\n\n\n## Further reading\n\nIf you want to learn more, here are some links for further exploration:\n\n\n- [Component-Driven Development](https://blog.hichroma.com/component-driven-development-ce1109d56c8e)\n- [Learn Storybook](https://www.learnstorybook.com/)\n- [Testing a React-Redux app using Jest and Enzyme](https://medium.com/netscape/testing-a-react-redux-app-using-jest-and-enzyme-b349324803a9)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you’ve learned how to use Storybook for fast prototyping of components for your React Native app. You’ve also learned how to use Jest and StoryShots to implement snapshot testing for the individual stories created using Storybook.\n\nYou can find the source code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/RNStorybook).","metaTitle":"Using Storybook with React Native","metaDescription":"This tutorial will show you how to build a React Native app using Storybook, following the principles of component driven design and development."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5vdxhGJceAEUQ0AusccaWE","type":"Entry","createdAt":"2018-07-04T14:13:24.457Z","updatedAt":"2020-06-19T11:03:40.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a football results feed with Go and React","url":"football-feed-go-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-football-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-07-02","description":"Build a realtime football results feed, using Go for the backend and React for the frontend. Admins will be able to send match updates out to any subscribed application.","prerequisite":"You will need Go, dep, Node and npm installed on your machine.","content":"## Introduction\n\nThe World Cup is with us once again. In this article we are going to show how you can add a real-time football results feed to your site so that your users can keep up with the latest scores without needing to go elsewhere.\n\nWe are going to build a system where a football pundit can enter details of matches, and other sites can display a live feed of the results as they are entered.\n\n![go-react-football-feed-demo](//images.ctfassets.net/1es3ne0caaid/41013Qn0XmcY8QcWc4Ikas/f842d3de9f3bdfda7610bdb15ea8c146/go-react-football-feed-demo.gif)\n\n## Prerequisites\n\nThis article focuses on using Go and React. As such, it is important that you have Go already installed and configured on your system - including having the `GOPATH` set up correctly. If you do not know how to do this then the [Go documentation](https://golang.org/doc/install) can explain this all. A certain level of understanding of Go is assumed to follow along with this article. The “[A Tour of Go](https://tour.golang.org/welcome/1)” tutorial is a fantastic introduction if you are new to the language.\n\nWe are also going to use the [dep](https://golang.github.io/dep/) tool to manage the dependencies of our backend application, so make sure that this is correctly installed as well.\n\nFinally, in order to develop and run our pundits web UI you will need to have a recent version of [Node.js](https://nodejs.org/en/) installed and correctly set up. A certain level of understanding of JavaScript is also assumed to follow along with this article.\n\n## Create a Pusher account\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Next click on **Channels apps** on the sidebar, followed by **Create Channels app.** \n\n![go-react-football-feed-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/1S9MC94S2gE40S4CK2OEG0/5f2322e334c6fa1e2d5a3cc53a97a7e0/go-react-football-feed-create-pusher-app.png)\n\nFill out this dialog as needed and then click the **Create my app** button. Then click on **App Keys** and note down the credentials for later.\n\n![go-react-football-feed-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/54CJSIa3o4siOcg2wqimEE/48a3e6990bf8f221badf09f8c9c99e98/go-react-football-feed-pusher-app-keys.png)\n\n## Building the backend service\n\nWe are going to write our backend service using the Go language, using the library to power our HTTP service.\n\nOur service is going to offer the following endpoints:\n\n- POST /match - this will trigger events for half time, extra time and full time.\n- POST /goal - this will trigger events to indicate that a goal has been scored.\n- POST /card - this will trigger events to indicate that a yellow or red card has been given.\n\nTo start with, we need to create an area to work with. Create a new directory under your `GOPATH` in which to work:\n\n```\n    # Mac and Linux\n    $ mkdir -p $GOPATH/src/pusher/football-feed\n    $ cd $GOPATH/src/pusher/football-feed\n    \n    # Windows Powershell\n    mkdir -path $env:GOPATH/src/pusher/football-feed\n    cd $env:GOPATH/src/pusher/football-feed\n```\n\nWe can then initialise our work area for this project. This is done using the `dep` tool:\n\n```\n    $ dep init\n```\n\nDoing this will create the **`Gopkg.toml` and `Gopkg.lock` files used to track our dependencies, and the `vendor` **directory which is used to store vendor dependencies.\n\nThe first thing we want is to be able to send Pusher Channels messages. This is the core of our backend application. For this we will be creating a  new directory called `internal/notifier` in the root of rht project area and then writing a file called `internal/notifier/notifier.go`, as follows:\n\n``` go\n    // internal/notifier/notifier.go\n    package notifier\n    import (\n        \"github.com/pusher/pusher-http-go\"\n    )\n    type Message interface{}\n    type MatchMessage struct {\n        Event     string `json:event`\n        HomeTeam  string `json:homeTeam`\n        AwayTeam  string `json:awayTeam`\n        HomeScore uint16 `json:homeScore`\n        AwayScore uint16 `json_awayScore`\n    }\n    type GoalMessage struct {\n        Player    string `json:player`\n        ForTeam   string `json:forTeam`\n        HomeTeam  string `json:homeTeam`\n        AwayTeam  string `json:awayTeam`\n        HomeScore uint16 `json:homeScore`\n        AwayScore uint16 `json_awayScore`\n        OwnGoal   bool   `json:ownGoal`\n    }\n    type CardMessage struct {\n        Team   string `json:team`\n        Player string `json:player`\n        Card   string `json:card`\n    }\n    type Notifier struct {\n        notifyChannel chan\u003c- Message\n    }\n    func notifier(notifyChannel \u003c-chan Message) {\n        client := pusher.Client{\n            AppId:   \"PUSHER_APP_ID\",\n            Key:     \"PUSHER_KEY\",\n            Secret:  \"PUSHER_SECRET\",\n            Cluster: \"PUSHER_CLUSTER\",\n            Secure:  true,\n        }\n        for {\n            message := \u003c-notifyChannel\n            switch payload := message.(type) {\n            case GoalMessage:\n                client.Trigger(\"match\", \"goal\", payload)\n            case CardMessage:\n                client.Trigger(\"match\", \"card\", payload)\n            case MatchMessage:\n                client.Trigger(\"match\", \"match\", payload)\n            }\n        }\n    }\n    func New() Notifier {\n        notifyChannel := make(chan Message)\n        go notifier(notifyChannel)\n        return Notifier{notifyChannel}\n    }\n    func (notifier *Notifier) Notify(msg Message) {\n        notifier.notifyChannel \u003c- msg\n    }\n```    \n\n\n\u003e **Note:** ensure that PUSHER_APP_ID, PUSHER_KEY, PUSHER_SECRET and PUSHER_CLUSTER are all replaced with values obtained from the Pusher Dashboard when you registered your app.\n\nWe start by defining a number of messages that we can handle - `MatchMessage`, `GoalMessage` and `CardMessage`. We then define our `Notifier`  type that will be handling the actual notifications. This works off of a go-routine so that the actual Pusher Channels messages are sent in the background and do not in any way interfere with the performance of the HTTP requests.\n\nWhen processing a message, we determine the Pusher “event” based on the type of the Message received, and we use the message as-is as the payload.\n\nThe next thing we want is the web server. This will be done by writing a file called `internal/webapp/webapp.go` in our project area, as follows:\n\n``` go\n    // internal/webapp/webapp.go\n    package webapp\n    import (\n        \"net/http\"\n        \"pusher/football-feed/internal/notifier\"\n        \"github.com/gin-contrib/cors\"\n        \"github.com/gin-gonic/gin\"\n    )\n    func StartServer(notify *notifier.Notifier) {\n        r := gin.Default()\n        r.Use(cors.Default())\n        r.POST(\"/match\", func(c *gin.Context) {\n            var json notifier.MatchMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.POST(\"/goal\", func(c *gin.Context) {\n            var json notifier.GoalMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.POST(\"/card\", func(c *gin.Context) {\n            var json notifier.CardMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.Run()\n    }\n```\n\nThis gives us our three routes, each of which does essentially the same:\n\n- Parse the request payload as JSON into an appropriate structure\n- Use the Notifier from above to send a Pusher Channels notification for this message\n\nWe also need our main application file. This will be `/football-feed.go` in our project area, as follows:\n\n``` go\n    // football-feed.go\n    package main\n    import (\n        \"pusher/football-feed/internal/notifier\"\n        \"pusher/football-feed/internal/webapp\"\n    )\n    func main() {\n        notifier := notifier.New()\n        webapp.StartServer(\u0026notifier)\n    }\n```\n\nThe final thing to do is to ensure that our dependencies are all available. This is done by executing:\n\n```\n    $ dep ensure\n```\n\nWe can now start the application by executing `go run football-feed.go`:\n\n```\n    $ go run football-feed.go\n    [GIN-debug] [WARNING] Running in \"debug\" mode. Switch to \"release\" mode in production.\n     - using env:        export GIN_MODE=release\n     - using code:        gin.SetMode(gin.ReleaseMode)\n    \n    [GIN-debug] POST   /match                    --\u003e pusher/football-feed/internal/webapp.StartServer.func1 (4 handlers)\n    [GIN-debug] POST   /goal                     --\u003e pusher/football-feed/internal/webapp.StartServer.func2 (4 handlers)\n    [GIN-debug] POST   /card                     --\u003e pusher/football-feed/internal/webapp.StartServer.func3 (4 handlers)\n    [GIN-debug] Environment variable PORT is undefined. Using port :8080 by default\n    [GIN-debug] Listening and serving HTTP on :8080\n```\n\nAlternatively, we can build an executable using `go build football-feed.go`. This executable can then be distributed however we need to do so - for example, copying it into a Docker container or directly onto our production VMs.\n\nIf we were to make calls to this manually - e.g. by using cURL - then we would see the Pusher Channels events in the debug dashboard:\n\n```\n    \u003e $ curl -v -X POST http://localhost:8080/card -H \"Content-Type: application-json\" --data '{\"team\": \"Russia\", \"player\": \"Aleksandr Golovin\", \"card\": \"yellow\"}'\n    *   Trying ::1...\n    * TCP_NODELAY set\n    * Connected to localhost (::1) port 8080 (#0)\n    \u003e POST /card HTTP/1.1\n    \u003e Host: localhost:8080\n    \u003e User-Agent: curl/7.54.0\n    \u003e Accept: */*\n    \u003e Content-Type: application-json\n    \u003e Content-Length: 67\n    \u003e\n    * upload completely sent off: 67 out of 67 bytes\n    \u003c HTTP/1.1 201 Created\n    \u003c Content-Type: application/json; charset=utf-8\n    \u003c Date: Mon, 25 Jun 2018 13:09:21 GMT\n    \u003c Content-Length: 62\n    \u003c\n    * Connection #0 to host localhost left intact\n    {\"Team\":\"Russia\",\"Player\":\"Aleksandr Golovin\",\"Card\":\"yellow\"}\n```\n\n![go-react-football-feed-event-creator](//images.ctfassets.net/1es3ne0caaid/5u8wfHjneEMwCUaUwmMYcc/d37034bf9266e4d1cbf041b8eae23101/go-react-football-feed-event-creator.png)\n\n## Pundit application\n\nNow that we’ve got our backend that is able to react to messages and send Pusher Channels events, we want to write our Football Pundit application that will actually trigger these messages. This is going to be a simple Create React App application, using Semantic UI to give us some structure to the page.\n\nFirstly, we need to actually create the application. This is done by executing:\n\n```\n    $ create-react-app pundit-ui\n    $ cd pundit-ui\n    $ npm install\n```\n\n\u003e **Note:** you can use “yarn” instead of “npm” if you prefer.\n\nWe then want to add some dependencies that we need for the system:\n\n```\n    $ npm add --save uuid semantic-ui-css semantic-ui-react\n```\n\nOur UI is going to consist of a list of games that we are reporting on. These games will either be Started - in which case the match is underway - or Unstarted - in which case we are still entering the match details.\n\nOur Unstarted Matches will be rendered by a component defined in `src/UnstartedGame.js`, as follows:\n\n``` javascript\n    // src/UnstartedGame.js\n    import React from 'react';\n    import { Segment, Grid, Form, Header, Button } from 'semantic-ui-react';\n    export default function UnstartedGame({game, onTeamUpdated, onPlayerUpdated, onCancel, onStart}) {\n        const homePlayers = [];\n        const awayPlayers = [];\n        for (let i = 1; i \u003c= 11; ++i) {\n            homePlayers.push(\u003cinput placeholder={`Home Player ${i}`}\n                value={game.home.players[`player_${i}`] || ''}\n                onChange={(e) =\u003e onPlayerUpdated('home', `player_${i}`, e.target.value)}\n                key={`home.players.player_${i}`} /\u003e);\n            awayPlayers.push(\u003cinput placeholder={`Away Player ${i}`}\n                value={game.away.players[`player_${i}`] || ''}\n                onChange={(e) =\u003e onPlayerUpdated('away', `player_${i}`, e.target.value)}\n                key={`away.players.player_${i}`} /\u003e);\n        }\n        return (\n            \u003cSegment\u003e\n                \u003cForm\u003e\n                    \u003cGrid\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column\u003e\n                                \u003cHeader as='h2' textAlign='center'\u003eNew Match\u003c/Header\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={2}\u003e\n                                \u003cGrid.Column\u003e\n                                    \u003cinput placeholder=\"Home Team\"\n                                        value={game.home.team}\n                                        onChange={(e) =\u003e onTeamUpdated('home', e.target.value)} /\u003e\n                                \u003c/Grid.Column\u003e\n                                \u003cGrid.Column\u003e\n                                    \u003cinput placeholder=\"Away Team\"\n                                        value={game.away.team}\n                                        onChange={(e) =\u003e onTeamUpdated('away', e.target.value)} /\u003e\n                                \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column\u003e\n                                \u003cHeader as='h2' textAlign='center'\u003ePlayers\u003c/Header\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={2}\u003e\n                                \u003cGrid.Column\u003e{homePlayers}\u003c/Grid.Column\u003e\n                                \u003cGrid.Column\u003e{awayPlayers}\u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column textAlign=\"right\"\u003e\n                                \u003cButton.Group\u003e\n                                    \u003cButton primary onClick={onStart}\u003eStart Game\u003c/Button\u003e\n                                    \u003cButton.Or /\u003e\n                                    \u003cButton negative onClick={onCancel}\u003eCancel\u003c/Button\u003e\n                                \u003c/Button.Group\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                    \u003c/Grid\u003e\n                \u003c/Form\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\nThis renders a large form that has fields for: home team, away team, 11 home players and 11 away players.\n\nOur Started Matches will be rendered by a component defined in `src/StartedGame.js`, as follows:\n\n``` javascript\n    // src/StartedGame.js\n    import React from 'react';\n    import { Segment, Grid, Header, Button, Label, Dropdown, Menu } from 'semantic-ui-react';\n    const gameState = {\n        'first half': 'First Half',\n        'second half': 'Second Half',\n        'finished': 'Full Time',\n        'extra time': 'Extra Time'\n    };\n    export default function StartedGame({ game, onGoal, onCard, onGameEvent }) {\n        const homePlayers = [];\n        const awayPlayers = [];\n        for (let i = 1; i \u003c= 11; ++i) {\n            const playerId = `player_${i}`;\n            let homeLabel;\n            if (game.home.cards[playerId]) {\n                homeLabel=\u003cLabel color={game.home.cards[playerId]} ribbon\u003e{game.home.players[playerId]}\u003c/Label\u003e;\n            } else {\n                homeLabel = game.home.players[playerId];\n            }\n            let awayLabel;\n            if (game.away.cards[playerId]) {\n                awayLabel=\u003cLabel color={game.away.cards[playerId]} ribbon\u003e{game.away.players[playerId]}\u003c/Label\u003e;\n            } else {\n                awayLabel = game.away.players[playerId];\n            }\n            homePlayers.push(\n                \u003cDropdown text={homeLabel}\n                    pointing=\"left\"\n                    className=\"link item\"\n                    key={`home.players.${playerId}}`}\u003e\n                    \u003cDropdown.Menu\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onGoal('home', playerId, 'home')}\u003eGoal\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onGoal('home', playerId, 'away')}\u003eOwn Goal\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onCard('home', playerId, 'yellow')}\u003eYellow Card\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onCard('home', playerId, 'red')}\u003eRed Card\u003c/Dropdown.Item\u003e\n                    \u003c/Dropdown.Menu\u003e\n                \u003c/Dropdown\u003e\n            );\n            awayPlayers.push(\n                \u003cDropdown text={awayLabel}\n                    pointing=\"left\"\n                    className=\"link item\"\n                    key={`away.players.${playerId}}`}\u003e\n                    \u003cDropdown.Menu\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onGoal('away', playerId, 'away')}\u003eGoal\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onGoal('away', playerId, 'home')}\u003eOwn Goal\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onCard('away', playerId, 'yellow')}\u003eYellow Card\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onCard('away', playerId, 'red')}\u003eRed Card\u003c/Dropdown.Item\u003e\n                \u003c/Dropdown.Menu\u003e\n                \u003c/Dropdown\u003e\n            );\n        }\n        return (\n            \u003cSegment\u003e\n                \u003cGrid\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cHeader as='h2' textAlign='center'\u003eMatch\u003c/Header\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={2}\u003e\n                        \u003cGrid.Column textAlign=\"right\"\u003e\n                            \u003cLabel\u003e\n                                {game.home.team}\n                                \u003cLabel.Detail\u003e{game.home.score}\u003c/Label.Detail\u003e\n                            \u003c/Label\u003e\n                        \u003c/Grid.Column\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cLabel\u003e\n                                {game.away.team}\n                                \u003cLabel.Detail\u003e{game.away.score}\u003c/Label.Detail\u003e\n                            \u003c/Label\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column textAlign='center'\u003e\n                            {gameState[game.state]}\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cHeader as='h2' textAlign='center'\u003ePlayers\u003c/Header\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={2}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cMenu vertical borderless secondary style={{width: \"100%\"}}\u003e{homePlayers}\u003c/Menu\u003e\n                        \u003c/Grid.Column\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cMenu vertical borderless secondary style={{width: \"100%\"}}\u003e{awayPlayers}\u003c/Menu\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column textAlign=\"right\"\u003e\n                            \u003cButton.Group\u003e\n                                \u003cButton primary onClick={() =\u003e onGameEvent('finished')}\u003eFinish Game\u003c/Button\u003e\n                                \u003cButton onClick={() =\u003e onGameEvent('second half')}\u003eHalf Time\u003c/Button\u003e\n                                \u003cButton onClick={() =\u003e onGameEvent('extra time')}\u003eExtra Time\u003c/Button\u003e\n                            \u003c/Button.Group\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                \u003c/Grid\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\nThis renders a view that is similar to the previous, but instead of being a form that can be entered it is read-only and has buttons to click to indicate that events have happened. These events can be match-level events - half time, extra time and finish game - or player events - goal scored or card received.\n\nWe then have a single component that displays a list of all the games we are currently working with. This is in `src/Games.js` as follows:\n\n``` javascript\n    // src/Games.js\n    import React from 'react';\n    import { Container, Segment, Button } from 'semantic-ui-react';\n    import uuid from 'uuid/v4';\n    import StartedGame from './StartedGame';\n    import UnstartedGame from './UnstartedGame';\n    export default class Games extends React.Component {\n        state = {\n            games: []\n        }\n        newGameHandler = this.newGame.bind(this)\n        updateTeamHandler = this.updateTeam.bind(this)\n        updatePlayerHandler = this.updatePlayer.bind(this)\n        startGameHandler = this.startGame.bind(this)\n        cancelGameHandler = this.cancelGame.bind(this)\n        goalHandler = this.goalScored.bind(this)\n        cardHandler = this.cardGiven.bind(this)\n        gameEventHandler = this.gameEvent.bind(this)\n        render() {\n            const renderedGames = this.state.games\n                .map((game, index) =\u003e {\n                    if (game.state !== 'unstarted') {\n                        return \u003cStartedGame game={game}\n                            key={game.id}\n                            onGoal={(team, player, goalFor) =\u003e this.goalHandler(game.id, team, player, goalFor)}\n                            onCard={(team, player, card) =\u003e this.cardHandler(game.id, team, player, card)}\n                            onGameEvent={(event) =\u003e this.gameEventHandler(game.id, event)} /\u003e;\n                    } else {\n                        return \u003cUnstartedGame game={game}\n                            key={game.id}\n                            onTeamUpdated={(team, value) =\u003e this.updateTeamHandler(game.id, team, value)}\n                            onPlayerUpdated={(team, player, value) =\u003e this.updatePlayerHandler(game.id, team, player, value)}\n                            onCancel={() =\u003e this.cancelGameHandler(game.id)}\n                            onStart={() =\u003e this.startGameHandler(game.id)} /\u003e;\n                    }\n                });\n            return (\n                \u003cContainer\u003e\n                    \u003cSegment.Group\u003e\n                        {renderedGames}\n                    \u003c/Segment.Group\u003e\n                    \u003cButton onClick={this.newGameHandler}\u003eNew Match\u003c/Button\u003e\n                \u003c/Container\u003e\n            )\n        }\n        goalScored(gameId, team, player, goalFor) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[goalFor].score++;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cardGiven(gameId, team, player, card) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[team].cards[player] = card;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        gameEvent(gameId, event) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game.state = event;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        newGame() {\n            const { games } = this.state;\n            const newGames = [\n                ...games,\n                {\n                    id: uuid(),\n                    state: 'unstarted',\n                    home: {\n                        team: '',\n                        score: 0,\n                        players: {},\n                        cards: {}\n                    },\n                    away: {\n                        team: '',\n                        score: 0,\n                        players: {},\n                        cards: {}\n                    }\n                }\n            ];\n            this.setState({\n                games: newGames\n            });\n        }\n        updateTeam(id, team, value) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game[team].team = value;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        updatePlayer(id, team, player, value) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game[team].players[player] = value;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        startGame(id) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game.state = 'first half';\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cancelGame(id) {\n            const { games } = this.state;\n            const newGames = games.filter((game) =\u003e game.id !== id);\n            this.setState({\n                games: newGames\n            });\n        }\n    }\n```\n\nThis simply renders a list of games, using the appropriate component to render it depending on whether the game has started or finished. It also handles all of the events that can happen in the game, updating our state and ensuring that the games are re-rendered as needed.\n\nFinally we can update our map `App` class in `src/App.js` to render this list of games:\n\n``` javascript\n    // src/App.js\n    import React, { Component } from 'react';\n    import Games from './Games';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cGames /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nAnd the main index of the entire page, in `src/index.js`, ensuring that our styles are loaded correctly:\n\n``` javascript\n    // src/index.js\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import 'semantic-ui-css/semantic.min.css';\n    import App from './App';\n    ReactDOM.render(\u003cApp /\u003e, document.getElementById('root'));\n```\n\nAt this point we can run our application using `npm start` and see the Pundit UI that we have built.\n\n### Triggering backend events\n\nNow that we’ve got our pundit UI, we want it to trigger messages on our backend. This will be done using the Axios library to make HTTP calls to the backend.\n\nFirstly we need to install Axios:\n\n```\n    npm install --save axios\n```\n\nThen we make use of it in our application. All of this functionality goes in `src/Games.js`, which is responsible for handling our events.\n\nFirstly we need to actually include Axios and create a client to use. For this, add the following to the top of the file:\n\n``` javascript\n    // src/Games.js\n    import axios from 'axios';\n    \n    const axiosClient = axios.create({\n        baseURL: 'http://localhost:8080'\n    });\n```\n\nThen we need to actually make the API calls to trigger the messages. These are done in the `goalScored`, `cardGiven` and `gameEvent` methods, as follows:\n\n``` javascript\n    // src/Games.js\n        goalScored(gameId, team, player, goalFor) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[goalFor].score++;\n                }\n                axiosClient.post('/goal', {\n                    player: game[team].players[player],\n                    forTeam: goalFor,\n                    homeTeam: game.home.team,\n                    awayTeam: game.away.team,\n                    homeScore: game.home.score,\n                    awayScore: game.away.score,\n                    ownGoal: team !== goalFor\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cardGiven(gameId, team, player, card) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[team].cards[player] = card;\n                }\n                axiosClient.post('/card', {\n                    team: game[team].team,\n                    player: game[team].players[player],\n                    card\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        gameEvent(gameId, event) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game.state = event;\n                }\n                axiosClient.post('/match', {\n                    event,\n                    homeTeam: game.home.team,\n                    awayTeam: game.away.team,\n                    homeScore: game.home.score,\n                    awayScore: game.away.score\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n```\n\nMost of this is simply extracting the data from the current game state to send to the server.\n\nWe can now use this UI and see the events appearing in the Pusher debug dashboard.\n\n![go-react-football-feed-demo-with-event-creator](//images.ctfassets.net/1es3ne0caaid/IYQVADBV8AyCUmwWIgAaI/615e63cde3e4289b035c7b4092a6c2d0/go-react-football-feed-demo-with-event-creator.gif)\n\n## Live feed of events\n\nWe are going to add our live feed to a Bootstrap enabled page using the [Bootstrap Notify](http://bootstrap-notify.remabledesigns.com/) plugin. This can be used on any website that uses Bootstrap, but for our example we are going to use a single static HTML file as follows:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eFootball Feed\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\n            crossorigin=\"anonymous\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cscript src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/mouse0270-bootstrap-notify/3.1.7/bootstrap-notify.js\" integrity=\"sha256-ZfyZUBGHlJunePNMsBqgGX3xHMv4kaCZ5Hj+8Txwd9c=\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n            const pusher = new Pusher('PUSHER_KEY', {\n              cluster: 'PUSHER_CLUSTER'\n            });\n            const channel = pusher.subscribe('match');\n            channel.bind('goal', function(data) {\n                let message = data.Player + ' scored!';\n                if (data.OwnGoal) {\n                    message += ' (OG)';\n                }\n                $.notify({\n                    title: message,\n                    message: `${data.HomeTeam} ${data.HomeScore} - ${data.AwayScore} ${data.AwayTeam}`\n                }, {\n                    type: 'success',\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n            channel.bind('card', function(data) {\n                let message;\n                let type;\n                if (data.Card === 'yellow') {\n                    message = `Yellow card for ${data.Player} (${data.Team})`;\n                    type = 'warning';\n                } else {\n                    message = `Red card for ${data.Player} (${data.Team})`;\n                    type = 'danger';\n                }\n                $.notify({\n                    message: message\n                }, {\n                    type: type,\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n            channel.bind('match', function(data) {\n                let message;\n                if (data.Event === 'finished') {\n                    message = 'Full Time';\n                } else if (data.Event === 'second half') {\n                    message = 'Half Time';\n                } else if (data.Event === 'extra time') {\n                    message = 'Extra Time';\n                }\n                $.notify({\n                    title: message,\n                    message: `${data.HomeTeam} ${data.HomeScore} - ${data.AwayScore} ${data.AwayTeam}`\n                }, {\n                    type: 'info',\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e **Note:** make sure that PUSHER_KEY and PUSHER_CLUSTER are the same values as the backend is using.\n\nThe above code can be used on any website that uses Bootstrap, so you can easily include it in an existing site to give your users live football news without leaving.\n\nEnsure that the backend and pundit UI is running, and then open `index.html` in a web browser to see the messages appearing as you trigger events.\n\n```\n    # run backend\n    $ go run football-feed.go\n    \n    # run pundit UI\n    $ npm start\n```\n\n![go-react-football-feed-demo](//images.ctfassets.net/1es3ne0caaid/41013Qn0XmcY8QcWc4Ikas/f842d3de9f3bdfda7610bdb15ea8c146/go-react-football-feed-demo.gif)\n\n## Summary\n\nThis article shows how to use Pusher Channels to trigger a live feed of events on a website. The full source code can be found on [GitHub](https://github.com/sazzer/pusher-football-feed). Why not try extending it to support more actions, or even different games.","metaTitle":"Create a football results feed with Go and React","metaDescription":"Use Go and React to create a footbal feed web app. Admins will be able to send match updates out to any subscribed application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2G3VeHkp6MMqM6sqeG6Qw2","type":"Entry","createdAt":"2018-06-18T15:48:16.505Z","updatedAt":"2018-06-18T15:48:16.505Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Add realtime comments to a Gatsby blog","url":"realtime-comments-gatsby-blog","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/gatsby-blog","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-06-18","description":"Build a simple blog with a live commenting feature. Use Gatsby, the React-based static site generator, to create the blog. Add realtime comments functionality using Node and Express.","prerequisite":"You will need Node 6+ and npm installed on your machine. Some knowledge of React and Node may be helpful.","content":"## Introduction\n\nWe all dream of not just owning a blog but actually having the time to write and keep the blog up to date. Creating a blog has been made easy by static site generators like Jekyll but today we’ll be using [Gatsby](https://gatsbyjs.org). Gatsby is a blazing-fast static site generator for React.\n\nIn this tutorial, you’ll learn how to set up a blog using [Gatsby](https://gatsbyjs.org). Also, we’ll add realtime comments into our blog with the help of [Pusher](https://pusher.com).\n\nHere’s a screenshot of the final product:\n\n![gatsby-blog-comments-demo-1](//images.ctfassets.net/1es3ne0caaid/1dpknCjcNigMiQsWWSm0m4/c3b4d42d2c6f417481841c85c1f02ac5/gatsby-blog-comments-demo-1.png)\n\n### Realtime comments demo\n\n![gatsby-blog-comments-demo-2](//images.ctfassets.net/1es3ne0caaid/14gER7taz2oysa0o6goWU/b4ed5756b9424450703e96e7ef5879aa/gatsby-blog-comments-demo-2.gif)\n\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of how to use Gatsby, React and Node.js. Please ensure that you have at least Node version 6\u003e= installed before you begin.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Gatsby](https://gatsbyjs.com)\n- [React](https://reactjs.org)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\n## Initializing the application and installing dependencies\n\nTo get started, we will use the blog starter template to initialize our application. The first step is to install the Gatsby CLI. To install the CLI, run the following command in the terminal:\n\n```\n    npm install -g gatsby-cli\n```\n\nIf you use Yarn run:\n\n```\n    yarn global add gatsby-cli\n```\n\nThe next step is to create our project with the help of the CLI.  Run the command below to create a project called `realtime-blog` using the blog starter template:\n\n```\n    gatsby new realtime-blog https://github.com/HackAfro/gatsby-blog-starter-kit.git\n```\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher uuid \n    \n    // front-end dependencies\n    npm install pusher-js\n```\n\nStart the app server by running `npm run develop` in a terminal in the root folder of your project.\n\nA browser tab should open on http://localhost:8000. The screenshot below should be similar to what you see in your browser:\n\n![gatsby-blog-default](//images.ctfassets.net/1es3ne0caaid/eeekSIdLlQmWyI02YgIk2/451f319edbc7abbfed58f943aa1a5633/gatsby-blog-default.png)\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a [Pusher](https://pusher.com) account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the code snippet below into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n    PUSHER_CLUSTER=PUSHER_CLUSTER\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\nStart the server by running `node server` in a terminal inside the root folder of your project.\n\n### Draw route\n\nLet’s create a post route named `comment`, the Gatsby application will send requests to this route containing the comment data needed to update the application.\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    const { v4 } = require('uuid');\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/comment', (req, res) =\u003e {\n      const {body} = req;\n      const data = {\n        ...body,\n        timestamp: new Date(),\n        id: v4(),\n      };\n      pusher.trigger('post-comment', 'new-comment', data);\n      res.json(data);\n    });\n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. An object `data`  is created containing the request body. An `id` is added to the comment data to identify it as well as a timestamp. The `data` object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`post-comment`), an event name (`new-comment`), and a payload(`data`).\n\n\n\n## Building our blog index page\n\nThe current look of our blog is too generic, we’d like to have our blog represent our budding personality. To get that look, we’ll change the layout of the blog and add a few CSS styles to update the look and feel of the blog.\n \n Here’s the current look of our blog index page: \n \n![gatsby-blog-default](//images.ctfassets.net/1es3ne0caaid/eeekSIdLlQmWyI02YgIk2/451f319edbc7abbfed58f943aa1a5633/gatsby-blog-default.png)\n\nHere’s what we want our blog to look like:\n\n![gatsby-blog-comments-demo-1](//images.ctfassets.net/1es3ne0caaid/1dpknCjcNigMiQsWWSm0m4/c3b4d42d2c6f417481841c85c1f02ac5/gatsby-blog-comments-demo-1.png)\n\nI hope this new look will represent your budding personality because it really represents mine. Let’s go through the steps we’ll take to achieve this new look.\n \n Open the `index.js` file in the `src/pages/` directory. Update the file to look like the snippet below:\n \n``` javascript\n    // src/pages/index.js\n    \n    import React from 'react';\n    import GatsbyLink from 'gatsby-link';\n    import Link from '../components/Link';\n    import Tags from '../components/Tags';\n    import '../css/index.css';\n    \n    export default function Index({ data }) {\n      const { edges: posts } = data.allMarkdownRemark;\n      return (\n        \u003cdiv className=\"blog-posts\"\u003e\n          {posts\n            .filter((post) =\u003e post.node.frontmatter.title.length \u003e 0)\n            .map(({ node: post }, index) =\u003e {\n              return (\n                \u003cdiv\n                  className={`blog-post-preview ${\n                    index % 2 !== 0 ? 'inverse' : ''\n                  }`}\n                  key={post.id}\n                \u003e\n                  \u003cdiv className=\"post-info\"\u003e\n                    \u003ch1 className=\"title\"\u003e\n                      \u003cGatsbyLink to={post.frontmatter.path}\u003e\n                        {post.frontmatter.title}\n                      \u003c/GatsbyLink\u003e\n                    \u003c/h1\u003e\n                    \u003cdiv className=\"meta\"\u003e\n                      \u003cdiv className=\"tags\"\u003e\n                        \u003cTags list={post.frontmatter.tags} /\u003e\n                      \u003c/div\u003e\n                      \u003ch4 className=\"date\"\u003e{post.frontmatter.date}\u003c/h4\u003e\n                    \u003c/div\u003e\n                    \u003cp className=\"excerpt\"\u003e{post.excerpt}\u003c/p\u003e\n                    \u003cdiv\u003e\n                      \u003cLink to={post.frontmatter.path} className=\"see-more\"\u003e\n                        Read more\n                      \u003c/Link\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"post-img\"\u003e\n                    \u003cimg src={post.frontmatter.image} alt=\"image\" /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              );\n            })}\n        \u003c/div\u003e\n      );\n    }\n    export const pageQuery = graphql`\n      query IndexQuery {\n        allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n          edges {\n            node {\n              excerpt(pruneLength: 250)\n              id\n              frontmatter {\n                title\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                tags\n                image\n              }\n            }\n          }\n        }\n      }\n    `;\n```\n\n    \n\nThere’s really not much going on here. First, made the blog content separate from the blog image. Then we checked if the index of the current post was an odd number, if true, we added an inverse class to the post. \n\nSince we’ll be using `flex` for the layout, if we make the `flex-direction: row-inverse` it will invert the layout making the image appear on the left side rather than the right. Finally, we included an image for each blog post even though the posts don’t have an image front matter variable.\n\nAfter this update you’ll get an error in your terminal similar to the screenshot below:\n\n![gatsby-blog-comments-error](//images.ctfassets.net/1es3ne0caaid/6EJUxcdeOAicEuoyMwcsQW/218249111f21e57ea49011d87e0d2ca3/gatsby-blog-comments-error.png)\n\nThis is because the image variable doesn’t exist on the markdown files that we currently have. We’ll get to updating the markdown files so ignore the error for now.\n\nNext step is to update the stylesheet associated with the index page. Open the `index.css` file in the `/src/css` directory and update it like so:\n\n``` css\n    // /src/css/index.css\n    \n    .blog-post-preview {\n      display: flex;\n      align-items: flex-start;\n      justify-content: center;\n      padding: 1rem 0.25rem;\n      border-bottom: 2px solid rgba(0, 0, 0, 0.04);\n      margin-bottom: 20px;\n    }\n    .blog-post-preview.inverse{\n      flex-direction: row-reverse;\n    }\n    .blog-post-preview:last-child {\n      border-bottom-width: 0;\n    }\n    .post-info {\n      flex: 1;\n    }\n    .blog-post-preview.inverse \u003e .post-img{\n      margin-left: 0;\n      margin-right: 1rem;\n    }\n    .post-img {\n      flex: 1;\n      margin-left: 1rem;\n    }\n    .post-img \u003e img {\n      max-width: 100%;\n      max-height: 100%;\n    }\n    .title {\n      font-size: 22px;\n      text-transform: uppercase;\n      margin-bottom: 2px;\n      line-height: 1.2;\n    }\n    .title \u003e a {\n      color: black;\n      text-decoration: none;\n      opacity: 0.7;\n      letter-spacing: -0.2px;\n    }\n    .date {\n      font-size: 13px;\n      opacity: 0.5;\n      margin: 0;\n    }\n    .meta {\n      display: flex;\n      align-items: center;\n      margin-bottom: 8px;\n    }\n    .excerpt {\n      font-size: 15px;\n      opacity: 0.7;\n      letter-spacing: 0.4px;\n      margin-bottom: 10px;\n    }\n```\n\n\n\nNext, we’ll update the components associated with the index page. Currently, we have the `Link` and `Tags` components being used on the index page. Let’s update them to match the current flow of our application.\n\n\n## Tags component\n\nOpen the `Tags.js` file in the `/src/components` directory and update it with the content below:\n\n``` javascript\n    // /src/components/Tags.js\n    \n    import React from 'react';\n    import Link from 'gatsby-link';\n    import TagIcon from 'react-icons/lib/fa/tag';\n    \n    import '../css/tags.css';\n    \n    export default function Tags({ list = [] }) {\n      return (\n        \u003cul className=\"tags\"\u003e\n          {list.map(tag =\u003e\n            \u003cli key={tag}\u003e\n              \u003cLink to={`/tags/${tag}`} className=\"tag\"\u003e\n                \u003cTagIcon size={15} className=\"icon white\" /\u003e\n                {tag}\n              \u003c/Link\u003e\n            \u003c/li\u003e\n          )}\n        \u003c/ul\u003e\n      );\n    }\n```\n\n\nTo update the stylesheet associated with it, open the `tags.css` file in the `src/css/` directory. Copy the contents below into it:\n\n``` css\n    // /src/css/tags.css\n    \n    .tags {\n      display: flex;\n      margin-right: 6px;\n      list-style: none;\n      padding: 0;\n      margin: 0 4px 0 0;\n    }\n    .tag {\n      color: white;\n      background: purple;\n      font-size: 11px;\n      text-transform: uppercase;\n      font-weight: bold;\n      margin: 3px;\n      border-radius: 35px;\n      padding: 5px 12px;\n      line-height: 12px;\n      font-family: 'Rajdhani', cursive;\n      text-decoration: none;\n    }\n```\n\n\n## Link component\n\nThis component will build ontop the `GatsbyLink` component provided by Gatsby. It’ll add a custom class to the `GatsbyLink` component. The `Link.js` file will stay the same. We’ll only be updating the stylesheet associated with this component. Open the `link.css` file in the `src/css` folder and update it by adding the following styles to it:\n\n``` css\n    .link {\n      color: black;\n      opacity: 0.6;\n      background: white;\n      box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.07);\n      text-decoration: none;\n      padding: 7px 15px;\n      border-radius: 34px;\n      font-size: 12px;\n      text-transform: uppercase;\n      font-weight: bold;\n      border: 1px solid rgba(0, 0, 0, 0.05);\n    }\n```\n\nFinally, we’ll update the blog header. The header can be found in the `index.js`  file in the `src/layouts` directory. Open it and replace the contents with the code below:\n\n``` javascript\n    // src/layouts/index.js\n    \n    import React from 'react';\n    import PropTypes from 'prop-types';\n    import Link from 'gatsby-link';\n    import Helmet from 'react-helmet';\n    import '../css/typography.css';\n    import '../css/layout.css';\n    \n    export default class Template extends React.Component {\n      static propTypes = {\n        children: PropTypes.func,\n      };\n      render() {\n        const { location } = this.props;\n        const isRoot = location.pathname === '/';\n        return (\n          \u003cdiv\u003e\n            \u003cHelmet\n              title=\"Gatsby Default (Blog) Starter\"\n              meta={[\n                { name: 'description', content: 'Sample' },\n                { name: 'keywords', content: 'sample, something' },\n              ]}\n            /\u003e\n            \u003cdiv\n              style={{\n                background: `white`,\n                marginBottom: `1.45rem`,\n                boxShadow: '0 2px 4px 0 rgba(0,0,0,0.1)',\n              }}\n            \u003e\n              \u003cdiv\n                style={{\n                  margin: `0 auto`,\n                  maxWidth: 960,\n                  padding: isRoot ? `0.7rem 1.0875rem` : `.5rem 0.75rem`,\n                }}\n              \u003e\n                \u003ch1 style={{ margin: 0, fontSize: isRoot ? `2rem` : `1.5rem` }}\u003e\n                  \u003cLink\n                    to=\"/\"\n                    style={{\n                      color: 'purple',\n                      textDecoration: 'none',\n                      fontFamily: \"'Lobster', sans-serif\",\n                    }}\n                  \u003e\n                    The Food Blog\n                  \u003c/Link\u003e\n                \u003c/h1\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv\n              style={{\n                margin: `0 auto`,\n                maxWidth: 960,\n                padding: `0px 1.0875rem 1.45rem`,\n                paddingTop: 0,\n              }}\n            \u003e\n              {this.props.children()}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\n\nIn the snippet above, we added a stylesheet `layout.css` and updated the inline styles in the component. Let’s create the `layout.css` in the `src/css/` directory. Open the file and copy the code snippet below into it:\n\n``` css\n    // layout.css\n    \n    @import url('https://fonts.googleapis.com/css?family=Lobster|Rajdhani:600|Source+Sans+Pro:400,600,700');\n    * {\n      font-family: 'Source Sans Pro', sans-serif;\n    }\n    body {\n      background: rgba(0, 0, 0, 0.06);\n    }\n    .icon {\n      color: purple;\n      margin: 0 3px;\n    }\n    .icon.white {\n      color: white;\n    }\n```\n\n\nNow our index page should look like the screenshot of the potential index page we saw above. Now that’s progress.\n\n\n## Adding and updating blog posts\n\nSo far we’ve updated the look and layout of our blog. Let’s add a new blog post just to see how our index page handles it. Also, we’ll update the markdown files to include an image variable in the front matter section. \n\nUpdate all the current posts to have the same structure as the content below:\n\n```\n    ---\n    path: \"/post-new.html\"\n    date: \"2018-06-10T13:56:24.754Z\"\n    title: \"A post by me\"\n    tags: [\"new\", \"creative\"]\n    image: \"https://source.unsplash.com/random/1000x500\"\n    ---\n    \n    Post content ...\n```\n\nWe’ll be including random images from [Unsplash](https://unsplash.com) for our blog images. Update all the markdown files to include an image variable. Then restart the server or you’ll end up like me debugging the application for ten minutes trying to figure out the error. The error on the terminal should be cleared once you updated the markdown files and restart the server.\n\n\n## Updating the blog detail page\n\nNow that our index page reflects our personality, let’s do the same with the blog details page. Open the `blog-post.js` file in the `src/templates` directory and update it to look like the snippet below:\n\n``` javascript\n    // src/templates/blog-post.js\n    \n    import React from 'react';\n    import Helmet from 'react-helmet';\n    import BackIcon from 'react-icons/lib/fa/chevron-left';\n    import ForwardIcon from 'react-icons/lib/fa/chevron-right';\n    import Link from '../components/Link';\n    import Tags from '../components/Tags';\n    import '../css/blog-post.css';\n    \n    export default function Template({ data, pathContext }) {\n      const { markdownRemark: post } = data;\n      const { next, prev } = pathContext;\n      return (\n        \u003cdiv className=\"blog-post-container\"\u003e\n          \u003cHelmet title={`The Food Blog - ${post.frontmatter.title}`} /\u003e\n          \u003cdiv className=\"blog-post\"\u003e\n            \u003cdiv\u003e\n              \u003ch1 className=\"title\"\u003e{post.frontmatter.title}\u003c/h1\u003e\n              \u003ch2 className=\"date\"\u003e{post.frontmatter.date}\u003c/h2\u003e\n              \u003cdiv className=\"post-body\"\u003e\n                \u003cdiv className=\"post-img\"\u003e\n                  \u003cimg src={post.frontmatter.image} alt=\"\" /\u003e\n                \u003c/div\u003e\n                \u003cdiv\n                  className=\"blog-post-content post-info\"\n                  dangerouslySetInnerHTML={{ __html: post.html }}\n                /\u003e\n              \u003c/div\u003e\n              \u003cTags list={post.frontmatter.tags || []} /\u003e\n              \u003cdiv className=\"navigation\"\u003e\n                {prev \u0026\u0026 (\n                  \u003cLink className=\"link prev\" to={prev.frontmatter.path}\u003e\n                    \u003cBackIcon size={16} className=\"icon\" /\u003e {prev.frontmatter.title}\n                  \u003c/Link\u003e\n                )}\n                {next \u0026\u0026 (\n                  \u003cLink className=\"link next\" to={next.frontmatter.path}\u003e\n                    {next.frontmatter.title}{' '}\n                    \u003cForwardIcon size={16} className=\"icon\" /\u003e\n                  \u003c/Link\u003e\n                )}\n              \u003c/div\u003e\n              \u003cdiv className=\"comment-section\"\u003e\n                \u003ch4 className=\"comment-header\"\u003eComments\u003c/h4\u003e\n                {/* Comment component comes here */}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      );\n    }\n    export const pageQuery = graphql`\n      query BlogPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n          html\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            title\n            image\n          }\n        }\n      }\n    `;\n```\n\n\nLet’s update the stylesheet associated with it. Open the `blog-post.css` file in the `src/css` directory. Make the content similar to the snippet below:\n\n``` css\n    // src/css/blog-post.css\n    \n    .blog-post .link.prev {\n      float: left;\n    }\n    .blog-post .link.next {\n      float: right;\n    }\n    .blog-post .title,\n    .blog-post .date {\n      text-align: center;\n      margin: 0;\n      padding: 0;\n    }\n    .blog-post .date {\n      color: #555;\n      margin-bottom: 1rem;\n    }\n    .blog-post .navigation {\n      min-height: 60px;\n      margin-top: 15px;\n    }\n    .blog-post-content {\n      font-size: 15px;\n      opacity: 0.8;\n    }\n    .post-info {\n      flex: 2;\n    }\n    .post-img {\n      margin-right: 1.3rem;\n      padding: 2% 2% 1%;\n    }\n    .post-img \u003e img {\n      box-shadow: 0 3px 5px 1px rgba(0, 0, 0, 0.3);\n    }\n    .comment-section{\n      margin-top: 30px;\n    }\n    .comment-header {\n      font-size: 16px;\n      text-transform: uppercase;\n      color: purple;\n      letter-spacing: -0.3px;\n      margin-bottom: 10px;\n    }\n```\n\n## Realtime comments using Pusher\n\nWe’ve created a working blog and then updated the layout and styles to suit our needs yet we still don’t have a comments section for our readers to leave their thought on a blog post. We want our comment section to have some realtime functionalities where users get updates on the post as it happens. Using Pusher’s pub/sub functionality we can achieve this.\n\nWe already have Pusher dispatching events on the server, the next step is creating a listener to act on the events.\n\nCreate a folder called `comments` in the `components` folder. Create a file called `form.js` in the `comments` folder. Update the contents of the file with the snippet below:\n\n``` javascript\n    // src/components/comments/form.js\n    \n    import React from 'react';\n    class CommentForm extends React.Component {\n      constructor() {\n        super();\n        this.state = {\n          name: '',\n          comment: '',\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n      }\n      async handleSubmit(e) {\n        e.preventDefault();\n        const body = JSON.stringify({ ...this.state });\n        const response = await fetch('http://localhost:4000/comment', {\n          method: 'post',\n          body,\n          headers: {\n            'content-type': 'application/json',\n          },\n        });\n        const data = await response.json();\n        this.setState({ comment: '', name: '' });\n      }\n      handleChange({ target }) {\n        const { name, value } = target;\n        this.setState({ [name]: value });\n      }\n      render() {\n        const { name, comment } = this.state;\n        return (\n          \u003cform onSubmit={this.handleSubmit} className=\"comment-form\"\u003e\n            \u003cinput\n              placeholder=\"Your Name\"\n              value={name}\n              name=\"name\"\n              onChange={this.handleChange}\n            /\u003e\n            \u003ctextarea\n              placeholder=\"Enter your comment\"\n              rows=\"4\"\n              name=\"comment\"\n              value={comment}\n              onChange={this.handleChange}\n            /\u003e\n            \u003cdiv\u003e\n              \u003cbutton className=\"button submit-button\"\u003eSubmit\u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/form\u003e\n        );\n      }\n    }\n    export default CommentForm;\n```\n\n\nThe form component will handle the commenting functionality for users. We’ll place the `form` component in the `CommentList` component. The `CommentList` component hasn’t been created yet, we’ll get to that. \n\nThe next step is to create a `Comment.js` file. This component will display a comment from the list of comments. Update the contents of the file with the snippet below:\n\n``` javascript\n    // src/components/comments/Comment.js\n    \n    import React from 'react';\n    const Comment = ({ comment }) =\u003e (\n      \u003cdiv className=\"comment\"\u003e\n        \u003cdiv className=\"comment__meta\"\u003e\n          \u003ch5\u003e{comment.name}\u003c/h5\u003e\n          \u003cspan\u003e{new Date(comment.timestamp).toDateString()}\u003c/span\u003e\n        \u003c/div\u003e\n        \u003cp className=\"comment__body\"\u003e{comment.comment}\u003c/p\u003e\n      \u003c/div\u003e\n    );\n    export default Comment;\n```\n\nThe final step is to create a file called `CommentList.js` in the `comments` folder. The component will the hold the `form` and `Comment` components.  Open the file and update it with the code below:\n\n``` javascript\n    // src/components/comments/CommentList.js\n    \n    import React from 'react';\n    import Pusher from 'pusher-js';\n    import CommentForm from './form';\n    import Comment from './Comment';\n    import '../../css/comment.css';\n    \n    class Comments extends React.Component {\n      constructor() {\n        super();\n        this.state = {\n          comments: [],\n        };\n        this.pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n      }\n      componentDidMount() {\n        const channel = this.pusher.subscribe('post-comment');\n        channel.bind('new-comment', (data) =\u003e {\n          this.setState((prevState) =\u003e ({\n            comments: [...prevState.comments, data],\n          }));\n        });\n      }\n      \n      render() {\n        const { comments } = this.state;\n        return (\n          \u003cdiv\u003e\n            \u003cCommentForm /\u003e\n            \u003chr /\u003e\n            \u003cdiv className=\"comment-list\"\u003e\n              {comments.length ? (\n                comments.map((comment) =\u003e (\n                  \u003cComment comment={comment} key={comment.id} /\u003e\n                ))\n              ) : (\n                \u003ch5 className=\"no-comments-alert\"\u003e\n                  No comments on this post yet. Be the first\n                \u003c/h5\u003e\n              )}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default Comments;\n```\n\n\nThere’s quite a bit going on in here. We’ll walk through it. \n\n\n- In the component’s `constructor`, we initialized the Pusher library using the `appKey` that can be found in the Pusher dashboard. Be sure to replace the placeholder string with your real `appKey`.\n\n\n- In the `componentDidMount` lifecycle, we subscribed to the `post-comment` channel and listened for a `new-comment` event. In the event callback, we appended the data returned to the list of comments.\n\n\n- Also, we included a new stylesheet that hasn’t been created yet. Create a file called `comment.css` in the `src/css` directory. \n\nOpen the file and update it with the content below:\n\n``` css\n    // src/css/comment.css\n    \n    .comment-form {\n      display: flex;\n      flex-direction: column;\n      width: 50%;\n      padding: 10px 25px 20px 0;\n    }\n    .comment-form \u003e input,\n    .comment-form \u003e textarea {\n      width: 100%;\n      border: 3px solid rgb(143, 51, 143);\n      margin: 12px 0;\n      padding: 7px 14px;\n      font-size: 14px;\n      opacity: 0.8;\n      font-weight: bold;\n      box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.3);\n      border-radius: 8px;\n    }\n    .comment-form \u003e div \u003e .submit-button {\n      padding: 8px 45px;\n      background: rgb(143, 51, 143);\n      color: whitesmoke;\n      border-radius: 35px;\n      box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.3);\n      text-transform: uppercase;\n      font-size: 16px;\n      font-weight: bold;\n      cursor: pointer;\n    }\n    .comment__meta \u003e h5 {\n      font-size: 15px;\n      color: purple;\n      opacity: 0.7;\n      margin-bottom: 3px;\n      line-height: 1;\n    }\n    hr {\n      background: rgba(0, 0, 0, 0.2);\n      height: 3px;\n    }\n    .comment__meta \u003e span {\n      font-size: 14px;\n      font-weight: bold;\n      opacity: 0.5;\n    }\n    .comment__body {\n      font-size: 18px;\n      opacity: 0.8;\n      font-family: 'Rajdhani', cursive;\n    }\n    .no-comments-alert {\n      font-size: 16px;\n      color: purple;\n      opacity: 0.7;\n      text-transform: uppercase;\n      letter-spacing: -0.3px;\n    }\n```\n\n\n## Including comments in blog posts\n\nLet’s include the comment section we just created in the blog post template. Open the `blog-post.js` file and include the `comments` component where we had the comment `comment component comes here`.  \n\n``` javascript\n    // src/templates/blog-post.js\n    ...\n    import '../css/blog-post.css';\n    import Comments from '../components/Comments/CommentList';\n    ...\n    \n    export default function Template({ data, pathContext }) {\n      ...\n      return (\n        ...\n        \u003cdiv className=\"comment-section\"\u003e\n          \u003ch4 className=\"comment-header\"\u003eComments\u003c/h4\u003e\n          \u003cComments /\u003e\n        \u003c/div\u003e\n        ...\n      )\n    };\n    ...\n```\n\nLet’s have a look at our blog details page. Click on the link for any blog list item. The view should be similar to the screenshot below: \n\n\n\u003e **P.S:** Ensure you have the server and the Gatsby dev server running.\n\n![gatsby-blog-comments-single-entry](//images.ctfassets.net/1es3ne0caaid/5qTVwTafVSMcI2IsgWSo4c/d13e83e510c1b49b3a5857c6dd9b06cc/gatsby-blog-comments-single-entry.png)\n\nYou can also test the realtime functionality of the application by opening two browsers side by side. A Comment placed on one browser window can be seen in the other.\n\n![gatsby-blog-comments-two-browser](//images.ctfassets.net/1es3ne0caaid/4P2YjscTiMmmAugIWcICm2/c3f7a985a83c791568e79f7747929f5b/gatsby-blog-comments-two-browser.png)\n\n## Conclusion\n\nWe’ve created a blog using Gatsby and included realtime commenting functionality using Pusher. You could do one extra and include a way to persist comments on a blog post. You can find the source code for this tutorial on [GitHub](https://github.com/HackAfro/gatsby-blog).","metaTitle":"Add realtime comments to a Gatsby blog","metaDescription":"This tutorial will show you how to add realtime comments to a Gatsby blog. You will use Node and Express to create a simple backend, allowing users to add and view comments instantly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3n5lQ5Ma4g4IYo6agGmECC","type":"Entry","createdAt":"2018-06-15T10:48:50.972Z","updatedAt":"2018-06-15T10:48:50.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Add live comments in Gatsby","url":"realtime-comments-gatsby","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/Robophil/gatsby-site-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-12","description":"Build a simple website with Gatsby and React featuring realtime comments. Create a football blog, where users can post comments and see others' responses instantly.","prerequisite":"You will need Node and npm or Yarn installed on your machine. A basic understanding of JavaScript will be helpful.","content":"According to Wikipedia, a static web page (sometimes called a flat page/stationary page) is a web page that is delivered to the user exactly as stored, in contrast to [dynamic web pages](https://en.wikipedia.org/wiki/Dynamic_web_page) which are generated by a web application\n\n[Gatsby](https://www.gatsbyjs.org/blog/2017-05-31-introduction-to-gatsby/) is a modern static site generator that allows you to build static web pages using [React](https://reactjs.org/) and [GraphQl](https://graphql.org/). Getting started with Gatsby is pretty easy and its installation is an `npm install` or `yarn install` away.\n\nToday we’ll be adding a realtime comment section to the sports blog we’ll be building. We’ll call our blog the “Football transfer buzz with Gordon Mc-gossip”.\nOur application will contain a post and allow users to leave comments and everyone gets to see it in realtime.\n\n![gatsby-comments-demo](//images.ctfassets.net/1es3ne0caaid/5DaAhewQDuME6q6MgMmuis/d5595eb8ac39c81c13d15ba193e1241f/gatsby-comments-demo.gif)\n\n## Prerequisites\n\n1. Kindly ensure you have [Node](https://nodejs.org/en/download/), [Npm](https://www.npmjs.com/get-npm) or [Yarn](https://yarnpkg.com/en/docs/install) installed on your machine before moving past this section. This will be needed for running and managing the dependencies needed by our application. \n2. Also, no knowledge of React is required, but a basic understanding of JavaScript may be helpful.\n3. [Pusher](https://pusher.com/): this is a framework that allows you to build realtime applications with its easy to use pub/sub messaging API.\n4. [Gatsby](https://www.gatsbyjs.org/): this is a static site generator. ( minimum version `\"gatsby\": \"^1.9.247\"`)\n\n\n\n## Install Gatsby\n\nInstalling [Gatsby](https://www.gatsbyjs.org/) is pretty easy once you have Node installed on your machine. Simply run:\n\n```\n    # for npm users\n    npm i -g gatsby-cli\n```\n\n```\n    # for yarn users\n    yarn global add gatsby-cli\n```\n\nThis Gatsby CLI comes with a few helpful commands that can help you build and test your apps locally.\n\n\n## Create your app\n\nTo create our project, simply run:\n\n```\n    # new gatsby project\n    gatsby new gatsby-site-pusher\n```\n\nThis will create our new project `Transfer-Buzz` and install its dependencies. If you `cd` into your new project directory, it will look like this.\n\n![gatsby-comments-structure](//images.ctfassets.net/1es3ne0caaid/6MyCLMe22IYIowK4wIGGyI/922325c14c5258e67a58d50ae8601221/gatsby-comments-structure.png)\n\nMost of the work we’ll be doing would be in the `src/` directory. The components we’ll create would go into the `src/components` directory and pages would go into the `src/pages` directory.\n\nInstall dependency:\n\n```\n    # for npm users\n    npm i --save pusher-js\n```\n\n```\n    # for yarn users\n    yarn add pusher-js\n```\n\n## Get our Pusher credentials\n\nIf you don't have a Pusher account already, kindly create one [here](https://pusher.com/signup). Once you have an account, simply head down to your [dashboard](https://dashboard.pusher.com/) and create an app. Once that is done, click on **App Keys** and note your credentials. We'll be needing them in a bit.\n\n![gatsby-comments-app-keys](//images.ctfassets.net/1es3ne0caaid/3abrlRyXEkoGs0AcsuYoGA/e3362163d26b7cf5027894f8509381f6/gatsby-comments-app-keys.png)\n\n\n## Creating our app components\n\nThe first component we’ll create is our `CommentList` component. This will be responsible for listing the comments left by users.\n\n``` javascript\n    // src/components/comment-list.js\n    \n    import React from 'react'\n    \n    export default ({comments}) =\u003e {\n      comments = comments.map((comment, i) =\u003e (\n        \u003cdiv key={i} style={{\n          padding: '5px',\n          border: '1px solid grey'\n        }}\u003e\n          \u003cp\u003e\u003cstrong\u003e{comment.author}:\u003c/strong\u003e\u003c/p\u003e\n          \u003cp\u003e{comment.message}\u003c/p\u003e\n        \u003c/div\u003e\n      ))\n      return (\n        \u003csection\u003e\n          \u003cstrong\u003eComments: \u003c/strong\u003e{comments}\n        \u003c/section\u003e\n      )\n    }\n```    \n\nThis simply takes an array of comments with attributes `{author, message}` and returns a `CommentList` component.\n\nNext, is the `Comment` component, which will have a form for accepting new comments and list comments below.\n\n``` javascript\n    // src/components/comment.js\n    import React, { Component } from 'react'\n    import CommentList from './comment-list'\n    import Pusher from 'pusher-js'\n    \n    /**\n    * initialize pusher with your credentials.\n    * Get 'key' from pusher dashboard\n    */\n    const pusher = new Pusher('key', {\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    // subscribe your pusher instance to the channel 'sport-buzz-news'\n    const channel = pusher.subscribe('sport-buzz-news')\n    \n    /* global fetch */\n    export default class Comment extends Component {\n      constructor (props) {\n        super(props)\n        this.state = {\n          comments: [],\n          author: '',\n          message: ''\n        }\n      }\n    \n    /**\n    * This will load components from the server on app startup,\n    * and also subscribe our app to listen for updates\n    */\n      async componentDidMount () {\n        const comments = await fetch('http://localhost:8080/comments').then(res =\u003e res.json())\n        this.setState({comments: [...comments, ...this.state.comments]})\n        this.receiveUpdateFromPusher()\n      }\n    \n      componentWillUnmount () {\n        pusher.unsubscribe('sport-buzz-news')\n      }\n    \n      /**\n      * add new comments to the top of the list\n      * once there's an update\n      */\n      receiveUpdateFromPusher () {\n        channel.bind('new-comment', comment =\u003e {\n          this.setState({\n            comments: [comment, ...this.state.comments]\n          })\n        })\n        console.log('app subscription to event successful')\n      }\n    \n      handleChange (type, event) {\n        if (type === 'author') {\n          this.setState({author: event.target.value})\n          return\n        }\n        if (type === 'message') {\n          this.setState({message: event.target.value})\n        }\n      }\n    \n      /**\n      * post comment to the server\n      */\n      async postComment (author, message) {\n        await fetch('http://localhost:8080/comment', {\n          body: JSON.stringify({author, message}),\n          method: 'POST',\n          headers: {\n            'user-agent': 'Mozilla/4.0 ',\n            'content-type': 'application/json'\n          }\n        })\n      }\n    \n      handleSubmit (event) {\n        event.preventDefault()\n        this.postComment(this.state.author, this.state.message)\n        this.setState({author: '', message: ''})\n      }\n    \n      render () {\n        return (\n          \u003cdiv\u003e\n            \u003cform onSubmit={this.handleSubmit.bind(this)}\u003e\n              \u003clabel\u003e\n              Name:\n                \u003cinput type='text' value={this.state.author} onChange={this.handleChange.bind(this, 'author')} /\u003e\n              \u003c/label\u003e\n              \u003clabel\u003e\n                \u003cbr /\u003e\n              Message:\n                \u003ctextarea type='text' value={this.state.message} onChange={this.handleChange.bind(this, 'message')} /\u003e\n              \u003c/label\u003e\n              \u003cbr /\u003e\n              \u003cinput type='submit' value='Submit' /\u003e\n            \u003c/form\u003e\n            \u003cCommentList comments={this.state.comments} /\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n```\n\nHere, when the component gets mounted, we try to load previous comments from the server and pass that data as `props` to the `CommentList` component.\n\n\n\u003e Note: please remember to updated placeholders with your pusher credentials.\n\n\n## Putting content on our page\n\nOpen your `src/pages/index.js` file which should already exist. You should replace its content with this:\n\n``` javascript\n    // src/pages/index.js\n    \n    import React from 'react'\n    import Comment from '../components/comment'\n    \n    const IndexPage = () =\u003e (\n      \u003cdiv\u003e\n        \u003ch1\u003eLeroy Aziz Sané left out of German squad for the world cup\u003c/h1\u003e\n        \u003cp\u003e\n          A lot of talks is currently ongoing about the Manchester City winger Leroy Sane being left out of the German team.\n          He was a prolific player this season with Mancity winning the premier league andthe significant contribution he brought to the team in front of Goal.\n          The decision by the German coach, Low to leave him out of the squad list was totally unexpected. Football really is a funny sport.\n        \u003c/p\u003e\n        \u003cp\u003e\n          Let me know your thoughts in the comment section below\n        \u003c/p\u003e\n        \u003cComment /\u003e\n      \u003c/div\u003e\n    )\n    \n    export default IndexPage\n```\n\nThis contains a post we made and the `Comment` component we imported above.\n\n\n## Getting data in Gatsby\n\nGatsby uses GraphQL for getting data. It could be from any source. There are a few files where changes need to be made to get data. We have `gatsby-node.js`, `gatsby-browser.js`, `gatsby-config.js` among others.\n\nWhat we’re concerned about right now is `gatsby-config.js`. It is responsible for passing data down to our `src/components/header.js` component. This gets data locally from the file and it’s an easy way to initialize your application with data.\n\nOpen up your `src/components/header.js` file and you should see this:\n\n``` javascript\n    // src/components/header.js\n    \n    import React from 'react'\n    import Link from 'gatsby-link'\n    \n    const Header = ({ siteTitle }) =\u003e (\n      \u003cdiv\n        style={{\n          background: 'rebeccapurple',\n          marginBottom: '1.45rem'\n        }}\n      \u003e\n        \u003cdiv\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '1.45rem 1.0875rem'\n          }}\n        \u003e\n          \u003ch1 style={{ margin: 0 }}\u003e\n            \u003cLink\n              to='/'\n              style={{\n                color: 'white',\n                textDecoration: 'none'\n              }}\n            \u003e\n              {siteTitle}\n            \u003c/Link\u003e\n          \u003c/h1\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    )\n    \n    export default Header\n```\n\nIt takes a prop called `siteTitle` which was exported from the file `gatsby-config.js`.\n\nFeel free to go ahead and change the value for `title` in `gatsby.js` to `Football transfer buzz with Gordon Mc-Gossip'`. \n\n\n## Setting up the server\n\nComments sent by users need to go somewhere, that’s what the server is for. It will save the comment, and publish it to Pusher who will trigger an update to all clients subscribed to that channel and listening for that event.\n\nFirst, we’ll need to add the dependencies needed by our server.\n\n```\n    # for yarn users\n    yarn add express body-parser cors pusher\n```\n\n```\n    # for npm users\n    npm i express body-parser cors pusher\n```\n\nCreate the file `server.js` and add the following:\n\n``` javascript\n    // server.js\n    const express = require('express')\n    const app = express()\n    const bodyParser = require('body-parser')\n    const cors = require('cors')\n    const Pusher = require('pusher')\n    \n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: true }))\n    app.use(bodyParser.json())\n    \n    const port = process.env.PORT || 8080\n    \n    const pusher = new Pusher({\n      appId: 'appId',\n      key: 'key',\n      secret: 'secret',\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    let comments = [\n      {\n        author: 'robo',\n        message: 'i totally didn\\'t see that coming'\n      }\n    ]\n    \n    /**\n    * receive new comment from the client\n    * update the comments array with the new entry\n    * publish update to Pusher\n    */\n    app.post('/comment', function (req, res) {\n      const {author, message} = req.body\n      comments = [...[{author, message}], ...comments]\n      pusher.trigger('sport-buzz-news', 'new-comment', {author, message})\n      res.sendStatus(200)\n    })\n    \n    // send all comments to the requester\n    app.get('/comments', function (req, res) {\n      res.json(comments)\n    })\n    \n    app.listen(port, function () {\n      console.log('Node app is running at localhost:' + port)\n    })\n```    \n\nHere, we initialize Pusher with our credentials gotten from our dashboard. When we get a request on `localhost:8080/comments` we return all comments gotten so far and receive comments sent to `POST localhost:8080/comment`.\n\n\n## Running the app\n\nWe’ll use one of Gatsby’s helpful CLI commands to start our application. Simply run:\n\n```\n    # gatsby cli command\n    gatsby develop\n```\n\nThis will start our application on port  `8000` and can be accessed here `http://localhost:8000/`. \n\nYou’ll also need to start the server by running:\n\n```\n    # start node server\n    node server.js\n```\n\nOur server application will run on `http://localhost:8080/` and all API calls would go here.\n\n## More\n\nGatsby allows you to export as a static content when going to production. It could prefetch your data from any data source and bundle it into the generated static file.\n\nTo do that, simply run:\n\n```\n    # make production build\n    gatsby build\n```\n\n\u003e Gatsby will perform an optimized production build for your site generating static HTML and per-route JavaScript code bundles.\n\n## Conclusion\n\nWe’ve been able to build a simple blog application with a live comment section. This was done using Pusher and Gatsby.\nThe repo for this tutorial lives [here](https://github.com/Robophil/gatsby-site-pusher). Feel free to contribute.","metaTitle":"Add live comments in Gatsby","metaDescription":"This tutorial will show you how to create a football blog site using Gatsby and React. Users will be able to post comments and view updates instantly."}}],"defaultValue":"React","queryType":"tag","pages":7,"route":"/tutorials","query":{"tag":"React","page":"4"}}},"page":"/tutorials","query":{"tag":"React","page":"4"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=React&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:15 GMT -->
</html>