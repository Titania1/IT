<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Go&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:27:05 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">23</span> tutorials for “<span class="css-npldjc ehwuahf2">Go</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials19f4.html?product=Beams&amp;tag=Go" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#C223CE"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Go"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/go-vue-online-presence.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Go application with online presence</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this tutorial you&#x27;ll build a simple Go application, using Vue.js for the frontend. Users will be able to sign in and ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with Go</h3><p class="css-k12xad e5jrto45">This brief tutorial helps you create a simple chat application. You will build the backend in Go, and the frontend in va...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-widget-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a chat widget with Go and JavaScript</h3><p class="css-k12xad e5jrto45">This brief tutorial shows you how to quickly create a chat widget with a backend powered by Go, and a frontend and admin...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-kotlin-go-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a cryptocurrency alert app using Kotlin and Go: Part 1 - The frontend</h3><p class="css-k12xad e5jrto45">In this two-part tutorial, build a cryptocurrency price monitor app, using Kotlin and Go. In part one, build the Android...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-kotlin-go-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a cryptocurrency alert app using Kotlin and Go: Part 2 - The backend</h3><p class="css-k12xad e5jrto45">In this two-part tutorial, build a cryptocurrency price monitor app, using Kotlin and Go. In part two, build the backend...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/football-feed-go-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a football results feed with Go and React</h3><p class="css-k12xad e5jrto45">Build a realtime football results feed, using Go for the backend and React for the frontend. Admins will be able to send...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live graph with Go</h3><p class="css-k12xad e5jrto45">Build a simple interface featuring a live graph, supported by a Go backend. The application simulates a web traffic moni...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-blog-swift-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live blog app using Swift and Go</h3><p class="css-k12xad e5jrto45">Build a live blogging app for iOS with Swift. Create a backend using Go. Admin users will be able to add blog posts, wit...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-blog-go-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live blog using Go and Vue.js</h3><p class="css-k12xad e5jrto45">Build a live blogging app using Go and Vue.js. Admin users can post blog updates, and readers can see posts appear in re...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials4e78.html?tag=Go&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials4e78.html?tag=Go&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsca71.html?tag=Go&amp;page=2" class="css-2wakph edg0byb1">2</a><a href="tutorialsf573.html?tag=Go&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorialsf573.html?tag=Go&amp;page=3" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":23,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ixvYc9KQOOcYecWgqi0QU","type":"Entry","createdAt":"2018-08-13T22:46:15.628Z","updatedAt":"2018-08-13T22:46:15.628Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Go application with online presence","url":"go-vue-online-presence","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-presence-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-08","description":"In this tutorial you'll build a simple Go application, using Vue.js for the frontend. Users will be able to sign in and view a video, and see who else is watching.","prerequisite":"You will need Go 0.10+ installed on your machine.","content":"When building applications that allow multiple users to interact with one another, it is essential to display their online presence so that each user gets an idea of how many other users are online.\n\nIn this article, we will build a live streaming application that displays the online presence of the users currently streaming a video. We will use [Go](https://golang.org/doc/install), JavaScript (Vue) and [Pusher](http://pusher.com/) for the development.\n \nHere’s a demo of the final application:\n\n![go-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/1ITW3IU0Vm8wkMS2gMqaGe/fdc44d0a06f09561bb282297f721a7e4/go-online-presence-demo.gif)\n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/go-pusher-presence-app).\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- A code editor like Visual Studio Code.\n- Basic knowledge of the Go programming language.\n- Go (version \u003e= 0.10.x) installed on your computer. [Installation guide.](https://golang.org/doc/install)\n- Basic knowledge of JavaScript (Vue).\n- A Pusher application. Create one [here](https://dashboard.pusher.com/).\n\nOnce you have all the above requirements, we can proceed.\n\n## Building the backend server\n\nWe will build the backend server in Go. Create a new project directory in the `src` directory that is located in the `$GOPATH`, let’s call this directory `go-pusher-presence-app`.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-presence-app\n    $ cd go-pusher-presence-app\n```\n\nNext, create a new Go file and call it `presence.go`, this file will be where our entire backend server logic will be. Now, let’s pull in the official Go Pusher package with this command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nOpen the `presence.go` file and paste the following code:\n\n``` go\n    // File: ./presence.go\n    package main\n    \n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    type user struct {\n        Username  string `json:\"username\" xml:\"username\" form:\"username\" query:\"username\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    var loggedInUser user\n    \n    func main() {\n        // Define our routes\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./static\")))\n        http.HandleFunc(\"/isLoggedIn\", isUserLoggedIn)\n        http.HandleFunc(\"/new/user\", NewUser)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        // Start executing the application on port 8090\n        log.Fatal(http.ListenAndServe(\":8090\", nil))\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nHere’s a breakdown of what we’ve done in the code above:\n\n\n- We imported all the packages that are required for the application to work, including Pusher.\n- We instantiated the Pusher client that we will use to authenticate users from the client-side.\n- We defined a user struct and gave it two the properties — username and email — so that Go knows how to handle incoming payloads and correctly bind it to a user instance.\n- We created a global instance of the user struct so that we can use it to store a user’s name and email. This instance is going to somewhat serve the purpose of a session on a server, we will check that it is set before allowing a user to access the dashboard of this application.\n\nIn the main function, we registered four endpoints:\n\n\n1. `/` - loads all the static files from the static directory.\n2. `/isLoggedIn` - checks if a user is logged in or not and returns a fitting message.\n3. `/new/user` - allows a new user to connect and initializes the global user instance.\n4. `/pusher/auth` — authorizes users from the client-side.\n\nIn the same file, above the `main` function, add the code for the handler function of the `/isLoggedIn` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    func isUserLoggedIn(rw http.ResponseWriter, req *http.Request){\n        if loggedInUser.Username != \"\" \u0026\u0026 loggedInUser.Email != \"\" {\n            json.NewEncoder(rw).Encode(loggedInUser)\n        } else {\n            json.NewEncoder(rw).Encode(\"false\")\n        }\n    }\n    \n    // [...]\n```\n\nAfter the function above, let’s add the handler function for the `/new/user` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    func NewUser(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        err = json.Unmarshal(body, \u0026loggedInUser)\n        if err != nil {\n            panic(err)\n        }\n        json.NewEncoder(rw).Encode(loggedInUser)\n    }\n    \n    // [...]\n```\n\nAbove, we receive a new user's details in a `POST` request and bind it to an instance of the user struct. We further use this user instance to check if a user is logged in or not\n\nLastly, after the function above, let’s add the code for the `/pusher/auth` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    // -------------------------------------------------------\n    // Here, we authorize users so that they can subscribe to \n    // the presence channel\n    // -------------------------------------------------------\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        \n        data := pusher.MemberData{\n            UserId: loggedInUser.Username,\n            UserInfo: map[string]string{\n                \"email\": loggedInUser.Email,\n            },\n        }\n    \n        response, err := client.AuthenticatePresenceChannel(params, data)\n        if err != nil {\n            panic(err)\n        }\n    \n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nTo ensure that every connected user has a unique presence, we used the properties of the global `loggedInUser` variable in setting the `pusher.MemberData` instance.\n \n The syntax for authenticating a Pusher presence channel is:\n \n```\n    client.AuthenticatePresenceChannel(params, presenceData)\n```\n\n## Building the frontend\n\nNext, in the root of the project, create a `static` folder. Create two files the directory named `index.html` and `dashboard.html`. In the `index.html` file, we will write the HTML code that allows users to connect to the live streaming application using their name and email.\n\n### Setting up the connection page\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./static/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n            \u003ctitle\u003eLive streamer\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n            \u003cstyle\u003e\n                  :root {\n                    --input-padding-x: .75rem;\n                    --input-padding-y: .75rem;\n                  }\n                  html,\n                  body, body \u003e div {\n                    height: 100%;\n                  }\n                  body \u003e div {\n                    display: -ms-flexbox;\n                    display: flex;\n                    -ms-flex-align: center;\n                    align-items: center;\n                    padding-top: 40px;\n                    padding-bottom: 40px;\n                    background-color: #f5f5f5;\n                  }\n                  .form-signin {\n                    width: 100%;\n                    max-width: 420px;\n                    padding: 15px;\n                    margin: auto;\n                  }\n                  .form-label-group {\n                    position: relative;\n                    margin-bottom: 1rem;\n                  }\n                  .form-label-group \u003e input,\n                  .form-label-group \u003e label {\n                    padding: var(--input-padding-y) var(--input-padding-x);\n                  }\n                  .form-label-group \u003e label {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    display: block;\n                    width: 100%;\n                    margin-bottom: 0; /* Override default `\u003clabel\u003e` margin */\n                    line-height: 1.5;\n                    color: #495057;\n                    cursor: text; /* Match the input under the label */\n                    border: 1px solid transparent;\n                    border-radius: .25rem;\n                    transition: all .1s ease-in-out;\n                  }\n                  .form-label-group input::-webkit-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-moz-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:not(:placeholder-shown) {\n                    padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                  }\n                  .form-label-group input:not(:placeholder-shown) ~ label {\n                    padding-top: calc(var(--input-padding-y) / 3);\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                    font-size: 12px;\n                    color: #777;\n                  }\n            \u003c/style\u003e\n          \u003c/head\u003e\n    \n          \u003cbody\u003e\n            \u003cdiv id=\"app\"\u003e\n              \u003cform class=\"form-signin\"\u003e\n                \u003cdiv class=\"text-center mb-4\"\u003e\n                  \u003cimg class=\"mb-4\" src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/Fotolia_117855281_Subscription_Monthly_M.jpg\" alt=\"\" width=\"72\" height=\"72\"\u003e\n                  \u003ch1 class=\"h3 mb-3 font-weight-normal\"\u003eLive streamer\u003c/h1\u003e\n                  \u003cp\u003eSTREAM YOUR FAVOURITE VIDEOS FOR FREE\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                    \u003cinput type=\"name\" id=\"inputUsername\" ref=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"\" autofocus=\"\"\u003e\n                      \u003clabel for=\"inputUsername\"\u003eUsername\u003c/label\u003e\n                  \u003c/div\u003e\n    \n                \u003cdiv class=\"form-label-group\"\u003e\n                  \u003cinput type=\"email\" id=\"inputEmail\" ref=\"email\" class=\"form-control\" placeholder=\"Email address\" autofocus=\"\" required\u003e\n                    \u003clabel for=\"inputEmail\"\u003eEmail address\u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cbutton class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" @click.prevent=\"login\"\u003eConnect\u003c/button\u003e\n                \u003cp class=\"mt-5 mb-3 text-muted text-center\"\u003e© 2017-2018\u003c/p\u003e\n              \u003c/form\u003e\n              \u003c/div\u003e\n    \n              \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\nOn line 106, we added Vue using a CDN. Let’s add the Vue script for the page.\n\nBefore the closing `body` tag add the following code:\n\n``` javascript\n    \u003cscript\u003e\n      var app = new Vue({\n        el: '#app',\n        methods: {\n          login: function () {\n            let username = this.$refs.username.value\n            let email = this.$refs.email.value\n    \n            fetch('new/user', {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({username, email})\n            })\n            .then(res =\u003e res.json())\n            .then(data =\u003e window.location.replace('/dashboard.html'))\n          }\n        }\n      })\n    \u003c/script\u003e\n```\n\nThis script above submits user data to the backend Go server and navigates the browser’s location to the dashboard’s URL. \n\nNext, let’s build the dashboard.\n\n### Setting up the dashboard\n\nOpen the `dashboard.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./static/dashboard.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eLive streamer | Dashboard\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n          \u003cdiv class=\"container-fluid row shadow p-1 mb-3\"\u003e\n            \u003cdiv class=\"col-3\"\u003e\n              \u003cimg class=\"ml-3\" src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/Fotolia_117855281_Subscription_Monthly_M.jpg\" height=\"72px\" width=\"72px\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-6 ml-auto mt-3\"\u003e\n              \u003cdiv class=\"input-group\"\u003e\n                \u003cinput type=\"text\" class=\"form-control\" aria-label=\"Text input with dropdown button\"\u003e\n                \u003cdiv class=\"input-group-append\"\u003e\n                  \u003cbutton class=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003eSearch\u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-3 float-right\"\u003e\n              \u003cimg src=\"https://www.seoclerk.com/pics/319222-1IvI0s1421931178.png\"  height=\"72px\" width=\"72px\" class=\"rounded-circle border\"/\u003e\n              \u003cp class=\"mr-auto mt-3 d-inline\"\u003e {{ username }} \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\"\u003e\n              \u003cdiv class=\"col-8\"\u003e\n                \u003cdiv class=\"embed-responsive embed-responsive-16by9\"\u003e\n                  \u003ciframe width=\"854\" height=\"480\" class=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/VYOjWnS4cMY\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"text-center mt-3 p-3 text-muted font-weight-bold border\"\u003e\n                  {{ member }} person(s) is/are currently viewing this video \n                  \u003chr\u003e\n                  \u003cli class=\"m-auto text-success\" v-for=\"member in connectedMembers\"\u003e\n                    {{ member }}\n                  \u003c/li\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"col-4 border text-justify\" style=\"background: #e0e0e0; height: 30em; overflow-y: scroll; position: relative;\"\u003e\n                \u003cdiv class=\"border invisible h-50 w-75 text-center\" ref=\"added\" style=\"font-size: 2rem; position: absolute; right: 0; background: #48cbe0\"\u003e{{ addedMember }} just started watching.\u003c/div\u003e\n                \u003cdiv class=\"border invisible h-50 w-75 text-center\" ref=\"removed\" style=\"font-size: 2rem; position: absolute; right: 0; background: #ff8325\"\u003e{{ removedMember }} just stopped watching.\u003c/div\u003e\n                \u003cdiv class=\"h-75 text-center\"\u003e\n                  \u003ch2 class=\"text-center my-3\"\u003e Lyrics \u003c/h2\u003e\n                  \u003cp class=\"w-75 m-auto\" style=\"font-size: 1.5rem\"\u003e\n                    We just wanna party\u003cbr\u003e\n                    Party just for you\u003cbr\u003e\n                    We just want the money\u003cbr\u003e\n                    Money just for you\u003cbr\u003e\n                    I know you wanna party\u003cbr\u003e\n                    Party just for me\u003cbr\u003e\n                    Girl, you got me dancin' (yeah, girl, you got me dancin')\u003cbr\u003e\n                    Dance and shake the frame\u003cbr\u003e\n                    We just wanna party (yeah)\u003cbr\u003e\n                    Party just for you (yeah)\u003cbr\u003e\n                    We just want the money (yeah)\u003cbr\u003e\n                    Money just for you (you)\u003cbr\u003e\n                    I know you wanna party (yeah)\u003cbr\u003e\n                    Party just for me (yeah)\u003cbr\u003e\n                    Girl, you got me dancin' (yeah, girl, you got me dancin')\u003cbr\u003e\n                    Dance and shake the frame (you)\u003cbr\u003e\n                    This is America\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Look what I'm whippin' up\u003cbr\u003e\n                    This is America (woo)\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Look what I'm whippin' up\u003cbr\u003e\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e ⚠️  Video is an embed from YouTube and may not play depending on your region.\n\nOn line 80 we imported the JavaScript Pusher library so let’s add some code to utilize it. Before the closing `body` tag, add the following code:\n\n``` javascript\n    \u003cscript\u003e\n    var app = new Vue({\n        el: '#app',\n        data: {\n            username: '',\n            member: 0,\n            addedMember: '',\n            removedMember: '',\n            connectedMembers: []\n        },\n    \n        created() {\n            fetch('/isLoggedIn', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(res =\u003e res.json())\n            .then(data =\u003e {\n                if (data != 'false') {\n                    this.username = data.username\n                } else {\n                    window.location.replace('/')\n                }\n            })\n    \n            this.subscribe()\n        },\n    \n        methods: {\n            subscribe: function () {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    authEndpoint: '/pusher/auth',\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n    \n                let channel = pusher.subscribe('presence-channel')\n    \n                channel.bind('pusher:subscription_succeeded', data =\u003e {\n                    this.member = data.count\n                    data.each(member =\u003e this.connectedMembers.push(member.id))\n                })\n    \n                // Display a notification when a member comes online\n                channel.bind('pusher:member_added', data =\u003e {\n                    this.member++\n                    this.connectedMembers.push(data.id)\n                    this.addedMember = data.id\n    \n                    this.$refs.added.classList.add('visible')\n                    this.$refs.added.classList.remove('invisible')\n    \n                    window.setTimeout(() =\u003e {\n                        this.$refs.added.classList.remove('visible');\n                        this.$refs.added.classList.add('invisible');\n                    }, 3000)\n                });\n    \n                // Display a notification when a member goes offline\n                channel.bind('pusher:member_removed', data =\u003e {\n                    this.member--\n                    let index = this.connectedMembers.indexOf(data.id)\n    \n                    if (index \u003e -1) {\n                        this.connectedMembers.splice(index, 1)\n                    }\n    \n                    this.removedMember = data.id\n                    this.$refs.removed.classList.add('visible')\n                    this.$refs.removed.classList.remove('invisible')\n    \n                    window.setTimeout(() =\u003e {\n                        this.$refs.removed.classList.remove('visible')\n                        this.$refs.removed.classList.add('invisible')\n                    }, 3000)\n                })\n            }\n        }\n    })\n    \u003c/script\u003e\n```\n\nIn the snippet above, we created some Vue data variables to display reactive updates on different parts of the DOM. We also registered a `created()` lifecycle hook that checks if a user is connected on the backend server and eligible to view the dashboard before calling the `subscribe()` method.\n\nThe `subscribe()` method first configures a Pusher instance using the keys provided on the dashboard then subscribes to a presence channel. Next, it binds to several events that are available on the returned object of a presence channel subscription.\n\nIn the callback function of these bindings, we are able to update the state of the data variables, this is how we display the visual updates on user presence in this application.\n\n\n## Testing the application\n\nWe can test the application by compiling down the Go source code and running it with this command:\n\n```\n    $ go run presence.go\n```\n\nThe application will be available for testing on this address http://127.0.0.1:8090, here’s a display of how the application should look:\n\n![go-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/1ITW3IU0Vm8wkMS2gMqaGe/fdc44d0a06f09561bb282297f721a7e4/go-online-presence-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating a live streaming application powered by a Go backend server.\n\nThe source code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/go-pusher-presence-app)","metaTitle":"Create a Go application with online presence","metaDescription":"Use Go and Vue.js to create a simple web app with online presence functionality. Users will be able to sign in, view a video and see who else is viewing the same video."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"53e34Sergc88IA8e4AE2aK","type":"Entry","createdAt":"2018-07-26T07:40:42.110Z","updatedAt":"2018-07-26T07:40:42.110Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with Go","url":"chat-app-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-07-25","description":"This brief tutorial helps you create a simple chat application. You will build the backend in Go, and the frontend in vanilla JavaScript. Users will be able to message in realtime.","prerequisite":"You will need Go 0.10.0+ installed on your machine. A basic knowledge of Go and JavaScript will be helpful.","content":"Communication is an important part of the society we live in. Over the years, the forms of communication available have changed and have been refined to be both far-reaching and fast. With communication today, we can talk to people who are on the other side of the globe in an instant.\n\nTo power this sort of communication, there are some platforms that allow instant messaging such as Facebook, Twitter, Slack.\n\nIn this application, we will consider how to build a realtime chat application using [Go](https://golang.org/doc/install), JavaScript and [Pusher](http://pusher.com/). \n\nHere’s a demo of the final application:\n\n![go-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/4VfVpdecD6ackgA08yAwkc/7150bd3d5e452232f7b8839c13c342ed/go-chat-app-demo.gif)\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- An IDE of your choice like Visual Studio Code.\n- Go (version \u003e= 0.10.x) installed on your computer. Here’s how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript.\n\nOnce you have all the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you have already signed up with Pusher and created an application.\n\n\n## Setting up Pusher\n\nThe realtime feature of this chat app will depend on Pusher Channels so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one. After signing up, you will be asked to create a new application. Do so.\n\n### Enabling client events\n\nWe need to enable the Pusher application to trigger events from the client-side (browser) of the chat app. This is important because it is with this feature that users will be able to send private messages without hitting the backend server. Follow the steps below to activate client events from the [dashboard](https://dashboard.pusher.com):\n\n\n- Select the Channel application.\n- Click on **App Setting** from the horizontal options list.\n- Check the **Enable client events** option.\n![chat-app-go-enable-client-events](//images.ctfassets.net/1es3ne0caaid/r2p5Sr6hLq4eeWMoII8YE/78f08355870ee274ed621530d5fd9f16/chat-app-go-enable-client-events.png)\n- Click on the **Update** button.\n\n\n## Setting up the codebase\n\nLet’s write the terminal commands to create a new folder in the `src` directory that is located in the `$GOPATH`, this folder will be the root directory for this project:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-chat-app\n    $ cd go-pusher-chat-app\n```\n\nIn this folder, we will create the main Go file which will be the entry point for the application and call it `chat.go`. We also need to install the Go Pusher library that we will reference in the `chat.go` file.\n\nRun the following code in the terminal to pull in the Go Pusher package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️ If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this GitHub issue.\n\nOpen the `chat.go` file in your IDE and paste the following code:\n\n``` go\n    // File: ./chat.go\n    package main\n    \n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n    \n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    type user struct {\n        Name  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    func main() {\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n    \n        http.HandleFunc(\"/new/user\", registerNewUser)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        log.Fatal(http.ListenAndServe(\":8090\", nil))\n    }\n```\n\n\u003e ⚠️ Replace `PUSHER_APP_*` keys with the app credentials found on your Pusher dashboard.\n\nIn the code above, we first imported a list of packages then registered a new Pusher client with the credentials from the app we created earlier on the dashboard.\n\nNext, we defined a user struct and included extra definitions to its properties so that Go knows how to handle incoming payloads and bind their various structures with a new instance of the user struct.\n\nLastly, in the main function, we registered three endpoints:\n\n\n- `/` — returns the static files that define the view of the chat app. The static files will be served from a `public` directory.\n- `/new/user` — creates a new user.\n- `/pusher/auth` — authorizes users from the client-side so they can subscribe to private channels and trigger client events.\n\nEach of the last two endpoints has an associated handler function that we will define below. Add the following code to the `chat.go` file before the `main` function:\n\n``` go\n    // File: ./chat.go\n    \n    // [...]\n    \n    func registerNewUser(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        \n        var newUser user\n        \n        err = json.Unmarshal(body, \u0026newUser)\n        if err != nil {\n            panic(err)\n        }\n        \n        client.Trigger(\"update\", \"new-user\", newUser)\n        \n        json.NewEncoder(rw).Encode(newUser)\n    }\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        response, err := client.AuthenticatePrivateChannel(params)\n        if err != nil {\n            panic(err)\n        }\n        \n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nIn the `registerNewUser` function, we trigger a Pusher event, `new-user`, on the public channel `update`, so that the new user’s details are sent to the subscribed clients.\n\nThe syntax for triggering a Pusher event over a public channel in Go is:\n\n```\n    client.Trigger(channel, event, data)\n```\n\n## Building the frontend\n\nLet’s create the `public` folder in the root directory of our project because this is where all of the static files will live:\n\n```\n    $ mkdir public\n```\n\nNext, we will navigate into the `public` folder and create two sub-folders to hold our CSS and JavaScript files:\n\n```\n    $ cd public\n    $ mkdir css js\n```\n\nLastly, create an `index.html` file in the root of the `public` folder. This is where we will write the markup for our application.\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eChat with friends in realtime\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/app.css\" \u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eWelcome\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"registerScreen\"\u003e\n                    \u003ch3 style=\"text-align: center\"\u003eType in your details to chat\u003c/h3\u003e\n                    \u003chr/\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cform id=\"loginScreenForm\"\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                              \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name\" required\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                              \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address\" required\u003e\n                            \u003c/div\u003e\n                            \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eSubmit\u003c/button\u003e\n                          \u003c/form\u003e\n                      \u003c/div\u003e\n                \u003c/main\u003e\n    \n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" style=\"display: none\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove we have the HTML for the home page. Let’s add some styling. Create a new file `app.css` in the `public/css` directory and add the following code:\n\n``` css\n    /* File: ./public/css.app.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    .chat {\n        max-width: 80%;\n        margin: 0 auto;\n    }\n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    .sidebar .nav-item {\n        width: 100%;\n    }\n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    tr .sender span {\n        color: #676767;\n    }\n    .response {\n        display: none;\n    }\n```\n\nNext, let’s write the JavaScript for the application. Create a new `app.js` file in the `public/js` directory and add the following code:\n\n``` javascript\n    // File: ./public/js/app.js\n    (function () {\n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            name: undefined,\n            email: undefined,\n            endUserName: undefined,\n            currentRoom: undefined,\n            currentChannel: undefined,\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        var publicChannel = pusher.subscribe('update');\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        const helpers = {\n            clearChatMessages: () =\u003e {\n                $('#chat-msgs').html('')\n            },\n            \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.email) {\n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n    \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n                chat.endUserName =  evt.target.dataset.userName\n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text('Write a message to ' + evt.target.dataset.userName+ '.')\n                }\n    \n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n    \n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n                \n                let createdAt = new Date().toLocaleString()            \n                let message = $('#replyMessage input').val().trim()\n                let event = 'client-' + chat.currentRoom\n                \n                chat.subscribedChannels[chat.currentChannel].trigger(event, {\n                    'sender': chat.name,\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n                \n                $('#chat-msgs').prepend(\n                    `\u003ctr\u003e\n                        \u003ctd\u003e\n                            \u003cdiv class=\"sender\"\u003e\n                                ${chat.name} @ \u003cspan class=\"date\"\u003e${createdAt}\u003c/span\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message}\u003c/div\u003e\n                        \u003c/td\u003e\n                    \u003c/tr\u003e`\n                )\n                \n                $('#replyMessage input').val('')\n            },\n    \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n                \n                chat.name = name;\n                chat.email = email;\n    \n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n                \n                let validName = (name !== '' \u0026\u0026 name.length \u003e= 3)\n                let validEmail = (email !== '' \u0026\u0026 email.length \u003e= 5)\n                \n                if (validName \u0026\u0026 validEmail) {\n                    axios.post('/new/user', {name, email}).then(res =\u003e {\n                        chatBody.find('#registerScreen').css(\"display\", \"none\");\n                        chatBody.find('#main').css(\"display\", \"block\");\n                        \n                        chat.myChannel = pusher.subscribe('private-' + res.data.email)\n                        chat.myChannel.bind('client-' + chat.email, data =\u003e {\n                            helpers.displayChatMessage(data)\n                        })\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n                \n                evt.preventDefault()\n            }\n        }\n    \n    \n        publicChannel.bind('new-user', function(data) {\n            if (data.email != chat.email){\n                chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n                chat.subscribedUsers.push(data);\n                \n                $('#rooms').html(\"\");\n        \n                chat.subscribedUsers.forEach((user, index) =\u003e {\n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-user-name=\"${user.name}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n                })\n            }\n        })\n    \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n    }());\n```\n\nIn the script above, we instantiated the Pusher object (replace the `PUSHER_APP_*` keys with the credentials on your Pusher dashboard). \n\nNext, we define some helper methods that will help us interact with the chat window and with the backend API. Some of the methods defined in the `helpers` object are:\n\n\n- `clearChatMessages` - clears the chat message window.\n- `displayChatMessage` - displays a new chat message in the current window.\n- `loadChatRoom` - shows a users chat messages in the general chat window after a room is selected.\n- `replyMessage` - sends a chat message to the current room.\n- `LogIntoChatSession` - creates a new chat session.\n\nAfter defining the `helpers` object, we bind to the `new-user` event on the `publicChannel`. In the callback, we subscribe to private channels so the communication is secure. \n\nAt the bottom of the script, we register all the event listeners and start the chat session.\n\n\n## Running the application\n\nTo test the chat app, we can start the Go backend server with this command:\n\n```\n    $ go run chat.go\n```\n\nTo see the app in action, we will visit this address, http://127.0.0.1:8090, on a web browser in multiple windows and test the instant messaging features. \n\nHere’s a demo of the chat app:\n\n![go-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/4VfVpdecD6ackgA08yAwkc/7150bd3d5e452232f7b8839c13c342ed/go-chat-app-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating a chat application powered by a Go backend server. \n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/go-pusher-chat-app).","metaTitle":"Build a chat app with Go","metaDescription":"Use Go and JavaScript to create a simple realtime messenger application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"181jJdMSpuCIwIE8yaY2YI","type":"Entry","createdAt":"2018-07-25T07:36:17.016Z","updatedAt":"2018-07-25T07:36:17.016Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a chat widget with Go and JavaScript","url":"chat-widget-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-chat-widget","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2018-07-23","description":"This brief tutorial shows you how to quickly create a chat widget with a backend powered by Go, and a frontend and admin dashboard in JavaScript. Users can initiate chat, and admins can see waiting chats and choose which to join.","prerequisite":"You will need Go 0.10.x+ installed. A basic knowledge of Go and JavaScript (ES6 syntax) will be helpful.","content":"## Introduction\n\nThe process of building products for an online demographic should be thorough and follow modern-day trends. One of such trend is making it possible for the customers and support agents to have realtime discussions over some form of two-way message channel. This would ensure that customers do not click away in confusion and switch to competitors in times of frustration.\n\nIn this tutorial, we will see how to build a realtime chat widget with Go, Pusher, and JavaScript. Here’s a demo of the application:\n\n![go-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/3qN7ML2VMcqaMyMaSGWsiw/3bb18095d1042c0708925e2b35667789/go-chat-widget-demo.gif)\n\nIn the above image, we built a website that sells motorcycles and integrates a chat widget. A customer is able to sign up to speak with a support agent and the agent on the other end can manage communication among a number of connected customers.\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- An IDE of your choice like Visual Studio Code.\n- Go (version \u003e= 0.10.x) installed on your computer. Here’s how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6) and jQuery.\n- Once you have all the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you have already signed up with Pusher and created an application.\n\n## Setting up Pusher\n\nThe realtime feature of the chat widget is dependent on Pusher so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one, after the signup process, you will be asked to create a new application. Let’s keep the app credentials nearby because we will need it to integrate Pusher within the cat widget.\n\n### Enabling client events\n\nThe final thing we will do is enable the Pusher application to trigger events from the client (browser) over a private channel. We need this feature because it is what will make it possible for a support agent to securely chat with a customer without having to send the message through the backend server first. Follow the steps below to activate client events from the [dashboard](https://dashboard.pusher.com):\n\n\n- Select the channel application.\n- Click on **App Settings** from the horizontal options list.\n- Check the **Enable client events** option.\n![go-chat-widget-enable-client-events](//images.ctfassets.net/1es3ne0caaid/24nRrulxAEScAs2aScYKAs/c162fb0a4ecaafeb7cad264880b1cbc3/go-chat-widget-enable-client-events.png)\n- Click on the **Update** button.\n\nThat’s all we need to do here.\n\n## Setting up the codebase\n\nLet’s begin by navigating into the `src` directory that is located in the `$GOPATH` and creating a new directory for our app. This will be the root directory for this project:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-chat-widget\n    $ cd go-pusher-chat-widget\n```\n\nLet’s create the main Go file (this is the entry point of the application) here and call it `chat.go`.\nNext, we will install the Go Pusher library that we will reference within the code for the backend server. Run the following code in the terminal to pull in the package:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️ If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this GitHub issue.\n\nOpen the `chat.go` file in your favorite IDE and update it with the following code:\n\n``` go\n    // File: ./chat.go\n    package main\n    \n    // Here, we import the required packages (including Pusher)\n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // Here, we register the Pusher client\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // Here, we define a customer as a struct\n    type customer struct {\n        Name  string `json:\"name\" xml:\"name\" form:\"name\" query:\"name\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    func main() {\n    \n        // Serve the static files and templates from the public directory\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./public\")))\n    \n        // -------------------------------------------------------\n        // Listen on these routes for new customer registration and User authorization,\n        // thereafter, handle each request using the matching handler function.\n        // -------------------------------------------------------\n        http.HandleFunc(\"/new/customer\", broadcastCustomerDetails)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        // Start executing the application on port 8070\n        log.Fatal(http.ListenAndServe(\":8070\", nil))\n    }\n```\n\nIn the code above, we registered a new Pusher client with the credentials from the app we created earlier on the dashboard.\n\n\n\u003e ⚠️ Replace `PUSHER_*` keys with your app credentials.\n\nIn the main function, we defined two endpoints, `/new/customer` and `/pusher/auth`. The first will be hit when a new customer signs up and the last will authorize the users so they can subscribe to private channels. \n\nWe will be serving all static files from a `public` directory that we will create shortly.\n\n\n\u003e Note that we did not pull in the `ioutil` and `http` packages because they are already among Go’s standard packages.\n\nWe also defined `customer` as a struct and attached extra definitions to its properties so that Go knows how to handle incoming payloads and bind their various structures with a new instance of the customer struct. \n\nLet’s create the handler functions for the endpoints, add this code to the `chat.go` file just before the main function:\n\n``` go\n    // File: ./chat.go\n    \n    // [...]\n    \n    func broadcastCustomerDetails(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        var newCustomer customer\n        err = json.Unmarshal(body, \u0026newCustomer)\n        if err != nil {\n            panic(err)\n        }\n        client.Trigger(\"one-to-many\", \"new-customer\", newCustomer)\n        json.NewEncoder(rw).Encode(newCustomer)\n    }\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        response, err := client.AuthenticatePrivateChannel(params)\n        if err != nil {\n            panic(err)\n        }\n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nAbove we have two functions. `broadcastCustomerDetails` receives a new customer's details and binds it to an instance of the `customer` struct. We then trigger the received details over to the admin dashboard in an event over the public channel. The `pusherAuth` authorizes users so they can subscribe to private channels.\n\nThis is all the code required for the backend server to work, let’s move on to the frontend.\n\n## Building the frontend\n\nIn this section, we will start building the frontend of the web application. We will create all the static files that are rendered when a browser is pointed to the address of our application. \n\nCreate a new folder in the project directory and call it `public`, this folder is the root directory for all of our frontend files. In this folder, create three folders `css`, `js` and `img`.\n\nNext, create two files in the root of the `public` directory named `index.html` and `support.html`.\n\n### Creating the homepage\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eX-Cycles\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/app.css\" \u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cdiv class=\"site-wrapper\"\u003e\n          \u003cdiv class=\"site-wrapper-inner\"\u003e\n            \u003cdiv class=\"cover-container\"\u003e\n    \n              \u003cheader class=\"masthead clearfix\"\u003e\n                \u003cdiv class=\"inner\"\u003e\n                  \u003ch3 class=\"masthead-brand\"\u003eX-Cycles\u003c/h3\u003e\n                  \u003cnav class=\"nav nav-masthead\"\u003e\n                    \u003ca class=\"nav-link active\" href=\"#\"\u003eHome\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eFeatures\u003c/a\u003e\n                    \u003ca class=\"nav-link\" href=\"#\"\u003eContact\u003c/a\u003e\n                  \u003c/nav\u003e\n                \u003c/div\u003e\n              \u003c/header\u003e\n    \n              \u003cmain role=\"main\" class=\"inner cover\"\u003e\n                \u003ch1 class=\"cover-heading\"\u003eX-cycles\u003c/h1\u003e\n                \u003cp class=\"lead\"\u003eWe sell the best motorcycles around.\u003c/p\u003e\n                \u003cp class=\"lead\"\u003e\n                  \u003ca href=\"#\" class=\"btn btn-lg btn-secondary\"\u003eGALLERY\u003c/a\u003e\n                \u003c/p\u003e\n              \u003c/main\u003e\n    \n              \u003cfooter class=\"mastfoot\"\u003e\n              \u003c/footer\u003e\n    \n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"chatbubble\"\u003e\n            \u003cdiv class=\"unexpanded\"\u003e\n                \u003cdiv class=\"title\"\u003eChat with Support\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"expanded chat-window\"\u003e\n              \u003cdiv class=\"login-screen container\"\u003e\n    \n                \u003cform id=\"loginScreenForm\"\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" id=\"fullname\" placeholder=\"Name*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email Address*\" required\u003e\n                  \u003c/div\u003e\n                  \u003cbutton type=\"submit\" class=\"btn btn-block btn-primary\"\u003eStart Chat\u003c/button\u003e\n                \u003c/form\u003e\n    \n              \u003c/div\u003e\n              \u003cdiv class=\"chats\"\u003e\n                \u003cdiv class=\"loader-wrapper\"\u003e\n                  \u003cdiv class=\"loader\"\u003e\n                    \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cul class=\"messages clearfix\"\u003e\n                \u003c/ul\u003e\n                \u003cdiv class=\"input\"\u003e\n                  \u003cform class=\"form-inline\" id=\"messageSupport\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                      \u003cinput type=\"text\" autocomplete=\"off\" class=\"form-control\" id=\"newMessage\" placeholder=\"Enter Message\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSend\u003c/button\u003e\n                  \u003c/form\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e    \n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the `css` directory, create an `app.css` file and update it with the following code:\n\n``` css\n    /* File: ./public/css/app.css */\n    a,\n    a:focus,\n    a:hover {\n      color: #fff;\n    }\n    .btn-secondary,\n    .btn-secondary:hover,\n    .btn-secondary:focus {\n      color: #333;\n      text-shadow: none;\n      background-color: #fff;\n      border: .05rem solid #fff;\n    }\n    html,\n    body {\n      height: 100%;\n      background-color: #333;\n    }\n    body {\n      color: #fff;\n      text-align: center;\n      text-shadow: 0 .05rem .1rem rgba(0,0,0,.5);\n    }\n    .site-wrapper {\n      display: table;\n      width: 100%;\n      height: 100%; /* For at least Firefox */\n      min-height: 100%;\n      box-shadow: inset 0 0 5rem rgba(0,0,0,.5);\n      background: url(../img/bg.jpg);\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    }\n    .site-wrapper-inner {\n      display: table-cell;\n      vertical-align: top;\n    }\n    .cover-container {\n      margin-right: auto;\n      margin-left: auto;\n    }\n    .inner {\n      padding: 2rem;\n    }\n    .masthead {\n      margin-bottom: 2rem;\n    }\n    .masthead-brand {\n      margin-bottom: 0;\n    }\n    .nav-masthead .nav-link {\n      padding: .25rem 0;\n      font-weight: 700;\n      color: rgba(255,255,255,.5);\n      background-color: transparent;\n      border-bottom: .25rem solid transparent;\n    }\n    .nav-masthead .nav-link:hover,\n    .nav-masthead .nav-link:focus {\n      border-bottom-color: rgba(255,255,255,.25);\n    }\n    .nav-masthead .nav-link + .nav-link {\n      margin-left: 1rem;\n    }\n    .nav-masthead .active {\n      color: #fff;\n      border-bottom-color: #fff;\n    }\n    @media (min-width: 48em) {\n      .masthead-brand {\n        float: left;\n      }\n    \n      .nav-masthead {\n        float: right;\n      }\n    \n    }\n    /*\n     * Cover\n     */\n    \n    .cover {\n      padding: 0 1.5rem;\n    }\n    .cover .btn-lg {\n      padding: .75rem 1.25rem;\n      font-weight: 700;\n    }\n    .mastfoot {\n      color: rgba(255,255,255,.5);\n    }\n    @media (min-width: 40em) {\n      .masthead {\n        position: fixed;\n        top: 0;\n      }\n    \n      .mastfoot {\n        position: fixed;\n        bottom: 0;\n      }\n      .site-wrapper-inner {\n        vertical-align: middle;\n      }\n    \n      /* Handle the widths */\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 100%;\n      }\n    \n    }\n    @media (min-width: 62em) {\n      .masthead,\n      .mastfoot,\n      .cover-container {\n        width: 42rem;\n      }\n    \n    }\n    .chatbubble {\n        position: fixed;\n        bottom: 0;\n        right: 30px;\n        transform: translateY(300px);\n        transition: transform .3s ease-in-out;\n    }\n    .chatbubble.opened {\n        transform: translateY(0)\n    }\n    .chatbubble .unexpanded {\n        display: block;\n        background-color: #e23e3e;\n        padding: 10px 15px 10px;\n        position: relative;\n        cursor: pointer;\n        width: 350px;\n        border-radius: 10px 10px 0 0;\n    }\n    .chatbubble .expanded {\n        height: 300px;\n        width: 350px;\n        background-color: #fff;\n        text-align: left;\n        padding: 10px;\n        color: #333;\n        text-shadow: none;\n        font-size: 14px;\n    }\n    .chatbubble .chat-window {\n      overflow: auto;\n    }\n    .chatbubble .loader-wrapper {\n        margin-top: 50px;\n        text-align: center;\n    }\n    .chatbubble .messages {\n        display: none;\n        list-style: none;\n        margin: 0 0 50px;\n        padding: 0;\n    }\n    .chatbubble .messages li {\n        width: 85%;\n        float: left;\n        padding: 10px;\n        border-radius: 5px 5px 5px 0;\n        font-size: 14px;\n        background: #c9f1e6;\n        margin-bottom: 10px;\n    }\n    .chatbubble .messages li .sender {\n        font-weight: 600;\n    }\n    .chatbubble .messages li.support {\n        float: right;\n        text-align: right;\n        color: #fff;\n        background-color: #e33d3d;\n        border-radius: 5px 5px 0 5px;\n    }\n    .chatbubble .chats .input {\n        position: absolute;\n        bottom: 0;\n        padding: 10px;\n        left: 0;\n        width: 100%;\n        background: #f0f0f0;\n        display: none;\n    }\n    .chatbubble .chats .input .form-group {\n        width: 80%;\n    }\n    .chatbubble .chats .input input {\n        width: 100%;\n    }\n    .chatbubble .chats .input button {\n        width: 20%;\n    }\n    .chatbubble .chats {\n      display: none;\n    }\n    .chatbubble .login-screen {\n      margin-top: 20px;\n      display: none;\n    }\n    .chatbubble .chats.active,\n    .chatbubble .login-screen.active {\n      display: block;\n    }\n    /* Loader Credit: https://codepen.io/ashmind/pen/zqaqpB */\n    .chatbubble .loader {\n      color: #e23e3e;\n      font-family: Consolas, Menlo, Monaco, monospace;\n      font-weight: bold;\n      font-size: 10vh;\n      opacity: 0.8;\n    }\n    .chatbubble .loader span {\n      display: inline-block;\n      -webkit-animation: pulse 0.4s alternate infinite ease-in-out;\n              animation: pulse 0.4s alternate infinite ease-in-out;\n    }\n    .chatbubble .loader span:nth-child(odd) {\n      -webkit-animation-delay: 0.4s;\n              animation-delay: 0.4s;\n    }\n    @-webkit-keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    \n    }\n    @keyframes pulse {\n      to {\n        -webkit-transform: scale(0.8);\n                transform: scale(0.8);\n        opacity: 0.5;\n      }\n    \n    }\n```\n\n\u003e Above we referenced a `bg.jpg` image. You can download a free picture [here](http://pexels.com) and place it in the `public/img` directory.\n\nNow let's include some JavaScript. In the `js` directory, create an `app.js` file and paste the following code:\n\n``` javascript\n    // File: ./public/js/app.js\n    (function() {\n        'use strict';\n    \n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            name:  undefined,\n            email: undefined,\n            myChannel: undefined,\n        }\n    \n        const chatPage   = $(document)\n        const chatWindow = $('.chatbubble')\n        const chatHeader = chatWindow.find('.unexpanded')\n        const chatBody   = chatWindow.find('.chat-window')\n    \n        let helpers = {\n            ToggleChatWindow: function () {\n                chatWindow.toggleClass('opened')\n                chatHeader.find('.title').text(\n                    chatWindow.hasClass('opened') ? 'Minimize Chat Window' : 'Chat with Support'\n                )\n            },\n    \n            ShowAppropriateChatDisplay: function () {\n                (chat.name) ? helpers.ShowChatRoomDisplay() : helpers.ShowChatInitiationDisplay()\n            },\n    \n            ShowChatInitiationDisplay: function () {\n                chatBody.find('.chats').removeClass('active')\n                chatBody.find('.login-screen').addClass('active')\n            },\n    \n            ShowChatRoomDisplay: function () {\n                chatBody.find('.chats').addClass('active')\n                chatBody.find('.login-screen').removeClass('active')\n                setTimeout(function(){\n                    chatBody.find('.loader-wrapper').hide()\n                    chatBody.find('.input, .messages').show()\n                }, 2000)\n            },\n    \n            NewChatMessage: function (message) {\n                if (message !== undefined) {\n                    const messageClass = message.sender !== chat.email ? 'support' : 'user'\n                    chatBody.find('ul.messages').append(\n                        `\u003cli class=\"clearfix message ${messageClass}\"\u003e\n                            \u003cdiv class=\"sender\"\u003e${message.name}\u003c/div\u003e\n                            \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                        \u003c/li\u003e`\n                    )\n                    chatBody.scrollTop(chatBody[0].scrollHeight)\n                }\n            },\n    \n            SendMessageToSupport: function (evt) {\n                evt.preventDefault()\n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n                const message = $('#newMessage').val().trim()\n                \n                chat.myChannel.trigger('client-guest-new-message', {\n                    'sender': chat.name,\n                    'email': chat.email,\n                    'text': message,\n                    'createdAt': createdAt \n                });\n    \n                helpers.NewChatMessage({\n                    'text': message,\n                    'name': chat.name,\n                    'sender': chat.email\n                })\n    \n                $('#newMessage').val('')\n            },\n    \n            LogIntoChatSession: function (evt) {\n                const name  = $('#fullname').val().trim()\n                const email = $('#email').val().trim().toLowerCase()\n    \n                chatBody.find('#loginScreenForm input, #loginScreenForm button').attr('disabled', true)\n    \n                if ((name !== '' \u0026\u0026 name.length \u003e= 3) \u0026\u0026 (email !== '' \u0026\u0026 email.length \u003e= 5)) {\n                    axios.post('/new/customer', {\"name\":name, \"email\":email}).then(response =\u003e {\n                        chat.name = name\n                        chat.email = email\n                        console.log(response.data.email)\n                        chat.myChannel = pusher.subscribe('private-' + response.data.email);\n                        helpers.ShowAppropriateChatDisplay()\n                    })\n                } else {\n                    alert('Enter a valid name and email.')\n                }\n                \n                evt.preventDefault()\n            }\n        }\n    \n    \n        pusher.bind('client-support-new-message', function(data){\n            helpers.NewChatMessage(data)\n        })\n    \n    \n        chatPage.ready(helpers.ShowAppropriateChatDisplay)\n        chatHeader.on('click', helpers.ToggleChatWindow)\n        \n        chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)\n        chatBody.find('#messageSupport').on('submit', helpers.SendMessageToSupport)\n    }());\n```\n\nAbove, we instantiated a Pusher object instance and then we created a `helpers` object. In this object lies the meat of the script. In the `helpers` object we have a few methods that do specific tasks:\n\n\n- `ToggleChatWindow` - toggles the chat windows display.\n- `ShowAppropriateChatDisplay` - decides which chat display to show depending on the action of the user.\n- `ShowChatInitiationDisplay` - shows the initial display for the chat window for the user to initiate a chat session.\n- `ShowChatRoomDisplay` - shows the chat window after the user has instantiated a new chat session.\n- `NewChatMessage` - adds a new chat message to the chat window UI.\n- `SendMessageToSupport` - sends a chat message to the backend.\n- `LogIntoChatSession` - starts a new chat session.\n\n\n\u003e Replace the `PUSHER_*` keys with the one available on your Pusher dashboard.\n\n### Creating the support dashboard\n\nOpen the `support.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./public/support.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003ctitle\u003eX-Cycles | Support \u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./css/support.css\" \u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cnav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"\u003e\n                \u003ca class=\"navbar-brand\" href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/nav\u003e\n        \u003c/header\u003e\n    \n        \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\" id=\"mainrow\"\u003e\n                \u003cnav class=\"col-sm-3 col-md-2 d-none d-sm-block bg-light sidebar\"\u003e\n                    \u003cul class=\"nav nav-pills flex-column\" id=\"rooms\"\u003e\n                    \u003c/ul\u003e\n                \u003c/nav\u003e\n                \u003cmain role=\"main\" class=\"col-sm-9 ml-sm-auto col-md-10 pt-3\" id=\"main\"\u003e\n                    \u003ch1\u003eChats\u003c/h1\u003e\n                    \u003cp\u003e👈 Select a chat to load the messages\u003c/p\u003e\n                    \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                    \u003cdiv class=\"chat\" style=\"margin-bottom:150px\"\u003e\n                        \u003ch5 id=\"room-title\"\u003e\u003c/h5\u003e\n                        \u003cp\u003e\u0026nbsp;\u003c/p\u003e\n                        \u003cdiv class=\"response\"\u003e\n                            \u003cform id=\"replyMessage\"\u003e\n                                \u003cdiv class=\"form-group\"\u003e\n                                    \u003cinput type=\"text\" placeholder=\"Enter Message\" class=\"form-control\" name=\"message\" /\u003e\n                                \u003c/div\u003e\n                            \u003c/form\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"table-responsive\"\u003e\n                          \u003ctable class=\"table table-striped\"\u003e\n                            \u003ctbody id=\"chat-msgs\"\u003e\n                            \u003c/tbody\u003e\n                        \u003c/table\u003e\n                    \u003c/div\u003e\n                \u003c/main\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./js/support.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nLet’s write the style for the support page. In the `css` directory, create a `support.css` file and paste the following code:\n\n``` css\n    /* File: ./public/css/support.css */\n    body {\n        padding-top: 3.5rem;\n    }\n    h1 {\n        padding-bottom: 9px;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n    }\n    .sidebar {\n        position: fixed;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        z-index: 1000;\n        padding: 20px 0;\n        overflow-x: hidden;\n        overflow-y: auto;\n        border-right: 1px solid #eee;\n    }\n    .sidebar .nav {\n        margin-bottom: 20px;\n    }\n    .sidebar .nav-item {\n        width: 100%;\n    }\n    .sidebar .nav-item + .nav-item {\n        margin-left: 0;\n    }\n    .sidebar .nav-link {\n        border-radius: 0;\n    }\n    .placeholders {\n        padding-bottom: 3rem;\n    }\n    .placeholder img {\n        padding-top: 1.5rem;\n        padding-bottom: 1.5rem;\n    }\n    tr .sender {\n        font-size: 12px;\n        font-weight: 600;\n    }\n    tr .sender span {\n        color: #676767;\n    }\n    .response {\n        display: none;\n    }\n```\n\nNow let's add the JavaScript for the page. In the `js` directory, create a `support.js` file and update it with the following code:\n\n``` javascript\n    // File: ./public/js/support.js\n    (function () {\n        var pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: '/pusher/auth',\n            cluster: 'PUSHER_APP_CLUSTER',\n            encrypted: true\n        });\n    \n        let chat = {\n            messages: [],\n            currentRoom: '',\n            currentChannel: '',\n            subscribedChannels: [],\n            subscribedUsers: []\n        }\n    \n        var generalChannel = pusher.subscribe('one-to-many');\n    \n        const chatBody = $(document)\n        const chatRoomsList = $('#rooms')\n        const chatReplyMessage = $('#replyMessage')\n    \n        const helpers = {\n    \n            clearChatMessages: () =\u003e $('#chat-msgs').html(''),\n    \n            displayChatMessage: (message) =\u003e {\n                if (message.email === chat.currentRoom) {\n                    $('#chat-msgs').prepend(\n                        `\u003ctr\u003e\n                            \u003ctd\u003e\n                                \u003cdiv class=\"sender\"\u003e${message.sender} @ \u003cspan class=\"date\"\u003e${message.createdAt}\u003c/span\u003e\u003c/div\u003e\n                                \u003cdiv class=\"message\"\u003e${message.text}\u003c/div\u003e\n                            \u003c/td\u003e\n                        \u003c/tr\u003e`\n                    )\n                }\n            },\n    \n            loadChatRoom: evt =\u003e {\n                chat.currentRoom = evt.target.dataset.roomId\n                chat.currentChannel = evt.target.dataset.channelId\n                if (chat.currentRoom !== undefined) {\n                    $('.response').show()\n                    $('#room-title').text(evt.target.dataset.roomId)\n                }\n                evt.preventDefault()\n                helpers.clearChatMessages()\n            },\n    \n            replyMessage: evt =\u003e {\n                evt.preventDefault()\n                let createdAt = new Date()\n                createdAt = createdAt.toLocaleString()\n                const message = $('#replyMessage input').val().trim()\n                chat.subscribedChannels[chat.currentChannel].trigger('client-support-new-message', {\n                    'name': 'Admin',\n                    'email': chat.currentRoom,\n                    'text': message, \n                    'createdAt': createdAt \n                });\n                \n                helpers.displayChatMessage({\n                    'email': chat.currentRoom,\n                    'sender': 'Support',\n                    'text': message, \n                    'createdAt': createdAt\n                })\n    \n                $('#replyMessage input').val('')\n            },\n        }\n    \n        generalChannel.bind('new-customer', function(data) {\n            chat.subscribedChannels.push(pusher.subscribe('private-' + data.email));\n            chat.subscribedUsers.push(data);\n            // render the new list of subscribed users and clear the former\n            $('#rooms').html(\"\");\n            chat.subscribedUsers.forEach(function (user, index) {\n                    $('#rooms').append(\n                        `\u003cli class=\"nav-item\"\u003e\u003ca data-room-id=\"${user.email}\" data-channel-id=\"${index}\" class=\"nav-link\" href=\"#\"\u003e${user.name}\u003c/a\u003e\u003c/li\u003e`\n                    )\n            })\n        })\n    \n        pusher.bind('client-guest-new-message', function(data){\n            helpers.displayChatMessage(data)\n        })\n    \n        chatReplyMessage.on('submit', helpers.replyMessage)\n        chatRoomsList.on('click', 'li', helpers.loadChatRoom)\n    }())\n```\n\nAbove, the script looks almost similar to the `app.js` script. The `helpers` object contains the following functions:\n\n\n- `clearChatMessages` - clears the chat message window.\n- `displayChatMessage` - displays a new chat message in the current window.\n- `loadChatRoom` - shows a users chat messages in the general chat window after a room is selected.\n- `replyMessage` - sends a chat message to the current room.\n\nAfter declaring the helpers, we bind to the Pusher channel and register our listeners.\n\n\n\u003e Replace the `PUSHER_*` keys with the one available on your Pusher dashboard.\n\n\n## Running the application\n\nTo test the application, we will run the application by typing this command in the terminal:\n\n```\n    $ go run chat.go\n```\n\nWe can visit these addresses, http://127.0.0.1:8070 and http://127.0.0.1:8070/support.html, on a web browser using different windows to test that the application works correctly. Here’s what we should see:\n\n![go-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/3qN7ML2VMcqaMyMaSGWsiw/3bb18095d1042c0708925e2b35667789/go-chat-widget-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we learned how to create a basic realtime web chat widget using Go and JavaScript. The source code for this project is available [here](https://github.com/neoighodaro/go-pusher-chat-widget) on GitHub.","metaTitle":"Building a chat widget with Go and JavaScript","metaDescription":"Use Go and JavaScript to create a simple chat widget. The app comprises a user panel and an admin panel. Users initiate chats, and admins can see a list of waiting users and choose to join a chat session."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3PGzxuMeUMKYm8yU6cOyK4","type":"Entry","createdAt":"2018-07-22T02:46:42.797Z","updatedAt":"2020-06-19T10:47:08.583Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a cryptocurrency alert app using Kotlin and Go: Part 1 - The frontend","url":"cryptocurrency-kotlin-go-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-cryptocurrency-watcher-with-push-notification","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-21","description":"In this two-part tutorial, build a cryptocurrency price monitor app, using Kotlin and Go. In part one, build the Android app and set up the push notifications functionality.h.","prerequisite":"You will need Android Studio 3+ and Go 1.10.2+ installed on your machine. You should have some familiarity with Android development and the Kotlin language.","content":"Cryptocurrency is one of the hot topics today and as a result of this, many people have purchased many cryptocurrencies. However, the market is unpredictable and changes very often, so people tend to keep an eye on the changes in price of their asset. \n\nIn this post, we will create an app that watches for changes in the value of cryptocurrencies in realtime and notifies the user when the changes occur. We will focus on two very popular cryptocurrencies - Bitcoin and Ethereum. When we are done, your phone will receive a push notification when the value of Bitcoin and Ethereum either exceeds or goes below a value you specify in the settings of the app. \n\nHere is a screen recording of what we will build:\n\n![kotlin-crypto-demo](//images.ctfassets.net/1es3ne0caaid/4p1PUy3hHyM8uckYMWE2Aa/d1c65f28377a68f6db6fae6821747e8d/kotlin-crypto-demo.gif)\n\n## Prerequisites\n\nTo follow along, you need the following installed:\n\n\n- Android Studio installed on your machine (v3.x or later). [Download here](https://developer.android.com/studio/index.html).\n- Go version 1.10.2 or later [installed](https://golang.org/doc/install#install).\n- [SQLite installed](http://www.sqlitetutorial.net) on your machine.\n- Basic knowledge on using the Android Studio IDE.\n- Basic knowledge of Kotlin programming language. See the [official docs](https://kotlinlang.org/docs/reference/).\n- Basic knowledge of Go and the [Echo framework](https://echo.labstack.com).\n\n\n\n## Building our Android app\n\n### Creating our Android application\nFirst, launch Android Studio and create a new application. Enter the name of your application, for example, **CryptoAlert** and then enter the package name. Make sure the **Enable Kotlin Support** checkbox is selected. Choose the minimum SDK, click **Next,** choose an **Empty Activity** template, stick with the MainActivity naming scheme and then click **Finish**.\n\n![kotlin-crypto-create-android](//images.ctfassets.net/1es3ne0caaid/5D5Yq037tCmQ8mYycSoice/4574c3e99cf4da931ed88f90c6e50b92/kotlin-crypto-create-android.png)\n\n## Creating Pusher Beams application\n\n### Getting your FCM key and Google services file\n\nSince Pusher Beams relies on Firebase, we need an FCM key and a `google-services.json` file. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and click the **Add** **project** card to initialize the app creation wizard. \n\nAdd the name of the project, for example, `crypto-``alert`, read and accept the terms of conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. \n\nThe next screen will require the package name of your app. You can find your app’s package name in your app-module `build.gradle` file. Look out for the `applicationId` value. Enter the package name and click **Next**. You will be prompted to download a `google-services.json` file. Download the file and skip the rest of the process. Add the downloaded file to the app folder of your project - `name-of-project/app`.\n\nTo get the FCM key, go to your project settings on Firebase, under the Cloud messaging tab you should see the server key.\n\n![kotlin-crypto-fcm-key](//images.ctfassets.net/1es3ne0caaid/6wkRBNiryEKaMekW2iiMcc/765e5c0e852567386e84cdc04d73c527/kotlin-crypto-fcm-key.png)\n\nNext, login to the new [Pusher dashboard](https://dash.pusher.com/). You should sign up if you don’t have an account yet. \n\n### Create a new Pusher Beams instance\n\nOpen your Pusher Beams dashboard and create a new Pusher Beams application.\n\n![kotlin-crypto-new-beams](//images.ctfassets.net/1es3ne0caaid/3vahrtXnrqIgCuSWG6Giuo/606eda8b485453a9a9747ae011fb6259/kotlin-crypto-new-beams.png)\n\nAfter creating your instance, you will be presented with a quick-start guide. Select the **Android quick-start**. After you add the FCM key, you can exit the quick-start guide.\n\n### Adding functionalities to our app\n\nFor our app to work, we need to pull in a couple of dependencies. To do this, add the following to the project `build-gradle` file:\n\n``` gradle\n    // File: ./build.gradle\n    buildscript {\n        // [...]\n    \n        dependencies {\n            // [...]\n            \n            classpath 'com.google.gms:google-services:4.0.0'\n        }\n    }\n    \n    // [...]\n```\n\nNext, add the following to the app module `build.gradle` file:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n        implementation 'com.squareup.retrofit2:retrofit:2.4.0'\n        implementation 'com.squareup.retrofit2:converter-scalars:2.4.0'\n        implementation 'com.google.firebase:firebase-messaging:17.1.0'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n        [...]\n    }\n    \n    // Add this line to the end of the file\n    apply plugin: 'com.google.gms.google-services'\n```\n\nAbove we included [Retrofit](https://github.com/square/retrofit) - a package for making network calls, and then the Pusher Beams package for sending push notifications. The additional Google services are dependencies for the Pusher Beams package. Sync your gradle files to make the libraries available for use. \n\nNext, create a new interface named `ApiService` and paste the code below:\n\n``` kotlin\n    // File: ./app/src/main/java/{package-name}/ApiService.kt\n    \n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.GET\n    import retrofit2.http.POST\n    \n    interface ApiService {\n    \n      @POST(\"/btc-pref\")\n      fun saveBTCLimit(@Body body: RequestBody): Call\u003cString\u003e\n    \n      @POST(\"/eth-pref\")\n      fun saveETHLimit(@Body body: RequestBody): Call\u003cString\u003e\n    \n      @GET(\"/fetch-values\")\n      fun getValues():Call\u003cString\u003e\n    \n    }\n```\n\nThis file is used to by Retrofit to know the endpoints to be accessed. The first endpoint `/btc-pref` is used to set the Bitcoin limits. The next endpoint `/eth-pref` is used to save the Ethereum limits. The last endpoint `/fetch-values` is used to get the current values of the cryptocurrencies. \n\nTo make use of network services in your application, add the internet permission in your `AndroidManifest.xml` file like so:\n\n``` xml\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.cryptoalat\"\u003e\n    \n      \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n      [...]\n    \n    \u003c/manifest\u003e\n```\n\nNext, we will manage notifications in our app. Create a new service named `NotificationsMessagingService` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/{package-name}/NotificationsMessagingService.kt\n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.support.v4.app.NotificationCompat\n    import android.support.v4.app.NotificationManagerCompat\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n        override fun onMessageReceived(remoteMessage: RemoteMessage) {\n            val notificationId = 10\n            val channelId  = \"crypto_channel\"\n            lateinit var channel: NotificationChannel\n            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n            val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n    \n            val mBuilder = NotificationCompat.Builder(this, channelId)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setContentTitle(remoteMessage.notification!!.title!!)\n                    .setContentText(remoteMessage.notification!!.body!!)\n                    .setContentIntent(pendingIntent)\n                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    .setAutoCancel(true)\n    \n            if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n                val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n                val name = getString(R.string.channel_name)\n                val description = getString(R.string.channel_description)\n                val importance = NotificationManager.IMPORTANCE_DEFAULT\n                channel = NotificationChannel(\"crypto_channel\", name, importance)\n                channel.description = description\n                notificationManager!!.createNotificationChannel(channel)\n                notificationManager.notify(notificationId, mBuilder.build())\n            } else {\n                val notificationManager =  NotificationManagerCompat.from(this)\n                notificationManager.notify(notificationId, mBuilder.build())\n            }\n        }\n    }\n```\n\nBecause there are major changes to push notifications in Android O, we checked for the Android version before handling the notification. If we are using Android O or newer, we have to create a notification channel that will be used to categorize the type of notification we are sending. This is particularly useful for apps that send different types of notifications.\n\nWe also made use of some files stored in the `strings.xml` file to describe the notifications channel description and channel name. Add these to the `strings.xml` file:\n\n``` xml\n    \u003c!-- File: /app/src/main/res/values/strings.xml --\u003e\n    \u003cstring name=\"channel_name\"\u003eCrypto\u003c/string\u003e\n    \u003cstring name=\"channel_description\"\u003eTo receive updates about changes in cryptocurrency value\u003c/string\u003e\n```\n\nRegister the service in the `AndroidManifest.xml` file:\n\n``` xml\n    \u003capplication\n      \u003e\n      [...]\n      \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n          \u003cintent-filter android:priority=\"1\"\u003e\n              \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n          \u003c/intent-filter\u003e\n      \u003c/service\u003e\n    \u003c/application\u003e\n```\n\nNow, let’s prepare our layouts. First, we will design the activity’s layout. When creating your app, the `activity_main.xml` file should already be present in the layout folder. Open it and replace with this:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".MainActivity\"\u003e\n    \n      \u003cTextView\n        android:id=\"@+id/bitcoinValue\"\n        android:padding=\"20dp\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        android:text=\"1 BTC\"\n        android:textSize=\"16sp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cTextView\n        android:id=\"@+id/etherumValue\"\n        android:padding=\"20dp\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\"\n        android:layout_marginStart=\"8dp\"\n        android:text=\"1 ETH\"\n        android:textSize=\"16sp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/bitcoinValue\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThe layout contains two `TextView`s to show prices for Bitcoin and Ethereum. We also made these `TextView`s clickable so we can set limits to get notifications when the limits are surpassed. \n\nNext, we will design the layout of our alert dialog. Create a new layout file named `alert_layout` and paste this:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/alert_layout.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n      android:padding=\"20dp\"\n      android:layout_height=\"match_parent\"\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/minimumValue\"\n        android:background=\"@drawable/text_background\"\n        android:hint=\"Minimum value\"\n        android:paddingStart=\"10dp\"\n        android:paddingEnd=\"10dp\"\n        android:inputType=\"number\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"60dp\" /\u003e\n    \n      \u003cEditText\n        android:layout_marginTop=\"10dp\"\n        android:background=\"@drawable/text_background\"\n        android:hint=\"Maximum value\"\n        android:inputType=\"number\"\n        android:id=\"@+id/maximumValue\"\n        android:layout_width=\"match_parent\"\n        android:paddingStart=\"10dp\"\n        android:paddingEnd=\"10dp\"\n        android:layout_height=\"60dp\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/save\"\n        android:layout_marginTop=\"10dp\"\n        android:layout_gravity=\"center\"\n        android:text=\"SAVE\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\" /\u003e\n    \n    \n    \u003c/LinearLayout\u003e\n```\n\nThis will be the layout showed by the dialog. It contains two text fields and a **save** button and we used a custom designed background for the `TextView`s. Create a new drawable file named `text_background` and paste this:\n\n``` xml\n    \u003c!-- File: /app/src/main/res/drawable/text_background.xml --\u003e\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\" \u003e\n      \u003csolid android:color=\"@android:color/white\" /\u003e\n      \u003cstroke android:width=\"1dip\" android:color=\"@android:color/darker_gray\"/\u003e\n    \u003c/shape\u003e\n```\n\nWe will move to the `MainActivity` to finish up our app’s functionalities. Open your `MainActivity` and replace the contents with the following:\n\n``` kotlin\n    // File: ./app/src/main/java/{package-name}/MainActivity.Kt\n    import android.os.Bundle\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import android.support.v7.app.AlertDialog\n    import android.support.v7.app.AppCompatActivity\n    import android.util.Log\n    import android.view.LayoutInflater\n    import android.widget.Button\n    import android.widget.EditText\n    import com.pusher.pushnotifications.PushNotifications\n    import kotlinx.android.synthetic.main.activity_main.*\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class MainActivity : AppCompatActivity() {\n    \n        private var prefs: Prefs? = null\n    \n        private val retrofit: ApiService by lazy {\n            val httpClient = OkHttpClient.Builder()\n            val builder = Retrofit.Builder()\n                    .baseUrl(\"http://10.0.2.2:9000/\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n    \n            val retrofit = builder\n                    .client(httpClient.build())\n                    .build()\n            retrofit.create(ApiService::class.java)\n        }\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            fetchCurrentPrice()\n            setupPushNotifications()\n            setupClickListeners()\n        }\n    }\n```\n\n\u003e The `URL` used above,  `http://10.0.2.2:9000/`, is the URL the Android emulator recognizes as localhost.\n\nAbove, we created a `retrofit` object to be used for network calls. After setting up the `retrofit` object, we add the layout in the `onCreate` method and call three other functions:\n\n\n1. `fetchCurrentPrice` - This function will get the current price of Bitcoin and Ethereum from our server. Create a new function within the class and set it up like so:\n\n``` kotlin\n    // File: /app/src/main/java/{package-name}/MainActivity.kt\n    private fun fetchCurrentPrice() {\n        retrofit.getValues().enqueue(object: Callback\u003cString\u003e {\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                val jsonObject = JSONObject(response!!.body())\n                bitcoinValue.text = \"1 BTC = $\"+ jsonObject.getJSONObject(\"BTC\").getString(\"USD\")\n                etherumValue.text = \"1 ETH = $\"+ jsonObject.getJSONObject(\"ETH\").getString(\"USD\")\n            }\n    \n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                Log.e(\"MainActivity\",t!!.localizedMessage)\n            }\n        })\n    }\n```\n\nAbove, a network call is made to get the current Bitcoin and Ethereum prices in USD. When the response is received, we parse the JSON data and display it on the screen by setting the texts of the text views in the layout.\n\n\n2. `setupPushNotifications` - This function is where we start listening to the interest of our choice to receive notifications. The interest name is in this format **{device_uuid}_{currency}_changed**. ****We register two interests, one for each currency. Open the `MainActivity` class and add the following method:\n\n``` kotlin\n    // File: /app/src/main/java/{package-name}/MainActivity.Kt\n    private fun setupPushNotifications() {\n        PushNotifications.start(applicationContext, \"PUSHER_BEAMS_INSTANCE_ID\")\n        val fmt = \"%s_%s_changed\"\n        PushNotifications.subscribe(java.lang.String.format(fmt, deviceUuid(), \"BTC\"))\n        PushNotifications.subscribe(java.lang.String.format(fmt, deviceUuid(), \"ETH\"))\n    }\n```\n\n\u003e Replace `PUSHER_BEAMS_INSTANCE_ID` with the instance ID found on your Pusher Beams dashboard.\n  \n3. `setupClickListeners` - In this function, we will set up click listeners to the text views in our layout. In the same `MainActivity` class, add the following method:\n\n``` kotlin\n    // File: /app/src/main/java/{package-name}/MainActivity.Kt\n    private fun setupClickListeners() {\n        bitcoinValue.setOnClickListener {\n            createDialog(\"BTC\")\n        }\n        \n        etherumValue.setOnClickListener {\n            createDialog(\"ETH\")\n        }\n    }\n```\n\nWhen any of the text views is clicked, we call the `createDialog` method which then opens up a layout for the user to input the limit. \n\nIn the `MainActivity` class, add the method `createDialog` and as seen below:\n\n``` kotlin\n    // File: /app/src/main/java/{package-name}/MainActivity.Kt\n    private fun createDialog(source:String){\n      val builder: AlertDialog.Builder = AlertDialog.Builder(this)\n      val view = LayoutInflater.from(this).inflate(R.layout.alert_layout,null)\n      \n      builder.setTitle(\"Set limits\")\n          .setMessage(\"\")\n          .setView(view)\n    \n      val dialog = builder.create()\n      val minEditText: EditText = view.findViewById(R.id.minimumValue)\n      val maxEditText: EditText = view.findViewById(R.id.maximumValue)\n    \n      view.findViewById\u003cButton\u003e(R.id.save).setOnClickListener {\n        if (source == \"BTC\"){\n          saveBTCPref(minEditText.text.toString(), maxEditText.text.toString())\n        } else {\n          saveETHPref(minEditText.text.toString(), maxEditText.text.toString())\n        }\n        dialog.dismiss()\n      }\n      dialog.show()\n    }\n```\n\nThis dialog gets the minimum and maximum values and sends it to the backend server. This is done so that when the cryptocurrency’s price changes, we’ll get a push notification if it is within the limits set. \n\nIn the function above, we called two new methods. Add the two methods in the `MainActivity` class as seen below:\n\n``` kotlin\n    // File: /app/src/main/java/{package-name}/MainActivity.Kt\n    private fun saveBTCPref(min:String, max:String){\n        val jsonObject = JSONObject()\n        jsonObject.put(\"minBTC\", min)\n        jsonObject.put(\"maxBTC\", max)\n        jsonObject.put(\"uuid\", deviceUuid())\n    \n        val body = RequestBody.create(\n                MediaType.parse(\"application/json\"),\n                jsonObject.toString()\n        )\n    \n        retrofit.saveBTCLimit(body).enqueue(object: Callback\u003cString\u003e {\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {}\n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {}\n        })\n    }\n    \n    private fun saveETHPref(min:String, max:String){\n        val jsonObject = JSONObject()\n        jsonObject.put(\"minETH\",min)\n        jsonObject.put(\"maxETH\",max)\n        jsonObject.put(\"uuid\", deviceUuid())\n    \n        val body = RequestBody.create(\n                MediaType.parse(\"application/json\"),\n                jsonObject.toString()\n        )\n    \n        retrofit.saveETHLimit(body).enqueue(object: Callback\u003cString\u003e {\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {}\n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {}\n        })\n    }\n```\n\nIn the `saveBTCPref` and `saveETHPref` we attempt to send the limits set by the user to the API so it can be saved for that user. \n\nWhile sending, we also send the `uuid` which is the devices’ unique identifier. Let’s create the `deviceUuid()` method that will generate and save this UUID per device. In the `MainActivity` class, add the following code:\n\n``` kotlin\n    // File: /app/src/main/java/{package-name}/MainActivity.Kt\n    private fun deviceUuid() : String {\n        prefs = Prefs(this)\n        var uuid: String = prefs!!.deviceUuid\n    \n        if (uuid == \"\") {\n            uuid = java.util.UUID.randomUUID().toString().replace(\"-\", \"_\")\n            prefs!!.deviceUuid = uuid\n        }\n    \n        return uuid\n    }\n```\n\nNow in this function, we reference a `Prefs` class. Create a new `Prefs` class and paste the following code into it:\n\n``` kotlin\n    // File: /app/src/main/java/{package-name}/Prefs.Kt\n    import android.content.Context\n    import android.content.SharedPreferences\n    \n    class Prefs (context: Context) {\n        val PREFS_FILENAME = \"com.example.coinalert.prefs\"\n        val DEVICE_UUID = \"device_uuid\"\n        val prefs: SharedPreferences = context.getSharedPreferences(PREFS_FILENAME, 0);\n    \n        var deviceUuid: String\n            get() = prefs.getString(DEVICE_UUID, \"\")\n            set(value) = prefs.edit().putString(DEVICE_UUID, value).apply()\n    \n    }\n```\n\nThat’s all for the application. At this point, the application should build successfully, but, not function as intended. In [the next part](https://pusher.com/tutorials/cryptocurrency-kotlin-go-part-2), we will build the backend of the application so it can work as intended.\n\n\n## Conclusion\n\nIn this article, we have learned how to use Pusher Beams to notify users of changes to a cryptocurrency. You can find the repository for the application built in this article [here](https://github.com/neoighodaro/kotlin-cryptocurrency-watcher-with-push-notification).","metaTitle":"Build a cryptocurrency alert app using Kotlin and Go: Part 1","metaDescription":"Use Kotlin and Go to create a cryptocurrency price monitor. The app features push notifications. In part one, build the Android frontend."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2gx2PiZC9qOiWg6emagQAa","type":"Entry","createdAt":"2018-07-22T02:46:43.386Z","updatedAt":"2020-06-19T10:49:52.507Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a cryptocurrency alert app using Kotlin and Go: Part 2 - The backend","url":"cryptocurrency-kotlin-go-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-cryptocurrency-watcher-with-push-notification","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-21","description":"In this two-part tutorial, build a cryptocurrency price monitor app, using Kotlin and Go. In part two, build the backend using Go, then run and test the application.","prerequisite":"You will need Android Studio 3+ and Go 1.10.2+ installed on your machine. You should have some familiarity with Android development and the Kotlin language.","content":"# Building a cryptocurrency alert app using Kotlin, Go, and Pusher Beams: Part 2\n\nIn [the first part](https://pusher.com/tutorials/cryptocurrency-kotlin-go-part-1) of this article, we started building our service by creating our Android application. The application, however, requires a backend to work properly. So in this part, we will be creating the backend of the application.\n\nWe will be using Go to build the backend of the application. The framework in Go we will be using is [Echo](https://echo.labstack.com).\n\nAs a recap, here is a screen recording of what we will have built when we are done:\n\n![kotlin-crypto-demo](//images.ctfassets.net/1es3ne0caaid/4p1PUy3hHyM8uckYMWE2Aa/d1c65f28377a68f6db6fae6821747e8d/kotlin-crypto-demo.gif)\n\n## Prerequisites\n\nTo follow along, you need:\n\n- To have completed [part one](https://pusher.com/tutorials/cryptocurrency-kotlin-go-part-1) of the article.\n- Android Studio installed on your machine (v3.x or later). [Download here](https://developer.android.com/studio/index.html).\n- Go version 1.10.2 or later [installed](https://golang.org/doc/install#install).\n- [SQLite installed](http://www.sqlitetutorial.net) on your machine.\n- Basic knowledge on using the Android Studio IDE.\n- Basic knowledge of Kotlin programming language. See the [official docs](https://kotlinlang.org/docs/reference/).\n- Basic knowledge of Go and the [Echo framework](https://echo.labstack.com).\n\n\n## Building our Go API\n\n### Setting up our project\n\nTo get started, create a new project directory for your application. We will create one called `backend`. It is recommended that you create this in your `$GOPATH` however, it is not a requirement.\n\nIn the project directory, create three new directories:\n\n\n1. database\n2. notification\n3. routes\n\nIn the `database` directory, create a new directory called `model`. In this `database` directory, we will store all things related to the database including the SQLite database file, the `model`, and `database` package.\n\nIn the `notification` directory, we will have a package that will contain everything needed to send push notifications to the devices.\n\nFinally, in the `routes` directory, we will have the `routes` package where we have the logic for each HTTP request.\n\nNow let’s start building the application.\n\n### Building our core application\n\nCreate a new `main.go` file in the root of the project. In this file, we will be adding the core of the project. We will be setting up the routing, middleware, and database.\n\nIn the `main.go` file, paste the following code:\n\n``` go\n    // File: ./main.go\n    package main\n    \n    import (\n        \"./database\"\n        \"./routes\"\n        \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n    )\n    \n    func main() {\n        db := database.Initialize(\"./database/db.sqlite\")\n        database.Migrate(db)\n        \n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        e.GET(\"/fetch-values\", routes.GetPrices())\n        e.POST(\"/btc-pref\", routes.SaveDeviceSettings(db))\n        e.POST(\"/eth-pref\", routes.SaveDeviceSettings(db))\n        e.GET(\"/simulate\", routes.SimulatePriceChanges(db))\n    \n        e.Start(\":9000\")\n    }\n```\n\nIn the code above, we first imported some packages that the Go script will need to work. Then we instantiate the database using the `database` subpackage that we imported. Next, we run the migration on the `db` instance. This will create the database table the application needs to run if it does not already exist.\n\nNext, we create a new Echo instance `e`. We then use the instance to register the [Logger](https://echo.labstack.com/middleware/logger) middleware and the [Recover](https://echo.labstack.com/middleware/recover) middleware.\n\n\n\u003e Logger middleware logs the information about each HTTP request.\n\u003e \n\u003e Recover middleware recovers from panics anywhere in the chain, prints stack trace and handles the control to the centralized [HTTPErrorHandler](https://echo.labstack.com/guide/customization#http-error-handler).\n\n\nWe then register our routes and map a handler to them using the `routes` package we imported. The routes are:\n\n\n1. `GET /fetch-values` - fetches the current prices of all the supported currencies and returns a JSON response.\n2. `POST /btc-pref`  - stores the minimum and maximum price BTC has to exceed for a device before receiving a notification and returns a JSON response.\n3. `POST /eth-pref` - stores the minimum and maximum price ETH has to exceed for a device before receiving a notification and returns a JSON response.\n4. `GET /simulate` - simulates prices changes in the supported currencies.\n\nAfter the routes, we start the server on port 9000. \n\n\n\u003e You can choose a different port if 9000 is in use, just remember to also change it in your `MainActivity.kt` file.\n\nNow that we have the `main.go` file, let’s pull in all the imports the script needs. Open your terminal and run the following commands:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n```\n\nThis will pull in Echo package and the Echo Middleware package. For the other two packages, `database` and `routes`, we will create those manually. Let’s do that now.\n\n### Creating our internal Go packages\n\nAs mentioned earlier, we are going to create some internal packages to make the application a lot more modular so let’s start with the `database` package.\n\nIn the `database` directory, create a new `init.go` file and paste the following code:\n\n``` go\n    // File: ./database/init.go\n    package database\n    \n    import (\n        \"database/sql\"\n        \n        _ \"github.com/mattn/go-sqlite3\"\n    )\n    \n    // Initialize initialises the database\n    func Initialize(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n        if err != nil || db == nil {\n            panic(\"Error connecting to database\")\n        }\n        \n        return db\n    }\n    \n    // Migrate migrates the database\n    func Migrate(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS devices(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    uuid VARCHAR NOT NULL,\n                    btc_min INTEGER,\n                    btc_max INTEGER,\n                    eth_min INTEGER,\n                    eth_max INTEGER\n            );\n       `\n       \n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nIn the file above, we first import two packages, the `database/sql`, which is inbuilt, and the [mattn/go-sqlite3](http://github.com/mattn/go-sqlite3) package, which is an sqlite3 driver for Go using `database/sql`. To pull that in open the terminal and run the command below:\n\n```\n    $ go get github.com/mattn/go-sqlite3\n```\n\nNext, we created a function called `Initialize` and in this function, we initialize our SQLite database. This will create a new database file if it does not exist, or use an existing one. \n\nWe also have a `Migrate` function where we specify the SQL query to be run when the application is initialized. As seen from the query, we create the table `devices` only if it does not already exist.\n\nThat’s all for the `init.go` file. \n\nCreate a new `routes.go` file in the `routes` directory and paste the following code:\n\n``` go\n    // File: ./routes/routes.go\n    package routes\n    \n    import (\n        \"database/sql\"\n        \"errors\"\n        \"net/http\"\n        \"strconv\"\n    \n        \"../database/model\"\n    \n        \"github.com/labstack/echo\"\n    )\n```\n\nNow let’s start defining the route handlers as used in the `main.go` file. \n\nFirst, we will add the `GetPrices` function. In the same file paste the following code at the bottom:\n\n``` go\n    // GetPrices returns the coin prices\n    func GetPrices() echo.HandlerFunc {\n        return func(c echo.Context) error {\n            prices, err := model.GetCoinPrices(true)\n            if err != nil {\n                return c.JSON(http.StatusBadGateway, err)\n            }\n            \n            return c.JSON(http.StatusOK, prices)\n        }\n    }\n```\n\nThe function above is straightforward. We just get the prices from the `model.GetCoinPrices`  function and return them as a JSON response. \n\nNote that we passed a boolean to the `GetCoinPrices` function. This boolean is to mark whether to simulate the prices or fetch from the API directly. Since we are testing, we want to simulate the prices so it changes often.\n\nThe next function to add to the `routes.go` file is the `SaveDeviceSettings` function. In the same file, paste the following code to the bottom of the file:\n\n``` go\n    var postedSettings map[string]string\n    \n    func formValue(c echo.Context, key string) (string, error) {\n        if postedSettings == nil {\n            if err := c.Bind(\u0026postedSettings); err != nil {\n                return \"\", err\n            }\n        }\n        \n        return postedSettings[key], nil\n    }\n    \n    func getCoinValueFromRequest(key string, c echo.Context) (int64, error) {\n        value, _ := formValue(c, key)\n        if value != \"\" {\n            setting, err := strconv.ParseInt(value, 10, 64)\n            if err == nil {\n                return setting, nil\n            }\n        }\n        \n        return 0, errors.New(\"Invalid or empty key for: \" + key)\n    }\n    \n    // SaveDeviceSettings saves the device settings\n    func SaveDeviceSettings(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            uuid, _ := formValue(c, \"uuid\")        \n            field := make(map[string]int64)\n    \n            if btcmin, err := getCoinValueFromRequest(\"minBTC\", c); err == nil {\n                field[\"btc_min\"] = btcmin\n            }\n            \n            if btcmax, err := getCoinValueFromRequest(\"maxBTC\", c); err == nil {\n                field[\"btc_max\"] = btcmax\n            }\n            \n            if ethmin, err := getCoinValueFromRequest(\"minETH\", c); err == nil {\n                field[\"eth_min\"] = ethmin\n            }\n            \n            if ethmax, err := getCoinValueFromRequest(\"maxETH\", c); err == nil {\n                field[\"eth_max\"] = ethmax\n            }\n            \n            defer func() { postedSettings = nil }()\n            \n            device, err := model.SaveSettings(db, uuid, field)\n            if err != nil {\n                return c.JSON(http.StatusBadRequest, err)\n            }\n            \n            return c.JSON(http.StatusOK, device)\n        }\n    }\n```\n\nIn the code above, we have three functions. The first two are helper functions. We need them to get the posted form values from the request. \n\nIn the `SaveDeviceSettings` function, we get the `uuid` for the device, and conditionally get the minimum and maximum values for the coin. We save the values to the database using the `model.SaveSettings` function and return a JSON response.\n\nThe final function to add will be the `Simulate` function. Add the following code to the bottom of the file:\n\n``` go\n    // SimulatePriceChanges simulates the prices changes\n    func SimulatePriceChanges(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            prices, err := model.GetCoinPrices(true)\n            if err != nil {\n                panic(err)\n            }\n            \n            devices, err := model.NotifyDevicesOfPriceChange(db, prices)\n            if err != nil {\n                panic(err)\n            }\n    \n            resp := map[string]interface{}{\n                \"prices\":  prices,\n                \"devices\": devices,\n                \"status\":  \"success\",\n            }\n    \n            return c.JSON(http.StatusOK, resp)\n        }\n    }\n```\n\nIn the function above, we fetch the prices for the coins, we then send that to the `model.NotifyDevicesOfPriceChange` function, which finds devices with matching criteria and sends them a push notification. We then return a JSON response of the `prices`, `devices` and `status`.\n\nThat’s all for the routes.\n\nLastly, let’s define the model. Create a new `models.go` file in the `database/model` directory and paste the following code:\n\n``` go\n    // File: ./database/model/models.go\n    package model\n    \n    import (\n        \"database/sql\"\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"math/big\"\n        \"math/rand\"\n        \"net/http\"\n        \"time\"\n        \n        \"errors\"\n    \n        \"../../notification\"\n    )\n```\n\nNext, let’s define the structs for our object resources. In the same file, paste the following to the bottom:\n\n``` go\n    // CoinPrice represents a single coin resource\n    type CoinPrice map[string]interface{}\n    \n    // Device represents a single device resource\n    type Device struct {\n        ID     int64  `json:\"id\"`\n        UUID   string `json:\"uuid\"`\n        BTCMin int64  `json:\"btc_min\"`\n        BTCMax int64  `json:\"btc_max\"`\n        ETHMin int64  `json:\"eth_min\"`\n        ETHMax int64  `json:\"eth_max\"`\n    }\n    \n    // Devices represents a collection of Devices\n    type Devices struct {\n        Devices []Device `json:\"items\"`\n    }\n```\n\nAbove, we have the `CoinPrice` map. This will be used to handle the response from the API we will be using for our application. When a response from the API is gotten, we bind it to the `CoinPrice` map.\n\nThe next one is the `Device` struct. This represents the device resource. It matches the SQL schema of the table we created earlier in the article. When we want to create a new device resource to store in the database or retrieve one, we will use the `Device` struct. \n\nFinally, we have the `Devices` struct which is simply a collection of multiple `Device` structs. We use this if we want to return a collection of `Device`s.\n\n\n\u003e Go does not allow underscores in the struct names, so we will use the `json:``\"``key_name``\"`  format to automatically convert to and from properties with the keys specified.\n\nLet’s start defining our model functions.\n\nIn the same file, paste the following code to the bottom of the page:\n\n``` go\n    // CreateSettings creates a new device and saves it to the db\n    func CreateSettings(db *sql.DB, uuid string) (Device, error) {\n        device := Device{UUID: uuid, BTCMin: 0, BTCMax: 0, ETHMin: 0, ETHMax: 0}\n        \n        stmt, err := db.Prepare(\"INSERT INTO devices (uuid, btc_min, btc_max, eth_min, eth_max) VALUES (?, ?, ?, ?, ?)\")\n        if err != nil {\n            return device, err\n        }\n        \n        res, err := stmt.Exec(device.UUID, device.BTCMin, device.BTCMax, device.ETHMin, device.ETHMax)\n        if err != nil {\n            return device, err\n        }\n        \n        lastID, err := res.LastInsertId()\n        if err != nil {\n            return device, err\n        }\n        \n        device.ID = lastID\n        \n        return device, nil\n    }\n```\n\nThe function above is used to create settings for a new device. In the function, a new device is created using the `Device` struct. We then write the SQL query we want to use to create a new device.\n\nWe run `Exec` on the SQL query to execute the query. If there’s no error, we get the last inserted ID from the query and assign that to the `Device` struct we created earlier. We then return the created `Device`.\n\nLet’s add the next function. In the same file, paste the following code to the bottom:\n\n``` go\n    // GetSettings fetches the settings for a single user from the db\n    func GetSettings(db *sql.DB, uuid string) (Device, error) {\n        device := Device{}\n    \n        if len(uuid) \u003c= 0 {\n            return device, errors.New(\"Invalid device UUID\")\n        }\n    \n        err := db.QueryRow(\"SELECT * FROM devices WHERE uuid=?\", uuid).Scan(\n            \u0026device.ID,\n            \u0026device.UUID,\n            \u0026device.BTCMin,\n            \u0026device.BTCMax,\n            \u0026device.ETHMin,\n            \u0026device.ETHMax)\n    \n        if err != nil {\n            return CreateSettings(db, uuid)\n        }\n    \n        return device, nil\n    }\n```\n\nIn the `GetSettings` function above, we create an empty `Device` struct. We run the query to fetch a device from the `devices` table that matches the `uuid`. We then use the `Scan` method of the database package to save the row values to the `Device` Instance. \n\nIf no device is found, a new one is created using the `CreateSettings` function we created earlier, else the device found is returned.\n\nLet’s add the next function. In the same file, paste the following code to the bottom:\n\n``` go\n    // SaveSettings saves the devices settings\n    func SaveSettings(db *sql.DB, uuid string, field map[string]int64) (Device, error) {\n        device, err := GetSettings(db, uuid)\n        if err != nil {\n            return Device{}, err\n        }\n        \n        if btcmin, isset := field[\"btc_min\"]; isset {\n            device.BTCMin = btcmin\n        }\n        \n        if btcmax, isset := field[\"btc_max\"]; isset {\n            device.BTCMax = btcmax\n        }\n        \n        if ethmin, isset := field[\"eth_min\"]; isset {\n            device.ETHMin = ethmin\n        }\n        \n        if ethmax, isset := field[\"eth_max\"]; isset {\n            device.ETHMax = ethmax\n        }\n        \n        stmt, err := db.Prepare(\"UPDATE devices SET btc_min = ?, btc_max = ?, eth_min = ?, eth_max = ? WHERE uuid = ?\")\n        if err != nil {\n            return Device{}, err\n        }\n        \n        _, err = stmt.Exec(device.BTCMin, device.BTCMax, device.ETHMin, device.ETHMax, device.UUID)\n        if err != nil {\n            return Device{}, err\n        }\n        \n        return device, nil\n    }\n```\n\nIn the `SaveSettings` function above, we get the existing settings using the `GetSettings` function and then we conditionally update the existing value. We then write an SQL query to update the database with the new values. After this, we return the `Device`  struct.\n\nLet’s add the next function. In the same file, paste the following code to the bottom:\n\n``` go\n    // GetCoinPrices gets the current coin prices\n    func GetCoinPrices(simulate bool) (CoinPrice, error) {\n        coinPrice := make(CoinPrice)\n        currencies := [2]string{\"ETH\", \"BTC\"}\n        \n        for _, curr := range currencies {\n            if simulate == true {\n                min := 1000.0\n                max := 15000.0\n                price, _ := big.NewFloat(min + rand.Float64()*(max-min)).SetPrec(8).Float64()\n                coinPrice[curr] = map[string]interface{}{\"USD\": price}\n                continue\n            }\n            \n            url := fmt.Sprintf(\"https://min-api.cryptocompare.com/data/pricehistorical?fsym=%s\u0026tsyms=USD\u0026ts=%d\", curr, time.Now().Unix())\n            res, err := http.Get(url)\n            if err != nil {\n                return coinPrice, err\n            }\n            \n            defer res.Body.Close()\n            \n            body, err := ioutil.ReadAll(res.Body)\n            if err != nil {\n                return coinPrice, err\n            }\n    \n            var f interface{}\n    \n            err = json.Unmarshal([]byte(body), \u0026f)\n            if err != nil {\n                return coinPrice, err\n            }\n            \n            priceMap := f.(map[string]interface{})[curr]\n            for _, price := range priceMap.(map[string]interface{}) {\n                coinPrice[curr] = map[string]interface{}{\"USD\": price.(float64)}\n            }\n        }\n        \n        return coinPrice, nil\n    }\n```\n\nIn the function above, we create a new instance of `coinPrice` and then we create an array of the two currencies we want to fetch, ETH and BTC. We then loop through the currencies and if `simulate` is `true`, we just return the simulated prices for the coins. If it’s `false`, then for each of the currencies we do the following:\n\n\n- Fetch the price for the currency from the API.\n- Add the price of the currency to the `coinPrice` map.\n\nAfter we are done, we return the prices.\n\nThe next and final function we want to add is the `NotifyDevicesOfPriceChange` function. This is responsible for getting devices that match the minimum and maximum threshold and sending push notifications to them.\n\nIn the same file, paste the following code:\n\n``` go\n    func minMaxQuery(curr string) string {\n        return `(` + curr + `_min \u003e 0 AND ` + curr + `_min \u003e ?) OR (` + curr + `_max \u003e 0 AND ` + curr + `_max \u003c ?)`\n    }\n    \n    // NotifyDevicesOfPriceChange returns the devices that are within the range\n    func NotifyDevicesOfPriceChange(db *sql.DB, prices CoinPrice) (Devices, error) {\n        devices := Devices{}\n        for currency, price := range prices {\n            pricing := price.(map[string]interface{})\n            rows, err := db.Query(\"SELECT * FROM devices WHERE \"+minMaxQuery(currency), pricing[\"USD\"], pricing[\"USD\"])\n            if err != nil {\n                return devices, err\n            }\n            defer rows.Close()\n            for rows.Next() {\n                device := Device{}\n                err = rows.Scan(\u0026device.ID, \u0026device.UUID, \u0026device.BTCMin, \u0026device.BTCMax, \u0026device.ETHMin, \u0026device.ETHMax)\n                if err != nil {\n                    return devices, err\n                }\n                devices.Devices = append(devices.Devices, device)\n                notification.SendNotification(currency, pricing[\"USD\"].(float64), device.UUID)\n            }\n        }\n        return devices, nil\n    } \n```\n\nIn the code above we have two functions, the first is `minMaxQuery` which is a helper function that helps us generate the SQL query for the min and max of a currency.\n\nThe second function is the `NotifyDevicesOfPriceChange` function. In here we loop through the currency prices and for each of the price we check the database for devices that match the minimum and maximum prices. \n\nWhen we have the devices, we loop through them and send a push notification using the `notification.SendNotification` method. We then return the devices we sent the notification to.\n\nThat’s all for the model package. We have one last package to add and that's the `notification` package. We used it in the code above to send push notification so let’s define it.\n\nIn the `notifications` directory, create a `push.go` file and paste the following code:\n\n``` go\n    // File: ./notification/push.go\n    package notification\n    \n    import (\n        \"fmt\"\n        \"strconv\"\n        \n        \"github.com/pusher/push-notifications-go\"\n    )\n    \n    const (\n        instanceID = \"PUSHER_BEAMS_INSTANCE_ID\"\n        secretKey  = \"PUSHER_BEAMS_SECRET_KEY\"\n    )\n    \n    // SendNotification sends push notification to devices\n    func SendNotification(currency string, price float64, uuid string) error {\n        notifications, err := pushnotifications.New(instanceID, secretKey)\n        if err != nil {\n            return err\n        }\n        \n        publishRequest := map[string]interface{}{\n            \"fcm\": map[string]interface{}{\n                \"notification\": map[string]interface{}{\n                    \"title\": currency + \" Price Change\",\n                    \"body\":  fmt.Sprintf(\"The price of %s has changed to $%s\", currency, strconv.FormatFloat(price, 'f', 2, 64)),\n                },\n            },\n        }\n        \n        interest := fmt.Sprintf(\"%s_%s_changed\", uuid, currency)\n        \n        _, err = notifications.Publish([]string{interest}, publishRequest)\n        if err != nil {\n            return err\n        }\n        \n        return nil\n    }\n```\n\n\u003e Replace the `PUSHER_BEAMS_*` key with the credentials in your Pusher dashboard.\n\nIn the code above, we have the `SendNotification` function. In there we instantiate a new Pusher Beams instance using the `InstanceID` and `secretKey` defined above the function.\n\nWe then create a `publishRequest` variable which contains the Android notification payload. This payload is what we will send to the Pusher Beams backend and will contain everything needed to send the notification to the Android device.\n\nNext, we create an `interest` variable which will be the interest we want to push the notification to. The format of the interest will match the one we subscribed to in part one of this tutorial. Next, we call the `Publish` function of the Pusher Beams package to send the notification to the device.\n\nOne final thing we need to do is pull the Pusher Beams package into our `$GOPATH`. Open your terminal and run the following command:\n \n```\n    $ go get github.com/pusher/push-notifications-go\n```\n\nWhen the command has executed successfully, we can now run the application.\n\n\n## Running our application\n\nNow that we have finished building the application, we need to run both the backend and the Android application. \n\nOpen your terminal and execute the following command from the root of the project to run the Go application:\n\n```\n    $ go run main.go\n```\n\nThis should start the server on port 9000.\n\n![kotlin-crypto-port9000](//images.ctfassets.net/1es3ne0caaid/4xNwShSh9eUKQCcIy6WCi/dd5b3f353b9106b31d9784ae66f442a5/kotlin-crypto-port9000.png)\n\nNext, go to Android Studio and launch your Android project. At this point, you can now see the application. You can go ahead to set the minimum and maximum limits for both the BTC and ETH currency. \n\nNow minimize the application in your simulator and open the notification center. Visit the URL http://localhost:9000/simulate to simulate the currency changes. You should see the notifications come into the device as shown below:\n\n![kotlin-crypto-demo](//images.ctfassets.net/1es3ne0caaid/4p1PUy3hHyM8uckYMWE2Aa/d1c65f28377a68f6db6fae6821747e8d/kotlin-crypto-demo.gif)\n\n\n## Conclusion\n\nIn this article, we have been able to see how you can create a cryptocurrency watcher application for Android using Pusher Beams and Go. This tutorial is available for iOS also [here](https://pusher.com/tutorials/cryptocurrency-tracking-swift-laravel-part-1). \n\nThe source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/kotlin-cryptocurrency-watcher-with-push-notification).","metaTitle":"Build a cryptocurrency alert app using Kotlin and Go: Part 2","metaDescription":"Use Kotlin and Go to create a cryptocurrency price monitor. The app features push notifications. In part two, build the backend with Go."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5vdxhGJceAEUQ0AusccaWE","type":"Entry","createdAt":"2018-07-04T14:13:24.457Z","updatedAt":"2020-06-19T11:03:40.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a football results feed with Go and React","url":"football-feed-go-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-football-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-07-02","description":"Build a realtime football results feed, using Go for the backend and React for the frontend. Admins will be able to send match updates out to any subscribed application.","prerequisite":"You will need Go, dep, Node and npm installed on your machine.","content":"## Introduction\n\nThe World Cup is with us once again. In this article we are going to show how you can add a real-time football results feed to your site so that your users can keep up with the latest scores without needing to go elsewhere.\n\nWe are going to build a system where a football pundit can enter details of matches, and other sites can display a live feed of the results as they are entered.\n\n![go-react-football-feed-demo](//images.ctfassets.net/1es3ne0caaid/41013Qn0XmcY8QcWc4Ikas/f842d3de9f3bdfda7610bdb15ea8c146/go-react-football-feed-demo.gif)\n\n## Prerequisites\n\nThis article focuses on using Go and React. As such, it is important that you have Go already installed and configured on your system - including having the `GOPATH` set up correctly. If you do not know how to do this then the [Go documentation](https://golang.org/doc/install) can explain this all. A certain level of understanding of Go is assumed to follow along with this article. The “[A Tour of Go](https://tour.golang.org/welcome/1)” tutorial is a fantastic introduction if you are new to the language.\n\nWe are also going to use the [dep](https://golang.github.io/dep/) tool to manage the dependencies of our backend application, so make sure that this is correctly installed as well.\n\nFinally, in order to develop and run our pundits web UI you will need to have a recent version of [Node.js](https://nodejs.org/en/) installed and correctly set up. A certain level of understanding of JavaScript is also assumed to follow along with this article.\n\n## Create a Pusher account\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Next click on **Channels apps** on the sidebar, followed by **Create Channels app.** \n\n![go-react-football-feed-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/1S9MC94S2gE40S4CK2OEG0/5f2322e334c6fa1e2d5a3cc53a97a7e0/go-react-football-feed-create-pusher-app.png)\n\nFill out this dialog as needed and then click the **Create my app** button. Then click on **App Keys** and note down the credentials for later.\n\n![go-react-football-feed-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/54CJSIa3o4siOcg2wqimEE/48a3e6990bf8f221badf09f8c9c99e98/go-react-football-feed-pusher-app-keys.png)\n\n## Building the backend service\n\nWe are going to write our backend service using the Go language, using the library to power our HTTP service.\n\nOur service is going to offer the following endpoints:\n\n- POST /match - this will trigger events for half time, extra time and full time.\n- POST /goal - this will trigger events to indicate that a goal has been scored.\n- POST /card - this will trigger events to indicate that a yellow or red card has been given.\n\nTo start with, we need to create an area to work with. Create a new directory under your `GOPATH` in which to work:\n\n```\n    # Mac and Linux\n    $ mkdir -p $GOPATH/src/pusher/football-feed\n    $ cd $GOPATH/src/pusher/football-feed\n    \n    # Windows Powershell\n    mkdir -path $env:GOPATH/src/pusher/football-feed\n    cd $env:GOPATH/src/pusher/football-feed\n```\n\nWe can then initialise our work area for this project. This is done using the `dep` tool:\n\n```\n    $ dep init\n```\n\nDoing this will create the **`Gopkg.toml` and `Gopkg.lock` files used to track our dependencies, and the `vendor` **directory which is used to store vendor dependencies.\n\nThe first thing we want is to be able to send Pusher Channels messages. This is the core of our backend application. For this we will be creating a  new directory called `internal/notifier` in the root of rht project area and then writing a file called `internal/notifier/notifier.go`, as follows:\n\n``` go\n    // internal/notifier/notifier.go\n    package notifier\n    import (\n        \"github.com/pusher/pusher-http-go\"\n    )\n    type Message interface{}\n    type MatchMessage struct {\n        Event     string `json:event`\n        HomeTeam  string `json:homeTeam`\n        AwayTeam  string `json:awayTeam`\n        HomeScore uint16 `json:homeScore`\n        AwayScore uint16 `json_awayScore`\n    }\n    type GoalMessage struct {\n        Player    string `json:player`\n        ForTeam   string `json:forTeam`\n        HomeTeam  string `json:homeTeam`\n        AwayTeam  string `json:awayTeam`\n        HomeScore uint16 `json:homeScore`\n        AwayScore uint16 `json_awayScore`\n        OwnGoal   bool   `json:ownGoal`\n    }\n    type CardMessage struct {\n        Team   string `json:team`\n        Player string `json:player`\n        Card   string `json:card`\n    }\n    type Notifier struct {\n        notifyChannel chan\u003c- Message\n    }\n    func notifier(notifyChannel \u003c-chan Message) {\n        client := pusher.Client{\n            AppId:   \"PUSHER_APP_ID\",\n            Key:     \"PUSHER_KEY\",\n            Secret:  \"PUSHER_SECRET\",\n            Cluster: \"PUSHER_CLUSTER\",\n            Secure:  true,\n        }\n        for {\n            message := \u003c-notifyChannel\n            switch payload := message.(type) {\n            case GoalMessage:\n                client.Trigger(\"match\", \"goal\", payload)\n            case CardMessage:\n                client.Trigger(\"match\", \"card\", payload)\n            case MatchMessage:\n                client.Trigger(\"match\", \"match\", payload)\n            }\n        }\n    }\n    func New() Notifier {\n        notifyChannel := make(chan Message)\n        go notifier(notifyChannel)\n        return Notifier{notifyChannel}\n    }\n    func (notifier *Notifier) Notify(msg Message) {\n        notifier.notifyChannel \u003c- msg\n    }\n```    \n\n\n\u003e **Note:** ensure that PUSHER_APP_ID, PUSHER_KEY, PUSHER_SECRET and PUSHER_CLUSTER are all replaced with values obtained from the Pusher Dashboard when you registered your app.\n\nWe start by defining a number of messages that we can handle - `MatchMessage`, `GoalMessage` and `CardMessage`. We then define our `Notifier`  type that will be handling the actual notifications. This works off of a go-routine so that the actual Pusher Channels messages are sent in the background and do not in any way interfere with the performance of the HTTP requests.\n\nWhen processing a message, we determine the Pusher “event” based on the type of the Message received, and we use the message as-is as the payload.\n\nThe next thing we want is the web server. This will be done by writing a file called `internal/webapp/webapp.go` in our project area, as follows:\n\n``` go\n    // internal/webapp/webapp.go\n    package webapp\n    import (\n        \"net/http\"\n        \"pusher/football-feed/internal/notifier\"\n        \"github.com/gin-contrib/cors\"\n        \"github.com/gin-gonic/gin\"\n    )\n    func StartServer(notify *notifier.Notifier) {\n        r := gin.Default()\n        r.Use(cors.Default())\n        r.POST(\"/match\", func(c *gin.Context) {\n            var json notifier.MatchMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.POST(\"/goal\", func(c *gin.Context) {\n            var json notifier.GoalMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.POST(\"/card\", func(c *gin.Context) {\n            var json notifier.CardMessage\n            if err := c.BindJSON(\u0026json); err == nil {\n                notify.Notify(json)\n                c.JSON(http.StatusCreated, json)\n            } else {\n                c.JSON(http.StatusBadRequest, gin.H{})\n            }\n        })\n        r.Run()\n    }\n```\n\nThis gives us our three routes, each of which does essentially the same:\n\n- Parse the request payload as JSON into an appropriate structure\n- Use the Notifier from above to send a Pusher Channels notification for this message\n\nWe also need our main application file. This will be `/football-feed.go` in our project area, as follows:\n\n``` go\n    // football-feed.go\n    package main\n    import (\n        \"pusher/football-feed/internal/notifier\"\n        \"pusher/football-feed/internal/webapp\"\n    )\n    func main() {\n        notifier := notifier.New()\n        webapp.StartServer(\u0026notifier)\n    }\n```\n\nThe final thing to do is to ensure that our dependencies are all available. This is done by executing:\n\n```\n    $ dep ensure\n```\n\nWe can now start the application by executing `go run football-feed.go`:\n\n```\n    $ go run football-feed.go\n    [GIN-debug] [WARNING] Running in \"debug\" mode. Switch to \"release\" mode in production.\n     - using env:        export GIN_MODE=release\n     - using code:        gin.SetMode(gin.ReleaseMode)\n    \n    [GIN-debug] POST   /match                    --\u003e pusher/football-feed/internal/webapp.StartServer.func1 (4 handlers)\n    [GIN-debug] POST   /goal                     --\u003e pusher/football-feed/internal/webapp.StartServer.func2 (4 handlers)\n    [GIN-debug] POST   /card                     --\u003e pusher/football-feed/internal/webapp.StartServer.func3 (4 handlers)\n    [GIN-debug] Environment variable PORT is undefined. Using port :8080 by default\n    [GIN-debug] Listening and serving HTTP on :8080\n```\n\nAlternatively, we can build an executable using `go build football-feed.go`. This executable can then be distributed however we need to do so - for example, copying it into a Docker container or directly onto our production VMs.\n\nIf we were to make calls to this manually - e.g. by using cURL - then we would see the Pusher Channels events in the debug dashboard:\n\n```\n    \u003e $ curl -v -X POST http://localhost:8080/card -H \"Content-Type: application-json\" --data '{\"team\": \"Russia\", \"player\": \"Aleksandr Golovin\", \"card\": \"yellow\"}'\n    *   Trying ::1...\n    * TCP_NODELAY set\n    * Connected to localhost (::1) port 8080 (#0)\n    \u003e POST /card HTTP/1.1\n    \u003e Host: localhost:8080\n    \u003e User-Agent: curl/7.54.0\n    \u003e Accept: */*\n    \u003e Content-Type: application-json\n    \u003e Content-Length: 67\n    \u003e\n    * upload completely sent off: 67 out of 67 bytes\n    \u003c HTTP/1.1 201 Created\n    \u003c Content-Type: application/json; charset=utf-8\n    \u003c Date: Mon, 25 Jun 2018 13:09:21 GMT\n    \u003c Content-Length: 62\n    \u003c\n    * Connection #0 to host localhost left intact\n    {\"Team\":\"Russia\",\"Player\":\"Aleksandr Golovin\",\"Card\":\"yellow\"}\n```\n\n![go-react-football-feed-event-creator](//images.ctfassets.net/1es3ne0caaid/5u8wfHjneEMwCUaUwmMYcc/d37034bf9266e4d1cbf041b8eae23101/go-react-football-feed-event-creator.png)\n\n## Pundit application\n\nNow that we’ve got our backend that is able to react to messages and send Pusher Channels events, we want to write our Football Pundit application that will actually trigger these messages. This is going to be a simple Create React App application, using Semantic UI to give us some structure to the page.\n\nFirstly, we need to actually create the application. This is done by executing:\n\n```\n    $ create-react-app pundit-ui\n    $ cd pundit-ui\n    $ npm install\n```\n\n\u003e **Note:** you can use “yarn” instead of “npm” if you prefer.\n\nWe then want to add some dependencies that we need for the system:\n\n```\n    $ npm add --save uuid semantic-ui-css semantic-ui-react\n```\n\nOur UI is going to consist of a list of games that we are reporting on. These games will either be Started - in which case the match is underway - or Unstarted - in which case we are still entering the match details.\n\nOur Unstarted Matches will be rendered by a component defined in `src/UnstartedGame.js`, as follows:\n\n``` javascript\n    // src/UnstartedGame.js\n    import React from 'react';\n    import { Segment, Grid, Form, Header, Button } from 'semantic-ui-react';\n    export default function UnstartedGame({game, onTeamUpdated, onPlayerUpdated, onCancel, onStart}) {\n        const homePlayers = [];\n        const awayPlayers = [];\n        for (let i = 1; i \u003c= 11; ++i) {\n            homePlayers.push(\u003cinput placeholder={`Home Player ${i}`}\n                value={game.home.players[`player_${i}`] || ''}\n                onChange={(e) =\u003e onPlayerUpdated('home', `player_${i}`, e.target.value)}\n                key={`home.players.player_${i}`} /\u003e);\n            awayPlayers.push(\u003cinput placeholder={`Away Player ${i}`}\n                value={game.away.players[`player_${i}`] || ''}\n                onChange={(e) =\u003e onPlayerUpdated('away', `player_${i}`, e.target.value)}\n                key={`away.players.player_${i}`} /\u003e);\n        }\n        return (\n            \u003cSegment\u003e\n                \u003cForm\u003e\n                    \u003cGrid\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column\u003e\n                                \u003cHeader as='h2' textAlign='center'\u003eNew Match\u003c/Header\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={2}\u003e\n                                \u003cGrid.Column\u003e\n                                    \u003cinput placeholder=\"Home Team\"\n                                        value={game.home.team}\n                                        onChange={(e) =\u003e onTeamUpdated('home', e.target.value)} /\u003e\n                                \u003c/Grid.Column\u003e\n                                \u003cGrid.Column\u003e\n                                    \u003cinput placeholder=\"Away Team\"\n                                        value={game.away.team}\n                                        onChange={(e) =\u003e onTeamUpdated('away', e.target.value)} /\u003e\n                                \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column\u003e\n                                \u003cHeader as='h2' textAlign='center'\u003ePlayers\u003c/Header\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={2}\u003e\n                                \u003cGrid.Column\u003e{homePlayers}\u003c/Grid.Column\u003e\n                                \u003cGrid.Column\u003e{awayPlayers}\u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                        \u003cGrid.Row columns={1}\u003e\n                            \u003cGrid.Column textAlign=\"right\"\u003e\n                                \u003cButton.Group\u003e\n                                    \u003cButton primary onClick={onStart}\u003eStart Game\u003c/Button\u003e\n                                    \u003cButton.Or /\u003e\n                                    \u003cButton negative onClick={onCancel}\u003eCancel\u003c/Button\u003e\n                                \u003c/Button.Group\u003e\n                            \u003c/Grid.Column\u003e\n                        \u003c/Grid.Row\u003e\n                    \u003c/Grid\u003e\n                \u003c/Form\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\nThis renders a large form that has fields for: home team, away team, 11 home players and 11 away players.\n\nOur Started Matches will be rendered by a component defined in `src/StartedGame.js`, as follows:\n\n``` javascript\n    // src/StartedGame.js\n    import React from 'react';\n    import { Segment, Grid, Header, Button, Label, Dropdown, Menu } from 'semantic-ui-react';\n    const gameState = {\n        'first half': 'First Half',\n        'second half': 'Second Half',\n        'finished': 'Full Time',\n        'extra time': 'Extra Time'\n    };\n    export default function StartedGame({ game, onGoal, onCard, onGameEvent }) {\n        const homePlayers = [];\n        const awayPlayers = [];\n        for (let i = 1; i \u003c= 11; ++i) {\n            const playerId = `player_${i}`;\n            let homeLabel;\n            if (game.home.cards[playerId]) {\n                homeLabel=\u003cLabel color={game.home.cards[playerId]} ribbon\u003e{game.home.players[playerId]}\u003c/Label\u003e;\n            } else {\n                homeLabel = game.home.players[playerId];\n            }\n            let awayLabel;\n            if (game.away.cards[playerId]) {\n                awayLabel=\u003cLabel color={game.away.cards[playerId]} ribbon\u003e{game.away.players[playerId]}\u003c/Label\u003e;\n            } else {\n                awayLabel = game.away.players[playerId];\n            }\n            homePlayers.push(\n                \u003cDropdown text={homeLabel}\n                    pointing=\"left\"\n                    className=\"link item\"\n                    key={`home.players.${playerId}}`}\u003e\n                    \u003cDropdown.Menu\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onGoal('home', playerId, 'home')}\u003eGoal\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onGoal('home', playerId, 'away')}\u003eOwn Goal\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onCard('home', playerId, 'yellow')}\u003eYellow Card\u003c/Dropdown.Item\u003e\n                        \u003cDropdown.Item onClick={() =\u003e onCard('home', playerId, 'red')}\u003eRed Card\u003c/Dropdown.Item\u003e\n                    \u003c/Dropdown.Menu\u003e\n                \u003c/Dropdown\u003e\n            );\n            awayPlayers.push(\n                \u003cDropdown text={awayLabel}\n                    pointing=\"left\"\n                    className=\"link item\"\n                    key={`away.players.${playerId}}`}\u003e\n                    \u003cDropdown.Menu\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onGoal('away', playerId, 'away')}\u003eGoal\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onGoal('away', playerId, 'home')}\u003eOwn Goal\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onCard('away', playerId, 'yellow')}\u003eYellow Card\u003c/Dropdown.Item\u003e\n                    \u003cDropdown.Item onClick={() =\u003e onCard('away', playerId, 'red')}\u003eRed Card\u003c/Dropdown.Item\u003e\n                \u003c/Dropdown.Menu\u003e\n                \u003c/Dropdown\u003e\n            );\n        }\n        return (\n            \u003cSegment\u003e\n                \u003cGrid\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cHeader as='h2' textAlign='center'\u003eMatch\u003c/Header\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={2}\u003e\n                        \u003cGrid.Column textAlign=\"right\"\u003e\n                            \u003cLabel\u003e\n                                {game.home.team}\n                                \u003cLabel.Detail\u003e{game.home.score}\u003c/Label.Detail\u003e\n                            \u003c/Label\u003e\n                        \u003c/Grid.Column\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cLabel\u003e\n                                {game.away.team}\n                                \u003cLabel.Detail\u003e{game.away.score}\u003c/Label.Detail\u003e\n                            \u003c/Label\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column textAlign='center'\u003e\n                            {gameState[game.state]}\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cHeader as='h2' textAlign='center'\u003ePlayers\u003c/Header\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={2}\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cMenu vertical borderless secondary style={{width: \"100%\"}}\u003e{homePlayers}\u003c/Menu\u003e\n                        \u003c/Grid.Column\u003e\n                        \u003cGrid.Column\u003e\n                            \u003cMenu vertical borderless secondary style={{width: \"100%\"}}\u003e{awayPlayers}\u003c/Menu\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                    \u003cGrid.Row columns={1}\u003e\n                        \u003cGrid.Column textAlign=\"right\"\u003e\n                            \u003cButton.Group\u003e\n                                \u003cButton primary onClick={() =\u003e onGameEvent('finished')}\u003eFinish Game\u003c/Button\u003e\n                                \u003cButton onClick={() =\u003e onGameEvent('second half')}\u003eHalf Time\u003c/Button\u003e\n                                \u003cButton onClick={() =\u003e onGameEvent('extra time')}\u003eExtra Time\u003c/Button\u003e\n                            \u003c/Button.Group\u003e\n                        \u003c/Grid.Column\u003e\n                    \u003c/Grid.Row\u003e\n                \u003c/Grid\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\nThis renders a view that is similar to the previous, but instead of being a form that can be entered it is read-only and has buttons to click to indicate that events have happened. These events can be match-level events - half time, extra time and finish game - or player events - goal scored or card received.\n\nWe then have a single component that displays a list of all the games we are currently working with. This is in `src/Games.js` as follows:\n\n``` javascript\n    // src/Games.js\n    import React from 'react';\n    import { Container, Segment, Button } from 'semantic-ui-react';\n    import uuid from 'uuid/v4';\n    import StartedGame from './StartedGame';\n    import UnstartedGame from './UnstartedGame';\n    export default class Games extends React.Component {\n        state = {\n            games: []\n        }\n        newGameHandler = this.newGame.bind(this)\n        updateTeamHandler = this.updateTeam.bind(this)\n        updatePlayerHandler = this.updatePlayer.bind(this)\n        startGameHandler = this.startGame.bind(this)\n        cancelGameHandler = this.cancelGame.bind(this)\n        goalHandler = this.goalScored.bind(this)\n        cardHandler = this.cardGiven.bind(this)\n        gameEventHandler = this.gameEvent.bind(this)\n        render() {\n            const renderedGames = this.state.games\n                .map((game, index) =\u003e {\n                    if (game.state !== 'unstarted') {\n                        return \u003cStartedGame game={game}\n                            key={game.id}\n                            onGoal={(team, player, goalFor) =\u003e this.goalHandler(game.id, team, player, goalFor)}\n                            onCard={(team, player, card) =\u003e this.cardHandler(game.id, team, player, card)}\n                            onGameEvent={(event) =\u003e this.gameEventHandler(game.id, event)} /\u003e;\n                    } else {\n                        return \u003cUnstartedGame game={game}\n                            key={game.id}\n                            onTeamUpdated={(team, value) =\u003e this.updateTeamHandler(game.id, team, value)}\n                            onPlayerUpdated={(team, player, value) =\u003e this.updatePlayerHandler(game.id, team, player, value)}\n                            onCancel={() =\u003e this.cancelGameHandler(game.id)}\n                            onStart={() =\u003e this.startGameHandler(game.id)} /\u003e;\n                    }\n                });\n            return (\n                \u003cContainer\u003e\n                    \u003cSegment.Group\u003e\n                        {renderedGames}\n                    \u003c/Segment.Group\u003e\n                    \u003cButton onClick={this.newGameHandler}\u003eNew Match\u003c/Button\u003e\n                \u003c/Container\u003e\n            )\n        }\n        goalScored(gameId, team, player, goalFor) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[goalFor].score++;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cardGiven(gameId, team, player, card) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[team].cards[player] = card;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        gameEvent(gameId, event) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game.state = event;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        newGame() {\n            const { games } = this.state;\n            const newGames = [\n                ...games,\n                {\n                    id: uuid(),\n                    state: 'unstarted',\n                    home: {\n                        team: '',\n                        score: 0,\n                        players: {},\n                        cards: {}\n                    },\n                    away: {\n                        team: '',\n                        score: 0,\n                        players: {},\n                        cards: {}\n                    }\n                }\n            ];\n            this.setState({\n                games: newGames\n            });\n        }\n        updateTeam(id, team, value) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game[team].team = value;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        updatePlayer(id, team, player, value) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game[team].players[player] = value;\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        startGame(id) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === id) {\n                    game.state = 'first half';\n                }\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cancelGame(id) {\n            const { games } = this.state;\n            const newGames = games.filter((game) =\u003e game.id !== id);\n            this.setState({\n                games: newGames\n            });\n        }\n    }\n```\n\nThis simply renders a list of games, using the appropriate component to render it depending on whether the game has started or finished. It also handles all of the events that can happen in the game, updating our state and ensuring that the games are re-rendered as needed.\n\nFinally we can update our map `App` class in `src/App.js` to render this list of games:\n\n``` javascript\n    // src/App.js\n    import React, { Component } from 'react';\n    import Games from './Games';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cGames /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nAnd the main index of the entire page, in `src/index.js`, ensuring that our styles are loaded correctly:\n\n``` javascript\n    // src/index.js\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import 'semantic-ui-css/semantic.min.css';\n    import App from './App';\n    ReactDOM.render(\u003cApp /\u003e, document.getElementById('root'));\n```\n\nAt this point we can run our application using `npm start` and see the Pundit UI that we have built.\n\n### Triggering backend events\n\nNow that we’ve got our pundit UI, we want it to trigger messages on our backend. This will be done using the Axios library to make HTTP calls to the backend.\n\nFirstly we need to install Axios:\n\n```\n    npm install --save axios\n```\n\nThen we make use of it in our application. All of this functionality goes in `src/Games.js`, which is responsible for handling our events.\n\nFirstly we need to actually include Axios and create a client to use. For this, add the following to the top of the file:\n\n``` javascript\n    // src/Games.js\n    import axios from 'axios';\n    \n    const axiosClient = axios.create({\n        baseURL: 'http://localhost:8080'\n    });\n```\n\nThen we need to actually make the API calls to trigger the messages. These are done in the `goalScored`, `cardGiven` and `gameEvent` methods, as follows:\n\n``` javascript\n    // src/Games.js\n        goalScored(gameId, team, player, goalFor) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[goalFor].score++;\n                }\n                axiosClient.post('/goal', {\n                    player: game[team].players[player],\n                    forTeam: goalFor,\n                    homeTeam: game.home.team,\n                    awayTeam: game.away.team,\n                    homeScore: game.home.score,\n                    awayScore: game.away.score,\n                    ownGoal: team !== goalFor\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        cardGiven(gameId, team, player, card) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game[team].cards[player] = card;\n                }\n                axiosClient.post('/card', {\n                    team: game[team].team,\n                    player: game[team].players[player],\n                    card\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n        gameEvent(gameId, event) {\n            const { games } = this.state;\n            const newGames = games.map((game) =\u003e {\n                if (game.id === gameId) {\n                    game.state = event;\n                }\n                axiosClient.post('/match', {\n                    event,\n                    homeTeam: game.home.team,\n                    awayTeam: game.away.team,\n                    homeScore: game.home.score,\n                    awayScore: game.away.score\n                });\n                return game;\n            });\n            this.setState({\n                games: newGames\n            });\n        }\n```\n\nMost of this is simply extracting the data from the current game state to send to the server.\n\nWe can now use this UI and see the events appearing in the Pusher debug dashboard.\n\n![go-react-football-feed-demo-with-event-creator](//images.ctfassets.net/1es3ne0caaid/IYQVADBV8AyCUmwWIgAaI/615e63cde3e4289b035c7b4092a6c2d0/go-react-football-feed-demo-with-event-creator.gif)\n\n## Live feed of events\n\nWe are going to add our live feed to a Bootstrap enabled page using the [Bootstrap Notify](http://bootstrap-notify.remabledesigns.com/) plugin. This can be used on any website that uses Bootstrap, but for our example we are going to use a single static HTML file as follows:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eFootball Feed\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\"\n            crossorigin=\"anonymous\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cscript src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/mouse0270-bootstrap-notify/3.1.7/bootstrap-notify.js\" integrity=\"sha256-ZfyZUBGHlJunePNMsBqgGX3xHMv4kaCZ5Hj+8Txwd9c=\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n            const pusher = new Pusher('PUSHER_KEY', {\n              cluster: 'PUSHER_CLUSTER'\n            });\n            const channel = pusher.subscribe('match');\n            channel.bind('goal', function(data) {\n                let message = data.Player + ' scored!';\n                if (data.OwnGoal) {\n                    message += ' (OG)';\n                }\n                $.notify({\n                    title: message,\n                    message: `${data.HomeTeam} ${data.HomeScore} - ${data.AwayScore} ${data.AwayTeam}`\n                }, {\n                    type: 'success',\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n            channel.bind('card', function(data) {\n                let message;\n                let type;\n                if (data.Card === 'yellow') {\n                    message = `Yellow card for ${data.Player} (${data.Team})`;\n                    type = 'warning';\n                } else {\n                    message = `Red card for ${data.Player} (${data.Team})`;\n                    type = 'danger';\n                }\n                $.notify({\n                    message: message\n                }, {\n                    type: type,\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n            channel.bind('match', function(data) {\n                let message;\n                if (data.Event === 'finished') {\n                    message = 'Full Time';\n                } else if (data.Event === 'second half') {\n                    message = 'Half Time';\n                } else if (data.Event === 'extra time') {\n                    message = 'Extra Time';\n                }\n                $.notify({\n                    title: message,\n                    message: `${data.HomeTeam} ${data.HomeScore} - ${data.AwayScore} ${data.AwayTeam}`\n                }, {\n                    type: 'info',\n                    allow_dismiss: true,\n                    newest_on_top: false,\n                });\n            });\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e **Note:** make sure that PUSHER_KEY and PUSHER_CLUSTER are the same values as the backend is using.\n\nThe above code can be used on any website that uses Bootstrap, so you can easily include it in an existing site to give your users live football news without leaving.\n\nEnsure that the backend and pundit UI is running, and then open `index.html` in a web browser to see the messages appearing as you trigger events.\n\n```\n    # run backend\n    $ go run football-feed.go\n    \n    # run pundit UI\n    $ npm start\n```\n\n![go-react-football-feed-demo](//images.ctfassets.net/1es3ne0caaid/41013Qn0XmcY8QcWc4Ikas/f842d3de9f3bdfda7610bdb15ea8c146/go-react-football-feed-demo.gif)\n\n## Summary\n\nThis article shows how to use Pusher Channels to trigger a live feed of events on a website. The full source code can be found on [GitHub](https://github.com/sazzer/pusher-football-feed). Why not try extending it to support more actions, or even different games.","metaTitle":"Create a football results feed with Go and React","metaDescription":"Use Go and React to create a footbal feed web app. Admins will be able to send match updates out to any subscribed application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"nlxHkriz3q26s4WyIk42u","type":"Entry","createdAt":"2018-07-02T13:15:54.987Z","updatedAt":"2018-07-06T13:40:24.782Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live graph with Go","url":"live-graph-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/pusher-go-realtime-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}}],"reviewDate":"2018-06-29","description":"Build a simple interface featuring a live graph, supported by a Go backend. The application simulates a web traffic monitoring dashboard using Chart.js and some dummy data.","prerequisite":"You will need Go 1.10+ installed on your machine. Basic knowledge of Go and JavaScript will be helpful.","content":"An astronomical number of data streams are being generated every day because data is core to diverse systems. Today’s business owners have come to recognize data as an important factor during decision making. \n\nHowever, the gathered bulk data would be confusing to read and useless without a way to visualize it. For this reason, realtime monitoring systems have gained popularity over the years. We can use such systems to visualize website traffic, weather updates, server performance and so on. \n\nIn this article, we will build a realtime monitoring graph that continuously displays updates on website traffic after a fixed interval. We will build a Go backend server that exposes several endpoints and uses Pusher Channels to trigger events on the count of user visits. We will simulate the website traffic data using a simple setInterval function and a pseudorandom number generator.\n\nOn the frontend, we will receive the simulated updates from Pusher and render the data trend using a line chart. The graph will be a plot on “user visits” against “total number of pages visited.” For context, here is a sample of what we will be building:\n\n![go-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/1xM5LHTn2MYQmyO24M84WI/61af7ff9f8449a3a2c258628b99bea4a/go-live-graph-demo.gif)\n\nFrom the image above, we can see that there is a button labeled **Simulate user visits**, this button is responsible for starting the simulator on the Backend server. Let’s begin.\n\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n\n\n- An editor like Visual Studio Code.\n- Go (version \u003e= 1.10.x) installed on your computer. Heres how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6).\n\nOnce you have all the above requirements, we can proceed.\n\n\n## Setting up Pusher\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n\n## Setting up the codebase\n\nLet’s begin by navigating into the `src` directory that is located in the `$GOPATH` and creating a new directory for our app. This will be our working directory:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir pusher-go-realtime-graph\n    $ cd pusher-go-realtime-graph\n```\n\nCreate a new file called `graph.go`. Now, before adding content to this file, we need to install the Go packages that we will be referencing within our application. \n\nRun the following packages to pull in the packages:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️  If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this [GitHub issue](https://github.com/golang/go/issues/3441).\n\nWithin your favorite editor, open the `graph.go` file and update it with the following code:\n\n``` go\n    package main\n    \n    import (\n        \"math/rand\"\n        \"net/http\"\n        \"time\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // We register the Pusher client\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // visitsData is a struct\n    type visitsData struct {\n        Pages   int\n        Count int\n    }\n    \n    func main() {\n        // Echo instance\n        e := echo.New()\n        \n        // Middleware\n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n        \n        // Define the HTTP routes\n        e.File(\"/\", \"public/index.html\")\n        e.File(\"/style.css\", \"public/style.css\")\n        e.File(\"/app.js\", \"public/app.js\")\n        e.GET(\"/simulate\", simulate)\n        \n        // Start server\n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nThe `graph.go` file is the main entry point of our backend server so this is where we import all the packages we previously pulled in. We import the `time` package because we will need it to create a new ticker for our custom `setInterval` function. We import the `math/rand` package because it provides the [pseudorandom number generation.](http://en.wikipedia.org/wiki/Pseudorandom_number_generator)\n\nNext, registered a new Pusher client with the credentials from the app we created earlier.\n\n\n\u003e  ⚠️  Replace `PUSHER_*`  keys with your app credentials.\n\nWe also created a `visitsData` type, which is a struct with two fields:\n\n\n- `Pages` - this is the number of pages visited at a given time\n- `Count` - this is the user count at a given time\n\nWe defined the main function (this is where the application starts its execution) and created a new echo instance.\n\nIn this application, because we will serve the static files that define our frontend from the backend server, we need to let Go know about them and their location. In the main function, we registered the routes that will serve these static files that we will create shortly.\n\nWe also defined a “/simulate” route that takes a `simulate` handler function and responds to the `GET` HTTP verb. Lastly, we instruct the echo instance we created to start the application and listen on the port 9000.\n\nLet’s create the `simulate` function, before the start of the main function paste the following code:\n\n``` go\n    // [...]\n    \n    // -------------------------------------------------------\n    // Simulate multiple changes to the visitor count value,\n    // this way the chart will always update with different\n    // values.\n    // -------------------------------------------------------\n    \n    func simulate(c echo.Context) error {\n        setInterval(func() {\n            s1 := rand.NewSource(time.Now().UnixNano())\n            r1 := rand.New(s1)\n            newVisitsData := visitsData{\n                Pages:   r1.Intn(100),\n                Count: r1.Intn(100),\n            }\n            client.Trigger(\"visitorsCount\", \"addNumber\", newVisitsData)\n        }, 2500, true)\n        \n        return c.String(http.StatusOK, \"Simulation begun\")\n    }\n    \n    // [...]\n```\n\nWithin the `simulate` function, we called a `setInterval` function and within it we seeded a new random number using the `time.Now()` function. We also instantiated a new `visitsData` object with the name `newVisitsData` and initialized both the `Pages` and `Count` fields using randomly generated numbers. We set the interval between running the logic to 2500ms.\n\nLastly, we use the `Trigger` method on the client object to broadcast an `addNumber` event over the `visitorsCount` channel.\n\nLet’s create the `setInterval` function before the `simulate` function paste the following code:\n\n``` go\n    func setInterval(ourFunc func(), milliseconds int, async bool) chan bool {\n    \n        // How often to fire the passed in function in milliseconds\n        interval := time.Duration(milliseconds) * time.Millisecond\n        \n        // Setup the ticker and the channel to signal\n        // the ending of the interval\n        ticker := time.NewTicker(interval)\n        clear := make(chan bool)\n        \n        // Put the selection in a go routine so that the for loop is none blocking\n        go func() {\n            for {\n                select {\n                case \u003c-ticker.C:\n                    if async {\n                        // This won't block\n                        go ourFunc()\n                    } else {\n                        // This will block\n                        ourFunc()\n                    }\n                case \u003c-clear:\n                    ticker.Stop()\n                    return\n                }\n            }\n        }()\n        \n        // We return the channel so we can pass in\n        // a value to it to clear the interval\n        return clear\n    }\n```\n\nUsing [Goroutines](https://golangbot.com/goroutines/) and Channels, we have created a `setInterval` function that works like the one in JavaScript. For its parameters, it receives the function to be called after an interval, the interval and a boolean value that determines if it runs asynchronously or not.\n\n\n## Building the frontend\n\nIn this step, we will use the received data from the backend server to represent a mathematical graph. To achieve this, we can use any of the open source libraries that support chart types, such as bar charts, pie charts, line charts and scatter charts. Here are links to a few of the popular libraries:\n\n\n- [Highcharts](http://www.highcharts.com/)\n- [Chart.js](http://www.chartjs.org/) \n- [Google Charts](https://developers.google.com/chart/)\n- [Flot](http://www.flotcharts.org/) \n- [D3 JS](http://d3js.org/) \n\nIn this tutorial, we will use Chart.js; it has a fairly simple API and renders robust charts using the HTML canvas tag. It is also able to update the chart without completely re-rendering it and this is what we need since we will be rendering Pusher updates.\n\nTo start building the frontend of our application, we will create a `public` folder in our working directory and create three files within it: \n\n```\n    $ mkdir public\n    $ cd public\n    $ touch index.html style.css app.js\n```\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!DOCTYPE\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n          \u003ctitle\u003eRealtime User Analytics\u003c/title\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway:200\"\u003e\n          \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n      \n          \u003csection class=\"subheader\"\u003e\n              \u003ch2\u003eRealtime User Traffic Analytics\u003c/h2\u003e\n              \u003cbutton id=\"getUpdates\" class=\"btn-primary\"\u003e Simulate user visits\u003c/button\u003e\n          \u003c/section\u003e\n          \n          \u003csection width=\"500px\" style=\"margin:0 auto;width: 100%;max-width: 800px\"\u003e    \n              \u003ccanvas id=\"realtimeChart\"\u003e\u003c/canvas\u003e\n          \u003c/section\u003e\n          \n          \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n          \u003cscript type=\"text/javascript\" src=\"./app.js\"\u003e\u003c/script\u003e\n          \n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the scripts part of the markup above, we pulled in the JavaScript Pusher library, [Axios](https://www.npmjs.com/package/axios), and Chart.js.\n\nIn order to style our app properly, add the following CSS into the `style.css` file the public folder:\n\n``` css\n    body{\n        margin:0;\n        padding:0;\n        font-family: Raleway;\n    }\n    \n    header{\n        background: #2b303b;\n        height: 50px;\n        width:100%;\n        display: flex;\n        color:#fff;\n    }\n    \n    .subheader{\n        margin: 20px;\n        text-align: center;\n    }\n```\n\n## Displaying realtime graph updates using Pusher\n\nIn this section, we will write the vanilla JavaScript code that will receive updates from Pusher and update the graph accordingly. We will achieve this behavior by subscribing to the unique channel where our server will be sending update events for the graph. The name of this channel is `visitorsCount` and the event we will be binding to is called `addNumber`.\n\nBecause we want to control when the realtime updates start, we will use JavaScript to target the button element — simulate user visits —  in the markup and attach an `eventListener`, so that the updates only start coming in when we click the button. When the button is clicked, our frontend will make a `GET` request, using Axios, to the “/simulate” endpoint on our backend server and the realtime updates will start.\n\nWe will also instantiate a new line chart object passed in a `chartConfig` object as an argument, this `chartConfig` object will supply the data that will define the line chart’s properties.\n\nOpen the `app.js` file and update it with the following code:\n\n``` javascript\n    document.getElementById(\"getUpdates\").addEventListener(\"click\", function(){\n        axios.get('/simulate')\n    })\n    \n    const pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    const channel = pusher.subscribe('visitorsCount');\n    \n    channel.bind('addNumber', data =\u003e {\n      if (newLineChart.data.labels.length \u003e 15) {\n        newLineChart.data.labels.shift();  \n        newLineChart.data.datasets[0].data.shift();\n      }\n    \n      newLineChart.data.labels.push(data.Count);\n      newLineChart.data.datasets[0].data.push(data.Pages);\n      newLineChart.update();\n    });\n    \n    function renderChart(userVisitsData) {\n      var ctx = document.getElementById(\"realtimeChart\").getContext(\"2d\");\n      \n      var options = {};\n      \n      newLineChart = new Chart(ctx, {\n        type: \"line\",\n        data: userVisitsData,\n        options: options\n      });\n    }\n    \n    var chartConfig = {\n      labels: [],\n      datasets: [\n         {\n            label: \"Realtime User Analytics\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(75,192,192,0.4)\",\n            borderColor: \"rgba(75,192,192,1)\",\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: \"rgba(75,192,192,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [],\n            spanGaps: false,\n         }\n      ]\n    };\n    \n    renderChart(chartConfig)\n```\n\n\u003e  ⚠️  Replace `PUSHER_APP_*`  keys with your app credentials.\n\n\n## Running the application\n\nWe can run our application with this command:\n\n```\n    $ go run graph.go\n```\n\nWe can now point our web browser to this address http://localhost:9000, at first, the graph in the window will be static but after we click on the **Simulate users visit** button, we will see this the realtime updates:\n\n![go-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/1xM5LHTn2MYQmyO24M84WI/61af7ff9f8449a3a2c258628b99bea4a/go-live-graph-demo.gif)\n\n## Conclusion\n\nIn this article, we have discussed the importance of data in today’s tech world and gone over the process of building a realtime monitoring system using Go and Pusher channels. In addition to that, we used Vanilla JavaScript to build the frontend of our application and hit an endpoint on our Go web server using Axios.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/pusher-go-realtime-graph).","metaTitle":"Create a live graph with Go","metaDescription":"Use Go and JavaScript to create a simple live graph. The graph updates in realtime as it receives new data."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mROLAeJqdUOeyyeIOaY6e","type":"Entry","createdAt":"2018-06-22T15:26:32.144Z","updatedAt":"2020-06-19T12:35:25.717Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live blog app using Swift and Go","url":"live-blog-swift-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/liveblog-swift-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-06-20","description":"Build a live blogging app for iOS with Swift. Create a backend using Go. Admin users will be able to add blog posts, with the homepage showing the updates in realtime.","prerequisite":"You will need Xcode, Go, SQLite and Cocoapods installed on your machine. Some knowledge of Swift will be helpful.","content":"Live blogs allow users to follow events live without audio or video. It's particularly useful when you are in situations where you cannot consume audio/video media. Live blogs have been used to cover things like football commentary, political commentary, and more.\n\nIn this article, we are going to consider how to build a live blogging application. We will be building it using Swift for iOS and we will use Go as the backend language for the application.\nWhen we are done with the application, this is what it will look like:\n\n![swift-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/DXndn8OaXYOsmIYImoc4g/57197aefae945c69127b5289f6566b3c/swift-liveblog-demo.gif)\n\n## Prerequisites\n\nTo get started you need the following:\n\n\n- Xcode (v9.x) running on your machine. [Download Xcode](https://developer.apple.com/xcode/).\n- Go (v0.10 or later) installed on your machine. [Installation guide](https://golang.org/doc/install#install).\n- SQLite installed on your machine.\n- Knowledge of the Swift programming language.\n- Basic knowledge of the Go programming language.\n- Knowledge of using the Xcode IDE.\n- Cocoapods installed on your machine. [Installation guide](https://guides.cocoapods.org/using/getting-started.html).\n  \n\nLet's get started.\n\n## Creating the Swift application\n\nLaunch Xcode and create a new 'Single View App' project. We will creatively name ours ... *drum rolls* ... LiveBlog. Next, close Xcode and `cd` to the root directory of your Xcode project and run the following command:\n\n```\n    $ pod init\n```\n\nThis command will create a new `Podfile` in the root of your project. Open the `Podfile` in your code editor and paste the following code:\n\n```\n    platform :ios, '11.0'\n    \n    target 'LiveBlog' do\n      use_frameworks!\n    \n      pod 'Alamofire', '~\u003e 4.7.2'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'PushNotifications', '~\u003e 0.10.8'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\nNext, run the following command to install the packages listed above using Cocoapods:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, you will see a `LiveBlog.xcworkspace` file in the project directory. Open this file in Xcode.\n\nLet's create our application's storyboard. Open the `Main.storyboard` file and what we want to do is create something similar to the board below:\n\n![swift-liveblog-storyboard](//images.ctfassets.net/1es3ne0caaid/4KTjm5s42c84E4OU0EyqcW/9fd1fe99e09b565aec3f032cd4a34b7d/swift-liveblog-storyboard.png)\n\nTo create this, we added a new navigation controller and made it the entry point of the storyboard. We then assigned a reuse identifier to the cell on the table view controller called post. We also set the title of the view controller using the interface builder.\n\nNext, create a table view controller called `PostsTableViewController` and set this as the custom class for the table view controller in the main storyboard.\n\nIn the `PostsTableViewController` paste in the following code:\n\n``` swift\n    import UIKit\n    import Alamofire\n    import NotificationBannerSwift\n    \n    struct Post: Codable {\n        let id: Int64\n        let content: String\n    }\n    \n    struct Posts: Codable {\n        var items: [Post]\n    }\n    \n    class PostsTableViewController: UITableViewController {\n    \n        var posts = Posts(items: [])\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n    \n            Alamofire.request(\"http://127.0.0.1:9000/posts\").validate().responseJSON { resp in\n                guard resp.result.isSuccess, let data = resp.data else {\n                    return StatusBarNotificationBanner(title: \"Unable to fetch posts\", style: .danger).show()\n                }\n    \n                if let posts = try? JSONDecoder().decode(Posts.self, from: data) {\n                    self.posts = posts\n                    self.tableView.reloadData()\n                }\n            }\n        }\n    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return posts.items.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"post\", for: indexPath)\n            let post = posts.items[indexPath.row]\n    \n            cell.textLabel?.text = post.content\n    \n            return cell\n        }\n    \n    }\n```\n\nAbove we have a two `Codable` structs for the `Post` and `Posts` objects. We will decode the response from the API to these objects and make working with JSON responses easier.\n\n**Recommended:** [**Decoding JSON using Codable in Swift 4**](https://blog.pusher.com/swift-4-decoding-json-codable/)\n\nIn our `viewDidLoad` method, we make a request to the API to fetch the posts and then we save them to the `posts` property of the controller then we reload the `tableView`.\nThe rest of the methods in the controller should be familiar to you. They are used to override the table view's rendering.\n\n### Adding realtime functionality\nBecause we are creating a live blog, we want to add the realtime functionality to the application so that when a new post is made, we get an instant update.\n\nIn the `PostsTableViewController`, import the Pusher Swift SDK:\n\n``` swift\n    import PusherSwift\n```\n\nNow in the `viewDidLoad` method, we can add our Pusher functionality. At the top of the method after `super.viewDidLoad()`, add the following code:\n\n``` swift\n    let pusher = Pusher(\n        key: \"PUSHER_APP_KEY\", \n        options: PusherClientOptions(\n            host: .cluster(\"PUSHER_APP_CLUSTER\")\n        )\n    )\n    \n    let channel = pusher.subscribe(\"live-blog-stream\")\n    \n    let _ = channel.bind(eventName: \"new-post\") { data in\n        if let data = data as? [String: AnyObject] {\n            if let id = data[\"id\"] as? Int64, let content = data[\"content\"] as? String {\n                self.posts.items.insert(Post(id: id, content: content), at: 0)\n                self.tableView.reloadData()\n            }\n        }\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the value from your Pusher dashboard.\n\nIn the code above, we create an instance of the Pusher SDK and then we `subscribe` to the `live-blog-stream` channel. We then `bind` a callback to the `new-post` event on the channel.\n\nWhenever this event is triggered, the callback is fired. In the callback, we update the `posts` with the new post that was passed with the event then we reload the `tableView` so the changes are reflected immediately.\n\nWith those few lines, we have implemented realtime functionality to the application. Easy right?\n\n## Creating the Go backend for our realtime application\n\nThe next thing we want to do is create the backend for our application. We will make it as simple as possible so we can easily demonstrate how to trigger events on a channel in Pusher using Go.\n\nCreate a new project directory for the Go application. Let's call it `liveblog-backend` and in that directory create a `public` directory:\n\n```\n    $ mkdir liveblog-backend\n    $ cd liveblog-backend\n    $ mkdir public\n```\n\nIn the root directory, create a new file called `main.go` and in here is where all our Go code will reside.\n\nOpen the `main.go` file in your favorite editor and paste the following code into the file:\n\n``` go\n    package main\n    \n    import (\n        \"database/sql\"\n        \"net/http\"\n    \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        _ \"github.com/mattn/go-sqlite3\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    func main() {\n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        db := initialiseDatabase(\"./storage.db\")\n        migrateDatabase(db)\n    \n        e.File(\"/admin\", \"public/admin.html\")\n        e.GET(\"/posts\", getPosts(db))\n        e.POST(\"/posts\", savePost(db))\n    \n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nAbove, we import the packages we will need for the Go application to function properly. We also defined a `main` function which will be the sole entry point of the application.\n\nIn the `main` function, we instantiated the [Echo framework](https://echo.labstack.com/) and we added some middlewares to the instance of `echo`.\n\nNext, we initialized the database and ran a migration on the database. This will create a `storage.db` file in the root directory. This is the file SQLite will use to operate. Finally, we defined some routes for our application and specified the port we want our application to start on, 9000.\nIn the `main` function, we referenced some functions we had not created so let's add these functions.\n\nIn the `main.go` file, add the following above the `main` function:\n\n``` go\n    func initialiseDatabase(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        if db == nil {\n            panic(\"db nil\")\n        }\n    \n        return db\n    }\n    \n    func migrateDatabase(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS posts(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    content TEXT\n            );\n    `\n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n    \n    func getPosts(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            rows, err := db.Query(\"SELECT * FROM posts ORDER BY id DESC\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer rows.Close()\n    \n            result := PostCollection{}\n    \n            for rows.Next() {\n                post := Post{}\n                err2 := rows.Scan(\u0026post.ID, \u0026post.Content)\n                if err2 != nil {\n                    panic(err2)\n                }\n    \n                result.Posts = append(result.Posts, post)\n            }\n    \n            return c.JSON(http.StatusOK, result)\n        }\n    }\n    \n    func savePost(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            postContent := c.FormValue(\"content\")\n            stmt, err := db.Prepare(\"INSERT INTO posts (content) VALUES(?)\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer stmt.Close()\n    \n            result, err := stmt.Exec(postContent)\n            if err != nil {\n                panic(err)\n            }\n    \n            insertedID, err := result.LastInsertId()\n            if err != nil {\n                panic(err)\n            }\n    \n            post := Post{\n                ID:      insertedID,\n                Content: postContent,\n            }\n    \n            client.Trigger(\"live-blog-stream\", \"new-post\", post)\n    \n            return c.JSON(http.StatusOK, post)\n        }\n    }\n```\n\nAbove, we have four functions. The first is the `initialiseDatabase` function. We use this to create the database file if it does not exist and then create a connection to the database once it exists. The `migrateDatabase` function does just what the name suggests. It executes migrations for the database if it was not previously run.\n\nThe `getPosts` function gets the list of posts from the database and returns it as a JSON response. The `savePost` function saves a new post to the database and triggers an update to Pusher on the `live-blog-stream` channel.\n\nThe `savePost` function is referencing a Pusher client instance that does not exist so let's create that. In the `main.go` file right after the `import` statements, add the following:\n\n``` go\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys from your Pusher application dashboard.\n\nIn the above, we instantiate the Pusher Go client with the credentials from the dashboard. This will make it possible to trigger events using the Pusher instance.\n\nThe final thing we want to do is add the object structures for our `Post` and `PostCollection`. In the same `main.go` file, add the following code below the Pusher instance above:\n\n``` go\n    // Post type\n    type Post struct {\n        ID      int64  `json:\"id\"`\n        Content string `json:\"content\"`\n    }\n    \n    // PostCollection type\n    type PostCollection struct {\n        Posts []Post `json:\"items\"`\n    }\n```\n\nNow save and close the file.\n\nCreate a new `admin.html` file in the `public` directory and paste the following into it:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003ctitle\u003eAdmin Panel\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003cstyle\u003e\n            .container {\n                max-width: 500px;\n            }\n            .logo-space {\n                text-align: center;\n                padding: 50px 0;\n                background-color: #bada55;\n                margin: 10px 0;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"logo-space\"\u003e\n                    \u003ch1\u003eLive Blog\u003c/h1\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"alert alert-success\" role=\"alert\" v-show=\"successfulPost\"\u003e\n                    Post added successfully!\n                \u003c/div\u003e\n                \u003cform action=\"/posts\" method=\"POST\" id=\"post-stuff\" v-on:submit.prevent=\"submitForm\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003ctextarea class=\"form-control\" v-model=\"content\" placeholder=\"Enter Post\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \u003cinput type=\"submit\" class=\"form-control btn btn-primary\" name=\"submit\" value=\"Update Stream\"\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n            new Vue({\n                el: \"#app\",\n                data: {\n                    content: \"\",\n                    successfulPost: false\n                },\n                methods: {\n                    submitForm() {\n                        if (this.content.length \u003e 0 \u0026\u0026 this.content !== \"\") {\n                            let data = new FormData()\n                            data.append(\"content\", this.content)\n    \n                            axios.post(\"/posts\", data).then(res =\u003e {\n                                this.content = \"\"\n                                this.successfulPost = true\n                                setTimeout(() =\u003e this.successfulPost = false, 3000)\n                            })\n                        }\n                    }\n                }\n            })\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code above is for the admin page where we can add our new posts. This will then make a POST request to the API to add a new post to the database. When the post is added to the database, an event will be triggered by the Pusher Go client. This event will then be picked up by the Swift application and the iOS app will be updated in realtime.\n\nSave the file and execute the following command to run our Go application:\n\n```\n    $ go run main.go\n```\n\nThis will start a server on port 9000.\n\n## Testing our live blogging application\n\nThe next thing we need to do is test our application. Open your project in Xcode using the `.xcworkspace` file. Before building the application though, we need to do one last thing. Open the `info.plist` file and apply the following changes:\n\n![swift-liveblog-info-plist](//images.ctfassets.net/1es3ne0caaid/3soymv0P2Miks2EsGQEEOk/a8fad768891f219b1ae10f7710047207/swift-liveblog-info-plist.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n![swift-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/DXndn8OaXYOsmIYImoc4g/57197aefae945c69127b5289f6566b3c/swift-liveblog-demo.gif)\n\n## Conclusion\n\nIn this article, we have seen how we can easily create a live blog using Swift, Go and Pusher Channels.\n\nPusher Channels makes it very easy to implement realtime features into almost any application in all languages. You should check out the [documentation](https://pusher.com/docs) here to get started.\nThe source code for this article is available on [GitHub](https://github.com/neoighodaro/liveblog-swift-go-pusher).","metaTitle":"Create a live blog app using Swift and Go","metaDescription":"Use Swift and Go to create an iOS app that allows admins to publish blog posts quickly. The homepage shows new posts in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1V9IMy4fvOuKCyY4462mCE","type":"Entry","createdAt":"2018-06-22T15:27:13.678Z","updatedAt":"2020-06-19T12:34:30.182Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live blog using Go and Vue.js","url":"live-blog-go-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/liveblog-go-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-06-20","description":"Build a live blogging app using Go and Vue.js. Admin users can post blog updates, and readers can see posts appear in realtime.","prerequisite":"You will need Go 0.10+ and SQLite 3+ set up on your machine.","content":"Live reporting is nothing new and can take different forms. It can be live video streaming, live audio streaming or live blogging. Live blogging while being the most basic of the group, is also the one that saves the most data. \n\nSports websites like Goal.com implement live blogging as a way of showing live commentary on their platform.  This technique is also being used in the current (at the time of writing this article) FIFA World Cup going on in Russia. \n\nIn this article, we will see how we can build a live blogging platform using Go, Vue and Pusher Channels.\n\nThis is a preview of what we will be building:\n\n![go-vue-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/5VVLlqx7zieoQoSY2kWkyA/d632e8a489c4ba8841d56a7a1d100b24/go-vue-liveblog-demo.gif)\n\n## Prerequisites\n\nTo follow along you need to have the following requirements:\n\n\n- Basic knowledge of the [Go](https://golang.org/) programming language.\n- Basic JavaScript (Vue.js) knowledge.\n- Go (version \u003e= 0.10.x) installed on your machine. [Check out the installation guide](https://golang.org/doc/install).\n- SQLite (version \u003e= 3.x) installed on your machine.\n\nLet’s get started.\n\n\n## Getting a Pusher Channels application\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\nNow that we have our application, let’s move on to the next step\n\n## Creating our Go application\n\nThe next thing we want to do is create the Go application. In your terminal, `cd` to your `$GOPATH` and create a new directory there.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir liveblog\n    $ cd liveblog\n```\n\n\u003e 💡 It is recommended that you place the source code for your project in the `src` subdirectory (e.g., `$GOPATH/src/your_project` or `$GOPATH/src/github.com/your_github_username/your_project`.\n  \n\nNext, we will create some directories to organize our application:\n\n```\n    $ mkdir database\n    $ mkdir public\n    $ mkdir public/uploads\n```\n\nThe commands above will create a `database` and `public` directory, and also an `uploads` directory inside the `public` directory. We will store our database file inside the `database` directory. We will keep our public files, HTML and images, inside the `public` and `uploads` directory. Create a new `index.html` file in the `public` directory that was created.\n\nNow let’s create our main Go file. We will try to keep everything simple by placing all our source code in a single file. Create a `main.go` file in the project root.\nIn the file paste the following:\n\n``` go\n    package main\n    \n    import (\n        \"database/sql\"\n        \"net/http\"\n    \n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        _ \"github.com/mattn/go-sqlite3\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n```\n\nAbove we have imported some packages we will be needing to work on our live blog. We need the `database/sql` for working with SQL, and the `net/http` will be used for our HTTP status codes.\n\nAbove we also have some external packages imported. The `labstack/echo` package is the [Echo framework](https://github.com/labstack/echo) that we will be using. We also have the `mattn/go-sqlite3` package for working with SQLite. And finally, we imported the `pusher/pusher-http-go` package which we will use to trigger events to Pusher Channels.\n\n### Importing the external Go packages\n\nBefore we continue, let’s pull in these packages using our terminal. Run the following commands below to pull the packages in:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/mattn/go-sqlite3\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e Note that the commands above will not return any confirmation output when it finishes installing the packages. If you want to confirm the packages were indeed installed you can just check the `$GOPATH/src/github.com` directory.\n  \n\nWhen the packages have been pulled in successfully, we can go ahead and create our `main` function. This will be the entry point of our application. In this function, we will set up our applications database, middleware, and routes.\n\nOpen the `main,go` file and paste the following code:\n\n``` go\n    func main() {\n        e := echo.New()\n    \n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n    \n        db := initialiseDatabase(\"./database/storage.db\")\n        migrateDatabase(db)\n    \n        e.File(\"/\", \"public/index.html\")\n        e.File(\"/admin\", \"public/admin.html\")\n        e.GET(\"/posts\", getPosts(db))\n        e.POST(\"/posts\", savePost(db))\n    \n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nIn the code above, we instantiated our database using the file path to the database file and passing that to the `initialiseDatabase` function. This will create the SQLite file if it did not already exist. We then run the `migrateDatabase` function which migrates the database.\n\nNext, we instantiate Echo and register some middlewares and routes. The routes will handle client requests and return responses. The first handler is the File handler. We use this to serve the `index.html` and `admin.html` file. The `index.html` will be the entry point to the application from the frontend while the `admin.html` will be the place where the admin can update the posts.\n\nWe also have the `/posts` route which accepts a `POST` and `GET` request. We need these routes to act like API endpoints that are used for creating new posts and viewing all the available posts.\n\nFinally, we use `e.Start` to instruct the Go web server to run on port 9000 when it is started.\nAt this point, we have not created most of the functions we referenced in the `main` function so let’s do so now.\n\n### Creating our database management functions\n\nIn the `main` function we referenced `initialiseDatabase` and `migrateDatabase` functions. Let’s create them now. In the `main.go` file, paste the following functions above the `main` function:\n\n``` go\n    func initialiseDatabase(filepath string) *sql.DB {\n        db, err := sql.Open(\"sqlite3\", filepath)\n    \n        if err != nil {\n            panic(err)\n        }\n    \n        if db == nil {\n            panic(\"db nil\")\n        }\n    \n        return db\n    }\n    \n    func migrateDatabase(db *sql.DB) {\n        sql := `\n            CREATE TABLE IF NOT EXISTS posts(\n                    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n                    content TEXT\n            );\n    `\n        _, err := db.Exec(sql)\n        if err != nil {\n            panic(err)\n        }\n    }\n```\n\nIn the `initialiseDatabase` function, we create an instance of the SQLite database using the database file and return that instance. In the `migrateDatabase` function, we use the instance of the database returned in the previous function to execute the migration SQL.\n\nLet’s create the data structure for our post and post collection.\n\n### Creating our data structures\n\nNext, let's create the data structure for our object types. We will create a `Post` structure and a `PostCollection` structure. The `Post` struct will define how a typical post will be represented while the `PostCollection` will define how a collection of posts will be represented.\n\nOpen the `main.go` file and paste the following code above the `initialiseDatabase` function:\n\n``` go\n    // Post type\n    type Post struct {\n        ID      int64  `json:\"id\"`\n        Content string `json:\"content\"`\n    }\n    \n    // PostCollection type\n    type PostCollection struct {\n        Posts []Post `json:\"items\"`\n    }\n```\n\n### Creating our route handler functions\n\nNext, let’s create the functions for our routes. Open the `main.go` file and paste the following file inside it:\n\n``` go\n    func getPosts(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            rows, err := db.Query(\"SELECT * FROM posts ORDER BY id DESC\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer rows.Close()\n    \n            result := PostCollection{}\n    \n            for rows.Next() {\n                post := Post{}\n                err2 := rows.Scan(\u0026post.ID, \u0026post.Content)\n                if err2 != nil {\n                    panic(err2)\n                }\n    \n                result.Posts = append(result.Posts, post)\n            }\n    \n            return c.JSON(http.StatusOK, result)\n        }\n    }\n    \n    func savePost(db *sql.DB) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            postContent := c.FormValue(\"content\")\n            stmt, err := db.Prepare(\"INSERT INTO posts (content) VALUES(?)\")\n            if err != nil {\n                panic(err)\n            }\n    \n            defer stmt.Close()\n    \n            result, err := stmt.Exec(postContent)\n            if err != nil {\n                panic(err)\n            }\n    \n            insertedID, err := result.LastInsertId()\n            if err != nil {\n                panic(err)\n            }\n    \n            post := Post{\n                ID:      insertedID,\n                Content: postContent,\n            }\n    \n            return c.JSON(http.StatusOK, post)\n        }\n    }\n```\n\nIn the `getPosts` method above, we ran a query to fetch all the latest posts from the database and return them as a JSON response to the client. In the `savePost` method we run the query to insert a new record in the posts table and return a JSON response to the client.\n\n### Adding realtime support to our Go application\n\nThe next thing we want to do is trigger an event when a new post is added to the posts table. For this, we will be using the Pusher Go HTTP library.\n\nIn the `main.go` file paste the following above the type definitions for the `Post` and `PostCollection`:\n\n``` go\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n```\n\nThis will create a new Pusher client instance. We can then use this instance to trigger notifications to different channels we want. Remember to replace the `PUSHER_APP_*` keys with the keys on your Pusher app dashboard.\n\nNext, in the `savePost` function in the `main.go` file and right before the `return` statement at the bottom of the function, paste the following code:\n\n```\n    client.Trigger(\"live-blog-stream\", \"new-post\", post)\n```\n\nThis is the code that triggers a new event when a new post is added to the live blog.\n\nThat will be all for our Go application.\n\nYou can build your application and compile it into a binary using the `go build` command. However, for this tutorial we will just run the binary temporarily:\n\n```\n    $ go run main.go\n```\n\nThis command will temporarily build and run our Go application.\n\n## Building our frontend\n\nWe have built the Go backend of our application and now it's time to build the frontend. We will be using the Vue.js framework and the [Axios](https://github.com/axios/axios) library to send HTTP requests.\n\nOpen the `index.html` file and in there paste the following code:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eLive Blog\u003c/title\u003e\n        \u003cstyle\u003e\n        .container {\n            max-width: 500px;\n        }\n        .logo-space {\n            text-align: center;\n            padding: 50px 0;\n            background-color: #bada55;\n            margin: 10px 0;\n        }\n        .live-posts {\n            margin: 0;\n            padding: 0;\n            list-style: none;\n        }\n        .live-posts \u003e li {\n            padding: 10px;\n            background-color: #d8d8d8;\n            margin-bottom: 10px;\n        }\n        .power {\n            text-align: center;\n            margin-top: 20px;\n            font-size: 12px;\n            color: #999;\n        }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"logo-space\"\u003e\n                    \u003ch1\u003eLive Commentary\u003c/h1\u003e\n                \u003c/div\u003e\n                \u003cul class=\"live-posts\"\u003e\n                    \u003cli v-for=\"post in posts\"\u003e{{ post.content }}\u003c/li\u003e\n                \u003c/ul\u003e\n                \u003cdiv class=\"power\"\u003e\n                    Powered by \u003ca href=\"https://pusher.com\"\u003ePusher\u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe HTML above defines the visual elements of our application. Let's add some Vue code. In the same file, paste the following code before the closing `body` tag:\n\n``` javascript\n    \u003cscript\u003e\n        new Vue({\n            el: '#app',\n            data: {\n                posts: []\n            },\n            created() {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n                \n                let channel = pusher.subscribe('live-blog-stream')\n    \n                channel.bind('new-post', post =\u003e this.posts.unshift(post));\n    \n                axios.get(\"/posts\").then(res =\u003e {\n                    if (res.data.items) {\n                        this.posts = res.data.items\n                    }\n                })\n            }\n        })\n    \u003c/script\u003e\n```\n\nAbove we created a Vue instance and stored the properties `posts`. The `posts` property stores the post list.\n\nIn the `created` method we create an instance of our Pusher library. We then listen on the `live-blog-stream` channel for the `new-post` event. When this event is triggered we append the new post from the event to the `posts` list.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the one from your Pusher dashboard.\n\nFinally, let’s create the admin panel where we can update the commentaries from. Create an `admin.html` file in the `public` directory and paste the following into the file:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eAdmin Panel\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003e\n        \u003cstyle\u003e\n        .container {\n            max-width: 500px;\n        }\n        .logo-space {\n            text-align: center;\n            padding: 50px 0;\n            background-color: #bada55;\n            margin: 10px 0;\n        }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n    \n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"logo-space\"\u003e\n                    \u003ch1\u003eLive Commentary\u003c/h1\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"alert alert-success\" role=\"alert\" v-show=\"successfulPost\"\u003e\n                    Post added successfully!\n                \u003c/div\u003e\n                \u003cform action=\"/posts\" method=\"POST\" id=\"post-stuff\" v-on:submit.prevent=\"submitForm\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003ctextarea class=\"form-control\" v-model=\"content\" placeholder=\"Enter Post\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \u003cinput type=\"submit\" class=\"form-control btn btn-primary\" name=\"submit\" value=\"Update Stream\"\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n        new Vue({\n            el: \"#app\",\n            data: {\n                content: \"\",\n                successfulPost: false\n            },\n            methods: {\n                submitForm() {\n                    if (this.content.length \u003e 0 \u0026\u0026 this.content !== \"\") {\n                        let data = new FormData()\n                        data.append(\"content\", this.content)\n                        axios.post(\"/posts\", data).then(res =\u003e {\n                            this.content = \"\"\n                            this.successfulPost = true\n                            setTimeout(() =\u003e this.successfulPost = false, 3000)\n                        })\n                    }\n                }\n            }\n        })\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove we have a simple admin panel with an input to update the blog. It uses [Axios](https://github.com/axios/axios) to make a POST request to the API to update the blog.\n\nThat’s all for the frontend, you can save the file and head over to your web browser. Visit http://127.0.0.1:9000 to see your application in action.\n\nHere’s how it will look again:\n\n![go-vue-liveblog-demo](//images.ctfassets.net/1es3ne0caaid/5VVLlqx7zieoQoSY2kWkyA/d632e8a489c4ba8841d56a7a1d100b24/go-vue-liveblog-demo.gif)\n\n## Conclusion\n\nIn this article, we have considered how we can create a live blogging platform using Go, Pusher Channels and Vue. As seen from the code samples above, it is very easy to get started with Pusher Channels.\n\nCheck the [documentation](https://pusher.com/docs) to see other ways you can use Pusher Channels to provide realtime features to your users.\n\nThe source code for this application is available on [GitHub](https://github.com/neoighodaro/liveblog-go-pusher).","metaTitle":"Create a live blog using Go and Vue.js","metaDescription":"Use Go and Vue.js to build a live blogging application. Admin users can add posts, and the homepage shows the updates in realtime."}}],"defaultValue":"Go","queryType":"tag","pages":3,"route":"/tutorials","query":{"tag":"Go","page":"2"}}},"page":"/tutorials","query":{"tag":"Go","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Go&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:27:09 GMT -->
</html>