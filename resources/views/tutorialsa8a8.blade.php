<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Java&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:52 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">10</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Java</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials36d1.html?tag=Java" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials2101.html?product=Beams&amp;tag=Java" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Java"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/instagram-clone-ionic-part-4.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">CSS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Instagram clone with Ionic: Part 4 - Testing your Ionic application on mobile devices</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functional...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-mysql-java.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting data in realtime from MySQL with Java</h3><p class="css-k12xad e5jrto45">Use MySQL replication logging to publish database changes to a React-based web dashboard.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-struts.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Java</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using Struts 2</h3><p class="css-k12xad e5jrto45">In this tutorial, discover the basics of how to add chat to a Java Struts 2 application, using Pusher for the realtime f...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed in Android </h3><p class="css-k12xad e5jrto45">Discover how you can create a realtime activity feed for your Android app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Android </h3><p class="css-k12xad e5jrto45">In this tutorial, build a simple live table for Android devices with Java.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/graph-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Realtime Graph</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime graph in Android</h3><p class="css-k12xad e5jrto45">Create a graph that updates in realtime in your Android device using Java and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-text-editor-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a collaborative text editor in Android</h3><p class="css-k12xad e5jrto45">Build a collaborative text editor in Android, using Pusher to make the collaboration part easy.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator in Android</h3><p class="css-k12xad e5jrto45">Combine a typing indicator feature into your Android app using Java and JavaScript.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed in Android</h3><p class="css-k12xad e5jrto45">Build a photo feed like Instagram or Flickr for Android with realtime functionality. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsa8a8.html?product=Channels&amp;tag=Java&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsf5d2.html?product=Channels&amp;tag=Java&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorialsf5d2.html?product=Channels&amp;tag=Java&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":10,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7yewCXxjJklEoqK6pkJvnA","type":"Entry","createdAt":"2019-07-15T19:05:47.959Z","updatedAt":"2019-07-15T19:05:47.959Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Instagram clone with Ionic: Part 4 - Testing your Ionic application on mobile devices","url":"instagram-clone-ionic-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/ionic-insta-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rfAQF4XNC6QwAiKgA4WUY","type":"Entry","createdAt":"2018-02-12T14:53:33.719Z","updatedAt":"2018-02-26T12:31:13.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"CSS","url":"css","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-07-15","description":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In this fourth and final part, make your servers publicly accessible so you could test the application on mobile devices.","prerequisite":"You will need Node 10+, Node Package Manager 6+, Cordova 8+ and Docker 18+ installed on your machine.","content":"Through the series, our GraphQL and event server have been accessible via `localhost`. Since we have been viewing the application on our local browser, the browser can access the localhost without any issues. These servers need to be accessible on a public URL so that the mobile device can connect to them.\n\n\n## Prerequisites\n- You should have followed through the earlier parts of the series.\n- Basic knowledge of JavaScript.\n- [Node](http://www.nodejs.org) installed on your machine (v10.13.0)\n- [Node Package Manager](https://www.npmjs.com/) installed on your machine (v 6.4.1)\n- [Cordova](https://cordova.apache.org/) installed on your machine (v 8.1.2)\n- Docker installed on your machine. (version 18.09.2) Download [here](https://www.docker.com/community-edition).\n\n\n## Using localhost.run to share your localhost\n\nTo share your localhost on a public URL, let’s use [localhost.run](https://localhost.run). There are no downloads required to use this service. Just open your terminal and paste a code:\n\n```\n    ssh -R 80:localhost:\u003cPORT_YOU_WANT_TO_SHARE\u003e ssh.localhost.run\n```\n\n\u003e Remember to replace `PORT_YOU_WANT_TO_SHARE` with the actual port on the local server your application is running on.\n\n\n## Making the GraphQL server publicly accessible\n\nNow, your GraphQL server was accessible on port 4466 of your local machine, go ahead and then run this in the terminal:\n\n```\n    ssh -R 80:localhost:4466 ssh.localhost.run\n```\n\n\u003e Ensure that the GraphQL server is running by checking docker on your machine\n\nThis command returns a URL as a response. Go ahead and then paste the URL in your `app.module.ts` as the link to your GraphQL server:\n\n```typescript\n    // src/app/app.module.ts\n    \n    // [...] \n    \n    export class AppModule {\n      constructor(apollo: Apollo, httpLink: HttpLink) {\n        apollo.create({\n          link: httpLink.create({ uri: 'LINK_TO_PUBLICLY_ACCESIBLE_URL' }), // uri specifies the endpoint for our graphql server\n          cache: new InMemoryCache()\n        })\n      }\n    }\n```    \n\n\n## Making the event server publicly accessible\n\nEarlier in the series, we created the event server and served it on port 3128 of the localhost. To make it public accessible too, run this command:\n\n```\n    ssh -R 80:localhost:3128 ssh.localhost.run\n```\n\n\u003e Ensure that the event server is still running. If it isn’t running, navigate to the `server/` of the project and run `node server.js`\n\nYou will be provided with a publicly accessible URL for the event server. Now, let’s update the places where requests were made to the event server in the code.\n\nFirst, update the `uploadPost` method in the `CreatePost` page:\n\n```typescript\n    // src/pages/create-post/create-post.ts\n    \n    // [...]\n    \n    export class CreatePostPage {\n      // [...]\n    \n      public uploadPost() {\n        this.apollo.mutate({\n          mutation: createUserPost,\n          variables: {\n            image_url: this.image_url,\n            description: this.description,\n            likes: 10,\n            postedAt: this.posted_at,\n            user: { \"connect\": { \"id\": this.user_id } }\n          }\n        }).subscribe((data) =\u003e {\n          console.log('uploaded successfuly');\n          // after sucessful upload, trigger pusher event\n          let post_response: any = data;\n          this.http.post('LINK_TO_PUBLICLY_ACCESSIBLE_URL/trigger-post-event', post_response.data.createPost)\n            .subscribe(() =\u003e {\n              this.showAlert('Post Shared', 'Your post has been shared with other users');\n              this.navCtrl.push(HomePage);\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'There was an error sharing your post, please retry');\n          console.log('there was an error sending :the query', error);\n        })\n      }\n    \n      // [...]\n    }\n```\n\nAlso, go ahead to update the `postComment` method in the `CommentPage`:\n\n```typescript\n    // src/pages/comment/comment.ts\n    \n    // [...]\n    \n    export class CommentPage {\n      // [...]\n    \n      public postComment() {\n        this.apollo.mutate({\n          mutation: makeComment,\n          variables: {\n            message: this.user_comment,\n            postedAt: (new Date()).toISOString(),\n            user: { connect: { id: \"YOUR_USER_ID_FROM_GRAPHQL_SERVER\" } },\n            post: { connect: { id: this.post_id } }\n          }\n        }).subscribe((data) =\u003e {\n          let post_response: any = data;\n          // after successful upload, trigger new comment event\n          this.http.post('LINK_TO_PUBLICLY_ACCESSIBLE_URL/trigger-comment-event', post_response.data.createComment)\n            .subscribe(() =\u003e {\n              this.showAlert('Success', 'Comment posted successfully');\n            });\n        }, (error) =\u003e {\n          this.showAlert('Error', 'Error posting comment');\n        });\n      }\n    \n      // [...]\n    }\n```\n\nNow that this is all done, we can access both the GraphQL server and event server anywhere the code is run.\n\nNow, navigate to the root directory of your project and run your application:\n\n```\n    ionic serve -c\n```\n\n## Using the IonicDevApp\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Ensure that your device and computer are on the same network and you should see this demo application listed there:\n\n\n![instagram-clone-ionic-testing-img1](//images.ctfassets.net/1es3ne0caaid/4lxO3Esb7emGocD27lhtHh/1e6d9a96e8ea8fe1fd802025de0d711b/instagram-clone-ionic-testing-img1.png)\n\nNow, testing with the device, we get the following:\n\n\n![instagram-clone-ionic-testing-img2](//images.ctfassets.net/1es3ne0caaid/2Uhn25upplCXU6iqyfadGh/92b3d3b1fd292f82349c25bce0023faa/instagram-clone-ionic-testing-img2.png)\n![instagram-clone-ionic-testing-img3](//images.ctfassets.net/1es3ne0caaid/6gYK4Js7v0ntF3UXwhaxnO/caf9582f605168f8cb54e474a3e280e3/instagram-clone-ionic-testing-img3.png)\n\n\n\n![instagram-clone-ionic-testing-img4](//images.ctfassets.net/1es3ne0caaid/36egj1E86rMXIeLUUCjhKR/6b8f5656c0e7dcbf2955ae4b07649ddf/instagram-clone-ionic-testing-img4.png)\n![instagram-clone-ionic-testing-img5](//images.ctfassets.net/1es3ne0caaid/1wh9dpUDH4P7aI8UsyEJpq/3f8416656595940fb1b6cefd0af4121d/instagram-clone-ionic-testing-img5.png)\n\n\n![instagram-clone-ionic-testing-img6](//images.ctfassets.net/1es3ne0caaid/36bEcaL8xNWD7uqYYn8mvl/bcda487222cf8b454f33ad01f5509d2f/instagram-clone-ionic-testing-img6.gif)\n\n\nHead over [here](https://ionicframework.com/docs/v3/intro/deploying/) for more information on how to deploy to target devices.\n\n\n## Conclusion\n\nIn this four-part series, we walked through building a simple Instagram clone with Ionic. In the [first part](https://pusher.com/tutorials/instagram-clone-ionic-part-1) of the series, we looked at how to build the interface of the application. In the [second part](https://pusher.com/tutorials/instagram-clone-ionic-part-2), we went through an introduction to GraphQL and how to fetch data dynamically in the application. The [third part](https://pusher.com/tutorials/instagram-clone-ionic-part-3) of the series walked through uploading posts and comments from the application using [Cloudinary](https://cloudinary.com) and Pusher to enable realtime functionality. Finally, in this part of the series, we looked at steps to making your servers publicly accessible so we could test the application on mobile devices.\n\nFeel free to use the concepts learned in this series when you’re building your own applications. Here’s a link to the full [GitHub](https://github.com/oreHGA/ionic-insta-clone) repository.","metaTitle":"Build an Instagram clone with Ionic - Part 4","metaDescription":"This four part series will walk you through building a simple Instagram clone with Ionic, and adding realtime functionalities. In this fourth and final part, make your servers publicly accessible so you could test the application on mobile devices."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Ok9wy2o0cWyQaAW880mmi","type":"Entry","createdAt":"2018-05-06T17:29:22.639Z","updatedAt":"2018-05-06T17:29:22.639Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting data in realtime from MySQL with Java","url":"realtime-mysql-java","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/realtime-mysql-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-05-04","description":"Use MySQL replication logging to publish database changes to a React-based web dashboard.","prerequisite":"To follow this tutorial you will need some knowledge of Java programming and MySQL management tasks. You will need the Java JDK, Maven, MySQL and Node.js installed on your machine. ","content":"Applications are more complex than ever before.\n\nAnd it’s not only about the increasing number of users that must be handled or reducing response times.\n\nIf your application has a database, probably you’ll need its data in other places as soon as it goes in.\n\nIn this context, [change data capture](https://en.wikipedia.org/wiki/Change_data_capture) is the approach you use to capture and deliver the changes in the database to other sources.\n\nIn this tutorial, you’re going to learn how to stream, in realtime, the changes made to a table in a MySQL database to a React app. Something like this:\n\n![java-mysql-react-demo](//images.ctfassets.net/1es3ne0caaid/71VsGknSCI0QOgE4CCkEmy/beea6a69b0be15e1b421f7fda9af66c9/java-mysql-react-demo.gif)\n\n## Prerequisites\n\nHere’s what you need to have installed to follow this tutorial:\n\n- [Java JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html) (8 or superior)\n- [Maven](https://maven.apache.org/download.cgi)\n- [MySQL Community Server](https://dev.mysql.com/downloads/mysql/) 5.7 (5.6 and 5.5 should also work, but MySQL 8.0 is not yet supported)\n- [Node.js](https://nodejs.org/en/download/) (6 or superior)\n- Optionally, a Java IDE and a JavaScript editor.\n\nYou’ll need to have knowledge of:\n\n- Java programming (intermediate level)\n- Basic MySQL management tasks\n- React (beginner level)\n\nIf you want to track and determine if something in a database has changed, you have three main approaches:\n\n- Poll the database every X seconds and determine if something has changed using a timestamp, version number or status field.\n- Use database or application-level triggers to execute a piece of code when something changes.\n- Use the database transaction/replication log, which records every change to the database.\n\nI’m going to use the third approach because I think is the most robust. It doesn’t waste resources (like polling) or hurt performance (like triggers).\n\nWe’ll read the database changes from the MySQL replication log using the library [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java). Then, we’ll parse the event to extract the relevant data and publish it to a Pusher channel so it can be consumed by a React application.\n\nHere’s the diagram that describes the above process:\n\n![java-mysql-db-diagram](//images.ctfassets.net/1es3ne0caaid/30HLN6zj28OiSKE0eE6Oag/6c854c17f053b3b39b5e0523d2b50656/java-mysql-db-diagram.png)\n\nFor reference, [here is a GitHub repository](https://github.com/eh3rrera/realtime-mysql-pusher) with all the code shown in this tutorial and instructions to run it.\n\nLet’s start by creating a Pusher application.\n\n## Creating a Pusher application\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/). \n\nThen, go to your [dashboard](https://dashboard.pusher.com) and create a Channels app, choosing a name, the cluster closest to your location, and optionally, React as the frontend tech and Java as the backend tech:\n\n![java-mysql-db-pusher-app](//images.ctfassets.net/1es3ne0caaid/6wRuDb2okoweQMmmGGo84C/190e50e138898fcf725c893c0bfc0fcb/java-mysql-db-pusher-app.png)\n\nThis will give you some sample code to get started:\n\n![java-mysql-db-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/30al4XZR7yyee0IMKEqICs/34d06b1c4a5f33e56123021ea9284d74/java-mysql-db-pusher-app-keys.png)\n\nSave your app id, key, secret and cluster values. We’ll need them later. \n\n## Configuring MySQL replication\n\nThe first thing you need to do is enable replication in MySQL.\n\n[Replication](https://dev.mysql.com/doc/refman/5.7/en/replication.html) allows data from one MySQL server (the master) to be copied in an asynchronous way to one or more different MySQL servers (the slaves).\n\nIt works by writing all the changes in the master to a binary log file that then is synchronized between master and slaves, so these can apply all those changes.\n\nFor this tutorial, you don’t have to set up slave servers. We’re only interested in the binary log.\n\nIn the MySQL configuration file (usually at `/etc/my.cnf` or `C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini`), add the following lines:\n\n```\n    [mysqld]\n    server-id = 1 #1\n    log_bin = /var/log/mysql/mysql-bin.log #2\n    expire_logs_days = 10 #3\n    max_binlog_size = 100M #4\n    binlog-format = row #5\n```\n\nLine #1 assigns an identifier to the server.\n\nLine #2 specifies the directory where the logs will be stored. In Windows, it will be something like `c:/logs/mysql-bin.log`. In Linux, make sure this directory has the necessary permissions for MySQL.\n\nLine #3 and #4 are optional, they specify the expiration time and maximum size of the file.\n\nLine #5 is important, it specifies the format in which the log will be written.\n\nThere are two main types of replication formats:\n\n- Statement Based Replication (SBR), which replicates entire SQL statements, and \n- Row Based Replication (RBR), which replicates only the changed rows.\n\nFor our purposes, RBR will be easier to work with. That’s why the file specifies this format.\n\nNow restart the server.\n\nIn a terminal window, connect to the MySQL server using `mysql`:\n\n```\n    mysql -u \u003cYOUR_USER\u003e -p \n```\n\nNow choose or create a database and create the table that is going to be used by the application:\n\n``` sql\n    USE myDatabase\n    CREATE TABLE products(id int(11) not null auto_increment, name varchar(50) default null, price decimal(6,2), primary key (id));\n```\n\nIt’s not recommended to work with a user with administrative privileges like `root` so let’s create another user for the application:\n\n``` sql\n    CREATE USER '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e' IDENTIFIED BY '\u003cYOUR_PASSWORD\u003e';\n```\n\nGive it replication and table privileges:\n\n``` sql\n    GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e';\n    GRANT ALL PRIVILEGES ON `\u003cINSERT_YOUR_DB_NAME\u003e`.* TO '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e';\n    FLUSH PRIVILEGES;\n```\n\nNow execute the following command to check if replication is enabled:\n\n```\n    show master status;\n```\n\nIt should show something like the following:\n\n```\n    +------------------+----------+--------------+------------------+-------------------+\n    | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n    +------------------+----------+--------------+------------------+-------------------+\n    | mysql-bin.000001 |      001 |              |                  |                   |\n    +------------------+----------+--------------+------------------+-------------------+\n```\n\nIt indicates the current log file and the position of the last statement.\n\nIf you’re getting `\u003cEmpty set\u003e` or something like that, execute:\n\n```\n    show variables like \"%log_bin%\";\n```\n\nIf replication is enabled, you should see something like the this:\n\n```\n    +---------------------------------+--------------------------------+\n    | Variable_name                   | Value                          |\n    +---------------------------------+--------------------------------+\n    | log_bin                         | ON                             |\n    | log_bin_basename                | /var/log/mysql/mysql-bin       |\n    | log_bin_index                   | /var/log/mysql/mysql-bin.index |\n    | log_bin_trust_function_creators | OFF                            |\n    | log_bin_use_v1_row_events       | OFF                            |\n    | sql_log_bin                     | ON                             |\n    +---------------------------------+--------------------------------+\n```\n\nOtherwise double check your configuration. You can learn more about replication [here](https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html).\n\nNow let’s create the Java program that will read the binary log.\n\n## Reading MySQL’s binary log\n\nIt turns out that reading binary logs for change data capture is more common than you think.\n\nMicrosoft SQL Server has built-in support for [change data capture](https://docs.microsoft.com/en-us/sql/relational-databases/track-changes/about-change-data-capture-sql-server?view=sql-server-2017).\n\nOracle offers [GoldenGate](http://www.oracle.com/technetwork/middleware/goldengate/overview/index.html) for real-time data integration and replication.\n\nMongoDB offers [Change Streams](https://docs.mongodb.com/manual/changeStreams/) to access real-time data changes.\n\nFor MySQL, there a lot of libraries for reading the binary log and stream changes as events to other sources. In this [wiki](https://github.com/wushujames/mysql-cdc-projects/wiki), you can find many of these libraries.\n\nMost of these libraries were made for enterprise system so they work natively with Apache Kafka, a publish and subscribe distributed platform that streams event and records to multiple sources.\n\nBut if you don’t need something like that, you can use [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java), which allows you to read the binary log file and listen for changes as events from any Java program.\n\nSo open your favorite IDE and create a Maven project.\n\nOr just create a directory structure like the following:\n\n```\n    src\n     |- main\n       |- java\n     |- pom.xml \n```\n\nIn the `pom.xml` file specify the project information, java version, and `mysql-binlog-connector-java`  and `pusher-http-java` as dependencies:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n    \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n        \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n    \n        \u003cgroupId\u003ecom.example\u003c/groupId\u003e\n        \u003cartifactId\u003eMySQLRealtime\u003c/artifactId\u003e\n        \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e\n    \n        \u003cproperties\u003e\n            \u003cmaven.compiler.source\u003e1.8\u003c/maven.compiler.source\u003e\n            \u003cmaven.compiler.target\u003e1.8\u003c/maven.compiler.target\u003e\n        \u003c/properties\u003e\n    \n        \u003cdependencies\u003e\n            \u003cdependency\u003e\n                \u003cgroupId\u003ecom.github.shyiko\u003c/groupId\u003e\n                \u003cartifactId\u003emysql-binlog-connector-java\u003c/artifactId\u003e\n                \u003cversion\u003e0.16.1\u003c/version\u003e\n            \u003c/dependency\u003e\n    \n            \u003cdependency\u003e\n                \u003cgroupId\u003ecom.pusher\u003c/groupId\u003e\n                \u003cartifactId\u003epusher-http-java\u003c/artifactId\u003e\n                \u003cversion\u003e1.0.0\u003c/version\u003e\n            \u003c/dependency\u003e\n        \u003c/dependencies\u003e\n    \n    \u003c/project\u003e\n```\n\nNow create a class, let’s say `scr/ReadLog.java`, with the code to connect to MySQL and listen for log events:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            BinaryLogClient client =\n              new BinaryLogClient(\"localhost\", 3306, \"\u003cMYSQL_USER\u003e\", \"\u003cMYSQL_PASSWROD\u003e\");\n    \n            client.registerEventListener(event -\u003e {\n                System.out.println(event);\n            });\n            client.connect();\n        }\n    }\n```\n\nIf you execute this class, the program will block until an event is received from the log.\n\nFor example, this is an example of the events you receive when a database is created:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524607461000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=463, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524607461000, eventType=QUERY, serverId=1, headerLength=19, dataLength=75, nextPosition=557, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='CREATE DATABASE test'}}\n```\n\nYou receive an event for the creation of the global transaction identifier (GTID) and the actual query (`CREATE DATABASE test`).\n\nHere’s an example of the events you receive when a table is created:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609716000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=1696, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609716000, eventType=QUERY, serverId=1, headerLength=19, dataLength=181, nextPosition=1896, flags=0}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='create table products(id int(11) not null auto_increment, name varchar(50) default null, price decimal(6,2), primary key (id))'}}\n```\n\nWhen you insert a record:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=1961, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2033, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2090, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=EXT_WRITE_ROWS, serverId=1, headerLength=19, dataLength=31, nextPosition=2140, flags=0}, data=WriteRowsEventData{tableId=109, includedColumns={0, 1, 2}, rows=[\n        [1, laptop, 999.99]\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=2171, flags=0}, data=XidEventData{xid=28}}\n```\n\nWhen you update a record:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=2236, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2308, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2365, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=EXT_UPDATE_ROWS, serverId=1, headerLength=19, dataLength=47, nextPosition=2431, flags=0}, data=UpdateRowsEventData{tableId=109, includedColumnsBeforeUpdate={0, 1, 2}, includedColumns={0, 1, 2}, rows=[\n        {before=[1, laptop, 999.99], after=[1, laptop, 100.01]}\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=2462, flags=0}, data=XidEventData{xid=29}}\n```\n\nWhen you delete two records:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=2805, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2877, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2934, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=EXT_DELETE_ROWS, serverId=1, headerLength=19, dataLength=49, nextPosition=3002, flags=0}, data=DeleteRowsEventData{tableId=109, includedColumns={0, 1, 2}, rows=[\n        [1, laptop, 100.01],\n        [2, laptop v2, 999.99]\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=3033, flags=0}, data=XidEventData{xid=31}}\n```\n\nThis way, you can see that data manipulation (DML) statements are mapped this way:\n\n- Insert statements have the event type `EXT_WRITE_ROWS` and you can find the information of the insertion in a class of type `WriteRowsEventData`.\n- Insert statements have the event type `EXT_UPDATE_ROWS` and you can find the information of the update in a class of type `UpdateRowsEventData`.\n- Insert statements have the event type `EXT_DELETE_ROWS` and you can find the information of the deletion in a class of type `DeleteRowsEventData`.\n\nIn addition, all of these events are preceded by a `TABLE_MAP` event with information about the table and columns that are being modified.\n\nSo we need to listen for these events.\n\nThe only problem is that if you need to keep track of the changes of many tables in a separate way, you cannot rely on the `tableId`  field because this [ID may change between executions](https://github.com/shyiko/mysql-binlog-connector-java/issues/123).\n\nYou can [change the way events are deserialized](https://github.com/shyiko/mysql-binlog-connector-java/issues/67) but maybe a simpler approach would be to keep track of the table names and IDs in a map.\n\nTaking into account this, you can modify the program in this way:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            final Map\u003cString, Long\u003e tableMap = new HashMap\u003cString, Long\u003e();\n            BinaryLogClient client =\n              new BinaryLogClient(\"localhost\", 3306, \"\u003cMYSQL_USER\u003e\", \"\u003cMYSQL_PASSWROD\u003e\");\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    TableMapEventData tableData = (TableMapEventData)data;\n                    tableMap.put(tableData.getTable(), tableData.getTableId());\n                }\n            });\n            client.connect();\n        }\n    }\n```\n\nNotice how the program checks the subtype of `EventData` to get the information.\n\nNow, let’s add the Pusher object with the information you got when you created the app:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            final Map\u003cString, Long\u003e tableMap = new HashMap\u003cString, Long\u003e();\n            \n            Pusher pusher = \n                new Pusher(\"\u003cPUSHER_APP_ID\u003e\", \"\u003cPUSHER_APP_KEY\u003e\", \"\u003cPUSHER_APP_SECRET\u003e\");\n            pusher.setCluster(\"\u003cPUSHER_APP_CLUSTER\u003e\");\n            pusher.setEncrypted(true);\n            \n            // ...\n        }\n    }\n```\n\nAnd you can check if the event is an insert, update or delete, you can check if it corresponds to the `product` table, extract the product information and publish it as a map to a `product` channel.\n\nHere’s the code for `INSERT` events:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    WriteRowsEventData eventData = (WriteRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Object[] product: eventData.getRows()) {\n                            pusher.trigger(\n                               PRODUCT_TABLE_NAME, \"insert\", getProductMap(product)\n                            );\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        static Map\u003cString, String\u003e getProductMap(Object[] product) {\n            Map\u003cString, String\u003e map = new HashMap\u003c\u003e();\n            map.put(\"id\", java.lang.String.valueOf(product[0]));\n            map.put(\"name\", java.lang.String.valueOf(product[1]));\n            map.put(\"price\", java.lang.String.valueOf(product[2]));\n    \n            return map;\n        }\n    }\n```\n\nFor the update event, only the `after` data is needed. The `before` and `after` fields are formatted as a map entry, where `after` is the value part of this structure:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    // ...\n                } else if(data instanceof UpdateRowsEventData) {\n                    UpdateRowsEventData eventData = (UpdateRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Map.Entry\u003cSerializable[], Serializable[]\u003e row : \n                                                          eventData.getRows()) {\n                            pusher.trigger(\n                              PRODUCT_TABLE_NAME, \"update\", getProductMap(row.getValue())\n                            );\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        // ...\n    }\n```\n\nFor the delete event, you’ll only need the ID of the deleted record:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    // ...\n                } else if(data instanceof UpdateRowsEventData) {\n                    // ...\n                } else if(data instanceof DeleteRowsEventData) {\n                    DeleteRowsEventData eventData = (DeleteRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Object[] product: eventData.getRows()) {\n                            pusher.trigger(PRODUCT_TABLE_NAME, \"delete\", product[0]);\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        // ...\n    }\n```\n\nNow, any application listening for the `product` channel will get the information about the database changes.\n\nLet’s build a React client to show this.\n\n## Building the React application\n\nLet’s use [create-react-app](https://github.com/facebook/create-react-app) to bootstrap a React app.\n\nExecute the following command in a terminal window to create a new app:\n\n```\n    npx create-react-app my-app\n```\n\nNow go into the app directory and install the Pusher dependency with `npm`:\n\n```\n    cd my-app\n    npm install --save pusher-js\n```\n\nOpen the file `src/App.css` and add the following CSS styles:\n\n``` css\n    .table {\n      border: 2px solid #FFFFFF;\n      width: 100%;\n      text-align: center;\n      border-collapse: collapse;\n    }\n    .table td, .table th {\n      border: 1px solid #FFFFFF;\n      padding: 3px 4px;\n    }\n    .table tbody td {\n      font-size: 13px;\n    }\n    .table thead {\n      background: #FFFFFF;\n      border-bottom: 4px solid #333333;\n    }\n    .table thead th {\n      font-size: 15px;\n      font-weight: bold;\n      color: #333333;\n      text-align: center;\n      border-left: 2px solid #333333;\n    }\n    .table thead th:first-child {\n      border-left: none;\n    }\n```\n\nNow let’s create a new component, `src/Table.js`, to show the product information (received as a property) in a table:\n\n``` javascript\n    import React, { Component } from 'react';\n    import './App.css';\n    \n    export default class Table extends Component {\n        render() {\n          const rowsMapped =this.props.rows.map(row =\u003e (\n                \u003ctr key={row.id}\u003e\n                  \u003ctd\u003e{row.id}\u003c/td\u003e\n                  \u003ctd\u003e{row.name}\u003c/td\u003e\n                   \u003ctd\u003e{row.price}\u003c/td\u003e\n                \u003c/tr\u003e\n              ));\n          \n          return (\n            \u003ctable className=\"table\"\u003e\n              \u003cthead\u003e\n                \u003ctr\u003e\n                  \u003cth\u003eID\u003c/th\u003e\n                  \u003cth\u003eName\u003c/th\u003e\n                  \u003cth\u003ePrice\u003c/th\u003e\n                \u003c/tr\u003e\n              \u003c/thead\u003e\n              \u003ctbody\u003e\n                {rowsMapped}\n              \u003c/tbody\u003e\n            \u003c/table\u003e\n          );\n        }\n    }\n```\n\nNow modify the file `src/App.js` to import this component and Pusher:\n\n``` javascript\n    import React, { Component } from 'react';\n    import logo from './logo.svg';\n    import './App.css';\n    \n    import Table from './Table.js';\n    \n    import Pusher from 'pusher-js';\n    \n    class App extends Component {\n      // ...\n    }\n```\n\nLet’s have the array of rows as the state of this component, and while we are at the constructor, let’s bind the functions we are going to use to insert, update and delete items:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {rows: []};\n        \n        this.insert = this.insert.bind(this);\n        this.update = this.update.bind(this);\n        this.delete = this.delete.bind(this);\n      }\n    }\n```\n\nIn the `componentDidMount` method, let’s configure the Pusher object subscribe to the channel to get the events:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      constructor(props) {\n        // ...\n      }\n      \n      componentDidMount() {\n        this.pusher = new Pusher('\u003cPUSHER_APP_KEY\u003e', {\n              cluster: '\u003cPUSHER_APP_CLUSTER\u003e',\n          encrypted: true,\n        });\n        this.channel = this.pusher.subscribe('products');\n            \n        this.channel.bind('insert', this.insert);\n        this.channel.bind('update', this.update);\n        this.channel.bind('delete', this.delete);\n      }\n    }\n```\n\nThese are the functions to insert, update and delete items from `this.state.rows`:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      // ...\n      insert(data) {\n        this.setState(prevState =\u003e ({\n          rows: [ data, ...prevState.rows ]\n        }));\n      }\n    \n      update(data) {\n        this.setState(prevState =\u003e ({\n          rows: prevState.rows.map(el =\u003e \n                  el.id === data.id ? data : el\n          )\n        }));\n      }\n    \n      delete(id) {\n        this.setState(prevState =\u003e ({\n          rows: prevState.rows.filter(el =\u003e el.id !== String(id))\n        }));\n      }\n    }\n```\n\nFinally, the `render` function will look like this:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      // ...\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React\u003c/h1\u003e\n            \u003c/header\u003e\n            \u003cTable rows={this.state.rows} /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nAnd that’s it.\n\nLet’s test the application.\n\n## Testing the application\n\nMake sure the MySQL server is running with replication enabled.\n\nIf you’re working with an IDE, run the class `ReadLog`.\n\nOtherwise, you can add this property to the `pom.xml`file:\n\n``` xml\n    \u003cproperties\u003e\n      ...\n      \u003cexec.mainClass\u003eReadLog\u003c/exec.mainClass\u003e\n    \u003c/properties\u003e\n```\n\nAnd execute this command to run the app:\n\n```\n    mvn exec:java\n```\n\nFor the React app, inside the app directory, execute:\n\n```\n    npm start\n```\n\nA browser window will open http://localhost:3000/, and from there, you can connect to the database with the `mysql` client and insert, update or delete records in the `product` table:\n\n![java-mysql-react-demo](//images.ctfassets.net/1es3ne0caaid/71VsGknSCI0QOgE4CCkEmy/beea6a69b0be15e1b421f7fda9af66c9/java-mysql-react-demo.gif)\n\n## Conclusion\n\nIn this tutorial, you have learned how to turn MySQL into a realtime database by using the replication log to publish the changes made to a database using Pusher.\n\nYou used [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java) to get the insert, update and delete events from the log. However, at the time of this writing, the current version of MySQL (MySQL 8.0.11) is not yet supported.\n\nBut there are other options. As mentioned before, in this [wiki](https://github.com/wushujames/mysql-cdc-projects/wiki) you can find more libraries to work with MySQL binary log.\n\nIn this [blog post](http://shzhangji.com/blog/2017/08/12/extract-data-from-mysql-with-binlog-and-canal/), you can find another way to extract data from MySQL using Alibaba’s open sourced [Canal](https://github.com/alibaba/canal) project.\n\nThe applications that this tutorial present are simple but they show how this change data capture using transaction logs work.\n\nThey can be extended in many ways:\n\n- Support for more tables\n- Detect when the Java application goes down and have to be restarted\n- Read from the log to start at a given position\n- Change the React implementation to support a bigger table in an efficient way\n\nRemember that all the source code for this applications is available on [Github](https://github.com/eh3rrera/realtime-mysql-pusher).","metaTitle":"Getting data in realtime from MySQL with Java","metaDescription":"This tutorial will guide you through enabling MySQL replication logging, in order to display database events in the browser, on a React-based dashboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mvL2FffogC6iqkUWAo8i4","type":"Entry","createdAt":"2018-03-05T16:12:52.906Z","updatedAt":"2019-01-02T15:29:29.645Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using Struts 2","url":"chat-struts","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}}],"reviewDate":"2018-03-05","description":"In this tutorial, discover the basics of how to add chat to a Java Struts 2 application, using Pusher for the realtime features.","prerequisite":"A basic understanding of Apache Struts 2 is needed to follow this tutorial","content":"The need for realtime chat can’t be overemphasized. This includes realtime communication with your users which increases customer satisfaction and, as a result, make your business more credible, convenient and reduces wait times etc.\n\nHave you ever wondered how you could add a realtime chat to your Struts 2 web application? Have you considered the number of plugins or libraries that you might need to pull in to make it work? Worry no more, Pusher got your back. In this article, I'll work you through how to build a realtime chat app in Java Struts 2 by leveraging Pusher realtime technology.\n\nAt the end of this tutorial, we’ll have an application similar to this:\n\n![chat-struts-demo](//images.contentful.com/1es3ne0caaid/7KTt9nURMWW2OqmQ2k0siI/03ff6d7fd55aa3c179f2ca2404626754/chat-struts-demo.gif)\n\nStruts 2 is an excellent MVC Web application framework for developing enterprise Java web applications. It enables rapid development of Web applications and handles most of the plumbing required in large Web applications.\n\n\n## What is Pusher?\n\nPusher is a hosted service that makes it *super-easy* to add realtime data and functionality to web and mobile applications.\n\n\n\u003e 💡 Pusher sits as a realtime layer between your servers and your clients. Pusher maintains persistent connections to the clients - over WebSocket if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data that they want to push to the clients they can do, instantly via Pusher.\n\n\n## Requirements\n\nThe following tools are used in this article:\n\n\n- Java SDK – Download and install [Java SDK from Oracle site](http://www.oracle.com/technetwork/java/javase/downloads/index.html) if you don’t have it installed already.\n- Eclipse IDE – Download and install eclipse from their [website](https://www.eclipse.org). \n- JavaScript (JQuery).\n- Java language (you should know the basics).\n- [Maven](https://maven.apache.org/) (Most recent Eclipse include the Maven tooling already)\n\n\n## Step 1: Setting Up A Pusher App\nSign up or login to your [Pusher](https://pusher.com/signup) account and create a new pusher app.\n\n![chat-strut-create-app](//images.contentful.com/1es3ne0caaid/46ShmTbtXO8Q0OW4sa0eUG/64f3af0846ee33f66dc6fda38ec98357/chat-strut-create-app.png)\n\nNote down your Pusher app details you just created:\n\n```\n    app_id  = \"*********\"\n    key     = \"***********************\"\n    secret  =  \"*********************\"\n    cluster = \"**\"\n```\n\n## Step 2: Setting up Struts 2 Application in Eclipse\n\nA Struts 2 application is an ordinary Java Web application with a set of additional libraries. \n\nOpen your Eclipse IDE then go to **File** \u003e\u003e **New** \u003e\u003e **Others** from the menu. You should get a prompt just like the image below:\n\n![chat-struts-create-new-project](//images.contentful.com/1es3ne0caaid/1wHCiXZzCU0g2ewy6m8mmA/122de5171bc6f112fccfe8fd4969761f/chat-struts-create-new-project.png)\n\nNow, Select **Maven** \u003e\u003e **Maven Project** then click on **Next.**\n\nYou should have another prompt window:\n\n![chat-struts-new-maven-project](//images.contentful.com/1es3ne0caaid/1duYUGRvvWuo4qkEQiWECI/35b4c40809bb8f309d8d9a5625be1fb4/chat-struts-new-maven-project.png)\n\n\nNow select your project location, this is where you want your project's files to be stored. After that click on **Next** to proceed. In my case, I used the default location by just clicking next.\n\nYou will have another prompt to select an Archetype:\n\n![chat-struts-select-archetype](//images.contentful.com/1es3ne0caaid/Lrd6QUASMEGq8W8yc8w0m/e35ad856a7144aa778203e8d2942d7dd/chat-struts-select-archetype.png)\n\nSelect **org.apache.maven.achetypes maven-achetype-webapp 1.0** then click on **Next.**\n\nOn this window, put in the `**Group Id**` and `**Artifact**` `**Id**` then click on **Finish.**\n\n![chat-struts-archetype-parameter](//images.contentful.com/1es3ne0caaid/4MZqcWdVza2qu2OUugAQMG/5626d8526826e737e941f4e040315d0b/chat-struts-archetype-parameter.png)\n\n\u003e 💡 **groupId** will identify your project uniquely across all projects, so we need to enforce a naming schema. It has to follow the package name rules and you can create as many subgroups as you want. Look at [More information about package names](http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.7). eg. org.apache.maven, org.apache.commons \n\u003e \n\u003e 💡 **artifactId** is the name of the jar without version. If you created it then you can choose whatever name you want. If it's a third party jar you have to take the name of the jar as it's distributed. eg. maven, commons-math\n\nOnce done, a new project will be created for you:\n\n![chat-struts-file-structure](//images.contentful.com/1es3ne0caaid/57xvDFVgre0aICUuesE2uS/c3c6b44961b9d0ed2279531566c3940e/chat-struts-file-structure.png)\n  \nSince we’ll use [maven](http://www.vogella.com/tutorials/EclipseMaven/article.html) to run the application, we need to add `jetty-maven-plugin` to the `pom.``xml` file.\n\nUpdate **pom.xml** with the following **jetty plugin:**\n\n```\n    \u003cbuild\u003e\n        ... \n        \u003cplugins\u003e\n            \u003cplugin\u003e\n                \u003cgroupId\u003eorg.eclipse.jetty\u003c/groupId\u003e\n                \u003cartifactId\u003ejetty-maven-plugin\u003c/artifactId\u003e\n                \u003cversion\u003e9.4.7.v20170914\u003c/version\u003e\n                \u003cconfiguration\u003e\n                    \u003cwebApp\u003e\n                        \u003ccontextPath\u003e/${build.finalName}\u003c/contextPath\u003e\n                    \u003c/webApp\u003e\n                    \u003cstopKey\u003eCTRL+C\u003c/stopKey\u003e\n                    \u003cstopPort\u003e8999\u003c/stopPort\u003e\n                    \u003cscanIntervalSeconds\u003e10\u003c/scanIntervalSeconds\u003e\n                    \u003cscanTargets\u003e\n                        \u003cscanTarget\u003esrc/main/webapp/WEB-INF/web.xml\u003c/scanTarget\u003e\n                    \u003c/scanTargets\u003e\n                \u003c/configuration\u003e\n            \u003c/plugin\u003e\n        \u003c/plugins\u003e\n    \u003c/build\u003e\n```\n\nNow, from your Eclipse IDE, right click on the project name - `**chatApp**` - or any name you have chosen. Then go to `**Run As**` \u003e\u003e `**Maven build**`.\n\n![chat-struts-running-project-editing-configuration](//images.contentful.com/1es3ne0caaid/17ovAPA972eUuaOcusUeuk/96c2ea4fb646a5dd36601c0d1833a6f1/chat-struts-running-project-editing-configuration.png)\n\nNow type in `jetty:run` in the goals then click  `**Apply**` and then click on `**Run**`.\n\nVisit http://localhost:8080/chatApp from your browser:\n\n![chat-struts-hello-world](//images.contentful.com/1es3ne0caaid/4HCT81UwPugEOkMWoWWO8E/278e815fe7c17b09b354a6f3a5a6bb8c/chat-struts-hello-world.png)\n\n\u003e Note that `chatApp` is the folder name of your project. If you have used a different name, you should change the URL accordingly.\n\nNext, We’ll add Struts 2 to the Classpath. Now that we know we have a working Java web application, let’s add the minimal required Struts 2 framework Jar files to our web application’s class path. In `pom.xml` add the following to the dependency node:\n\n```\n    \u003cdependency\u003e\n        \u003cgroupId\u003eorg.apache.struts\u003c/groupId\u003e\n        \u003cartifactId\u003estruts2-core\u003c/artifactId\u003e\n        \u003cversion\u003e2.5.14\u003c/version\u003e\n    \u003c/dependency\u003e\n```\n\nStruts 2 libraries Jar files will be downloaded and added to our project when you save.\n\nNext, add the Struts 2 plugin that will enable us to work with JSON. Add the following `**pom.xml**` dependency node:\n\n```\n    \u003cdependency\u003e\n           \u003cgroupId\u003eorg.apache.struts\u003c/groupId\u003e\n           \u003cartifactId\u003estruts2-json-plugin\u003c/artifactId\u003e\n           \u003cversion\u003e2.5\u003c/version\u003e\n    \u003c/dependency\u003e\n```\n\n## Step 3: Add Logging\n\nTo see what’s happening under the hood, like when errors occur which will help during debugging, let’s add a logging dependency to our application.\n\nAdd the following dependencies to `**pom.xml**` dependency node:\n\n```\n    \u003cdependency\u003e\n        \u003cgroupId\u003eorg.apache.logging.log4j\u003c/groupId\u003e\n        \u003cartifactId\u003elog4j-core\u003c/artifactId\u003e\n        \u003cversion\u003e2.8.2\u003c/version\u003e\n    \u003c/dependency\u003e\n    \u003cdependency\u003e\n        \u003cgroupId\u003eorg.apache.logging.log4j\u003c/groupId\u003e\n        \u003cartifactId\u003elog4j-api\u003c/artifactId\u003e\n        \u003cversion\u003e2.8.2\u003c/version\u003e\n    \u003c/dependency\u003e\n```\n\nNext, setup a `log4j2.xml` configuration in the `src/main/resources` folder which contains the following:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n    \u003cConfiguration\u003e\n        \u003cAppenders\u003e\n            \u003cConsole name=\"STDOUT\" target=\"SYSTEM_OUT\"\u003e\n                \u003cPatternLayout pattern=\"%d %-5p [%t] %C{2} (%F:%L) - %m%n\"/\u003e\n            \u003c/Console\u003e\n        \u003c/Appenders\u003e\n        \u003cLoggers\u003e\n            \u003cLogger name=\"com.opensymphony.xwork2\" level=\"debug\"/\u003e\n            \u003cLogger name=\"org.apache.struts2\" level=\"debug\"/\u003e\n            \u003cRoot level=\"warn\"\u003e\n                \u003cAppenderRef ref=\"STDOUT\"/\u003e\n            \u003c/Root\u003e\n        \u003c/Loggers\u003e\n    \u003c/Configuration\u003e\n```\n\n\n## Step 4: Adding Pusher Java Library\n\nPusher has a Java library that we can use to interact with it’s API. We’ll add this to our application.\n\nUpdate **pom.xml** dependency node ****with the below**:**\n\n```\n    \u003cdependency\u003e\n      \u003cgroupId\u003ecom.pusher\u003c/groupId\u003e\n      \u003cartifactId\u003epusher-http-java\u003c/artifactId\u003e\n      \u003cversion\u003e1.0.0\u003c/version\u003e\n    \u003c/dependency\u003e\n```\n\nThis will download and add pusher java libraries to our application.\n\n## Step 5: Adding Struts 2 Servlet Filter\n\nTo enable the Struts 2 framework to work with our web application we need to add a Servlet filter class and filter mapping to `web.xml`. Below is the filter and filter-mapping nodes you should add.\n\nAdd the following to `**webapp**` node in  `src/main/webapp/WEB-INF/web.xml` file:\n\n```\n    \u003cfilter\u003e\n        \u003cfilter-name\u003estruts2\u003c/filter-name\u003e\n        \u003cfilter-class\u003eorg.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter\u003c/filter-class\u003e\n    \u003c/filter\u003e\n    \n    \u003cfilter-mapping\u003e\n        \u003cfilter-name\u003estruts2\u003c/filter-name\u003e\n        \u003curl-pattern\u003e/*\u003c/url-pattern\u003e\n    \u003c/filter-mapping\u003e\n```\n\n## Step 6: Create struts.xml\n\nYou can see this as the router for our application. Struts 2 can use either an XML configuration file or annotations (or both) to specify the relationship between a URL, a Java class, and a view page (such as `index.jsp`). For our basic Struts 2 application, we’ll use a minimal XML configuration. \n\nCreate a new file as  `struts.xml` in the `src/main/resources` folder and add the following code to it:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n    \u003c!DOCTYPE struts PUBLIC\n        \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"\n        \"http://struts.apache.org/dtds/struts-2.5.dtd\"\u003e\n    \n    \u003cstruts\u003e\n    \n        \u003cconstant name=\"struts.devMode\" value=\"true\" /\u003e\n      \n        \u003cpackage name=\"default\" namespace=\"/\" extends=\"json-default\"\u003e\n         \u003cdefault-action-ref name=\"index\"/\u003e \n         \n            \u003caction name=\"index\"\u003e\n                \u003cresult\u003e/index.jsp\u003c/result\u003e\n            \u003c/action\u003e\n        \u003c/package\u003e\n    \n    \u003c/struts\u003e\n```\n\nWith the above, we now have a route of `http://localhost:8080/chatApp/index.action` available in our application:\n\n```\n    \u003caction name=\"index\"\u003e\n        \u003cresult\u003e/index.jsp\u003c/result\u003e\n    \u003c/action\u003e\n```\n\n## Step 7: Crafting the chat interface\n\nOpen `src/main/webapp/index.jsp` and add the following code to it:\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003c%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\" %\u003e\n    \u003chead\u003e\n      \u003ctitle\u003eWelcome To Struts 2 chat!\u003c/title\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"assets/custom.css\"\u003e\n      \u003cscript src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n    \u003c/head\u003e\n    \u003cbody\u003e\n       \u003ch1 class=\"text-center\"\u003eWelcome To Struts 2 chat!\u003c/h1\u003e\n        \u003cdiv class=\"container\" style=\"border: 2px solid gray;\"\u003e\n          \u003c!--msgbox--\u003e\n          \u003cdiv id=\"msgItems\" class=\"container-fluid\"\u003e\n          \n          \u003c/div\u003e\n                  \n                \u003c!-- querybox--\u003e\n                \u003cdiv class=\"row text-center\" id=\"queryText\"\u003e\n                      \n                   \u003cdiv class=\"hideForm\"\u003e\n                        \u003cdiv class=\"row\"\u003e\n                            \u003cdiv class=\"col-xs-9\"\u003e\n                                 \u003cinput type=\"text\" class=\"form-control\" placeholder=\"Type your Message Here\" id=\"message\"\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-xs-3\"\u003e\n                                \u003cbutton type=\"button\" class=\"btn btn-primary\" id=\"submitMessage\"\u003eSend Message\u003c/button\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                   \u003c/div\u003e\n                   \n                   \u003cdiv id=\"chatName\"\u003e\n                         \u003cform class=\"form-inline\"\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                                 \u003cinput type=\"text\" class=\"form-control\" id=\"userName\" placeholder=\"your username\"\u003e\n                            \u003c/div\u003e\n                                 \u003cbutton type=\"button\" class=\"btn btn-primary\" id=\"startChating\"\u003eStart Chating!\u003c/button\u003e\n                        \u003c/form\u003e\n                   \u003c/div\u003e\n                        \n               \u003c/div\u003e\n                           \n        \u003c/div\u003e\n    \n       \u003cscript src=\"assets/custom.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \n    \u003c/html\u003e\n```\n\nNext create new files called `src/main/webapp/assets/custom.css` and `src/main/webapp/assets/custom.js`. Note that the assets folder is not created by default, we need to create it.\n\nIn the `src/main/webapp/assets/``custom.css` file, add the following code:\n\n```\n    body {\n      padding-top: 50px;\n    }\n    \n    #queryText {\n      position : relative;\n      bottom : 4%;\n      padding: 0.3%;\n      background : grey;\n      min-width : 200px;\n    }\n    \n    #queryText  input {\n      width : 100%;\n    }\n    \n    \n    #queryText form div {\n      margin-left: auto;\n      margin-right: auto;\n    }\n    \n    #queryText {\n      border : 0px solid black;\n      padding: 10px;\n    }\n    \n    #chat-item {\n      border-bottom : 1px solid grey;\n    }\n    \n    #msgItems div img {\n      background : blue;\n      display : inline;\n    }\n    \n    #msgItems {\n       height: 400px;\n       overflow: scroll;\n    }\n    .hideForm{\n      display: none;\n    }\n    .input-large {\n     padding: 5px 150px;\n    }\n```\n\nIn the `src/main/webapp/assets/``custom.js` file, add the following code:\n\n```\n    // Indentify every user uniquely\n    var uniqueId = Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n    \n    $(\"#startChating\").click(function() {\n           \n        if( $(\"#userName\").val() ) { // if user provides username\n           $(\"#chatName\").hide();\n           $(\".hideForm\").show();\n        }\n    });\n```\n\nNote that we have included Pusher’s JavaScript Library in `index.jsp` which will help us listen to events so we can act on them.\n\nNow, visit the webpage again at https://localhost:8080/chatApp/.\n\n![chat-struts-interface](//images.contentful.com/1es3ne0caaid/30n4tdlmaIKqIiQqq4UAWI/a0256dc6c6c57d39c136a3fff9e038e3/chat-struts-interface.png)\n\n## Step 8: Creating a Struts 2 Action Class\n\nHere, we’ll create an action class that will serve as the server for sending data to Pusher.\n\nCreate a new folder called `java` in the `src/main` folder.\n\nThen create a new file  `src/main/java/MessageAction.java` and add the following code to it:\n\n```\n    package com.menusms.chatApp.action;\n        \n    import com.opensymphony.xwork2.ActionSupport;\n        \n    import com.pusher.rest.Pusher;\n        \n    import java.util.LinkedHashMap;\n    import java.util.Map;\n        \n    public class MessageAction extends ActionSupport{\n                 \n         private Map\u003cString, String\u003e data = new LinkedHashMap\u003cString, String\u003e();\n            \n         private String message, userName, uniqueId;\n                \n         public String execute() {\n                        \n              //Pusher pusher = new Pusher(\"app_id\", \"key\", \"secret\");\n               Pusher pusher = new Pusher(\"******\", \"****************\", \"*************\");\n               pusher.setCluster(\"**\"); // update with your pusher cluster\n               pusher.setEncrypted(true);\n                        \n               data.put(\"message\", this.getMessage());\n               data.put(\"userName\", this.getUserName());\n               data.put(\"uniqueId\", this.getUniqueId());\n                   \n               pusher.trigger(\"struts-chat\", \"message\", data);\n                        \n               return SUCCESS;\n          }\n            \n    }\n```\n\nHere, we have declared some variables - `message`, `userName`, `uniqueId` and `data` - which will be sent to Pusher. When the execute method is called, the data is sent to Pusher (make sure you change pusher details in the execute method with the details you saved earlier). \n\nWith this, we are sending the data to the `struts-chat` **channel** and also triggering the `message` **event.**\n\n\u003e 💡 [Channels](http://pusher.com/docs/channels) provide a great way of organizing streams of real-time data. Here, we are \n\u003e  subscribing to the `struts-chat` channel (NB: The channel name can be any name you like).  Once we are subscribed to a channel, we bind that channel to an event.\n\n\n\u003e 💡 [Events](http://pusher.com/docs/client_api_guide/client_events) can be seen as a notification of something happening on your system and are ideal for linking updates to changes in the View. In this case we want to bind to an event which is triggered whenever a user sends a message. \n\nNext, lets add a setter and getter for the variables we have declared. Update `src/main/java/MessageAction.java` with the below:\n\n```\n    ...\n           public Map\u003cString, String\u003e getData() {\n                return data;\n            }\n            \n            public void setData(Map\u003cString, String\u003e data) {\n               this.data = data;\n            }\n      \n            public String getUniqueId() {\n               return uniqueId;\n            }\n        \n            public void setUniqueId(String uniqueId) {\n               this.uniqueId = uniqueId;\n             }\n        \n             public String getUserName() {\n                return userName;\n             }\n        \n             public void setUserName(String userName) {\n                this.userName = userName;\n             }\n        \n             public String getMessage() {\n                return message;\n             }\n        \n             public void setMessage(String message) {\n                this.message = message;\n             }\n    }\n```  \n\nUpdate `src/main/resources/struts.xml` with the below:\n\n```\n    \u003caction name=\"message\" class=\"com.menusms.chatApp.action.MessageAction\" method=\"execute\"\u003e\n        \u003cresult type=\"json\"\u003e\u003c/result\u003e\n    \u003c/action\u003e\n```\n\nNow, we have a route available - `http://localhost:8080/chatApp/message`. When this URL is visited, the execute method in the class `MessageAction.java` will be invoked.\n\n## Step 9: Sending messages\n\nWhen a user submits a message from the HTML form, we’ll send this data to our Java class where it will be sent to Pusher.\n\nUsing jQuery, we’ll send this data to the `message.action` route.\n\nUpdate `src/main/webapp/assets/custom.js` with the following code:\n\n```\n    $(\"#submitMessage\").click(function() {\n        \n       var userName = $(\"#userName\").val();\n       var message  = $(\"#message\").val();\n           \n    $.post(\"message.action\", {\n            message: message,\n            userName: userName,\n            uniqueId: uniqueId\n        })\n        .done(function(data) {\n            //empty the message input\n            $(\"#message\").val(\"\");\n        });\n    });\n```\n\n## Step 10: Printing messages\n\nWe need to listen for incoming messages from Pusher and display them when they are received. We’ll do this easily with the Pusher JavaScript library we have included earlier.\n\nWe’ll subscribe to a channel (this is the channel that we are pushing data to in our java code above) and bind that channel to an event.\n\nAdd the below code to `src/main/webapp/assets/custom.js`:\n\n```\n       var pusher = new Pusher('***************', {// Replace with your PUSHER_APP_KEY\n          cluster: '**', // Replace with your PUSHER_APP_CLUSTER\n          encrypted: true\n        });\n    \n        var channel = pusher.subscribe('struts-chat');\n        channel.bind('message', function(data) {\n         \n         var textDirection = (data.uniqueId == uniqueId) ? \" text-right\" : \"\";\n          \n          $(\"#msgItems\").append(\n                `\u003cdiv id=\"chat-item\" class=\"row` +textDirection+ `\"\u003e\n          \u003cdiv class=\"cols-xs-4\"\u003e\n                \u003cp\u003e\n                    \u003cp\u003e\u003cb\u003e` +data.userName+ `\u003c/b\u003e\u003c/p\u003e\u003cimg src=\"http://placehold.it/30X30\" class=\"img-circle img-responsive\"\u003e`\n                    +data.message+ `\n                \u003c/p\u003e\n                      \n          \u003c/div\u003e\n      \u003c/div\u003e`\n          );\n        });\n```\n\nWith this:\n\n```\n    var channel = pusher.subscribe('struts-chat');\n    channel.bind('message', function(data) { ...\n```\n\nWe have subscribed to the `struts-chat` channel and bind it to `message` event.\n\n\n## Conclusion\n\nPusher really makes life easy when it comes to adding realtime features to web applications. In this tutorial, we have been able to learn the basics of how to add chat to a Java Struts 2 application.\n\nIf you have any questions or observations, feel free to drop them in the comments section below. I would be happy to respond to you.","metaTitle":"Build a chat app using Struts 2","metaDescription":"Create a chat app using Java's framework Apache Struts 2 and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2U9mAVUR3aeeW2YIM24W2O","type":"Entry","createdAt":"2018-02-22T15:02:42.776Z","updatedAt":"2018-02-28T14:43:57.656Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed in Android ","url":"activity-feed-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/feed-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Discover how you can create a realtime activity feed for your Android app.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"We'd like to track and visualize our applications in a central place. Feeds are great for this! Let's build an Android app with an activity feed showing the temperature of your home.\n\nIn this tutorial, using [Pusher](https://pusher.com), we are going to build a feed as an Android app to monitor the activity of a [Node.js](https://nodejs.org) REST API. Every time an endpoint of the API is hit, it will publish an event with some information (let's say temperatures) to a channel. This event will be received in realtime, on all the connected Android devices.\n\nThis is how our final Android app will look like:\n\n![activity-feed-android-demo](//images.contentful.com/1es3ne0caaid/1WGAtH6OC86GEaAKKWm2YS/1b76e83dad7a0470f499e2ccbd382b59/activity-feed-android-demo.gif)\n\nFor the back-end, we will be using [Node.js](https://nodejs.org) with [Express](https://expressjs.com) to create a simple REST API. A basic knowledge of Node/Express is required to understand the code, but we won't be using a database or anything special so you can replace this stack with the one you're most comfortable with. The source code of this part is also available on [Github](https://github.com/eh3rrera/node-api-pusher).\n\nSo let's get started!\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![activity-feed-android-create-app](//images.contentful.com/1es3ne0caaid/2yiZXxFDc4ys0Ui0acuK8E/e942424e38712df4c88e55a5e4d0ad44/activity-feed-android-create-app.png)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as your back-end tech. This will give you some sample code to get you started:\n\n![activity-feed-android-pusher-libraries](//images.contentful.com/1es3ne0caaid/4Yi7ILOJhCE46KmqeKC4yy/acef29d86deb38cdf3d95d1b1b739e12/activity-feed-android-pusher-libraries.png)\n\nBut don't worry, this won't lock you into this specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## The Node server\n\nFirst, let's create a default `package.json` configuration file with:\n\n``` \nnpm init -y\n```\n\nWe'll need Express, Pusher, and other dependencies, let's add them with:\n\n``` \nnpm install --save express body-parser pusher\n```\n\nIn case a future version of a dependency breaks the code, here's the dependencies section on the `package.json` file:\n\n```\n{\n  ...\n    \"dependencies\": {\n    \"body-parser\": \"1.16.0\",\n    \"express\": \"4.14.1\",\n    \"pusher\": \"1.5.1\"\n  }\n}\n```\n\nNext, create a [server.js](https://github.com/eh3rrera/node-api-pusher/blob/16b75dcd39cde3bb0f454bfed808a7e80e8c8c93/server.js) file. First, let's require the modules we're going to need:\n\n```\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar crypto = require('crypto');\nvar Pusher = require('pusher');\n```\n\nThen, configure the Express object:\n\n```\nvar app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n\nNext, the Pusher object is created by passing the configuration object with the ID, key, and the secret for the app created in the [Pusher Dashboard](https://dashboard.pusher.com):\n\n```\nvar pusher = new Pusher({\n  appId      : process.env.PUSHER_APP_ID,\n  key        : process.env.PUSHER_APP_KEY,\n  secret     : process.env.PUSHER_APP_SECRET,\n  encrypted  : true,\n});\n```\n\nPusher will be used to publish any events that happen in our application. These events have a *channel*, which allows events to relate to a particular topic, an *event-name* used to identify the type of the event, and a *payload*, which you can attach any additional information to the message.\n\nWe are going to publish an event to a Pusher channel when an endpoint of our API is called to create/update/delete a record, and send the information as an attachment so we can show it in an activity feed.\n\nHere's the definition of our API's REST endpoints. Notice how an ID for the record is created using the first four characters of the `hex` string generated by `crypto.randomBytes(16)` (to avoid using an external library):\n\n```\napp.post('/api', function (req, res) {\n  var event = {\n    data: req.body.data,\n    id: crypto.randomBytes(16).toString('hex').substring(0, 4),\n  };\n\n  // Do something with the data...\n\n  // Publish event to the Pusher channel\n  pusher.trigger(channel, 'created', event);\n\n  res.status(200).json(event);\n});\n\napp.route('/api/:id')\n  // PUT  endpoint to update a record\n  .put(function (req, res) {\n    var event = {\n     data: req.body.data,\n     id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'updated', event);\n\n    res.status(200).json(event);\n  })\n\n  // DELETE  endpoint to delete a record\n  .delete(function (req, res) {\n    var event = {\n      id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'deleted', event);\n\n    res.status(200).json(event);\n  });\n```\n\nThis way, a POST request like this:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\"\n}\n```\n\nWill return something like the following:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\",\n  \"id\": \"d2t6\"\n}\n```\n\nWe start the server with:\n\n```\napp.listen(3000, function () {\n  console.log('Node server running on port 3000');\n});\n```\n\nAnd that's all. To run the server, execute the following command passing your Pusher credentials:\n\n``` \nPUSHER_APP_ID=XXXXXX PUSHER_APP_KEY=XXXXXX PUSHER_APP_SECRET=XXXXXX node server.js\n```\n\n## The android app\n\nOpen Android Studio and create a new project:\n\n![activity-feed-android-create-project](//images.contentful.com/1es3ne0caaid/1Kv2lAKIY4mwoY2Mywq0gI/8c26426d81ec3da7247246baff95fc9a/activity-feed-android-create-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![activity-feed-android-target-device](//images.contentful.com/1es3ne0caaid/27mSDfxqYowQs80KIOcQAM/96714408b4c7866569e31c57eaa54aa3/activity-feed-android-target-device.png)\n\nNext, create an initial empty activity:\n\n![activity-feed-android-add-activity](//images.contentful.com/1es3ne0caaid/5LmK2Ij7NemKwsmoe4Es84/47eb17b20b83969fd71ce839df85865c/activity-feed-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![activity-feed-android-customize-activity](//images.contentful.com/1es3ne0caaid/3q9QEPf3NmOKco6S2aiciM/121fdec6ed6f91779d08ddd69e0488b8/activity-feed-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.android.support:cardview-v7:25.1.1'\n    compile 'com.github.curioustechizen.android-ago:library:1.3.2'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\n\nAt the time of this writing, the latest SDK version is 25, so that's my target SDK version.\n\nWe're going to use the `RecyclerView` and `CardView` components from the [Support Library](https://developer.android.com/topic/libraries/support-library/features.html), so make sure you have it installed (in *Tools -\u003e Android -\u003e SDK Manager -\u003e SDK Tools tab* the *Android Support Repository* must be installed).\n\nSync the Gradle project so the modules can be installed and the project built.\n\nBefore we forget (I always do), let's add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.feed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\nIf you want to modify the style of the app, in the `res/values` folder, modify the [colors.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/colors.xml) file so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003cresources\u003e\n    \u003ccolor name=\"primary\"\u003e#03A9F4\u003c/color\u003e\n    \u003ccolor name=\"primary_dark\"\u003e#0288D1\u003c/color\u003e\n    \u003ccolor name=\"primary_light\"\u003e#B3E5FC\u003c/color\u003e\n    \u003ccolor name=\"accent\"\u003e#FF4081\u003c/color\u003e\n    \u003ccolor name=\"primary_text\"\u003e#212121\u003c/color\u003e\n    \u003ccolor name=\"secondary_text\"\u003e#757575\u003c/color\u003e\n    \u003ccolor name=\"icons\"\u003e#FFFFFF\u003c/color\u003e\n    \u003ccolor name=\"divider\"\u003e#BDBDBD\u003c/color\u003e\n\u003c/resources\u003e\n```\n\nAs well as the [styles.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/styles.xml) file to match these color definitions:\n\n```\n\u003cresources\u003e\n\n    \u003c!-- Base application theme. --\u003e\n    \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n        \u003c!-- Customize your theme here. --\u003e\n        \u003citem name=\"colorPrimary\"\u003e@color/primary\u003c/item\u003e\n        \u003citem name=\"colorPrimaryDark\"\u003e@color/primary_dark\u003c/item\u003e\n        \u003citem name=\"colorAccent\"\u003e@color/accent\u003c/item\u003e\n    \u003c/style\u003e\n\n\u003c/resources\u003e\n```\n\nNow, modify the layout file [activity_main.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/activity_main.xml) so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.pusher.feed.MainActivity\"\u003e\n\n    \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_alignParentLeft=\"true\"\n        android:layout_alignParentStart=\"true\"\n        android:id=\"@+id/recycler_view\"\n        android:scrollbars=\"vertical\" /\u003e\n\u003c/RelativeLayout\u003e\n```\n\nWe're going to use a [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html) to display the events, which we'll store in a list. Each item in this list is displayed in an identical manner, so let's define another layout file to inflate each item.\n\nCreate the file [event_row.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/event_row.xml) with the following content:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    card_view:cardCornerRadius=\"4dp\"\n    card_view:cardElevation=\"4dp\"\n    card_view:cardUseCompatPadding=\"true\"\n    card_view:contentPadding=\"8dp\"\u003e\n\n    \u003cRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceLarge\"\n            android:text=\"Event\"\n            android:id=\"@+id/event\"\n            android:layout_alignParentTop=\"true\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceMedium\"\n            android:text=\"ID\"\n            android:id=\"@+id/id\"\n            android:layout_below=\"@+id/event\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003ccom.github.curioustechizen.ago.RelativeTimeTextView\n            android:id=\"@+id/timestamp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceSmall\"\n            android:layout_below=\"@+id/id\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Data\"\n            android:id=\"@+id/data\"\n            android:layout_below=\"@+id/timestamp\"\n            android:textAlignment=\"center\"\n            android:layout_marginTop=\"8dp\" /\u003e\n    \u003c/RelativeLayout\u003e\n\n\u003c/android.support.v7.widget.CardView\u003e\n```\n\nHere we're using a [CardView](https://developer.android.com/reference/android/support/v7/widget/CardView.html) to show the information inside a card, with shadows and rounded corners. For each item, we're going to present:\n\n- A `TextView` for the name of the event (*created*, *updated*, or *deleted*).\n- A `TextView` for the ID of the record (for example, *c2d6*).\n- A [RelativeTimeTextView](https://github.com/curioustechizen/android-ago), a custom `TextView` that displays the relative time with respect to the reference point (the moment the event is received), automatically refreshing the text as needed.\n- A `TextView` for the data contained in the record (anything the user sends, for example, *Temperature: 80°F*).\n \nNow, to store the information of each event, let's create a class, [com.pusher.feed.Event](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/Event.java):\n\n```\npublic class Event  {\n    private String name;\n    private String id;\n    private String data;\n\n    public Event(String name, String eventId, String data) {\n        this.name = name;\n        this.id = eventId;\n        this.data = data;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getData() {\n        return data;\n   }\n}\n```\n\n`RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source (in this case a list of `Event` instances), and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item, so first create the class [com.pusher.feed.EventAdapter](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/EventAdapter.java) with the following code:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private List\u003cEvent\u003e items;\n\n    public EventAdapter(List\u003cEvent\u003e items) {\n        this.items = items;\n    }\n\n    public void addEvent(Event event) {\n        // Add the event at the beginning of the list\n        items.add(0, event);\n        // Notify the insertion so the view can be refreshed\n        notifyItemInserted(0);\n    }\n\n    @Override\n    public int getItemCount() {\n        return items.size();\n    }\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n\n    }\n}\n```\n\nWe initialize the class with a list of `Event`, provide a method to add `Event` instances at the beginning of the list (`addEvent(Event)`) and then notify the insertion so the view can be refreshed, and implement `getItemCount` so it returns the size of the list.\n\nThen, let's add the `ViewHolder` as an inner class, it references the `View` components for each item in the list:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private ArrayList\u003cEvent\u003e items;\n\n    public static class EventViewHolder extends RecyclerView.ViewHolder {\n        // Card fields\n        public TextView event;\n        public TextView id;\n        public RelativeTimeTextView timestamp;\n        public TextView data;\n\n        public EventViewHolder(View v) {\n            super(v);\n            event = (TextView) v.findViewById(R.id.event);\n            id = (TextView) v.findViewById(R.id.id);\n            timestamp = (RelativeTimeTextView) v.findViewById(R.id.timestamp);\n            data = (TextView) v.findViewById(R.id.data);\n        }\n    }\n\n    ...\n}\n```\n\nAnd implement the methods `onCreateViewHolder` and `onBindViewHolder`:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    ...\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.event_row, viewGroup, false);\n\n        return new EventViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n        Event event = items.get(i);\n\n        viewHolder.event.setText(event.getName());\n        viewHolder.id.setText(event.getId());\n        viewHolder.timestamp.setReferenceTime(System.currentTimeMillis());\n        viewHolder.data.setText(event.getData());\n    }\n}\n```\n\nIn the `onCreateViewHolder` method, we inflate the layout with the content of the `event_row.xml` file we created earlier, and in `onBindViewHolder`, we set the values of the views with the event in turn. Notice how we set the reference time on `RelativeTimeTextView` so it can display a text like *Just now* or *10 minutes ago*.\n\nIn the class [com.pusher.feed.MainActivity](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/MainActivity.java), let's start by defining the private fields we're going to need:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    private RecyclerView.LayoutManager lManager;\n    private EventAdapter adapter;\n    private Pusher pusher = new Pusher(\"ENTER_PUSHER_APP_KEY_HERE\");\n    private static final String CHANNEL_NAME = \"events_to_be_shown\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ....\n    }\n}\n```\n\n`RecyclerView` works with a [LayoutManager](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html) to handle the layout and scroll direction of the list. We declare the `EventAdapter`, the `Pusher` object and the identifier for the Pusher channel. Remember to replace your Pusher app key, if you still don't have one, this would be a good time to [sign up for a free account](https://pusher.com/signup) and [create you app](https://dashboard.pusher.com).\n\nInside the `onCreate` method, let's assign a [LinearLayoutManager](https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html) to the `RecyclerView` and create the `EventAdapter` with an empty list:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get the RecyclerView\n        RecyclerView recycler = (RecyclerView) findViewById(R.id.recycler_view);\n\n        // Use LinearLayout as the layout manager\n        lManager = new LinearLayoutManager(this);\n        recycler.setLayoutManager(lManager);\n\n        // Set the custom adapter\n        List\u003cEvent\u003e eventList = new ArrayList\u003c\u003e();\n        adapter = new EventAdapter(eventList);\n        recycler.setAdapter(adapter);\n    }\n}\n```\n\nFor the Pusher part, we first subscribe to the channel:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n}\n```\n\nThen, we create the listener that will be executed when an event arrives:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    ...\n    SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Event evt = gson.fromJson(data, Event.class);\n                        evt.setName(event + \":\");\n                        adapter.addEvent(evt);\n                        ((LinearLayoutManager)lManager).scrollToPositionWithOffset(0, 0);\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\nHere, the JSON string that we receive is converted to an `Event` object, the name of the event is set to the name of the event received, and the object is added to the adapter. Finally, we move to the top of the list.\n\nNext, bind the events to this listener and call the `connect` method on the Pusher object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        channel.bind(\"created\", eventListener);\n        channel.bind(\"updated\", eventListener);\n        channel.bind(\"deleted\", eventListener);\n\n        pusher.connect();\n    }\n}\n```\n\nThe `connect` method can take a listener that can be helpful to debug problems you might have:\n\n```\npusher.connect(new ConnectionEventListener() {\n    @Override\n    public void onConnectionStateChange(ConnectionStateChange change) {\n        System.out.println(\"State changed to \" + change.getCurrentState() +\n            \" from \" + change.getPreviousState());\n    }\n\n   @Override\n    public void onError(String message, String code, Exception e) {\n        System.out.println(\"There was a problem connecting!\");\n        e.printStackTrace();\n    }\n});\n```\n\nFinally, `MainActivity` also needs to implement the `onDestroy()` method so we can have the opportunity to unsubscribe from Pusher when the activity is destroyed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n}\n```\n\nAnd that's all the code on the Android part. Let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![activity-feed-android-deploy-app](//images.contentful.com/1es3ne0caaid/CFHd4HGgfYmmOc42MgO40/f530f27b6586deb77c4d711817697e80/activity-feed-android-deploy-app.png)\n\nYou'll be presented with an almost blank screen:\n\n![activity-feed-android-app](//images.contentful.com/1es3ne0caaid/63EKVtRYqcssUa6MmcwGY4/27d4d24fdb3dc81d4366dba37fc441f1/activity-feed-android-app.png)\n\nFor the back-end, you can use something to call the API endpoints with a JSON payload, like [cURL](https://curl.haxx.se/):\n\n``` \n# POST\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"data\":\"Temperature: 80°F\"}' http://localhost:3000/api\n# PUT\ncurl -H \"Content-Type: application/json\" -X PUT -d '{\"data\":\"Temperature: 85°F\"}' http://localhost:3000/api/aqw3\n# DELETE\ncurl -X DELETE http://localhost:3000/api/aqw3\n\n# In Windows, change single quotes to quotation marks and escape the ones inside curly brackets\ncurl -H \"Content-Type: application/json\" -X POST -d \"{\\\"data\\\":\\\"Temperature: 80°F\\\"}\" http://localhost:3000/api\n\n# Or use file, for example data.json\ncurl -H \"Content-Type: application/json\" -X POST --data @data.json http://localhost:3000/api\n```\n\nOr use a tool like [Postman](https://www.getpostman.com/):\n\n![activity-feed-android-postman](//images.contentful.com/1es3ne0caaid/3jUxsuEEgUM8c6mmEwiuGU/ab37f83253c98a637d66b8837a45baf9/activity-feed-android-postman.png)\n\nWhen a request is received on the API side, the event will show up in the app:\n\n![activity-feed-android-app-test](//images.contentful.com/1es3ne0caaid/4XKXil7es0EGkICAqgUA4S/cb52327f73792a6adb269b506bbd36fa/activity-feed-android-app-test.png)\n\nOr if you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![activity-feed-android-pusher-debug-console](//images.contentful.com/1es3ne0caaid/74tDZ8NMlyosmg6MU6kWIG/1cfe3514ad6666e8578c3e196a53431b/activity-feed-android-pusher-debug-console.png)\n\n## Conclusion\n\nHopefully, this tutorial has shown you in an easy way how to build an activity feed for Android apps with Pusher. You can improve the app by changing the design, showing more information, or saving it to a database.\n\n## Further reading\n\n- [Pusher Java client](https://github.com/pusher/pusher-websocket-java)\n- [Android-ago](https://github.com/curioustechizen/android-ago)\n- [Activity's lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle.html)\n- [Creating Lists and Cards](https://developer.android.com/training/material/lists-cards.html)","metaTitle":"Build an activity feed in Android ","metaDescription":"Build a live activity feed in Android using Java, Node.js and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Oj0XeT59CGOEuY24sUwEK","type":"Entry","createdAt":"2018-02-28T14:04:12.045Z","updatedAt":"2020-06-19T13:18:43.153Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Android ","url":"realtime-table-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-android-table","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}}],"reviewDate":"2018-01-19","description":"In this tutorial, build a simple live table for Android devices with Java.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"If you are building an app that handles extensive amounts of data, you might want to implement realtime tables at some point. Let’s take a content management system for instance. Large amounts of data are added and removed often, and we would like the changes to be available to consumers in realtime. \n\nIn this tutorial, we will be utilizing the Pusher Android SDK's client-side library to quickly and easily build a realtime data table. \n\nWe’ll be using a few developer tools to achieve this fit, including:\n\n- [Android Studio](https://developer.android.com/studio/intro/index.html) - The Official IDE for Android Development, it provides the fastest tools for building apps on every type of Android device.\n- [Pusher](https://pusher.com/) - A free, realtime, easy to use pub/sub service. Pusher makes realtime as easy as using basic events.\n\nThe flow of our app is that the user will fill out a form to add a new employee to an employees table and click a “save” button. This will send a POST request to our server. In this tutorial, we will use a simple NodeJS server to provide a single API endpoint.\nOnce our server receives the POST request, it will render the data to all connected clients, which will show the data on their tables in realtime.\n\nHere is a glimpse of what we are going to build:\n\n![realtime-table-android-add-employee](//images.contentful.com/1es3ne0caaid/2GYgpYFQIESI8eaEMaICIC/269bb72f1bbfd90ebbe4e7fbef85438e/realtime-table-android-add-employee.jpg)\n\n![realtime-table-android-employee-1](//images.contentful.com/1es3ne0caaid/58oMsLwdvq4EA0U8S0eacM/d7c0b9a0204d906e19411cae59743f63/realtime-table-android-employee-1.jpg)\n\n![realtime-table-android-employee-3](//images.contentful.com/1es3ne0caaid/1aHlfafnXuoqmqsg0Uiq8/92d5b45f60e9d8b2b063abf446680343/realtime-table-android-employee-3.jpg)\n\n## Set Up\n### Create a new project:\n\n\n1. Open Android Studio and select New Project from the File menu.\n2. Set the minimum SDK for the app to be API 16 (Android 4.1, Jelly Bean).\n3. Click through the wizard, ensuring that Empty Activity is selected. Leave the Activity Name set to `MainActivity`, and leave the Layout Name set to `activity_main`.\n\n\n### Add the Pusher Android SDK to gradle:\n\nOnce you’ve set up your application on Android Studio, or your preferred IDE, then install Pusher as a dependency. In the `build.gradle` file of your application module, add:\n \n```\n    repositories {\n      maven { url 'http://clojars.org/repo' }\n    }\n    \n    dependencies {\n      compile 'com.pusher:pusher-java-client:1.0.0'\n      compile 'com.loopj.android:android-async-http:1.4.9' \n      compile 'com.google.code.gson:gson:2.2.4' \n    }\n```\n\nSync the gradle project. Pusher along with other modules we’ll need later, should now be installed. \n\nHowever, you can find your Pusher credentials when you create an app after [signing up for a free account](https://pusher.com/signup). Be sure to keep them handy for when we start adding some realtime features. \n\n## Client-Side\n### Creating the form\n\nIn the created project, open the `activity_main.xml` file and create the input form to collate the user details:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"#fff\"\u003e\n    \u003cScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\u003e\n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            android:layout_margin=\"10dp\"\n            android:layout_centerVertical=\"true\"\n            android:background=\"@drawable/layoutstyle\"\n            android:layout_centerHorizontal=\"true\"\u003e\n    \n            \u003cTextView\n                android:layout_gravity=\"center\"\n                android:layout_margin=\"16dp\"\n                android:textSize=\"20sp\"\n                android:textStyle=\"bold\"\n                android:textColor=\"#000\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Add Employee\"/\u003e\n    \n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtName\"\n                android:padding=\"8dp\"\n                android:fontFamily=\"serif\"\n                android:textColor=\"#fff\"\n                android:hint=\"Name\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n    \n            \u003cEditText\n                android:padding=\"8dp\"\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtAge\"\n                android:fontFamily=\"serif\"\n                android:textColor=\"#fff\"\n                android:layout_width=\"match_parent\"\n                android:hint=\"Age\"\n                android:layout_height=\"wrap_content\" /\u003e\n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtPosition\"\n                android:padding=\"8dp\"\n                android:textColor=\"#fff\"\n                android:hint=\"Position\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:fontFamily=\"serif\"\n                android:id=\"@+id/edtAddress\"\n                android:padding=\"8dp\"\n                android:textColor=\"#fff\"\n                android:hint=\"Address\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n    \n            \u003cButton\n                android:id=\"@+id/BtnSave\"\n                android:layout_gravity=\"center\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:onClick=\"AddEmployee\"\n                android:text=\"Save\"/\u003e\n    \n          \u003c/LinearLayout\u003e\n        \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e \n```\n\nNext we define some custom button styles and layout styles to give our app the desired user interface as can be seen in the snapshots earlier posted. So create two new drawable files called buttonstyle.xml and layoutstyle.xml and copy the codes therein into them.\nThese files only add round shapes to the EditText fields and LinearLayout. Hence, you could decide not to add my designs to your own work. However, to run the app with my designs and avert any xml errors, simply copy these files from the gist we attached above and paste in your own drawable files or simply delete every occurrence of `buttonstyle.xml` or `layoutstyle``.xml` in your xml. Your app will work just fine either way.\n\nThen open the `MainActivity.java` class and update it as follows to provide references to the EditText objects. This allows us to get the text from them:\n\n```\n    package com.example.ekene.pushapp;\n    \n    import android.support.v7.app.AppCompatActivity;\n    import android.os.Bundle;\n    import android.widget.EditText;\n    \n    public class MainActivity extends AppCompatActivity {\n    \n      private EditText edtName, edtAge, edtPosition, edtAddress;\n      private Button btnSave;\n      @Override\n      protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    \n        edtName = (EditText)findViewById(R.id.edtName);\n        edtAddress = (EditText)findViewById(R.id.edtAddress);\n        edtAge = (EditText)findViewById(R.id.edtAge);\n        edtPosition = (EditText)findViewById(R.id.edtPosition);\n       }\n    }\n```\n\n### Creating the table\n\nNext we create the Employee’s Table where we’ll render the form data. We’ll do this with Android Studio’s [TableLayout](https://developer.android.com/reference/android/widget/TableLayout.html) and [TableRow](https://developer.android.com/reference/android/widget/TableLayout.html). So inside the `activity_main.xml` file, just below the form’s Linear Layout, we add:\n\n```\n    \u003cTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textColor=\"#000\"\n        android:textSize=\"20sp\"\n        android:fontFamily=\"serif\"\n        android:text=\"Employees\"\n        android:gravity=\"center\"/\u003e\n    \n        \u003cTableLayout\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/table_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cTableRow\n                android:layout_height=\"wrap_content\"\n                android:layout_width=\"match_parent\"\n                android:id=\"@+id/table_row1\"\n                android:padding=\"10dp\"\u003e\n    \n                \u003cTextView\n                    android:id=\"@+id/name\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:textColor=\"#000\"\n                    android:text=\"Name\"/\u003e\n                \u003cTextView\n                    android:id=\"@+id/age\"\n                    android:textColor=\"#000\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Age\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/position\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Position\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/address\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"location\"/\u003e\n    \n            \u003c/TableRow\u003e\n            \u003cView\n                android:layout_height=\"3dip\"\n                android:layout_width=\"match_parent\"\n                android:background=\"#ff0000\"/\u003e\n          \u003c/TableLayout\u003e\n        \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```    \n\nBasically, this table is temporarily serving as a mock up for our application at this point. Later on we’’ll be creating the table dynamically with a `ListView`*.*\n\n## Adding new employees to the table\n\nTo add new records to our table, we set up the event listener for the ‘Save’ button like so:\n\n```\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    \n        private EditText edtName, edtAge, edtPosition, edtAddress;\n        private Button btnSave;\n    \n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.activity_main);\n    \n            // get our input fields by its ID        \n              edtName = (EditText)findViewById(R.id.edtName);\n              edtAddress = (EditText)findViewById(R.id.edtAddress);\n              edtAge = (EditText)findViewById(R.id.edtAge);\n              edtPosition = (EditText)findViewById(R.id.edtPosition);\n    \n             // get our button by its ID\n            btnSave = (Button) findViewById(R.id.BtnSave);\n    \n            // set its click listener\n            btnSave.setOnClickListener(this);\n        }\n```\n\nWe’ll then define a method that will execute when the save button is clicked to get the data from our input fields and post to the server.\n\n```\n        @Override\n        public void onClick(View v) {\n            addEmployee();\n        }\n    \n        private void addEmployee()  {\n        }\n```\n\nThe `addEmployee()` method will simply get the values from the `EditText` objects and POST it to the server. In this tutorial, we’ll be using the [AsyncHTTPClient](https://github.com/AsyncHttpClient/async-http-client) library to send records to our server.\n\nSo let’s go ahead with creating and sending our request parameters in the `MainActivity.java` file:\n\n```\n    package com.example.ekene.pushapp;\n    \n    import com.loopj.android.http.AsyncHttpClient;\n    import com.loopj.android.http.JsonHttpResponseHandler;\n    import com.loopj.android.http.RequestParams;\n    import org.json.JSONArray;\n    import android.text.TextUtils;\n    \n    public class MainActivity extends AppCompatActivity {\n    \n        private void addEmployee(View v)  {\n    \n            String employeeName = edtName.getText().toString();\n            String employeeAge = edtAge.getText().toString();\n            String employeePosition = edtPosition.getText().toString();\n            String employeeAddress = edtAddress.getText().toString();\n    \n             // return if the input fields are blank\n                if (TextUtils.isEmpty(employeeName) \u0026\u0026 TextUtils.isEmpty(employeeAge) \u0026\u0026 \n                    TextUtils.isEmpty(employeePosition)\u0026\u0026 \n                    TextUtils.isEmpty(employeeAddress)) {\n                return;\n            }\n            \n            RequestParams params = new RequestParams();\n            // set our JSON object\n            params.put(\"name\", employeeName);\n            params.put(\"age\", employeeAge);\n            params.put(\"position\", employeePosition);\n            params.put(\"address\", employeeAddress);\n    \n            // create our HTTP client\n            AsyncHttpClient client = new AsyncHttpClient();\n            ...\n        }\n```\n\nWe’ll then define a String variable called  `RECORDS_ENDPOINT` in `MainActivity` and set it to point to the URL of our server e.g:\n\n```\n    private static final String RECORDS_ENDPOINT = \"http://localhost:3000/records\";\n```\n\nThen let’s make it so that when the request is successful it clears the `inputFields`, or when it fails it alerts the user that it “Couldn’t Post” with a Toast.\nSo we continue creating our HTTP client inside the `MainActivity` like so:\n\n```\n    ....\n    client.post(RECORDS_ENDPOINT, params, new JsonHttpResponseHandler(){\n    \n        @Override\n        public void onSuccess(\n        int statusCode, \n        cz.msebera.android.httpclient.Header[] headers, \n        JSONArray response) {\n            super.onSuccess(statusCode, headers, response);\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    edtName.setText(\"\");\n                    edtAge.setText(\"\");\n                    edtPosition.setText(\"\");\n                    edtAddress.setText(\"\");\n                }\n            });\n        }\n    \n        @Override\n        public void onFailure(\n        int statusCode, \n        cz.msebera.android.httpclient.Header[] headers, \n        String responseString, \n        Throwable throwable) {\n            super.onFailure(statusCode, headers, responseString, throwable);\n                  Toast.makeText(\n                          getApplicationContext(), \"Couldn't Post!\",\n                          Toast.LENGTH_LONG\n                  ).show();\n          }\n        });\n      }\n    }\n```\n\nAt this point the client is set up to send the input to the server. Next we’ll set up our mini API \n\n## Server-side\n\nAt this point we will integrate Pusher at the back end. Pusher is a simple hosted API for quickly, easily and securely implementing realtime two-way functionality on web and mobile apps. To achieve this, we’ll need to set it up on the server-side.\n\nInstall [NodeJS](https://nodejs.org/en/) and [Express](http://expressjs.com/) if you haven’t already. Generate your table-backend with:\n\n```\n    $ express table-backend \n    $ cd table-backend \n    $ npm install\n```\n\nNow install the [Pusher Node library](http://github.com/pusher-http-node) with:\n\n```\n    $ npm install pusher --save\n```\n\nNow we initialize the `Pusher` object in our `app.js` file with the application credentials:\n\n```\n    var Pusher = require('pusher');\n    var express = require('express');\n    var options = PusherOptions();\n        options.setCluster(PUSHER_APP_CLUSTER);\n    var pusher = new Pusher({\n        appId: \"your app id\",\n        key: \"your app key\",\n        secret: \"your app secret\"    \n    });\n```\n\nNext we create the endpoint that receives JSON from the client. Then we’ll fire up a Pusher event called `new_record` on a channel called `records`, passing along the data we received from the client.\n\n```\n    app.post('/records', function(req, res){\n      var record = req.body;\n      pusher.trigger('records', 'new_record', record);\n      res.json({success: 200});\n    });\n```\n\nNext open your `AndroidManifest.xml` file and enable internet permissions. Just before the Application tag, add:\n\n`\u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e`\n\nNow let’s fire up our server, and run the mobile app either on an emulator or on any android device. Meanwhile, open up the Pusher Debug Console for your app on [your dashboard](http://dashboard.pusher.com/). Then on your emulator or device, you should see the Add Employee form, fill in the fields and and click the `Save` button, you should see the information you just supplied pop up in realtime on your Debug Console. \n\n## Render Live Table Records\n\nWe’ve come a long way but we are not done, Let’s now have our Android client listen for incoming employee records, and show them in a list.\nSo in `activity_main.xml`, add a `ListView` as the last child of `LinearLayout` and above the `TableLayout` that wraps our table headings. Your layout XML starting from the TableLayout  should look like so:\n\n```\n    \u003cTableLayout\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/table_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cTableRow\n                android:layout_height=\"wrap_content\"\n                android:layout_width=\"match_parent\"\n                android:id=\"@+id/table_row1\"\n                android:padding=\"10dp\"\u003e\n    \n                \u003cTextView\n                    android:id=\"@+id/name\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:textColor=\"#000\"\n                    android:text=\"Name\"/\u003e\n                \u003cTextView\n                    android:id=\"@+id/age\"\n                    android:textColor=\"#000\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Age\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/position\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Position\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/address\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"location\"/\u003e\n    \n            \u003c/TableRow\u003e\n            \u003cView\n                android:layout_height=\"3dip\"\n                android:layout_width=\"match_parent\"\n                android:background=\"#ff0000\"/\u003e\n        \u003c/TableLayout\u003e\n        // add a listview to display our table records \n        \u003cListView\n        android:id=\"@+id/records_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"500dp\"\n        android:layout_marginTop=\"16dp\"\u003e\n        \u003c/ListView\u003e\n       \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```\n\nIn order to display each message within the `ListView`, we’ll have to create an adapter that turns a list into a set of views. In our MainActivity `onCreate` method, let’s bind our `ListView` to this adapter like so: **NB** *we haven’t created the adapter yet, we’ll do that in a bit.*\n\n```\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener {\n        ...\n        private RecordAdapter recordAdapter;\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            ...\n            recordAdapter= new RecordAdapter(this, new ArrayList\u003cRecord\u003e());\n            final ListView recordsView = (ListView) findViewById(R.id.records_view);\n            recordsView.setAdapter(recordAdapter);\n        }\n```\n\nNext we create the `Record.java` class which comprises a single row in the List:\n\n```\n    public class Record {\n        public String age;\n        public String name;\n        public String position;\n        public String address;\n    }\n```\n\nNext we create the adapter. Create a new class `RecordAdapter`. We initialized it in the `MainActivity` Class with our `MainActivity`‘s context. We’ll create it like so:\n\n```\n    public class RecordAdapter extends BaseAdapter {\n    \n        private Context recordContext;\n        private List\u003cRecord\u003e recordList;\n    \n        public RecordsAdapter(Context context, List\u003cRecord\u003e records) {\n            recordList = records;\n            recordContext = context;\n        }\n```\n\nBecause we extended `BaseAdapter`, Android Studio will prompt us to implement it’s three associating methods `getCount`, `getItem` and `getItemId`, which we can do like so:\n\n```\n    @Override\n    public int getCount() {\n        return recordList.size();\n    }\n    @Override\n    public Object getItem(int i) {\n        return recordList.get(i);\n    }\n    @Override\n    public long getItemId(int i) {\n        return i;\n    }\n```\n\nFinally we’ll have to implement a method called `getView()` that will convert an item in the `ArrayList` of `Records` to a view. But first we need to create a `RecordViewHolder`  private class to encapsulate the views we would like to be part of the message. In this case, we’re going to have a:\n\n- nameView - for the employees name\n- ageView - for the employees name\n- nameView - for the employees name\n- nameView - for the employees name\n\nSo within our `RecordAdapter`, add a private nested class:\n\n```\n    private static class RecordViewHolder {\n    \n        public TextView nameView;\n        public TextView positionView;\n        public TextView ageView;\n        public TextView addressView;\n    }\n```\nNext we create another layout resource file called `record.xml`. This layout will hold the views we defined in the `RecordViewHolder` class and render it to the list. Hence it’ll contain four `TextViews` for the name, age, position and address respectively.\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cTextView\n            android:id=\"@+id/record_name\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:textColor=\"#000\"\n            android:text=\"Name\"/\u003e\n        \u003cTextView\n            android:id=\"@+id/record_age\"\n            android:textColor=\"#000\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Age\"/\u003e\n        \u003cTextView\n            android:textColor=\"#000\"\n            android:id=\"@+id/record_position\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Position\"/\u003e\n        \u003cTextView\n            android:textColor=\"#000\"\n            android:id=\"@+id/record_address\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"location\"/\u003e        \n    \u003c/LinearLayout\u003e\n```\n\nNow that we have a `RecordViewHolder` to encapsulate the visual elements that comprise a record, and a `record.xml` layout to inflate those elements into, we can go ahead and implement our  `getView` method inside our RecordAdapter class like so:\n\n```\n    @Override\n    public View getView(int i, View view, ViewGroup viewGroup) {\n            RecordViewHolder holder;\n            \n        if (view ==null){\n            LayoutInflater recordInflater = (LayoutInflater) \n            recordContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);\n            view = recordInflater.inflate(R.layout.record, null);\n            \n            holder = new RecordViewHolder();\n            holder.ageView = (TextView) view.findViewById(R.id.record_age);\n            holder.nameView = (TextView) view.findViewById(R.id.record_name);\n            holder.positionView = (TextView) view.findViewById(R.id.record_position);\n            holder.addressView = (TextView) view.findViewById(R.id.record_address);\n            view.setTag(holder);\n            \n        }else {\n            holder = (RecordViewHolder) view.getTag();\n        }\n        \n            Record record = (Record) getItem(i);\n            holder.nameView.setText(record.name);\n            holder.ageView.setText(record.age);\n            holder.positionView.setText(record.position);\n            holder.addressView.setText(record.address);\n            return view;\n    }\n```\n\nWhat we want to do now is, when we receive an event from Pusher about a new record, we want to add that new record to our `RecordAdapter` and update our `recordsList` with that new employee record. Here’s how we achieve that:\n\n```\n    //...\n    public class RecordsAdapter extends BaseAdapter {\n      //...\n      public void add(Record record) {\n        recordList.add(record);\n        notifyDataSetChanged();\n      }\n    }\n```\n\nThis will add the record to the `recordsList` and `notifyDataSetChange()` will refresh the adapter, showing the new record.\nNow we can go back to `MainActivity` and start listening for Pusher records:\n\n```\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n             ...\n             // initialize Pusher\n            Pusher pusher = new Pusher(\"pusher_key\"); \n            pusher.setCluster(\"app_cluster\");\n             // subscribe to our \"records\" channel\n            Channel channel = pusher.subscribe(\"records\"); \n              // listen for the \"new_record\" event\n            channel.bind(\"new_record\", new SubscriptionEventListener() {\n                ...\n            }); \n            // connect to the Pusher API\n            pusher.connect(); \n        }\n```\n\nNow that we have initialized Pusher, connected to the API, and subscribed to the `records` channel, we can add our `SubscriptionEventListener` to execute when an event comes in. All we’ll need to do is parse the JSON (for this example we used the [Gson library](https://github.com/google/gson) to parse it into the `Record` object) and then add it to the `RecordAdapter` inside the `MainActivity` like so:\n\n```\n    channel.bind(\"new_record\", new SubscriptionEventListener() {\n        @Override\n        public void onEvent(String channelName, String eventName, final String data) {\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    Gson gson = new Gson();\n                    Record record = gson.fromJson(data, Record.class);\n                    recordAdapter.add(record);\n                    recordsView.setSelection(recordsAdapter.getCount() - 1);\n                }\n            });\n        }\n    });\n```\n\nAt this point, whenever we have a `new_record` event come in, we simply add it to our `RecordAdapter`, and the new record will appear in realtime! wow, that was amazing!\n\nNow run your app on an emulator or any android device, and give it a spin. If you encounter any issues, do consult the [source code](https://github.com/christiannwamba/pusher-android-table).\nIf you have an android device, you can [install the app here](https://drive.google.com/file/d/1yicGkXQyOLCnhhkmIHjVTDgAB_j-_9jm/view?usp=sharing) and see how it works.\n\n## Conclusion\n\nWith this walk through, you should be able to build cross platform realtime apps with ease. Other Pusher features are available but their use depends on the requirements of your app. You can have a look at [Pusher’s](https://pusher.com/docs/) documentation for a deeper comprehension of the project.\n\n### Appendix: Pusher Setup\n\n1. [Sign up](https://dashboard.pusher.com/accounts/sign_in) for a free Pusher account:\n![realtime-table-android-signup](//images.contentful.com/1es3ne0caaid/qUrCl4R2BauEiIckOwCAS/fc02e2b21cfdc56c05a09d2e3525bcff/realtime-table-android-signup.png)\n\n2. Create a new app by selecting **Apps** on the sidebar and clicking **Create New** button on the bottom of the sidebar:\n![realtime-table-android-dashboard](//images.contentful.com/1es3ne0caaid/4Z3RALCwV2AO42YcmcayII/8b534c87265b7eacb6be6c00de639954/realtime-table-android-dashboard.png)\n\n3. Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n![realtime-table-android-create-app](//images.contentful.com/1es3ne0caaid/47GBScjOI0MWIq2GsokAU8/0ab3ef594630f3548b39b7cfd4e760a6/realtime-table-android-create-app.png)\n\n4. You can retrieve your keys from the **App Keys** tab:\n![realtime-table-android-api-keys](//images.contentful.com/1es3ne0caaid/50Epp9EnvqmOOWUUUuE0Sy/71df392b707f50ed6fd04da9d375ee65/realtime-table-android-api-keys.png)","metaTitle":"Build a realtime table with Android ","metaDescription":"In this tutorial, we will be using our Android library to quickly and easily build a live data table. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NZ02IEDRuAUGGMyOU2s0K","type":"Entry","createdAt":"2018-02-22T15:02:41.344Z","updatedAt":"2018-02-28T14:35:55.960Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime graph in Android","url":"graph-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/graph-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}}],"reviewDate":"2017-06-01","description":"Create a graph that updates in realtime in your Android device using Java and Node.js.","prerequisite":"A basic understanding of Java and Node.js are needed to follow this tutorial.","content":"Despite the hype of serverless architectures and microservices, there are still a lot of applications deployed in servers that need to be managed, and one important part of this task is monitoring resources like CPU, memory, or disk space.\n\nThere are a lot of commercial and open source tools for monitoring servers, but what if you just need something simple and specific? Maybe something that can easily show in realtime if things are doing fine, and that you can check on your phone.\n\nIn this tutorial, we'll set up a Node.js process to calculate the memory usage of the system at specified intervals, send this information to a Pusher channel, and show it as a graph in an Android app.\n\nThis is how the final app will look:\n\n![realtime-graph-android-final-app](//images.contentful.com/1es3ne0caaid/2bkBA1hAVayKqwOqkouiaY/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-final-app.gif)\n\n## Setting up your Pusher application\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you create an app, you'll be asked to enter some configuration options:\n\n![realtime-graph-android-create-pusher-app](//images.contentful.com/1es3ne0caaid/bQei8GPFn2sCCqQAuIGka/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-create-pusher-app.png)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as the back-end tech. This will give you some sample code to get you started:\n\n![realtime-graph-android-getting-started-pusher](//images.contentful.com/1es3ne0caaid/dOqaJHXgVqYSCYWOOwoOM/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-getting-started-pusher.png)\n\nBut don't worry, this won't lock you into this specific set of technologies as you can always change them. With Pusher, you can use any combination of libraries.\n\nNext, copy your cluster ID (next to the app title, in this example `mt1`), App ID, Key, and Secret information, we'll need them next. You can also find them in the *App Keys* tab.\n\n## The Node process\n\nIn Node.js, the [os module](https://nodejs.org/api/os.html) provides a number of operating system-related utility methods.\n\nAfter requiring the module:\n\n```\nconst os = require('os');\n```\n\nWe can use the `totalmem()` function to get the total amount of system memory in bytes and `freemem()` to get the amount of free system memory, also in bytes.\n\nThis way, we use the `setInterval` function to get the memory information every ten seconds, for example, calculate the used memory, and publish it to a Pusher channel:\n\n```\nconst os = require('os');\nconst Pusher = require('pusher');\n\n// Set up Pusher\nconst pusher = new Pusher({\n  appId: '\u003cINSERT_PUSHER_APP_ID\u003e',\n  key: '\u003cINSERT_PUSHER_APP_KEY\u003e',\n  secret: '\u003cINSERT_PUSHER_APP_SECRET\u003e',\n  cluster: '\u003cINSERT_PUSHER_APP_CLUSTER\u003e',\n  encrypted: true,\n});\n\n// To convert from bytes to gigabytes\nconst bytesToGigaBytes = 1024 * 1024 * 1024;\n// To specify the interval (in milliseconds)\nconst intervalInMs = 10000;\n\nsetInterval(() =\u003e {\n  const totalMemGb = os.totalmem()/bytesToGigaBytes;\n  const freeMemGb = os.freemem()/bytesToGigaBytes;\n  const usedMemGb = totalMemGb - freeMemGb;\n\n  console.log(`Total: ${totalMemGb}`);\n  console.log(`Free: ${freeMemGb}`);\n  console.log(`Used: ${usedMemGb}`);\n\n  // To publish to the channel 'stats' the event 'new_memory_stat' \n  pusher.trigger('stats', 'new_memory_stat', {\n    memory: usedMemGb,\n  });\n}, intervalInMs);\n```\n\nSave this to a file, for example `memory.js`, create a `package.json` file if you haven't already with:\n\n``` \nnpm init -y\n```\n\nInstall the Pusher dependency with:\n\n``` \nnpm install --save pusher\n```\n\nAnd execute it with the command:\n\n```\nnode memory.js\n```\n\nYou should get the memory information printed in your console. Also, if you go to the *Debug Console* section of your app in the Pusher dashboard, you should see the events coming up:\n\n![realtime-graph-android-debug-pusher](//images.contentful.com/1es3ne0caaid/5rnwiXksvuQkE8s2MC40QI/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-debug-pusher.png)\n\nNow let's build the Android app.\n\n## Building the Android app\n\nFirst, make sure to have the latest version of Android Studio. Then, create a new project:\n\n![realtime-graph-android-create-project](//images.contentful.com/1es3ne0caaid/5E57o9g7D2e8Q8o6MWoCcU/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-create-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![realtime-graph-android-target-device](//images.contentful.com/1es3ne0caaid/4E8P3vRyjKK0sYeY6AYQoG/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-target-device.png)\n\nNext, create an initial empty activity:\n\n![realtime-graph-android-add-activity](//images.contentful.com/1es3ne0caaid/2AZjgo5ZusmIakaYG6G6KA/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![realtime-graph-android-customize-activity](//images.contentful.com/1es3ne0caaid/CopFqoOJm8my6OckIE4qe/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. First, add the following repository to your project level `build.gradle`:\n\n```\nallprojects {\n    repositories {\n        ...\n        maven { url \"https://jitpack.io\" }\n    }\n}\n```\nNext, in the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\nAt the time of writing, the latest SDK version is 25, so that's my target SDK version.\n\nTo graph the memory information we're going to use [MPAndroidChart](https://github.com/PhilJay/MPAndroidChart), one of the most popular chart libraries for Android.\n\nSync the Gradle project so the modules can be installed and the project built.\n\nDon't forget to add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.photofeed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\u003e\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\nNow, modify the layout file `activity_main.xml` to set a line chart that fills all the available space:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003candroid.support.constraint.ConstraintLayout \n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.pusher.memorygraph.MainActivity\"\u003e\n\n    \u003ccom.github.mikephil.charting.charts.LineChart\n        android:id=\"@+id/chart\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/\u003e\n\n\u003c/android.support.constraint.ConstraintLayout\u003e\n```\nOpen the `com.pusher.memorygraph.MainActivity` class. Let's start by defining some constants, like the info we'll need to instantiate the Pusher object. Also, let's define the total memory of our server as 16 (gigabytes) and set a maximum limit of 12 to draw a limit line in our chart.\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private LineChart mChart;\n\n    private Pusher pusher;\n\n    private static final String PUSHER_APP_KEY = \"\u003cINSERT_PUSHER_KEY\u003e\";\n    private static final String PUSHER_APP_CLUSTER = \"\u003cINSERT_PUSHER_CLUSTER\u003e\";\n    private static final String CHANNEL_NAME = \"stats\";\n    private static final String EVENT_NAME = \"new_memory_stat\";\n\n    private static final float TOTAL_MEMORY = 16.0f;\n    private static final float LIMIT_MAX_MEMORY = 12.0f;\n\n    ...\n\n}\n```\nIn the next code block, you can see how the job of configuring the chart is divided into four functions, how Pusher is set up, specifying that when an event arrives, the JSON object will be converted to an instance of the class `Stat` (that just contains the property `memory`) and this will be added to the chart with the `addEntry(stat)` method.\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    ...\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        mChart = (LineChart) findViewById(R.id.chart);\n\n        setupChart();\n        setupAxes();\n        setupData();\n        setLegend();\n\n        PusherOptions options = new PusherOptions();\n        options.setCluster(PUSHER_APP_CLUSTER);\n        pusher = new Pusher(PUSHER_APP_KEY);\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n\n        SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Stat stat = gson.fromJson(data, Stat.class);\n                        addEntry(stat);\n                    }\n                });\n            }\n        };\n\n        channel.bind(EVENT_NAME, eventListener);\n        pusher.connect();\n\n    }\n\n}\n```\nLet's review all the methods defined above. First, `setupChart()` configures some general options of the chart:\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    ...\n\n    private void setupChart() {\n        // disable description text\n        mChart.getDescription().setEnabled(false);\n        // enable touch gestures\n        mChart.setTouchEnabled(true);\n        // if disabled, scaling can be done on x- and y-axis separately\n        mChart.setPinchZoom(true);\n        // enable scaling\n        mChart.setScaleEnabled(true);\n        mChart.setDrawGridBackground(false);\n        // set an alternative background color\n        mChart.setBackgroundColor(Color.DKGRAY);\n    }\n\n}\n```\nThe `setupAxes()` method configures the options of the X and Y axes and adds the limit line we talked about before:\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    ...\n\n    private void setupAxes() {\n        XAxis xl = mChart.getXAxis();\n        xl.setTextColor(Color.WHITE);\n        xl.setDrawGridLines(false);\n        xl.setAvoidFirstLastClipping(true);\n        xl.setEnabled(true);\n\n        YAxis leftAxis = mChart.getAxisLeft();\n        leftAxis.setTextColor(Color.WHITE);\n        leftAxis.setAxisMaximum(TOTAL_MEMORY);\n        leftAxis.setAxisMinimum(0f);\n        leftAxis.setDrawGridLines(true);\n\n        YAxis rightAxis = mChart.getAxisRight();\n        rightAxis.setEnabled(false);\n\n        // Add a limit line\n        LimitLine ll = new LimitLine(LIMIT_MAX_MEMORY, \"Upper Limit\");\n        ll.setLineWidth(2f);\n        ll.setLabelPosition(LimitLine.LimitLabelPosition.RIGHT_TOP);\n        ll.setTextSize(10f);\n        ll.setTextColor(Color.WHITE);\n        // reset all limit lines to avoid overlapping lines\n        leftAxis.removeAllLimitLines();\n        leftAxis.addLimitLine(ll);\n        // limit lines are drawn behind data (and not on top)\n        leftAxis.setDrawLimitLinesBehindData(true);\n    }\n\n}\n```\nThe `setupData()` method just adds an empty `LineData` object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    ...\n\n    private void setupData() {\n        LineData data = new LineData();\n        data.setValueTextColor(Color.WHITE);\n\n        // add empty data\n        mChart.setData(data);\n    }\n\n}\n```\nThe `setLegend()` method sets the options of the legend for the data set that will be shown below the chart:\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    ...\n\n    private void setLegend() {\n        // get the legend (only possible after setting data)\n        Legend l = mChart.getLegend();\n\n        // modify the legend ...\n        l.setForm(Legend.LegendForm.CIRCLE);\n        l.setTextColor(Color.WHITE);\n    }\n\n}\n```\nIn turn, `createSet()` will create the data set for the memory data configuring some options for its presentation:\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    ...\n\n    private LineDataSet createSet() {\n        LineDataSet set = new LineDataSet(null, \"Memory Data\");\n        set.setAxisDependency(YAxis.AxisDependency.LEFT);\n        set.setColors(ColorTemplate.VORDIPLOM_COLORS[0]);\n        set.setCircleColor(Color.WHITE);\n        set.setLineWidth(2f);\n        set.setCircleRadius(4f);\n        set.setValueTextColor(Color.WHITE);\n        set.setValueTextSize(10f);\n        // To show values of each point\n        set.setDrawValues(true);\n\n        return set;\n    }\n\n}\n```\nThe `addEntry(stat)` method, the one used when an event arrives, will create a data set if none exists using the above method, add the entry from the `Stat` instance that is passed as argument, notify the data has changed, and set the options to limit the view to 15 visible entries (to avoid the chart looking crowded):\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    ...\n\n    private void addEntry(Stat stat) {\n        LineData data = mChart.getData();\n\n        if (data != null) {\n            ILineDataSet set = data.getDataSetByIndex(0);\n\n            if (set == null) {\n                set = createSet();\n                data.addDataSet(set);\n            }\n\n            data.addEntry(new Entry(set.getEntryCount(), stat.getMemory()), 0);\n\n            // let the chart know it's data has changed\n            data.notifyDataChanged();\n            mChart.notifyDataSetChanged();\n\n            // limit the number of visible entries\n            mChart.setVisibleXRangeMaximum(15);\n\n            // move to the latest entry\n            mChart.moveViewToX(data.getEntryCount());\n        }\n    }\n\n}\n```\nAnd finally, we override the method `onDestroy()` to disconnect from Pusher when needed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n\n}\n```\n\nAnd we're done, let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![realtime-graph-android-deploy-app](//images.contentful.com/1es3ne0caaid/62W3WetQUouMmuyu4gsuAG/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-deploy-app.png)\n\nThe following screen will show up:\n\n![realtime-graph-android-first-app-run](//images.contentful.com/1es3ne0caaid/2RpcGE9ieAk0KkcMw6w8iG/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-first-app-run.png)\n\nMake sure the Node.js is running. When new data about the memory is received, it will show up in the graph:\n\n![realtime-graph-android-final-app](//images.contentful.com/1es3ne0caaid/2bkBA1hAVayKqwOqkouiaY/bf8e90962701acda5f785ee00663cefd/realtime-graph-android-final-app.gif)\n\n\n## Conclusion\n\nRemember that you can find the final version of the Android app [here](https://github.com/eh3rrera/graph-pusher-android) and the Node.js process [here](https://github.com/eh3rrera/memory-pusher).\n\nHopefully, this tutorial has shown you how simple it is to build a realtime graph in Android with [Pusher](https://pusher.com/) and [MPAndroidChart](https://github.com/PhilJay/MPAndroidChart). You can improve the app by changing the design or type of graphic (a pie chart will work great to see the used vs the free memory), or show more information.\n\nRemember that your free Pusher account includes 100 connections, unlimited channels, 200k daily messages, SSL protection, and there are more [features](https://pusher.com/features) than just Pub/Sub Messaging. [Sign up here](https://pusher.com/signup).","metaTitle":"Build a realtime graph in Android","metaDescription":"Build a realtime graph in Android using Java, Node.js, MPAndroidChart and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1TShCcPQWgEYM8QwuOkWQA","type":"Entry","createdAt":"2018-02-22T15:02:44.257Z","updatedAt":"2018-02-27T14:51:40.406Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a collaborative text editor in Android","url":"collaborative-text-editor-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5HjouOQyOIwCcyuswYcIuc","type":"Entry","createdAt":"2018-02-16T18:20:46.412Z","updatedAt":"2018-04-23T13:19:32.814Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Perfect Makanju","url":"perfect-makanju","email":"damiperfect@gmail.com","twitter":"https://twitter.com/perfectmak","github":"https://github.com/perfectmak","guestWriter":true}}],"projectRepo":"https://github.com/perfectmak/collab-editor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}}],"reviewDate":"2017-05-11","description":"Build a collaborative text editor in Android, using Pusher to make the collaboration part easy.","prerequisite":"A basic understanding of Java is needed to follow this tutorial.","content":"In this tutorial, we will learn how to build a collaborative text editor in Android. We will be using [Pusher](https://pusher.com) to make the collaboration part easy.\n\nWe will be building a simple Android app and it will have a single activity containing only an `EditText` view. We will then keep track of changes to the `EditText` view and broadcast these changes to other users on the same application. The application will also listen for updates and update the `EditText` with changes received.\n\nHere is a demo of what will be built by the end of this tutorial:\n\n![collaborative-text-editor-android-demo](//images.contentful.com/1es3ne0caaid/3HhyeVyZEA8CG4Y26ySCqY/d681b61d6b5f22b82884da1157dba0e0/collaborative-text-editor-android-demo.gif)\n\nLet's get started!\n\n## Create the Android Studio Project\n\nLaunch Android Studio and create a new Project. You could name the application anything you want, but for the purpose of this tutorial we will name it 'CollabEditor'. Also, ensure you select the 'Empty Activity' option as the initial Activity and name it `MainActivity` on the 'Customize Activity Page'.\n\nOnce Android Studio is done with the project's setup, open the `build.gradle` file of your application's module to add the follow dependencies:\n\n```\ndependencies {\n    ...\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.google.code.gson:gson:2.7'\n}\n```\nThese add Pusher and Gson to our android project. Sync the Gradle project so the modules can be installed and the project built.\n\nNext, Add the INTERNET permission to the `AndroidManifest.xml` file.\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.collabeditor\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication \n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\u003e\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n# Create the text editor layout\n\nNext, open the `activity_main.xml` layout file and modify it to look like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.pusher.collabeditor.MainActivity\"\u003e\n\n    \u003cEditText\n        android:id=\"@+id/textEditor\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:hint=\"Editor is empty. Select to start typing\"\n        android:gravity=\"top\"/\u003e\n\n\u003c/LinearLayout\u003e\n```\n\nThe layout is quite simple. It contains an `EditText` with its width and height set to `match_parent`.\n\n## Create the 'EditorUpdate' model\n\nCreate the class `com.pusher.collabeditor.EditorUpdate` and write the following to it:\n\n```\npackage com.pusher.collabeditor;\n\npublic class EditorUpdate {\n\n    public String data;\n\n    public EditorUpdate(String data) {\n        this.data = data;\n    }\n}\n```\n\nThis class when converted to JSON with Gson corresponds to the following structure:\n\n```\n{\n  \"data\": \"Editor text will be here\"\n}\n```\n\nThis is the structure of JSON that would be sent to other users of the application when updates are made to the text editors content.\n\n## Setting up a Pusher account\n\nIf you don't already have a Pusher account, create a free Pusher account [here](https://pusher.com/signup) then log in to your dashboard. Once logged in, create an app by entering an app name (any name will do) and choosing a cluster in the Create App screen. After creating the new app, go to the `App Keys` tab and copy your **App ID**, **Key**, and **Secret** credentials. We will use them in our application.\n\n## Update the MainActivity\n\nNow, back in Android Studio, open the class `com.pusher.collabeditor.MainActivity`.\n\nFirst let us declare all the required constants and variables for the application:\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String DEBUG_TAG = MainActivity.class.getSimpleName();\n    private static final String PUSHER_API_KEY = \"YOUR PUSHER APP KEY\";\n    private static final String PUSHER_CLUSTER = \"PUSHER APP CLUSTER\";\n    private static final String AUTH_ENDPOINT = \"PUSHER AUTHENTICATION ENDPOINT\";\n\n    private Pusher pusher;\n    private EditText textEditor;\n    private TextWatcher textEditorWatcher;\n```\nEnsure you replace those variable values with your own Pusher credentials. I'll explain how to get the `AUTH_ENDPOINT` value later in this tutorial.\n\nNext, in the `onCreate` method, set the content view and initialize the Pusher object like this:\n\n```\n...\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    textEditor = (EditText) findViewById(R.id.textEditor);\n\n    pusher = new Pusher(PUSHER_API_KEY, new PusherOptions()\n            .setEncrypted(true)\n            .setCluster(PUSHER_CLUSTER)\n            .setAuthorizer(new HttpAuthorizer(AUTH_ENDPOINT)));\n\n}\n```\n\nWe set an authorizer because we are going to be using [Pusher's Client Events](https://pusher.com/docs/client_api_guide/client_events#trigger-events) to broadcast changes on the text editor to other users of the application. An advantage of this is that we don't need to route our updates through a server.\n\n## Using Pusher's Client Events\n\nTo use Pusher's `Client Events`, it needs to be enabled for your Pusher app. You can do this in the `Settings` tab for your app within the [Pusher's dashboard](https://dashboard.pusher.com/). `Client Events` can only be broadcast on a private channel and event names must start with the prefix `client-`.\n\nTo use private channels, the Pusher client must be authenticated hence the reason for the `AUTH_ENDPOINT`. Pusher makes writing an auth server easy. I used their Node.js template [here](https://pusher.com/docs/authenticating_users#implementing_private_endpoints). Once set up, update the `AUTH_ENDPOINT` of your code to the URL of the auth server.\n\nWith all this in mind, we now go back to the Android code. After initializing the Pusher client, we create a `PrivateChannelEventListener`:\n\n```\n...\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    ...\n\n    PrivateChannelEventListener subscriptionEventListener = new PrivateChannelEventListener() {\n\n        @Override\n        public void onEvent(String channel, String event, final String data) {\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    EditorUpdate editorUpdate = new Gson().fromJson(data, EditorUpdate.class);\n                    textEditor.setText(editorUpdate.data);\n                }\n            });\n        }\n\n        @Override\n        public void onAuthenticationFailure(String message, Exception e) {\n            Log.d(DEBUG_TAG, \"Authentication failed.\");\n            Log.d(DEBUG_TAG, message);\n        }\n\n        @Override\n        public void onSubscriptionSucceeded(String message) {\n            Log.d(DEBUG_TAG, \"Subscription Successful\");\n            Log.d(DEBUG_TAG, message);\n        }\n    };\n\n    ...   \n}\n```\n\nWhen an event is received in the `onEvent` method, we convert the JSON data to an `EditorUpdate` object using Gson and then update the editor's text with the data received.\n\nNext, we subscribe to our private channel and bind the event listener to client events on the channel.\n\n```\nfinal PrivateChannel editorChannel = pusher.subscribePrivate(\"private-editor\", subscriptionEventListener);\nnoteChannel.bind(\"client-update\", subscriptionEventListener);\n```\n\nNow, the text editor will update its content whenever it receives a `client-update` event.\n\nNext, we need to add a `TextWatcher` to our `textEditor`:\n\n```\ntextEditorWatcher = new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence charSequence, int start, int count, int after) {\n    }\n\n    @Override\n    public void onTextChanged(CharSequence charSequence, int start, int before, int count) {\n        String text = charSequence.toString();\n        EditorUpdate editorUpdate = new EditorUpdate(text);\n        noteChannel.trigger(\"client-update\", new Gson().toJson(editorUpdate));\n    }\n\n    @Override\n    public void afterTextChanged(Editable editable) {}\n};\n\ntextEditor.addTextChangedListener(textEditorWatcher);\n```\n\nSo when text changes on the editor, we trigger a `client-update` event on the editor channel. After this ensure that you connect and disconnect your Pusher client in the `onResume()` and `onPause()` methods respectively.\n\n```\n@Override\nprotected void onResume() {\n    super.onResume();\n    pusher.connect();\n}\n\n@Override\nprotected void onPause() {\n    pusher.disconnect();\n    super.onPause();\n}\n```\n\nWith this, our Android application is almost fully functional. If you were to run and test the Android application now, you would notice an endless update loop in the `EditText` whenever it receives an `client-update` event.\n\nThis loop is because when a `client-update` event is received, `textEditor.setText()` is called which in turn triggers `textEditorWatcher.onTextChanged()` and this causes another `client-update` to be sent to other applications which would restart the loop process. Below is an image showing how this looks like between two apps:\n\n![collaborative-text-editor-android-endless-loop](//images.contentful.com/1es3ne0caaid/4CDwc5sHHqUC2EGWUWsqa0/71bf64c611670c213472c73488bb2ae1/collaborative-text-editor-android-endless-loop.jpg)\n\n### Fixing the EditText update loop\n\nTo fix this endless update loop, we will remove the `textEditorWatcher` from the `textEditor` before we call `textEditor.setText()` and then add it back afterwards.\n\n```\n...\nPrivateChannelEventListener subscriptionEventListener = new PrivateChannelEventListener() {\n\n    @Override\n    public void onEvent(String channelName, String eventName, final String data) {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                Log.d(DEBUG_TAG, data);\n                EditorUpdate editorUpdate = new Gson().fromJson(data, EditorUpdate.class);\n                //remove textEditorWatcher\n                textEditor.removeTextChangedListener(textEditorWatcher);\n                textEditor.setText(editorUpdate.data);\n                //add it back afterwards\n                textEditor.addTextChangedListener(textEditorWatcher);\n            }\n        });\n    }\n\n    ...\n};\n...\n```\n\nSo this way, `textEditor.setText()` doesn't call `textEditorWatcher.onTextChanged()` and therefore the loop doesn't happen.\n\nNow, our collaborative text editor Android app is fully functional. Yay!\n\n### Testing the application\n\nTo test the Android application, you will need to build and run the application on multiple devices (or you could just run it on multiple Android emulators). Any edit you make on an application's text editor will be seen in the other applications running.\n\n## Conclusion\n\nIn this tutorial, we have seen how to build a collaborative text editor in Android using Pusher's `Client Events`. Some extra things to note about this tutorial are:\n\n- This Android app doesn’t account for concurrent edits at the same place in the editor. You can use a technique called [Operational Transforms](http://operational-transformation.github.io/) to solve this.\n- `Client Events` have a number of restrictions that are important to know about, one of which is the limit to the number of events that can be published per seconds. Read more about them [here](https://pusher.com/docs/client_api_guide/client_events#trigger-events).","metaTitle":"Build a collaborative text editor in Android","metaDescription":"Build a collaborative text editor in Android using Java and Pusher for realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2gafTpAkTqoOu8WU8W2YAu","type":"Entry","createdAt":"2018-02-22T15:02:42.865Z","updatedAt":"2018-02-28T14:42:30.888Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator in Android","url":"typing-indicator-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5HjouOQyOIwCcyuswYcIuc","type":"Entry","createdAt":"2018-02-16T18:20:46.412Z","updatedAt":"2018-04-23T13:19:32.814Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Perfect Makanju","url":"perfect-makanju","email":"damiperfect@gmail.com","twitter":"https://twitter.com/perfectmak","github":"https://github.com/perfectmak","guestWriter":true}}],"projectRepo":"https://github.com/perfectmak/who-is-typing-android-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}}],"reviewDate":"2017-03-22","description":"Combine a typing indicator feature into your Android app using Java and JavaScript.","prerequisite":"A basic understanding of Java and JavaScript is needed to follow this tutorial.","content":"In this tutorial, we are going to build a typing indicator in an Android chat application using Pusher. A basic knowledge of how to build Android applications is assumed in this tutorial and we'll be focusing on the implementation of the typing indicator of the Android application.\n\n## Overview of the chat app\n\nThe chat application will be simple. First, we will build a simple Node.js server that will receive requests from Android when a user is typing. The server will then broadcast this to everyone as a Pusher event.\n\nThen we will go ahead to build the Android application. When a user starts typing in the edit text field of the Android app, the app sends a request to the server. The Android app will also subscribe to the typing events from Pusher and show a 'user is typing' message when a broadcast is received.\n\n## Setup a Pusher account\n\nWe will be using [Pusher](https://pusher.com) for the realtime features of this chat application, so the first step is to create your Pusher account. You can do this at [https://pusher.com/signup](https://pusher.com/signup). When you first log in, a pop-up dialogue appears as shown below:\n\n![typing-indicator-android-create-app](//images.contentful.com/1es3ne0caaid/3c28uKB8ZWM0cwOEOqao2S/10800fa593ff7fa8ba772b01354327ab/typing-indicator-android-create-app.png)\n\nIf you already have an account, log in to the Pusher dashboard and click on the `Create new app` button in the `Your apps` to the left. Select 'Android' for the front-end tech and 'Node.js' for the backend tech. (The tech stack you select now doesn't matter as you can always change it later. Its purpose is to generate the starter code that you will need to start communicating with Pusher.)\n\nAfter creating the new app, go to the `App Keys` tab and copy your **App ID**, **Key**, and **Secret** credentials. We will use them later in the tutorial.\n\n## Setup the Node.js server\n\nNow that you have your Pusher Keys, let's get on with building the chat application server.\n\nFirst, generate a Node.js application using this command:\n\n``` \nnpm init -y\n```\n\nNext, install Express, Pusher and some other dependencies the server will be needing:\n\n``` \nnpm install --save express body-parser pusher\n```\n\nExpress is the web server library that we will be using to accept HTTP requests from the Android app when the user starts typing, and body-parser will be used to parse the incoming requests. The [Pusher Node.js library](https://github.com/pusher/pusher-http-node) will be used to publish `user_typing` events through the Pusher API.\n\nWhen done, the dependency section of your package.json file should look like this:\n\n```\n\"dependencies\": {\n    \"express\": \"^4.14.1\",\n    \"body-parser\": \"^1.16.0\",\n    \"pusher\": \"^1.5.1\"\n  }\n```\n\nTo serve our application we need to do three things:\n\n1. Set up Express and Pusher.\n2. Create routes to listen for web requests.\n3. Start the Express server.\n \n### 1. Setup Express and Pusher\n\nCreate a file and name it `server.js`. Inside it, we initialize Express and Pusher like this:\n\n```\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst path = require('path');\nconst Pusher = require('pusher');\n\nconst app = express();\n\n//Initialize Pusher\nconst pusherConfig = {\n  appId: 'YOUR_PUSHER_APP_ID',\n  key: 'YOUR_PUSHER_KEY',\n  secret: 'YOUR_PUSHER_SECRET',\n  encrypted: true\n};\nconst pusher = new Pusher(pusherConfig);\n\napp.use(bodyParser.urlencoded({extended: true}));\n```\n\nRemember to replace the parameters in the `pusherConfig` object with the Pusher credentials you copied earlier from the Pusher dashboard.\n\n### 2. Create routes to serve our application\n\nCreate a route that uses Pusher to broadcast a `user_typing` event.\n\n```\nconst chatChannel = 'anonymous_chat';\nconst userIsTypingEvent = 'user_typing';\n\napp.post('/userTyping', function(req, res) {\n  const username = req.body.username;\n  pusher.trigger(chatChannel, userIsTypingEvent, {username: username});\n  res.status(200).send();\n});\n```\n\nThis route broadcasts the request's username to everyone who is subscribed to the channel.\n\n### 3. Start the Express server\n\nStart the Express server to listen on the app port `3000`.\n\n```\napp.listen(3000, function () {\n  console.log('Node server running on port 3000');\n});\n```\n\nNow we have the application server set up. Next, we develop the Android application users will interact with.\n\n## Set up the Android project\n\nOpen Android Studio and create a new project:\n\n![typing-indicator-android-create-new-project](//images.contentful.com/1es3ne0caaid/7qD03dnR2oUmMC6cUYcy86/a15698f25a845ebb954361486285756e/typing-indicator-android-create-new-project.png)\n\nYou could name the application whatever suits you, but for the purpose of this tutorial, we will name it 'WhoIsTypingApp'.\n\nOn the Next Page, select the `API 19: Android 4.4 (Kitkat)` as the Minimum SDK as shown below:\n\n![typing-indicator-android-android-4-4](//images.contentful.com/1es3ne0caaid/116dH65UneMKoAMMaumW8w/131420775b7285cbea7bc7137a81ac75/typing-indicator-android-android-4-4.png)\n\nNext, select an 'Empty Activity' as the initial Activity for the Application:\n\n![typing-indicator-android-add-activity](//images.contentful.com/1es3ne0caaid/34sHOmAMmQg240kooK46UE/2417a1ede307719ac2c07c335ef3911a/typing-indicator-android-add-activity.png)\n\nAnd use the default name of MainActivity with backward compatibility:\n\n![typing-indicator-android-customize-activity](//images.contentful.com/1es3ne0caaid/70Gr9wJN040iYqmSseM6O/68b354229b20a73f3fde075406d83df7/typing-indicator-android-customize-activity.png)\n\nOnce Android Studio is done with the project's setup, then it's time to install the project dependencies.\n\nIn the dependencies section of the `build.gradle` file of your application module, add the following:\n\n``` \ndependencies {\n    ...\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.squareup.okhttp3:okhttp:3.3.1'\n    compile 'com.google.code.gson:gson:2.7'\n}\n```\n\nWe will be using [gson](https://github.com/google/gson) to convert JSON messages to Java Objects. For the network requests to our Node.js Server, we will use [okhttp](https://github.com/square/okhttp).\n\nSync the Gradle project so the modules can be installed and the project built.\n\nNext, let's add the INTERNET permission to our `AndroidManifest.xml` file. This is required because our application will be connecting to Pusher and our Node.js server over the internet.\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.whoistypingapp\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication \n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\u003e\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\n### The chat activity layout\n\nNext, open the `activity_main.xml` layout file and modify it to look like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.pusher.whoistypingapp.MainActivity\"\u003e\n\n    \u003cLinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:orientation=\"horizontal\"\u003e\n\n        \u003cEditText\n            android:id=\"@+id/messageEditText\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Enter Message Here\"\n            android:layout_weight=\"1\"/\u003e\n\n        \u003cButton\n            android:id=\"@+id/sendButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Send\"\n            android:layout_weight=\"4\"/\u003e\n    \u003c/LinearLayout\u003e\n\n\u003c/RelativeLayout\u003e\n```\n\nThe layout consists of an EditText where the user can enter a message, and a Button beside it to act as the 'send message' button.\n\n### The typing indicator model\n\nWe will need to represent the 'who's typing' message as a Plain Old Java Object so it can be easily deserialized by gson. To do this, create the class `com.pusher.whoistypingapp.WhosTyping` and populate it as shown below:\n\n```\npackage com.pusher.whoistypingapp;\n\n\npublic class WhosTyping {\n    public String username;\n\n    public WhosTyping(String username) {\n        this.username = username;\n    }\n}\n\n```\n\nThis `WhosTyping` class corresponds to JSON of the following structure:\n\n```\n{\n  \"username\": \"Any Name\"\n}\n```\n\n### The chat activity\n\nNow open the class `com.pusher.whoistypingapp.MainActivity`. First, let's start by declaring all the required constants:\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String USER_TYPING_ENDPOINT = \"https://{NODE_JS_SERVER_ENDPOINT}/userTyping\";\n    private static final String PUSHER_API_KEY = \"PUSHER_API_KEY\";\n    private static final String CHANNEL_NAME = \"anonymous_chat\";\n    private static final String USER_TYPING_EVENT = \"user_typing\";\n\n    ...\n```\n\nRemember to replace the `USER_TYPING_ENDPOINT` with the actual hostname (or IP address) of the Node.js server (more on this later) and also the `PUSHER_API_KEY` with the Pusher Key you copied earlier from the Pusher dashboard.\n\nNext, we declare the private variables that will be required for `MainActivity` to function:\n\n```\n    ...\n    Pusher pusher = new Pusher(PUSHER_API_KEY);\n    OkHttpClient httpClient = new OkHttpClient();\n\n    EditText messageEditText;\n    ...\n```\n\n### Publishing `user_typing` event\n\nFirst, let's implement publishing the `user_typing` event to our Node.js server. To do this, we create a `TextWatcher` inside the `onCreate` method.\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        TextWatcher messageInputTextWatcher = new TextWatcher() {\n            ...\n            @Override\n            public void onTextChanged(CharSequence charSequence, int start, int before, int count) {\n                Log.d(\"User Input Change\", charSequence.toString());\n                Request userIsTypingRequest = new Request.Builder()\n                        .url(USER_TYPING_ENDPOINT)\n                        .post(new FormBody.Builder()\n                                .add(\"username\", getCurrentUsername())\n                                .build())\n                        .build();\n\n                httpClient.newCall(userIsTypingRequest)\n                        .enqueue(new Callback() {\n                            @Override\n                            public void onFailure(Call call, IOException e) {\n                                Log.d(\"Post Response\", e.toString());\n                            }\n\n                            @Override\n                            public void onResponse(Call call, Response response) throws IOException {\n                                Log.d(\"Post Response\", response.toString());\n                            }\n                        });\n            }\n            ...\n        };\n\n        ...\n```\n\nInside the `onTextChanged` method of the TextWatcher, we build the `userIsTypingRequest` and then send the request to the `USER_TYPING_ENDPOINT` URL. For simplicity, we just log the response we get for the server.\n\nThen we add the text change listener to the `messageEditText` as shown below.\n\n```\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      ...\n      messageEditText = (EditText)findViewById(R.id.messageEditText);\n      messageEditText.addTextChangedListener(messageInputTextWatcher);\n      ...\n    }\n```\n\nNow, whenever a user starts typing, a request is sent to the server and the server will in turn broadcast the typing event to all other users.\n\nNext, we need to subscribe to the `user_typing` event.\n\n### Subscribing to `user_typing` event\n\nWe create a `SubscriptionEventListener` that will respond when a `user_typing` event arrives:\n\n```\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      ...\n\n      SubscriptionEventListener isTypingEventListener = new SubscriptionEventListener() {\n        @Override\n        public void onEvent(String channel, String event, String data) {\n          final WhosTyping whosTyping = new Gson().fromJson(data, WhosTyping.class);\n          if(!whosTyping.username.equals(getCurrentUsername())) {\n            runOnUiThread(new Runnable() {\n              @Override\n              public void run() {\n                getSupportActionBar().setSubtitle(whosTyping.username + \" is typing...\");\n              }\n            });\n          }\n        }\n      }; \n\n      ...      \n    }\n```\n\nHere, the JSON string we receive is converted to a `WhosTyping` object using gson. Then we check if the username of the `WhosTyping` object is equal to the current username before we update the UI. The typing indicator message is shown as subtitle text on the [Action Bar](https://material.io/guidelines/layout/structure.html#structure-app-bar).\n\nThen we subscribe and bind the `isTypingEventListener` to the `user_typing` event:\n\n```\n  ...\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    ...\n\n    Channel pusherChannel = pusher.subscribe(CHANNEL_NAME);\n    pusherChannel.bind(USER_TYPING_EVENT, isTypingEventListener);         \n  }\n```\n\nThe application now updates the UI with the username of 'who's typing'. But the typing indicator message needs to be cleared when the user stops typing or else the message stays forever. An easy solution is to set a timer that clears the typing message after some seconds of not receiving an event. From experience, a clear timer of 0.9 seconds has given the best results.\n\nTo set the clear timer, we use the `java.util.Timer` and `java.util.TimerTask` classes. First, let us create a method that starts the clear timer:\n\n```\npublic class MainActivity extends AppCompatActivity {\n  ...\n\n  TimerTask clearTimerTask;\n  Timer clearTimer;\n\n  private void startClearTimer() {\n    clearTimerTask = new TimerTask() {\n        @Override\n        public void run() {\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                  getSupportActionBar().setSubtitle(\"\");\n                }\n            });\n        }\n      };\n    clearTimer = new Timer();\n    long interval = 900; //0.9 seconds\n    clearTimer.schedule(clearTimerTask, interval);\n  }\n  ...\n```\n\nThe `clearTimerTask` will clear the Action Bar's subtitle when it is invoked by the `clearTimer` after 0.9 seconds.\n\nNext, we update the `onEvent` method of our `SubscriptionEventListener` to start the clear timer.\n\n```\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n      ...\n\n      SubscriptionEventListener isTypingEventListener = new SubscriptionEventListener() {\n        @Override\n        public void onEvent(String channel, String event, String data) {\n          ...\n\n          //reset timer\n          if(clearTimer != null) {\n            clearTimer.cancel();\n          }\n          startClearTimer();\n        }\n      }; \n\n      ...      \n    }\n```\n\nAnd there you have it. The chat application now has the functionality to display who's currently typing.\n\nFinally, override the `onResume()` and `onPause()` methods of `MainActivity` to connect and disconnect the `pusher` object respectively.\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        pusher.connect();\n    }\n\n    @Override\n    protected void onPause() {\n        pusher.disconnect();\n        super.onPause();\n    }\n\n }\n```\n\n## Testing\n\nFirst, ensure you have updated your the `PUSHER_API_KEY` in the `MainActivity` class with your Pusher Key.\n\nRun the Android application either using a real device or a virtual one. You should see an interface like this:\n\n![typing-indicator-android-launch-view](//images.contentful.com/1es3ne0caaid/2YqFNSl5sQe62YUYSAUa2W/90af3bf00c30966da0a7426fe3b2aecb/typing-indicator-android-launch-view.png)\n\n### Testing with the debug console\n\nThe easiest way to test the Android application is through the [Pusher Debug Console on your Dashboard](https://dashboard.pusher.com). At the Debug Console for your app on Pusher, click to show the event creator and then fill the **Channel**, **Event** and **Data** field as shown in the image below:\n\n![typing-indicator-android-debug-console](//images.contentful.com/1es3ne0caaid/5CNXkC3XigQmEq2w8aeUcg/d1a97363850c57829896ce740f79629d/typing-indicator-android-debug-console.png)\n\nWhen you click the ‘Send event’ button, the interface of your Android application will update to indicate the ‘username is typing…’ message at the top of the page as shown in the image below:\n\n![typing-indicator-android-demo](//images.contentful.com/1es3ne0caaid/17JBwKOSVc4ciqgeE0sS6i/213d93ae48c9a2911d89093cb91c83fc/typing-indicator-android-demo.png)\n\n### Testing with the Node.js server\n\nTo test the application with the Node.js server, you will need to make the server available to the Android application either by hosting it live or maybe using a tunneling tool like [ngrok](https://ngrok.com).\n\nThen update the `USER_TYPING_ENDPOINT` constant in the `MainActivity` class with the server's URL. Now to test, you need to run the Android application on two devices. When you start typing in one, you should notice the other device shows that you are currently typing.\n\n## Conclusion\n\nIn this tutorial, we saw how to build a typing indicator in an Android app using Pusher.","metaTitle":"Build a typing indicator in Android","metaDescription":"In this tutorial, find out how you can build a typing indicator for your Android app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FFu6qc2z6g88qqCQokG4g","type":"Entry","createdAt":"2018-02-28T12:29:08.830Z","updatedAt":"2018-02-28T12:29:08.830Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed in Android","url":"photo-feed-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/photo-feed-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2017-03-16","description":"Build a photo feed like Instagram or Flickr for Android with realtime functionality. ","prerequisite":"This tutorial assumes a basic knowledge of how to make Android apps.","content":"When I was a kid, my parents had a Kodak camera that they only used on vacations or special events. It used film rolls, and you had to take them to a specialty shop to have them developed so you could get your photos a few days later. Sometimes, we couldn't even fill a 100-pocket photo album in an entire year.\n\nNowadays, the number of the photos we take has exploded exponentially. With cameras in even the most basic mobile phones, you can easily take hundreds of photos in a day without any issues. And sites like [Instagram](https://www.instagram.com/), [Flickr](https://www.flickr.com/), and [500px](https://500px.com), among others, made specifically to share, comment, and like photos are very popular.\n\nSo why not build a feed to track a stream of photos in our Android device in realtime?\n\nIn this tutorial, we're going to get the photos from Reddit (in particular, from the [r/pics](https://www.reddit.com/r/pics/) subreddit), taking advantage of the [Pusher Realtime Reddit API](https://blog.pusher.com/pusher-realtime-reddit-api/).\n\nTo keep things simple, we'll implement the feed without any other feature. This is how the final app will look:\n\n![photo-feed-android-demo](//images.contentful.com/1es3ne0caaid/NHDBgw4pkAO4qUuQeecmS/8d16ffabc71e1979b64573421292b8db/photo-feed-android-demo.gif)\n\nLet's get started!\n\n## Using the Pusher Realtime Reddit API\n\nYou can learn more about the [Pusher Realtime Reddit API here](https://blog.pusher.com/pusher-realtime-reddit-api/), but basically the idea is that any subreddit has its own Pusher channel to which you can subscribe to get new listings events.\n\nYou can see an interactive code example of this on [JSBin](http://jsbin.com/sihoviwi/1/edit?html,js,console).\n\nFor our needs, we can try this simple Javascript snippet:\n\n```\n// Open a Pusher connection to the Realtime Reddit API\nvar pusher = new Pusher(\"50ed18dd967b455393ed\");\n\n// Subscribe to the pics subreddit (lowercase)\nvar subredditChannel = pusher.subscribe(\"pics\");\n\n// Listen for new stories\nsubredditChannel.bind(\"new-listing\", function(listing) {\n  // Output listing to the browser console\n  console.log(listing);\n});\n```\nThe Pusher app key you have to use is `50ed18dd967b455393ed`. Here's a sample of the information that we can get from Reddit:\n\n```\n{\n  approved_by: null,\n  archived: false,\n  author: \"PHIL-yes-PLZ\",\n  author_flair_css_class: null,\n  author_flair_text: null,\n  banned_by: null,\n  brand_safe: true,\n  clicked: false,\n  contest_mode: false,\n  created: 1489494725,\n  created_utc: 1489465925,\n  distinguished: null,\n  domain: \"i.redd.it\",\n  downs: 0,\n  edited: false,\n  gilded: 0,\n  hidden: false,\n  hide_score: true,\n  id: \"5za4q7\",\n  is_self: false,\n  likes: null,\n  link_flair_css_class: null,\n  link_flair_text: null,\n  locked: false,\n  media: null,\n  media_embed: [object Object] { ... },\n  mod_reports: [],\n  name: \"t3_5za4q7\",\n  num_comments: 0,\n  num_reports: null,\n  over_18: false,\n  permalink: \"/r/pics/comments/5za4q7/the_beauty_of_budding_stained_glass/\",\n  post_hint: \"image\",\n  preview: [object Object] {\n    enabled: true,\n    images: [[object Object] {\n  id: \"rqR81Yj7Fud7Y8P94e8ZftEZyTEO4Q3ufVQ7f-9QNSM\",\n  resolutions: [[object Object] {\n  height: 81,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=108\u0026s=c174d33e47fa3e585c46622dfca12dd5\",\n  width: 108\n}, [object Object] {\n  height: 162,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=216\u0026s=22711bde5e57c38f93e99de27bb2f1ee\",\n  width: 216\n}, [object Object] {\n  height: 240,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=320\u0026s=a22e5a2857b40d0205e07724a89d4182\",\n  width: 320\n}, [object Object] {\n  height: 480,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=640\u0026s=7dc827127272f6aa530faa8b29a8298f\",\n  width: 640\n}, [object Object] {\n  height: 720,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=960\u0026s=8402002d064b3283742f8bc86163d552\",\n  width: 960\n}, [object Object] {\n  height: 810,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=1080\u0026s=ac9b66669198d0eb4bb8a47e1cc79e48\",\n  width: 1080\n}],\n  source: [object Object] {\n    height: 2448,\n    url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?s=50a1044924ba1e0aa39a7f5f5ab33d8e\",\n    width: 3264\n  },\n  variants: [object Object] { ... }\n}]\n  },\n  quarantine: false,\n  removal_reason: null,\n  report_reasons: null,\n  saved: false,\n  score: 1,\n  secure_media: null,\n  secure_media_embed: [object Object] { ... },\n  selftext: \"\",\n  selftext_html: null,\n  spoiler: false,\n  stickied: false,\n  subreddit: \"pics\",\n  subreddit_id: \"t5_2qh0u\",\n  subreddit_name_prefixed: \"r/pics\",\n  subreddit_type: \"public\",\n  suggested_sort: null,\n  thumbnail: \"https://b.thumbs.redditmedia.com/JlIMJkuHQsCnp4Gn7h_OT2AedCJd_QQ-otJm1PUi1cc.jpg\",\n  title: \"The beauty of budding stained glass.\",\n  ups: 1,\n  url: \"https://i.redd.it/vo690nyiwaly.jpg\",\n  user_reports: [],\n  visited: false\n}\n```\n\nWith this in mind, let's create the Android app.\n\n## The Android app\n\nOpen Android Studio and create a new project:\n\n![photo-feed-android-new-project](//images.contentful.com/1es3ne0caaid/2kEy98CwqwU4WgE80YaaGS/a642e35ef43dfeeeac4df7b21a4a7474/photo-feed-android-new-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![photo-feed-android-target-devices](//images.contentful.com/1es3ne0caaid/2h6nr9CAqsOiOw0aiy0Y0S/6df1bbec533784c71e07ba2ef9edb2bd/photo-feed-android-target-devices.png)\n\nNext, create an initial empty activity:\n\n![photo-feed-android-add-activity](//images.contentful.com/1es3ne0caaid/3XL61GmHlCGkgAOygsw6CC/e484b4330af85cf3f440c0e4052bd45d/photo-feed-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![photo-feed-android-customize-activity](//images.contentful.com/1es3ne0caaid/rjN5T2ZWnI6gGGMEUKSOQ/0819ee28e180cc3344f6b0a6c95fdbf6/photo-feed-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.github.bumptech.glide:glide:3.7.0'\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\n\nAt the time of writing, the latest SDK version is 25, so that's my target SDK version.\n\nWe're going to use the `RecyclerView` component from the [Support Library](https://developer.android.com/topic/libraries/support-library/features.html), so make sure you have it installed (in *Tools -\u003e Android -\u003e SDK Manager -\u003e SDK Tools tab* the *Android Support Repository* must be installed).\n\nTo download the images we're going to use [Glide](https://github.com/bumptech/glide), one of the most popular open-source Android libraries for loading images.\n\nBy default, Glide uses a custom implementation of [HttpURLConnection](https://developer.android.com/reference/java/net/HttpURLConnection.html) to load images over the network. This is what we'll be using here. However, Glide also provides plugins to other popular networking libraries such as [Volley](https://developer.android.com/training/volley/index.html) or [OkHttp](http://square.github.io/okhttp/), you just need to add the corresponding dependencies:\n\n```\ndependencies {\n    ...\n    compile 'com.github.bumptech.glide:glide:3.7.0'\n    ...\n    // Volley\n    compile 'com.github.bumptech.glide:volley-integration:1.4.0@aar'\n    compile 'com.android.volley:volley:1.0.0'\n\n    // okhttp 3\n    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'\n    compile 'com.squareup.okhttp3:okhttp:3.6.0'\n\n    // okhttp 2\n    compile 'com.github.bumptech.glide:okhttp-integration:1.4.0@aar'\n    compile 'com.squareup.okhttp:okhttp:2.7.2'\n    ...\n}\n```\n\nSync the Gradle project so the modules can be installed and the project built.\n\nAlso, don't forget to add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.photofeed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\u003e\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\nNow, modify the layout file [activity_main.xml](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/res/layout/activity_main.xml) so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.pusher.photofeed.MainActivity\"\u003e\n\n    \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/recycler_view\" /\u003e\n\u003c/RelativeLayout\u003e\n```\n\nWe're going to use a [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html) to display the images, which we'll store in a list. Each item in this list is displayed in an identical manner, so let's define another layout file to inflate them.\n\nCreate the file [item.xml](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/res/layout/item.xml) with the following content:\n\n```\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\u003e\n\n    \u003cImageView\n        android:id=\"@+id/photo\"\n        android:adjustViewBounds=\"true\"\n        android:layout_height=\"200dp\"\n        android:scaleType=\"centerCrop\"\n        android:layout_margin=\"2dp\"\n        android:layout_width=\"match_parent\"/\u003e\n\n\u003c/LinearLayout\u003e\n```\n\nHere, we're just using an [ImageView](https://developer.android.com/reference/android/widget/ImageView.html) component to display the image, with a height of `200dp` and a `scaleType` equal to `centerCrop`, to scale the image uniformly (maintain the image's aspect ratio) so both dimensions (width and height) will be equal to or larger than the corresponding dimension of the view (minus padding), among other properties.\n\nNow, to store the information for each image, which right now is just its URL, let's create a class, [com.pusher.photofeed.Photo](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/java/com/pusher/photofeed/Photo.java):\n\n```\npublic class Photo {\n\n    private String url;\n\n    public Photo(String url) {\n        this.url = url;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n}\n```\n\n`RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source (in this case a list of `Photo` instances), and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item, so first create the class [com.pusher.photofeed.PhotoAdapter](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/java/com/pusher/photofeed/PhotoAdapter.java) with the following code:\n\n```\npublic class PhotoAdapter extends RecyclerView.Adapter\u003cPhotoAdapter.PhotoViewHolder\u003e {\n\n    private List\u003cPhoto\u003e photos;\n    private Context context;\n\n    public PhotoAdapter(Context context, List\u003cPhoto\u003e photos) {\n        this.photos = photos;\n        this.context = context;\n    }\n\n    public void addPhoto(Photo photo) {\n        // Add the event at the beggining of the list\n        photos.add(0, photo);\n        // Notify the insertion so the view can be refreshed\n        notifyItemInserted(0);\n    }\n\n    @Override\n    public int getItemCount() {\n        return photos.size();\n    }\n}\n```\n\nWe initialize the class with a list of `Photo` instances and a `Context` (Glide will need it), provide a method to add `Photo` instances at the beginning of the list (`addPhoto(Photo)`) and then notify the insertion so the view can be refreshed, and implement `getItemCount` so it returns the size of the list.\n\nThen, let's add the `ViewHolder` as an inner class. It references the `ImageView` component for each item in the list:\n\n```\npublic class PhotoAdapter extends RecyclerView.Adapter\u003cPhotoAdapter.PhotoViewHolder\u003e {\n\n    ...\n\n    public static class PhotoViewHolder extends RecyclerView.ViewHolder {\n\n        public ImageView photoImageView;\n\n        public PhotoViewHolder(View v) {\n            super(v);\n            photoImageView = (ImageView) v.findViewById(R.id.photo);\n        }\n    }\n}\n```\nAnd implement the methods `onCreateViewHolder` and `onBindViewHolder`:\n\n```\npublic class PhotoAdapter extends RecyclerView.Adapter\u003cPhotoAdapter.PhotoViewHolder\u003e {\n    ...\n\n    @Override\n\n\n    public PhotoViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.item, viewGroup, false);\n        return new PhotoViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(PhotoViewHolder holder, int position) {\n        Photo photo = photos.get(position);\n        String url = photo.getUrl();\n\n        Glide.with(context)\n                .load(url)\n                .asBitmap()\n                .error(R.drawable.logo)\n                .fitCenter()\n                .into(holder.photoImageView);\n    }\n}\n```\n\nIn the `onCreateViewHolder` method, we inflate the layout with the content of the `event_row.xml` file we created earlier, and in `onBindViewHolder`, we use Glide to fetch the image and display it in the `ImageView` of the item with the following method calls:\n- `with(Context)` initializes the loading processing passing the context.\n- `load(String)` loads the image from the specified URL.\n- `asBitmap()` makes sure that Glide receives an image that can be converted to a bitmap, otherwise the load will fail (for example if the URL represents an HTML page) and the `Drawable` passed to the `error` method will be shown instead.\n- `error(Drawable)` shows the `Drawable` if the load fails (in the [GitHub version of this app](https://github.com/eh3rrera/photo-feed-pusher-android), the [Pusher](https://pusher.com) logo, but you can add your own error image).\n- `fitCenter()` scales the image uniformly (maintaining the image's aspect ratio) so the image will fit in the given area.\n- `into(ImageView)` specifies the target image view into which the image will be placed.\n \nIn the class [com.pusher.photofeed.MainActivity](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/java/com/pusher/photofeed/MainActivity.java), let's start by defining the private fields we're going to need:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    private RecyclerView.LayoutManager lManager;\n    private PhotoAdapter adapter;\n    private Pusher pusher = new Pusher(\"50ed18dd967b455393ed\");\n    private static final String CHANNEL_NAME = \"pics\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ....\n    }\n}\n```\n\n`RecyclerView` works with a [LayoutManager](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html) to handle the layout and scroll direction of the list. We declare the `PhotoAdapter`, the `Pusher` object and the identifier for the Pusher channel.\n\nInside the `onCreate` method, let's assign a [LinearLayoutManager](https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html) to the `RecyclerView` and create the `EventAdapter` with an empty list:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get the RecyclerView\n        RecyclerView recycler = (RecyclerView) findViewById(R.id.recycler_view);\n\n        // Use LinearLayout as the layout manager\n        lManager = new LinearLayoutManager(this);\n        recycler.setLayoutManager(lManager);\n\n        // Set the custom adapter\n        List\u003cPhoto\u003e photoList = new ArrayList\u003c\u003e();\n        adapter = new PhotoAdapter(this, photoList);\n        recycler.setAdapter(adapter);\n    }\n}\n```\n\nFor the Pusher part, we first subscribe to the channel:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n}\n```\n\nThen, we create the listener that will be executed when a photo arrives:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    ...\n    SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Photo photo = gson.fromJson(data, Photo.class);\n                        adapter.addPhoto(photo);\n                        ((LinearLayoutManager)lManager).scrollToPositionWithOffset(0, 0);\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\nHere, the JSON string that we receive is converted to a `Photo` object and is added to the adapter. Finally, we move to the top of the list.\n\nNext, bind the events to this listener and call the `connect` method on the Pusher object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        channel.bind(\"new-listing\", eventListener);\n\n        pusher.connect();\n    }\n}\n```\n\nThe `connect` method can take a listener that can be helpful to debug problems you might have:\n\n```\npusher.connect(new ConnectionEventListener() {\n    @Override\n    public void onConnectionStateChange(ConnectionStateChange change) {\n        System.out.println(\"State changed to \" + change.getCurrentState() +\n            \" from \" + change.getPreviousState());\n    }\n\n   @Override\n    public void onError(String message, String code, Exception e) {\n        System.out.println(\"There was a problem connecting!\");\n        e.printStackTrace();\n    }\n});\n```\n\nFinally, `MainActivity` also needs to implement the `onDestroy()` method so we can have the opportunity to unsubscribe from Pusher when the activity is destroyed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n}\n```\n\nAnd that's it. Let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![photo-feed-android-deployment-target](//images.contentful.com/1es3ne0caaid/1Chktw9nByoMacoqUaQQMM/f98943c211db98bceb6463ccf6016573/photo-feed-android-deployment-target.png)\n\nYou'll be presented with an almost blank screen:\n\n![photo-feed-android-first-run](//images.contentful.com/1es3ne0caaid/1Xyz5bHsPakWyqwIQ4iyEi/c7efddcf967f418be9e5b5479a819d58/photo-feed-android-first-run.png)\n\nWhen a new image is uploaded to Reddit, it will show up in the app (it may take a while, depending on the amount of activity at the time):\n\n![photo-feed-android-demo](//images.contentful.com/1es3ne0caaid/NHDBgw4pkAO4qUuQeecmS/8d16ffabc71e1979b64573421292b8db/photo-feed-android-demo.gif)\n\n## Conclusion\n\nHopefully, this tutorial has shown you how simple it is to build a realtime photo feed in Android and Pusher. You can improve the app by changing the design, showing more information, or saving it to a database.\n\n## Further reading\n\n- [Pusher Realtime Reddit API](https://blog.pusher.com/pusher-realtime-reddit-api/)\n- [Pusher Java client](https://github.com/pusher/pusher-websocket-java)\n- [Glide](https://github.com/bumptech/glide)\n- [Glide integration libraries](https://github.com/bumptech/glide/wiki/Integration-Libraries)\n- [Activity's lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle.html)\n- [Creating Lists](https://developer.android.com/training/material/lists-cards.html)","metaTitle":"Build a photo feed in Android","metaDescription":"Build a photo feed like Instagram or Flickr for Android with realtime functionality. "}}],"defaultValue":"Channels \u0026 Java","queryType":"tag","pages":2,"route":"/tutorials","query":{"product":"Channels","tag":"Java","page":"1"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Java","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Java&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:52 GMT -->
</html>