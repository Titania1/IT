<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=40 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:00 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/food-delivery-notifications-swift.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Send push notifications to a food delivery Swift app</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Push notifications are an essential feature for any food delivery app. Today we will focus on sending relevant push noti...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/angular-realtime.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making Angular 5 realtime with WebSockets</h3><p class="css-k12xad e5jrto45">Build an app with realtime features in Angular 5 and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-network-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a simple social network with Kotlin</h3><p class="css-k12xad e5jrto45">Social feed have become a major feature of many apps and websites. Learn how to build one with Kotlin and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed in Android </h3><p class="css-k12xad e5jrto45">Discover how you can create a realtime activity feed for your Android app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-payment-dashboard-stripe.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime payment dashboard with Stripe</h3><p class="css-k12xad e5jrto45">Build a live admin dashboard with Vue.js and Node.js, accepting payments through Stripe.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geolocation-sharing-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geolocation sharing app with React Native</h3><p class="css-k12xad e5jrto45">Discover how to build a location sharing app with React Native, Google Maps and Facebook.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/monitor-api-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Monitor APIs in realtime using Go</h3><p class="css-k12xad e5jrto45">In this article, you will learn how to realtime monitoring of a small API built using Go and jQuery.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracker-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Trading<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a cryptocurrency tracker using Vue.js</h3><p class="css-k12xad e5jrto45">In this tutorial, learn how to build a live cryptocurrency tracking view with Progressive Web Apps, Vue.js and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-map-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime map using Kotlin</h3><p class="css-k12xad e5jrto45">In this tutorial, you will learn how to build a realtime map using Kotlin, Node.js and Google Maps API.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials8b08.html?page=39" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials763c.html?page=38" class="css-za1ua3 edg0byb1">38</a><a href="tutorials8b08.html?page=39" class="css-za1ua3 edg0byb1">39</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsce8a.html?page=40" class="css-2wakph edg0byb1">40</a><a href="tutorials6c2f.html?page=41" class="css-za1ua3 edg0byb1">41</a><a href="tutorials3963.html?page=42" class="css-za1ua3 edg0byb1">42</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorials6c2f.html?page=41" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4ThkR9pRjG4c4UkESCooWy","type":"Entry","createdAt":"2018-02-28T12:41:54.176Z","updatedAt":"2018-06-07T09:00:00.429Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Send push notifications to a food delivery Swift app","url":"food-delivery-notifications-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/food-delivery-ios-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-02-23","description":"Push notifications are an essential feature for any food delivery app. Today we will focus on sending relevant push notifications to an iOS food delivery app.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"Last mile delivery marketplaces make it easy to order delivery food from a mobile device and have it delivered to a user’s door while it’s still hot.\n\nMarketplaces like Deliveroo, Postmates, or Uber Eats use your device’s location to serve you a list of restaurants that are close enough and open so you can get your delivery as soon as possible.\n\nThis realtime experience between the customer, restaurant, and driver relies on transactional push notifications to move the order from the kitchen to the table seamlessly. Customers want push notifications to alert them when their order is on its way and when they need to meet the driver at the door. \n\nSetting up push notifications can be confusing and time consuming. However, with Pusher’s [Beams API](https://pusher.com/push-notifications), the process is a lot easier and faster. \n\nIn this article, we will be considering how you can build apps on iOS that have transactional push notifications. For this, we will be building a make-belief food delivery app.\n\n## Prerequisites\n- A Mac with Xcode installed. [Download Xcode here](https://developer.apple.com/xcode/).\n- Knowledge of using Xcode.\n- Knowledge of [Swift](https://developer.apple.com/swift/).\n- A Pusher account. [Create one here](https://dash.pusher.com/authenticate/register?ref=pn-food-delivery-ios).\n- Basic knowledge of JavaScript/Node.js ([Check out this tutorial](https://www.w3schools.com/nodejs/default.asp)).\n- Cocoapods [installed on your machine](https://guides.cocoapods.org/using/getting-started.html).\n\nOnce you have the requirements, let’s start.\n\n## Building our application – Planning\n\nBefore we start building our application, we need to do some planning on how we want the application to work. \n\nWe will be making three applications:\n- The backend application (Web using Node.js).\n- The client application (iOS using Swift).\n- The admin application (iOS using Swift).\n\n### The backend application\nThis will be the API. For simplicity, we will not add any sort of authentication to the API. We will be calling the API from our iOS applications. The API should be able to provide the food inventory, the orders, and also manage the orders. We will also be sending push notifications from the backend application.\n\n### The client application\nThis will be the application that will be with the customer. This is where the user will be able to order food from. For simplicity, we will not have any sort of authentication and everything will be straight to the point. A customer should be able to see the inventory and order one or more from the inventory. They should also be able to see the list of their orders and the status of each order.\n\n![food-delivery-notifications-swift-demo-client](//images.contentful.com/1es3ne0caaid/3diVDmxsV2KQqKSaoi84sa/5fb7c73c248015e2e3fd2c788a3c7811/food-delivery-notifications-swift-demo-client.gif)\n\n### The admin application\nThis will be the application that the company providing the service will use to fulfil orders. The application will display the available orders and the admin will be able to set the status for each order.\n\n![food-delivery-notifications-swift-demo-admin](//images.contentful.com/1es3ne0caaid/7nVr0Y2RlSwyIemmC6A4kY/b0374c809869f779116e31342c275637/food-delivery-notifications-swift-demo-admin.gif)\n\n## Building the backend application (API)\n\nThe first thing we want to build is the API. We will be adding everything required to support our iOS applications and then add push notifications later on.\n\nTo get started, create a project directory for the API. In the directory, create a new file called `package.json` and in the file paste the following:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"scripts\": {},\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.2\"\n      }\n    }\n```\n\nNext run the command below in your terminal: \n\n```\n    $ npm install\n```\n\nThis will install all the listed dependencies. Next, create an `index.js` file in the same directory as the `package.json` file and paste in the following code:\n\n```\n    // --------------------------------------------------------\n    // Pull in the libraries\n    // --------------------------------------------------------\n    \n    const app = require('express')()\n    const bodyParser = require('body-parser')\n    \n    // --------------------------------------------------------\n    // Helpers\n    // --------------------------------------------------------\n    \n    function uuidv4() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r \u0026 0x3 | 0x8);\n        return v.toString(16);\n      });\n    }\n    \n    \n    // --------------------------------------------------------\n    // In-memory database\n    // --------------------------------------------------------\n    \n    var user_id = null\n    \n    var orders = []\n    \n    let inventory = [\n        {\n            id: uuidv4(),\n            name: \"Pizza Margherita\",\n            description: \"Features tomatoes, sliced mozzarella, basil, and extra virgin olive oil.\",\n            amount: 39.99,\n            image: 'pizza1'\n        },\n        {\n            id: uuidv4(),\n            name: \"Bacon cheese fry\",\n            description: \"Features tomatoes, bacon, cheese, basil and oil\",\n            amount: 29.99,\n            image: 'pizza2'\n        }\n    ]\n    \n    \n    // --------------------------------------------------------\n    // Express Middlewares\n    // --------------------------------------------------------\n    \n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({extended: false}))\n    \n    \n    // --------------------------------------------------------\n    // Routes\n    // --------------------------------------------------------\n    \n    app.get('/orders', (req, res) =\u003e res.json(orders))\n    \n    app.post('/orders', (req, res) =\u003e {\n        let id = uuidv4()\n        user_id = req.body.user_id\n        let pizza = inventory.find(item =\u003e item[\"id\"] === req.body.pizza_id)\n    \n        if (!pizza) {\n            return res.json({status: false})\n        }\n    \n        orders.unshift({id, user_id, pizza, status: \"Pending\"})\n        res.json({status: true})\n    })\n    \n    app.put('/orders/:id', (req, res) =\u003e {\n        let order = orders.find(order =\u003e order[\"id\"] === req.params.id)\n    \n        if ( ! order) {\n            return res.json({status: false})\n        }\n    \n        orders[orders.indexOf(order)][\"status\"] = req.body.status\n    \n        return res.json({status: true})\n    })\n    \n    app.get('/inventory', (req, res) =\u003e res.json(inventory))\n    app.get('/', (req, res) =\u003e res.json({status: \"success\"}))\n    \n    \n    // --------------------------------------------------------\n    // Serve application\n    // --------------------------------------------------------\n    \n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'))\n```\n\nThe above code is a simple Express application. Everything is self-explanatory and has comments to guide you.\n\nIn the first route, `/orders`, we display the list of orders available from the in-memory data store. In the second route, the `POST /orders` we just add a new order to the list of `orders`. In the third route, `PUT /orders/:id` we just modify the status of a single order from the list of `orders`. In the fourth route, `GET /inventory` we list the inventory available from the list of `inventory` in the database.\n\nWe are done with the API for now and we will revisit it when we need to add the push notification code. If you want to test that the API is working, then run the following command on your terminal:\n\n```\n    $ node index.js\n```\n\nThis will start a new Node server listening on port **4000**.\n\n## Building the client application\n\nThe next thing we need to do is build the client application in Xcode. To start, launch Xcode and create a new ‘Single Application’ project. We will name our project **PizzaareaClient.**\n\nOnce the project has been created, exit Xcode and create a new file called `Podfile` in the root of the Xcode project you just created. In the file paste in the following code:\n\n```\n    platform :ios, '11.0'\n    \n    target 'PizzareaClient' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 5.1.1'\n      pod 'Alamofire', '~\u003e 4.6.0'\n    end\n```\n\nIn the file above, we specified the dependencies the project needs to run. **Remember to change the** `target` **above to the name of your project.** Now in your terminal, run the following command to install the dependencies:\n\n```\n    $ pod install\n```\n\nAfter the installation is complete, open the Xcode workspace file that was generated by Cocoapods. This should relaunch Xcode. \n\nWhen Xcode has been relaunched, open the `Main.storyboard` file and in there we will create the storyboard for our client application. Below is a screenshot of how we have designed our storyboard:\n\n![food-delivery-notifications-swift-storyboard](//images.contentful.com/1es3ne0caaid/5PwFNFslcAioiWMYQgyUCe/55d510f557f21ee1babfa6896b3e3db2/food-delivery-notifications-swift-storyboard.png)\n\nThe first scene is the navigation view controller which has a table view controller as the root controller. The navigation controller is the initial controller that is loaded when the application is launched.\n\n### Creating the pizza list scene\nThe second scene is the view controller that lists the inventory that we have available. \n\n![food-delivery-notifications-swift-root-view-controller](//images.contentful.com/1es3ne0caaid/2I1uUClu1qgQg8o4eKwYU2/880c43c08c7b45a5d51e0152c131af55/food-delivery-notifications-swift-root-view-controller.png)\n\nCreate a new file in Xcode called `PizzaTableListViewController.swift`, make it the custom class for the second scene and paste in the following code:\n\n```\n    import UIKit\n    import Alamofire\n    \n    class PizzaListTableViewController: UITableViewController {\n    \n        var pizzas: [Pizza] = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = \"Select Pizza\"\n            \n            fetchInventory { pizzas in\n                guard pizzas != nil else { return }            \n                self.pizzas = pizzas!\n                self.tableView.reloadData()\n            }\n        }\n    \n        private func fetchInventory(completion: @escaping ([Pizza]?) -\u003e Void) {\n            Alamofire.request(\"http://127.0.0.1:4000/inventory\", method: .get)\n                .validate()\n                .responseJSON { response in\n                    guard response.result.isSuccess else { return completion(nil) }\n                    guard let rawInventory = response.result.value as? [[String: Any]?] else { return completion(nil) }\n                    \n                    let inventory = rawInventory.flatMap { pizzaDict -\u003e Pizza? in\n                        var data = pizzaDict!\n                        data[\"image\"] = UIImage(named: pizzaDict![\"image\"] as! String)\n    \n                        return Pizza(data: data)\n                    }\n                    \n                    completion(inventory)\n                }\n        }\n        \n        @IBAction func ordersButtonPressed(_ sender: Any) {\n            performSegue(withIdentifier: \"orders\", sender: nil)\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return pizzas.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"Pizza\", for: indexPath) as! PizzaTableViewCell\n            \n            cell.name.text = pizzas[indexPath.row].name\n            cell.imageView?.image = pizzas[indexPath.row].image\n            cell.amount.text = \"$\\(pizzas[indexPath.row].amount)\"\n            cell.miscellaneousText.text = pizzas[indexPath.row].description\n    \n            return cell\n        }\n        \n        override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n            return 100.0\n        }\n        \n        override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n            performSegue(withIdentifier: \"pizza\", sender: self.pizzas[indexPath.row] as Pizza)\n        }\n            \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if segue.identifier == \"pizza\" {\n                guard let vc = segue.destination as? PizzaViewController else { return }\n                vc.pizza = sender as? Pizza\n            }\n        }    \n    }\n```\n\nIn the `viewDidLoad` method, we call the `fetchInventory` method that uses `Alamofire` to fetch the inventory from our backend API then we save the response to the `orders` property of the controller.\n\nThe `ordersButtonPressed` is linked to the `Orders` button on the scene and this just presents the scene with the list of orders using a named segue `orders`. \n\nThe `tableView*` methods implement methods available to the `UITableViewDelegate` protocol and should be familiar to you.\n\nThe final method `prepare` simply sends the `pizza` to the view controller on navigation. This `pizza` is only sent over if the view controller being loaded is the `PizzaViewController` though.\n\nBefore we create the third scene, create a `PizzaTableViewCell.swift` class and paste in the following:\n\n```\n    import UIKit\n    \n    class PizzaTableViewCell: UITableViewCell {\n    \n        @IBOutlet weak var pizzaImageView: UIImageView!\n        @IBOutlet weak var name: UILabel!\n        @IBOutlet weak var miscellaneousText: UILabel!\n        @IBOutlet weak var amount: UILabel!\n    \n        override func awakeFromNib() {\n            super.awakeFromNib()\n        }\n    }\n```\n\n\u003e ⚠️  Make sure the custom class of the cells in the second scene is `PizzaTableViewCell` and that the reusable identifier is `Pizza`.\n\n### Creating the pizza view scene\nThe third scene in our storyboard is the Pizza view scene. This is where the selected inventory can be viewed.\n\n![food-delivery-notifications-swift-place-order](//images.contentful.com/1es3ne0caaid/5iHORfIGGcswQ6kEWQ8YoO/0196ca22a3278ff97cf1cc1fc5c22941/food-delivery-notifications-swift-place-order.png)\n\nCreate a `PizzaViewController.swift` file, make it the custom class for the scene above and paste in the following code:\n\n```\n    import UIKit\n    import Alamofire\n    \n    class PizzaViewController: UIViewController {\n        \n        var pizza: Pizza?\n    \n        @IBOutlet weak var amount: UILabel!\n        @IBOutlet weak var pizzaDescription: UILabel!\n        @IBOutlet weak var pizzaImageView: UIImageView!\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = pizza!.name\n            pizzaImageView.image = pizza!.image\n            pizzaDescription.text = pizza!.description\n            amount.text = \"$\\(String(describing: pizza!.amount))\"\n        }\n    \n        @IBAction func buyButtonPressed(_ sender: Any) {\n            let parameters = [\n                \"pizza_id\": pizza!.id,\n                \"user_id\": AppMisc.USER_ID\n            ]\n            \n            Alamofire.request(\"http://127.0.0.1:4000/orders\", method: .post, parameters: parameters)\n                .validate()\n                .responseJSON { response in\n                    guard response.result.isSuccess else { return self.alertError() }\n                    \n                    guard let status = response.result.value as? [String: Bool],\n                          let successful = status[\"status\"] else { return self.alertError() }\n    \n                    successful ? self.alertSuccess() : self.alertError()\n                }\n        }\n        \n        private func alertError() {\n            return self.alert(\n                title: \"Purchase unsuccessful!\",\n                message: \"Unable to complete purchase please try again later.\"\n            )\n        }\n        \n        private func alertSuccess() {\n            return self.alert(\n                title: \"Purchase Successful\",\n                message: \"You have ordered successfully, your order will be confirmed soon.\"\n            )\n        }\n        \n        private func alert(title: String, message: String) {\n            let alertCtrl = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n            alertCtrl.addAction(UIAlertAction(title: \"Okay\", style: .cancel) { action in\n                self.navigationController?.popViewController(animated: true)\n            })\n            \n            present(alertCtrl, animated: true, completion: nil)\n        }\n    }\n```\n\nIn the code above, we have multiple  `@IBOutlet`‘s and a single `@IBAction`. You need to link the outlets and actions to the controller from the storyboard.\n\nIn the `viewDidLoad` we set the outlets so they display the correct values using the `pizza` sent from the previous view controller. The `buyButtonPressed` method uses `Alamofire` to place an order by sending a request to the API. The remaining methods handle displaying the error or success response from the API.\n\n### Creating the orders list scene\nThe next scene is the Orders list scene. In this scene, all the orders are listed so the user can see them and their status:\n\n![food-delivery-notifications-swift-navigation-controller](//images.contentful.com/1es3ne0caaid/5XWMD6PTvGCY0iqgUQ8mIE/ee92605ef1c099be6f9be6365055730e/food-delivery-notifications-swift-navigation-controller.png)\n\nCreate a `OrderTableViewController.swift` file, make it the custom class for the scene above and paste in the following code:\n\n```\n    import UIKit\n    import Alamofire\n    \n    class OrdersTableViewController: UITableViewController {\n    \n        var orders: [Order] = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            navigationItem.title = \"Orders\"\n    \n            fetchOrders { orders in\n                self.orders = orders!\n                self.tableView.reloadData()\n            }\n        }\n    \n        private func fetchOrders(completion: @escaping([Order]?) -\u003e Void) {\n            Alamofire.request(\"http://127.0.0.1:4000/orders\").validate().responseJSON { response in\n                guard response.result.isSuccess else { return completion(nil) }\n                \n                guard let rawOrders = response.result.value as? [[String: Any]?] else { return completion(nil) }\n    \n                let orders = rawOrders.flatMap { ordersDict -\u003e Order? in\n                    guard let orderId = ordersDict![\"id\"] as? String,\n                          let orderStatus = ordersDict![\"status\"] as? String,\n                          var pizza = ordersDict![\"pizza\"] as? [String: Any] else { return nil }\n                    \n                    pizza[\"image\"] = UIImage(named: pizza[\"image\"] as! String)\n    \n                    return Order(\n                        id: orderId,\n                        pizza: Pizza(data: pizza),\n                        status: OrderStatus(rawValue: orderStatus)!\n                    )\n                }\n    \n                completion(orders)\n            }\n        }\n    \n        @IBAction func closeButtonPressed(_ sender: Any) {\n            dismiss(animated: true, completion: nil)\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return orders.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"order\", for: indexPath)\n            let order = orders[indexPath.row]\n    \n            cell.textLabel?.text = order.pizza.name\n            cell.imageView?.image = order.pizza.image\n            cell.detailTextLabel?.text = \"$\\(order.pizza.amount) - \\(order.status.rawValue)\"\n    \n            return cell\n        }\n        \n        override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n            return 100.0\n        }\n        \n        override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n            performSegue(withIdentifier: \"order\", sender: orders[indexPath.row] as Order)\n        }\n    \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if segue.identifier == \"order\" {\n                guard let vc = segue.destination as? OrderViewController else { return }\n                vc.order = sender as? Order\n            }\n        }\n    }\n```\n\nThe code above is similar to the code in the `PizzaTableViewController` above. However, instead of fetching the inventory, it fetches the `orders` and instead of passing the `pizza` in the last method, it passes the `order` to the next controller. The controller also comes with a `closeButtonPressed` method that just dismisses the controller and returns to the inventory list scene.\n\n### Creating the Order Status Scene\nThe next scene is the Order scene. In this scene, we can see the status of the order:\n\n![food-delivery-notifications-swift-status](//images.contentful.com/1es3ne0caaid/2X6nPInSrKKCQSaSSucqo4/72a999533dc69e4053b3deb523a9ea59/food-delivery-notifications-swift-status.png)\n\n\u003e ⚠️  The scene above has an invisible view right above the status label. You need to use this view to create an `@IBOutlet` to the controller.\n\nCreate a `OrderViewController.swift` file, make it the custom class for the scene above and paste in the following code:\n\n```\n    import UIKit\n    \n    class OrderViewController: UIViewController {\n        \n        var order: Order?\n        \n        @IBOutlet weak var status: UILabel!\n        @IBOutlet weak var activityView: ActivityIndicator!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = order?.pizza.name\n            \n            activityView.startLoading()\n            \n            switch order!.status {\n            case .pending:\n                status.text = \"Processing Order\"\n            case .accepted:\n                status.text = \"Preparing Order\"\n            case .dispatched:\n                status.text = \"Order is on its way!\"\n            case .delivered:\n                status.text = \"Order delivered\"\n                activityView.strokeColor = UIColor.green\n                activityView.completeLoading(success: true)\n            }\n        }\n    }\n```\n\nIn the code above, we are doing all the work in our `viewDidLoad` method. In there we have the `ActivityIndicator` class, which we will create next, referenced as an `@IBOutlet`.\n\n### Creating other parts of the application\nWe are using a third-party library called the `[ActivityIndicator](https://github.com/abdulKarim002/activityIndicator)` but since we the package is not available via Cocoapods, we have opted to creating it ourselves and importing it. Create a new file in Xcode called `ActivityIndicator` and paste [the code from the repo here](https://raw.githubusercontent.com/abdulKarim002/activityIndicator/master/libTest/activityIndicator.swift) into it.\n\nNext, create a new `Order.swift` file and paste in the following code:\n\n```\n    import Foundation\n    \n    struct Order {\n        let id: String\n        let pizza: Pizza\n        var status: OrderStatus\n    }\n    \n    enum OrderStatus: String {\n        case pending = \"Pending\"\n        case accepted = \"Accepted\"\n        case dispatched = \"Dispatched\"\n        case delivered = \"Delivered\"\n    }\n```\n\nFinally, create a `Pizza.swift` and paste in the following code:\n\n```\n    import UIKit\n    \n    struct Pizza {\n        let id: String\n        let name: String\n        let description: String\n        let amount: Float\n        let image: UIImage\n        \n        init(data: [String: Any]) {\n            self.id = data[\"id\"] as! String\n            self.name = data[\"name\"] as! String\n            self.amount = data[\"amount\"] as! Float\n            self.description = data[\"description\"] as! String\n            self.image = data[\"image\"] as! UIImage\n        }\n    }\n```\n\nThat is all for the client application. One last thing we need to do though is modify the `info.plist` file. We need to add an entry to the `plist` file to allow connection to our local server:\n\n![food-delivery-notifications-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/j8Vt5c32mskcguceeAs0E/f793b048a46325ce1ca09c20e641e0da/food-delivery-notifications-swift-allow-arbitrary-loads.png)\n\nLet’s move on to the admin application.\n\n## Building the admin application\n\nLaunch a new instance of Xcode and create a new ‘Single Application’ project. We will name our project **PizzaareaAdmin.**\n\nOnce the project has been created, exit Xcode and create a new file called `Podfile` in the root of the Xcode project you just created. In the file paste in the following code:\n\n```\n    platform :ios, '11.0'\n    \n    target 'PizzareaAdmin' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 5.1.1'\n      pod 'Alamofire', '~\u003e 4.6.0'\n    end\n```\n\nIn the file above, we specified the dependencies the project needs to run. **Remember to change the** `**target**` **above to the name of your project.** Now in your terminal, run the following command to install the dependencies:\n\n```\n    $ pod install\n```\n\nAfter the installation is complete, open the Xcode workspace file that was generated by Cocoapods. This should relaunch Xcode. \n\nWhen Xcode has been relaunched, open the `Main.storyboard` file and in there we will create the storyboard for our client application. Below is a screenshot of how we have designed our storyboard:\n\n![food-delivery-notifications-swift-app-flow](//images.contentful.com/1es3ne0caaid/2jObj403hq68Q22cUYQuKO/930e30909508a05cdabb4552043ad35d/food-delivery-notifications-swift-app-flow.png)\n\nAbove we have a navigation view controller that is the initial view controller.\n\n### Creating the orders list scene\nThe orders list scene is supposed to show the list of the clients orders and from there we can change the status of each order when we want.\n\nCreate a new file in Xcode called `OrdersListViewController.swift`, make it the custom class for the second scene and paste in the following code:\n\n```\n    import UIKit\n    import Alamofire\n    \n    class OrdersTableViewController: UITableViewController {\n    \n        var orders: [Order] = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = \"Client Orders\"\n            \n            fetchOrders { orders in\n                self.orders = orders!\n                self.tableView.reloadData()\n            }\n        }\n        \n        private func fetchOrders(completion: @escaping([Order]?) -\u003e Void) {\n            Alamofire.request(\"http://127.0.0.1:4000/orders\").validate().responseJSON { response in\n                guard response.result.isSuccess else { return completion(nil) }\n                \n                guard let rawOrders = response.result.value as? [[String: Any]?] else { return completion(nil) }\n                \n                let orders = rawOrders.flatMap { ordersDict -\u003e Order? in\n                    guard let orderId = ordersDict![\"id\"] as? String,\n                          let orderStatus = ordersDict![\"status\"] as? String,\n                          var pizza = ordersDict![\"pizza\"] as? [String: Any] else { return nil }\n                    \n                    pizza[\"image\"] = UIImage(named: pizza[\"image\"] as! String)\n                    \n                    return Order(\n                        id: orderId,\n                        pizza: Pizza(data: pizza),\n                        status: OrderStatus(rawValue: orderStatus)!\n                    )\n                }\n                \n                completion(orders)\n            }\n        }\n    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return orders.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"order\", for: indexPath)\n            let order = orders[indexPath.row]\n            \n            cell.textLabel?.text = order.pizza.name\n            cell.imageView?.image = order.pizza.image\n            cell.detailTextLabel?.text = \"$\\(order.pizza.amount) - \\(order.status.rawValue)\"\n            \n            return cell\n        }\n        \n        override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n            return 100.0\n        }\n        \n        override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n            let order: Order = orders[indexPath.row]\n            \n            let alertCtrl = UIAlertController(\n                title: \"Change Status\",\n                message: \"Change the status of the order based on the progress made.\",\n                preferredStyle: .actionSheet\n            )\n            \n            alertCtrl.addAction(createActionForStatus(.pending, order: order))\n            alertCtrl.addAction(createActionForStatus(.accepted, order: order))\n            alertCtrl.addAction(createActionForStatus(.dispatched, order: order))\n            alertCtrl.addAction(createActionForStatus(.delivered, order: order))\n            alertCtrl.addAction(createActionForStatus(nil, order: nil))\n            \n            present(alertCtrl, animated: true, completion: nil)\n        }\n        \n        private func createActionForStatus(_ status: OrderStatus?, order: Order?) -\u003e UIAlertAction {\n            let alertTitle = status == nil ? \"Cancel\" : status?.rawValue\n            let alertStyle: UIAlertActionStyle = status == nil ? .cancel : .default\n            \n            let action = UIAlertAction(title: alertTitle, style: alertStyle) { action in\n                if status != nil {\n                    self.setStatus(status!, order: order!)\n                }\n            }\n            \n            if status != nil {\n                action.isEnabled = status?.rawValue != order?.status.rawValue\n            }\n            \n            return action\n        }\n        \n        private func setStatus(_ status: OrderStatus, order: Order) {\n            updateOrderStatus(status, order: order) { successful in\n                guard successful else { return }\n                guard let index = self.orders.index(where: {$0.id == order.id}) else { return }\n    \n                self.orders[index].status = status\n                self.tableView.reloadData()\n            }\n        }\n        \n        private func updateOrderStatus(_ status: OrderStatus, order: Order, completion: @escaping(Bool) -\u003e Void) {\n            let url = \"http://127.0.0.1:4000/orders/\" + order.id\n            let params = [\"status\": status.rawValue]\n    \n            Alamofire.request(url, method: .put, parameters: params).validate().responseJSON { response in\n                guard response.result.isSuccess else { return completion(false) }\n                guard let data = response.result.value as? [String: Bool] else { return completion(false) }\n                \n                completion(data[\"status\"]!)\n            }\n        }\n    }\n```\n\nThe code above is similar to the code in the `PizzaListTableViewController` in the client application and has been explained before.\n\nThere is a `createActionForStatus` which is a helper for creating and configuring `UIAlertAction` object. There is a `setStatus` method that just attempts to set the status for an order and then the `updateOrderStatus` method that sends the update request using `Alamofire` to the API.\n\nNext, create the `Order.swift` and `Pizza.swift` classes like we did before in the client application:\n\n```\n    // Order.swift\n    import Foundation\n    \n    struct Order {\n        let id: String\n        let pizza: Pizza\n        var status: OrderStatus\n    }\n    \n    enum OrderStatus: String {\n        case pending = \"Pending\"\n        case accepted = \"Accepted\"\n        case dispatched = \"Dispatched\"\n        case delivered = \"Delivered\"\n    }\n    \n    \n    // Pizza.swift\n    import UIKit\n    \n    struct Pizza {\n        let id: String\n        let name: String\n        let description: String\n        let amount: Float\n        let image: UIImage\n        \n        init(data: [String: Any]) {\n            self.id = data[\"id\"] as! String\n            self.name = data[\"name\"] as! String\n            self.amount = data[\"amount\"] as! Float\n            self.description = data[\"description\"] as! String\n            self.image = data[\"image\"] as! UIImage\n        }\n    }\n```\n\nThat's all for the admin application. One last thing we need to do though is modify the `info.plist` file as we did in the client application.\n\n## Adding push notifications to our food delivery iOS app\n\nAt this point, the application works as expected out of the box. We now need to add push notifications to the application to make it more engaging even when the user is not currently using the application.\n\n\u003e ⚠️  You need to be [enrolled to the Apple Developer program](https://developer.apple.com/programs/enroll/) to be able to use the Push Notifications feature. Also Push Notifications do not work on Simulators so you will need an actual iOS device to test.\n\nPusher’s [Beams API](https://pusher.com/push-notifications) has first-class support for native iOS applications. Your iOS app instances subscribe to interests; then your servers send push notifications to those interests. Every app instance subscribed to that interest will receive the notification, even if the app is not open on the device at the time. \n\nThis section describes how you can set up an iOS app to receive transactional push notifications about your food delivery orders through Pusher.\n\n### Configure APNs\nPusher relies on Apple Push Notification service (APNs) to deliver push notifications to iOS application users on your behalf. When we deliver push notifications, we use your APNs Key. This page guides you through the process of getting an APNs Key and how to provide it to Pusher.\n\nHead over to the Apple Developer dashboard by clicking [here](https://developer.apple.com/account) and then create a new Key as seen below: \n\n![food-delivery-notifications-swift-create-new-key](//images.contentful.com/1es3ne0caaid/FRmSzjstAymmY42Yae2Sg/e9bd6cf292c5a671b0cb5b8c43bda1fa/food-delivery-notifications-swift-create-new-key.gif)\n\nWhen you have created the key, download it. Keep it safe as we will need it in the next section.\n\n\u003e ⚠️  You have to keep the generated key safe as you cannot get it back if you lose it. \n\n### Creating your Pusher application\nThe next thing you need to do is create a new Pusher Beams application from the [Pusher dashboard](https://dash.pusher.com). \n\n![food-delivery-notifications-swift-create-instance](//images.contentful.com/1es3ne0caaid/6It7s8zzpYWWOKSCwIe8eQ/85d5e21f2d2ed7118965b2518c1e7f89/food-delivery-notifications-swift-create-instance.png)\n\nWhen you have created the application, you should be presented with a Quickstart wizard that will help you set up the application.\n\nIn order to configure Beams you will need to get an APNs key from Apple. This is the same key as the one we downloaded in the previous section. Once you’ve got the key, upload it to the Quickstart wizard.\n\n![food-delivery-notifications-swift-apns-keys](//images.contentful.com/1es3ne0caaid/4F5z1zKnWMSUCoq6oUOOQw/d5fbfc2c052a0911a4c1708aa9bccffb/food-delivery-notifications-swift-apns-keys.png)\n\nEnter your Apple Team ID. You can get the Team ID from [here](https://developer.apple.com/account/#/membership). Click on the continue to proceed to the next step.\n\n### Updating your client application to support push notifications\nIn your client application, open the `Podfile` and add the following pod to the list of dependencies:\n\n```\n    pod 'PushNotifications'\n```\n\nNow run the `pod install` command as you did earlier to pull in the notifications package. When installation is complete, create a new class `AppMisc.swift` and in there paste the following:\n\n```\n    class AppMisc {\n      static let USER_ID = NSUUID().uuidString.replacingOccurrences(of: \"-\", with: \"_\")\n    }\n```\n\nIn the little class above, we generate a user ID for the session. In a real application, you would typically have an actual user ID after authentication.\n\nNext open the `AppDelegate` class and import the `PushNotifications` package:\n\n```\n    import PushNotifications\n```\n\nNow, as part of the `AppDelegate` class, add the following:\n\n```\n    let pushNotifications = PushNotifications.shared\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n      self.pushNotifications.start(instanceId: \"PUSHER_NOTIF_INSTANCE_ID\")\n      self.pushNotifications.registerForRemoteNotifications()\n      return true\n    }\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n      self.pushNotifications.registerDeviceToken(deviceToken) {\n        try? self.pushNotifications.subscribe(interest: \"orders_\" + AppMisc.USER_ID)\n      }\n    }\n```\n\n\u003e 💡  Replace `PUSHER_PUSH_NOTIF_INSTANCE_ID` with the key given to you by the Pusher application.\n\nIn the code above, we set up push notifications in the `application(didFinishLaunchingWithOptions:)` method and then we subscribe in the `application(didRegisterForRemoteNotificationsWithDeviceToken:)` method.\n\nNext, we need to enable push notifications for the application. In the project navigator, select your project, and click on the *Capabilities* tab. [Enable Push Notifications](http://help.apple.com/xcode/mac/current/#/devdfd3d04a1) by turning the switch ON.\n\n![food-delivery-notifications-swift-on-slide](//images.contentful.com/1es3ne0caaid/1mMVY0HdKIqkeM28yuua06/0bdaaf36c998992135cb58e6a8660430/food-delivery-notifications-swift-on-slide.png)\n\n### Updating your admin application to support push notifications\nYour admin application also needs to be able to receive push notifications. The process is similar to the set up above. The only difference will be the interest we will be subscribing to in `AppDelegate` which will be **orders**.\n\n### Updating your API to send push notifications\nPush Notifications will be published using our backend server API which is written in Node.js. For this we will use the [Node.js SDK](https://docs.pusher.com/push-notifications/reference/server-sdk-node). `cd` to the backend project directory and run the following command:\n\n```\n    $ npm install @pusher/push-notifications-server --save\n```\n\nNext, open the `index.js` file and import the `@pusher/push-notifications-server` package:\n\n```\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    let pushNotifications = new PushNotifications({\n        instanceId: 'PUSHER_PUSH_NOTIF_INSTANCE_ID',\n        secretKey: 'PUSHER_PUSH_NOTIF_SECRET_KEY'\n    });\n```\n\nNext, we want to add a helper function that returns a notification message based on the order status. In the `index.js` add the following:\n\n```\n    function getStatusNotificationForOrder(order) {\n        let pizza = order['pizza']\n        switch (order['status']) {\n            case \"Pending\":\n                return false;\n            case \"Accepted\":\n                return `⏳ Your \"${pizza['name']}\" is being processed.`\n            case \"Dispatched\":\n                return `😋🍕 Your \"${order['pizza']['name']}\" is on it’s way`\n            case \"Delivered\":\n                return `🍕 Your \"${pizza['name']}\" has been delivered. Bon Appetit.`\n            default:\n                return false;\n        }\n    }\n```\n\nNext, in the `PUT /orders/:id` route, add the following code before the return statement:\n\n```\n    let alertMessage = getStatusNotificationForOrder(order)\n    \n    if (alertMessage !== false) {\n       pushNotifications.publish([`orders_${user_id}`], {\n            apns: { \n                aps: {\n                    alert: {\n                        title: \"Order Information\",\n                        body: alertMessage,\n                    }, \n                    sound: 'default'\n                } \n            }\n        })\n        .then(response =\u003e console.log('Just published:', response.publishId))\n        .catch(error =\u003e console.log('Error:', error));\n    }\n```\n\nIn the code above, we send a push notification to the `**orders_${user_id}**` interest (`user_id` is the ID generated and passed to the backend server from the client) whenever the order status is changed. This will be a notification that will be picked up by our client application since we subscribed for that interest earlier.\n\nNext, in the `POST /orders` route, add the following code before the return statement:\n\n```\n    pushNotifications.publish(['orders'], {\n        apns: {\n            aps: {\n                alert: {\n                    title: \"⏳ New Order Arrived\",\n                    body: `An order for ${pizza['name']} has been made.`,\n                },\n                sound: 'default'\n            }\n        }\n    })\n    .then(response =\u003e console.log('Just published:', response.publishId))\n    .catch(error =\u003e console.log('Error:', error));\n```\n\nIn this case, we are sending a push notification to the **orders** interest. This will be sent to the admin application that is subscribed to the **orders** interest.\n\nThat’s all there is to adding push notifications using Pusher. Here are screen recordings of our applications in action:\n\n![food-delivery-notifications-swift-final-demo](//images.contentful.com/1es3ne0caaid/1IvWzEqIgkCQAWWo4S6EME/386bf16c07db53a02c44e25513d2e27f/food-delivery-notifications-swift-final-demo.gif)\n\n## Conclusion\n\nIn this article, we created a basic food delivery system and used that to demonstrate how to use Pusher to send push notifications in multiple applications using the same Pusher application. Hopefully you learnt how you can use Pusher to simplify the process of sending push notifications to your users.","metaTitle":"Send push notifications to a food delivery Swift app","metaDescription":"Learn how you can send push notifications to an iOS food delivery app using Swift and Node.js"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2uXH4790aAKiQUMswwWcmm","type":"Entry","createdAt":"2018-02-28T12:22:30.031Z","updatedAt":"2018-02-28T16:26:48.079Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making Angular 5 realtime with WebSockets","url":"angular-realtime","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular5-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2018-02-23","description":"Build an app with realtime features in Angular 5 and Pusher.","prerequisite":"A basic understanding of Angular 5 and Node.js is needed to follow this tutorial.","content":"The demand for realtime functionality in applications these days has grown tremendously. People want to see how users interact with their applications in realtime. Here comes Pusher, allowing you to add realtime functionality to your application by using concepts such as events and channels. In this article, we are going to look at how to add realtime functionality to your Angular 5 application. \n\n\n## Introduction\n\nWe are going to make an application that gives realtime feedback when a picture is liked. In other words, you get to see in realtime when users like a picture - interesting, right? To do this, we will be using [Angular](https://angular.io) 5 and [Pusher](https://pusher.com) API. \n\n![angular-realtime-likes](//images.contentful.com/1es3ne0caaid/6DOzL2ede8i4E6KMYUA8sy/3b027d45e96b87e142bcb45b3b973c0a/angular-realtime-likes.png)\n\n## Getting started\n\nTo get started, you need to make sure your have [Node](https://nodejs.org) and [NPM](https://npmjs.com) installed on your machine. You can confirm you installation by running:\n\n```\n    npm --version\n    node --version\n```\n\nIf you get version numbers as results then you have them installed. Node 6+ and NPM 4+ should be your target.\n\n## Building the Angular 5 application\n\nNow we are not going to dwell too much on the intricacies of building an Angular application, rather, we will be more concerned about adding realtime functionality to the application itself.\n\nTo create your Angular application, you need to ensure that you have Angular 5 installed on your machine. You can confirm your installation by running:\n\n```\n    ng --version\n```\n\nIf you don’t have Angular installed or your version is less than 1.2, run this command in your terminal:\n\n```\n    npm install -g @angular/cli\n```\n\nFor more information about Angular basics, head [here](https://angular.io).\n\nWe can now create our application by running: \n\n```\n    ng new angular5-pusher\n```\n\nAfter running this, we get a basic Angular starter project which we are going to build upon.\n\n\n## App component \n\nNow the view of the application is pretty simple. We have an image, a button to like the image and the count of images that have been liked. The `app.component.html` file looks like this:\n\n```\n    \u003cdiv class=\"main-app\"\u003e\n      \u003ch1\u003e\n        {{ title }}!\n      \u003c/h1\u003e\n      \u003cimg width=\"300\" alt=\"Pusher Logo\" src=\"../assets/pusher.svg\" /\u003e\n      \u003cdiv class=\"like\"\u003e\n        \u003cdiv style=\"margin-right: 1rem\"\u003e\n          \u003ch2\u003e{{ likes }} likes\u003c/h2\u003e\n        \u003c/div\u003e\n        \u003cbutton class=\"btn btn-lg btn-success\" (click)=\"liked()\"\u003eLike Image\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nWe can see from the above that the `buttonClick` event has been tied to a function called `liked()` which we will take a look at now.\n\nIn our `app.component.ts` file, we have the following: \n\n```\n    import { Component, OnInit } from '@angular/core';\n    //..\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    \n    export class AppComponent implements OnInit {\n      title = 'Pusher Liker';\n      likes: any =  10;\n      \n      constructor() {\n        // the pusher service will be injected as part of the constructor later\n      }\n      ngOnInit() {\n        // ..\n      }\n      // add to the number of likes to the server\n      liked() {\n        this.likes = parseInt(this.likes, 10) + 1;\n        // ..\n      }\n    }\n```\n\nNow we can see when we examine the component that we specify the `title` and the number of `likes` for starters. \n\n**NB:** In a real world application, you will want to make a request to your backend server to get the actual number of likes instead of  using static data.\n\nWe can also see that we plan on injecting a `pusherService` in the constructor of our app component. We are going to explain more about this in the next section.\n\n## Adding Pusher to your application\n\nAt this point, we have our application that allows us to like pictures, but other users don’t get realtime feedback as to the number of likes the picture actually has. In comes [Pusher](https://pusher.com) to save the day. Pusher allows you to add realtime functionality to your application without you having to stress so much about the logic of making this work.\n\nAll you need to do is to  `subscribe` to a channel and then `listen` for `events` - in simpler terms it’s like turning on a TV to a football match (channel ) and then waiting for a team to score a goal ( event ).\n\nNow lets see how to add this to our existing Pusher Liker Application .To use Pusher with Angular, we first need to install and load Pusher’s client library:\n\n```\n    npm install --save pusher-js\n```\n\nNow that we have successfully installed the library, the next thing we need to do is to add it as one of the third party scripts that will be loaded by Angular when our page is being loaded.\n\nIn the `.angular-cli.json` we include the following:\n\n\n    //...\n    \n    \"scripts\": [\"../node_modules/pusher-js/dist/web/pusher.min.js\"]\n    \n    //...\n\nNow lets get to using the pusher client.\n\nEarlier on, we spoke about the `PusherService` and now we are going to see how it works. In angular, there is a concept called `services` - which, as the name suggests,  helps you to do one thing really well. \n\nWe create our `PusherService` by running the command:\n\n```\n    ng generate service Pusher\n```\n\nThis creates the `pusher.service.ts`  and `pusher.service.spec.``ts` files. We are only going to be concerned with the `pusher.service.ts`\n\nAt he top of the `pusher.service.``ts` file we declare our Pusher constant so that Angular knows that we know what we are doing, and we are going to use the `Pusher` class from an external script which we loaded earlier:\n\n```\n    // pusher.service.ts \n    declare const Pusher: any;\n    // ...\n```\n\n \n Then, we import the necessary classes we are going to need:\n \n```\n    // .... pusher.service.ts\n    import { Injectable } from '@angular/core';\n    import { environment } from '../environments/environment';\n    import { HttpClient } from '@angular/common/http';\n    // .....\n```\n \nIf you used older versions of Angular, the new `HttpClient` may seem strange to you because it was just introduced with this new version to make life easier for Angular developers. With this new `HttpClient`, responses are defaulted to `JSON` and interceptors are now being used for easier error handling. You can read more about it [here](https://angular.io/api/common/http/HttpClient).\n\nWe also included the `environment` class, which contains some enviroment variables for pusher to work. The `enviroment.ts` file looks like this:\n\n```\n    // ... environment.ts \n    export const environment = {\n      production: false,\n      pusher: {\n        key: 'PUSHER_API_KEY',\n        cluster: 'PUSHER_CLUSTER',\n      }\n    };\n```\n\nThese details can be obtained from your Pusher app [dashboard](https://dashboard.pusher.com/).\n\nTo create a new app:\n1. Click “Create New App” from the left sidebar.\n2. Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n  \n![angular-realtime-create-app](//images.contentful.com/1es3ne0caaid/4xyhbHkzOEWwYACWQMUsy8/77b6407f347fd38dd348ec6e9478c4b1/angular-realtime-create-app.png)\n \n Now, back to our `pusher.service.``ts` file:\n \n```\n    //...pusher.service.ts\n    @Injectable()\n    export class PusherService {\n      pusher: any;\n      channel: any;\n      constructor(private http: HttpClient) {\n        this.pusher = new Pusher(environment.pusher.key, {\n          cluster: environment.pusher.cluster,\n          encrypted: true\n        });\n        this.channel = this.pusher.subscribe('events-channel');\n      }\n      \n      like( num_likes ) {\n        his.http.post('http://localhost:3120/update', {'likes': num_likes})\n        .subscribe(data =\u003e {});\n      }\n    }\n```\n \nIn the constructor for the `PusherService` , we included the `HttpClient` and  then `subscribed` to the `events-channel` . We also have another function that makes a `POST` request to our backend server with the number of likes as part of the `body`  of the request when the `like` button is clicked. \n\n\u003e NB : The implementation details of our  backend server will be built later in the article\n\nNow we will go back to our `app.component.``ts` file to see how we factor in the new Pusher service:\n\n```\n    //-- app.component.ts\n    import { Component, OnInit } from '@angular/core';\n    import { PusherService } from './pusher.service';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent implements OnInit {\n      title = 'Pusher Liker';\n      likes: any =  10;\n      constructor(private pusherService: PusherService) {\n      }\n      ngOnInit() {\n        this.pusherService.channel.bind('new-like', data =\u003e {\n          this.likes = data.likes ;\n        });\n      }\n      // add to the number of likes to the server\n      liked() {\n        this.likes = parseInt(this.likes, 10) + 1;\n        this.pusherService.like( this.likes );\n      }\n    }\n```\n\nIn the above, we import the `pusherService` and then add it to our constructor. Now, when the component is created, we then bind the `pusherService` to the `new-like` event and we update the number of likes with the new number of likes that we get.\n\nNow you may be wondering, “it’s cool that we can now tell when the number of likes have increased and the update them, but what when someone actually clicks the button, what triggers the event?”\n\nAs we can see in the `liked()` function above, the `pusherService.like()` is also called to help make the request to the backend server to actually trigger the like event. \n\nNow that our front-end is ready, we can run the application by running:\n\n```\n    npm start\n```\n\n![angular-realtime-demo](//images.contentful.com/1es3ne0caaid/zuNaz7pMFaK8oeuey4As8/ef9d1369c3af410d0afc5d88a2e0be5f/angular-realtime-demo.gif)\n\n## Building the backend Server\n\nNow, we’ll take a quick look at the backend server that triggers the event and how it works. In the project directory we create a folder called `server` and in there is where we do all the work:\n\n```\n    mkdir server\n```\n\nIn the `server` directory, we run:\n\n```\n    npm init\n```\n\nAnd then we install the necessary modules we are going to need:\n\n```\n    npm install --save cors pusher express body-parser dotenv\n```\n\nOnce that’s done, we can now create our `server.js` in the same directory \n\nIn our `server.js` file, we do the following: \n\n### Import Node modules\n\n```\n    // -------------------------------\n    // Import Node Modules\n    // -------------------------------\n    require(\"dotenv\").config();\n    const cors = require(\"cors\");\n    const Pusher = require(\"pusher\");\n    const express = require(\"express\");\n    const bodyParser = require(\"body-parser\");\n```\n\n### Create app and load Middlewares\n\n```\n    // ------------------------------\n    // Create express app\n    // ------------------------------\n    const app = express();\n    // ------------------------------\n    // Load the middlewares\n    // ------------------------------\n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\n### Create Pusher client\n\n```\n    // ....\n    const pusher = new Pusher({\n        appId: `${process.env.PUSHER_APP_ID}`,\n        key: `${process.env.PUSHER_API_KEY}`,\n        secret: `${process.env.PUSHER_API_SECRET}`,\n        cluster: `${process.env.PUSHER_APP_CLUSTER}`,\n        encrypted: true\n    });\n```\n\nNow add a `.env` file at the root of the `server`  folder with the following lines:\n\n```\n    PUSHER_APP_ID=[PUSHER_APP_ID]\n    PUSHER_API_KEY=[PUSHER_API_KEY]\n    PUSHER_API_SECRET=[PUSHER_API_SECRET]\n    PUSHER_APP_CLUSTER=[PUSHER_APP_CLUSTER]\n```\n\nThese details for the Pusher client can be obtained from your [Pusher dashboard](https://dashboard.pusher.com/).\n\n### Create application routes\n\n```\n    // -------------------------------\n    // Create app routes\n    // -------------------------------\n    app.post(\"/update\", function(req, res) {\n        // -------------------------------\n        // Trigger pusher event\n        // ------------------------------\n        pusher.trigger(\"events-channel\", \"new-like\", {\n          likes : `${req.body.likes}`\n        });\n    });\n```\nThis application only has one route that triggers the `new-like` event to the `events-channel` which our Angular frontend listens for and then updates accordingly.\n\n### Assign application\n\n```\n    app.listen(\"3120\");\n    console.log(\"Listening on localhost:3120\");\n```\n\nNow, the backend server will be run at `localhost:3120`.\n\n## Conclusion\n\nIn this article we have seen how to add realtime functionality to an Angular 5 application. The use cases for this are endless. You can give users realtime feedback as they interact with your applications — Twitter has a feature similar to this where you can actually see the number of likes, replies and retweets in realtime. \n\nThe ball is in your court now to implement that realtime feature you know your users will love to have.","metaTitle":"Making Angular 5 realtime with WebSockets","metaDescription":"Build an application that gives realtime feedback when a picture is liked with Angular 5 and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2jXImCuurO66mYOOuyUkSo","type":"Entry","createdAt":"2018-02-28T12:38:00.459Z","updatedAt":"2018-02-28T12:38:00.459Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a simple social network with Kotlin","url":"social-network-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/status-update-kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-02-19","description":"Social feed have become a major feature of many apps and websites. Learn how to build one with Kotlin and Node.js.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"Social networks require live updates to your status stack. Take for instance, Facebook. If you are on your main profile page and you post a new status, it is reflected immediately on the page without need to refresh it.\n\nIt is engaging and saves users the extra muscle of having to click the refresh button. Taking this to a mobile context, if this feature is not present, we would have to restart the ativity or have to wait till the user closes the app and opens it again before he can see anything new. This is obviously a bad user experience.\n\n## What we will build\n\nIn this article, we will build a simple android app that shows our status as soon as it is posted.\n\n![social-network-kotlin-demo](//images.contentful.com/1es3ne0caaid/5a4CDFW9rqi2oM2KQIE8Sw/9a75e68b3c6f77616bd1558305b3f74b/social-network-kotlin-demo.gif)\n\n## Prerequisites \n\nYou need the following;\n\n- Knowledge of the Kotlin programming language\n- A Pusher application\n- Node JS - This is to enable us to setup a server.\n- [Android Studio](https://developer.android.com/studio/archive.html) - Android studio 3.0.1 is recommended as it is the latest stable version at the time of this publication and it integrates Kotlin support with ease.\n\n## Pusher app setup\n\nHead to the [Pusher dashboard](https://dashboard.pusher.com/), create an account if you have none, login to your dashboard, and create a new Pusher app.\n\n![social-network-kotlin-create-app](//images.contentful.com/1es3ne0caaid/5b4kPGLl8k2K6YcyUwgG4C/3ce3541b4296019db93c57021d0c43b8/social-network-kotlin-create-app.png)\n\nBe careful to take not of the cluster used, `eu` in our case. Open your app details and note the keys in the App Keys tab. You will need these later in the article.\n\n## Server setup\n\nWe will build a Node.js server and run it locally. We first create a new folder and name it accordingly, say `user-status-backend`.  `cd` to the folder, create a `package.json` file and paste this:\n \n```\n    {\n      \"name\": \"realtime-status-update\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.2\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nWe also create an `index.js` file within the folder and paste this:\n\n```\n    // Load dependencies\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const app = express()\n    \n    // App middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Initialize Pusher\n    var Pusher = require('pusher');\n    var pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    // app's routes\n    app.post('/update-status', (req, res) =\u003e {\n    \n        pusher.trigger('my-channel', 'my-event', {\n            \"message\": req.query.status\n        });\n    \n        res.json(req.query.status)\n    \n    })\n    \n    app.get('/', (req, res, next) =\u003e {\n        res.json(\"Yeaaaa!!!!\")\n    })\n    \n    app.listen(3000, () =\u003e console.log('Running application...'))\n```\n\nOur server has one major endpoint, `update-status` which accepts an `HTTP POST` method with the message to be posted sent as one of the parameters. \n\n\u003e Use your app keys in this file.\n\nWe then install the Node and Pusher modules in our folder directory using the following commands:\n\n```\n    npm install\n```\n\nFinally, we run the server:\n\n```\n    node index.js\n```\n\nWith this, our server is up and running on port `3000`, you can check it out on your browser first before forging ahead.\n\n## Building our realtime Kotlin application\n\n### Setting up the project\n\nOpen android studio and create a new project. Details to be provided include: the application name and the domain name. Click the “include kotlin support” checkbox to enable Kotlin in the project. \n\nNext up, you select the `minimum SDK` which is the least Android version our app will support. Choose Empty Activity when asked to add an activity.\n\n![social-network-kotlin-create-new-project](//images.contentful.com/1es3ne0caaid/2PevzqZ2UUeywQ8keIeIoq/df1386314dbdfd0db3857fcde0a05391/social-network-kotlin-create-new-project.png)\n\nThe next screen gives you a chance to customize the name of the activity. We will leave ours as the default `MainActivity`  and click finish. \n\n### Adding dependencies\n\nWe need the support library dependencies, Pusher client dependency and Retrofit dependency. The first will give us extra features to access while using the Android SDK, Pusher will provide us with the much needed real-time feature and Retrofit will enable us make network requests to our server. These dependencies will be added in our app-module `build.gradle`:\n\n```\n    // pusher dependency\n    compile 'com.pusher:pusher-java-client:1.5.0'\n    \n    // part of the support libraries\n    implementation 'com.android.support:design:26.1.0'\n    \n    // retrofit dependency\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nAfter adding the dependencies, we sync it so that it can be downloaded and made available for use in our app.\n\n### Setting up Retrofit\n\n[Retrofit](https://github.com/square/retrofit) is a type-safe HTTP client for Android and Java built by [Square, Inc](https://github.com/square). It is used for making network requests. For us to use Retrofit, we need an interface to define our endpoints. Create a new Kotlin file named `ApiInterface.kt` and paste this:\n\n```\n    import retrofit2.Call\n    import retrofit2.http.POST\n    import retrofit2.http.Query\n    \n    interface ApiInterface {\n        @POST(\"/update-status\")\n        fun updateStatus(@Query(\"status\") status:String): Call\u003cString\u003e\n    }\n```\n\nThereafter, we need to provide a Retrofit object. We will do this by creating a class named `RetrofitClient.kt` and pasting this: \n\n```\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitClient {\n        fun getClient(): ApiInterface {\n            val httpClient = OkHttpClient.Builder()\n            val builder = Retrofit.Builder()\n                    .baseUrl(\"http://10.0.2.2:3000/\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n    \n            val retrofit = builder\n                    .client(httpClient.build())\n                    .build()\n            return retrofit.create(ApiInterface::class.java)\n        }\n    }\n```\n\nThe `getClient` function gives us an instance of Retrofit. While declaring the Retrofit object, the base url for our network requests and the converter to be used are defined.\n\n\n\u003e We are using `10.0.2.2`  because this is how the Android emulator recognizes localhost as against the usual  `127.0.0.1` \n\nWe also add the internet permission in the `AndroidManifest.xml` file. This should be done under the `\u003cmanifest\u003e` tag:\n\n```\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"YOUR_APP_PACKAGE_NAME\"\u003e\n    \n        \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n    \n    \u003c/manifest\u003e    \n```\n\n### Designing our layout\n\nIn this app, we will have just one screen. It will contain an `EditText` for our input, a `Button` to send the message inputted and trigger a request to the server, and finally a `RecyclerView` to display our status messages. This will be housed in the `activity_main.xml` layout file:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_margin=\"16dp\"\n        android:layout_height=\"match_parent\"\n        tools:showIn=\"@layout/activity_main\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:orientation=\"vertical\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cEditText\n                android:paddingLeft=\"10dp\"\n                android:hint=\"Whats on your mind?\"\n                android:background=\"@drawable/background\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:minHeight=\"100dp\"\n                android:id=\"@+id/newStatus\" /\u003e\n    \n            \u003cButton\n                android:layout_gravity=\"end\"\n                android:id=\"@+id/buttonPost\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"post\" /\u003e\n    \n            \u003candroid.support.v7.widget.RecyclerView\n                android:id=\"@+id/recyclerView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"/\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n    \u003c/ScrollView\u003e\n```    \n\nWe added a seprate drawable as background for the `EditText` tag. This gives it a box like look. Create a new drawable resource named `background.xml` and paste this:\n\n```\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:thickness=\"0dp\"\n        android:shape=\"rectangle\"\u003e\n        \u003csolid android:color=\"#FFFFFF\" /\u003e\n        \u003cstroke android:width=\"2dp\"\n            android:color=\"@color/colorAccent\"/\u003e\n    \n    \u003c/shape\u003e\n```\n\nIf you build the project right now our layout will look like this:\n\n\n![social-network-kotlin-app-ui](//images.contentful.com/1es3ne0caaid/7DAvEkCwRqOeKsAWkGA86g/40f69dce56f672d2ba0fdba46f76cc3f/social-network-kotlin-app-ui.png)\n\n\nThis takes the shape of a generic social media platform where status updates are made. Next up, we create an adapter to handle the display of status messages on a list. Create a new class `StatusAdapter.kt` and paste this:\n\n```\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    import java.util.*\n    \n    class StatusAdapter : RecyclerView.Adapter\u003cStatusAdapter.ViewHolder\u003e() {\n    \n        private var statusList = ArrayList\u003cString\u003e()\n        private var reversedList = ArrayList\u003cString\u003e()\n    \n        fun addMessage(newMessage: String){\n            statusList.add(newMessage)\n            reversedList = statusList\n            Collections.reverse(reversedList)\n            notifyDataSetChanged()\n        }\n    \n        override fun getItemCount(): Int {\n            return statusList.size\n        }\n    \n        override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): ViewHolder {\n            val view = LayoutInflater.from(parent!!.context).inflate(android.R.layout.simple_list_item_1,parent,false)\n            return ViewHolder(view)\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder?, position: Int) {\n            holder!!.statusText.text = reversedList[position]\n        }\n    \n        inner class ViewHolder(itemView: View?): RecyclerView.ViewHolder(itemView) {\n            var statusText: TextView = itemView!!.findViewById(android.R.id.text1)\n        }\n    \n    }\n```\n\nThe `onCreateViewHolder` function returns an instance of our `ViewHolder`  coupled with the view that gives us the layout design for each list item. The `addMessage` function adds a new message to the list. Still in this function, we also assign `list` to `reversedList` and reverse `reversedList` so that we can have the most recent updates on top of the list. The `reversedList` is used based on position to display each item in the `onBindViewHolder` function.\n\nIn the `MainActivity` class, paste this:\n\n```\n    import android.app.Activity\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.view.View\n    import android.view.inputmethod.InputMethodManager\n    import android.widget.Toast\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class MainActivity : AppCompatActivity() {\n    \n        lateinit var pusher:Pusher\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n    \n            // setup recycler view and adapter\n            val adapter = StatusAdapter()\n            recyclerView.layoutManager = LinearLayoutManager(this)\n            recyclerView.adapter = adapter\n    \n            // setup pusher to receive status update\n            val options = PusherOptions()\n            options.setCluster(PUSHER_CLUSTER)\n            pusher = Pusher(PUSHER_API_KEY, options)\n            val channel = pusher.subscribe(\"my-channel\")\n            channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n                val jsonObject = JSONObject(data)\n                runOnUiThread { adapter.addMessage(jsonObject.getString(\"message\")) }\n            }\n    \n            // post status to server\n            buttonPost.setOnClickListener {\n    \n                if (newStatus.text.isNotEmpty())\n                    RetrofitClient().getClient().updateStatus(newStatus.text.toString()).enqueue(object : Callback\u003cString\u003e {\n                        override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                            newStatus.text.clear()\n                            hideKeyboard()\n                        }\n    \n                        override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                            Toast.makeText(this@MainActivity,\"Error occurred\",Toast.LENGTH_SHORT).show()\n                        }\n                    })\n            }\n    \n        }\n    \n        private fun hideKeyboard() {\n            val imm = this.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n            var view = this.currentFocus\n            if (view == null)\n                view = View(this)\n            imm.hideSoftInputFromWindow(view.windowToken, 0)\n        }\n    \n        override fun onResume() {\n            super.onResume()\n            pusher.connect()\n        }\n    \n        override fun onPause() {\n            super.onPause()\n            pusher.disconnect()\n        }\n    \n    }\n```\n \nIn this snippet, we initialized the recycler view together with its adapter, we initialized Pusher using our keys from our dashboard and subscribed to a channel so as to get realtime updates, then we created a listener for our button that posts a message to the server when clicked. \n\nFinally, we connected and disconnected Pusher in the `onResume` and `onPause` functions.\n\nWith this, the application is ready! When we run it, we see results like this example:\n\n![social-network-kotlin-demo-2](//images.contentful.com/1es3ne0caaid/494w4EZhOMaquswAs2wAQ6/2ca493bb960040d48ea088c997afb0ec/social-network-kotlin-demo-2.gif)\n\n## Conclusion\n\nIn this article, we have used Pusher to quickly and easily add realtime updates to the social network app.","metaTitle":"Build a simple social network with Kotlin","metaDescription":"Learn how to build a live social feed with Kotlin and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2U9mAVUR3aeeW2YIM24W2O","type":"Entry","createdAt":"2018-02-22T15:02:42.776Z","updatedAt":"2018-02-28T14:43:57.656Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed in Android ","url":"activity-feed-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/feed-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Discover how you can create a realtime activity feed for your Android app.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"We'd like to track and visualize our applications in a central place. Feeds are great for this! Let's build an Android app with an activity feed showing the temperature of your home.\n\nIn this tutorial, using [Pusher](https://pusher.com), we are going to build a feed as an Android app to monitor the activity of a [Node.js](https://nodejs.org) REST API. Every time an endpoint of the API is hit, it will publish an event with some information (let's say temperatures) to a channel. This event will be received in realtime, on all the connected Android devices.\n\nThis is how our final Android app will look like:\n\n![activity-feed-android-demo](//images.contentful.com/1es3ne0caaid/1WGAtH6OC86GEaAKKWm2YS/1b76e83dad7a0470f499e2ccbd382b59/activity-feed-android-demo.gif)\n\nFor the back-end, we will be using [Node.js](https://nodejs.org) with [Express](https://expressjs.com) to create a simple REST API. A basic knowledge of Node/Express is required to understand the code, but we won't be using a database or anything special so you can replace this stack with the one you're most comfortable with. The source code of this part is also available on [Github](https://github.com/eh3rrera/node-api-pusher).\n\nSo let's get started!\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![activity-feed-android-create-app](//images.contentful.com/1es3ne0caaid/2yiZXxFDc4ys0Ui0acuK8E/e942424e38712df4c88e55a5e4d0ad44/activity-feed-android-create-app.png)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as your back-end tech. This will give you some sample code to get you started:\n\n![activity-feed-android-pusher-libraries](//images.contentful.com/1es3ne0caaid/4Yi7ILOJhCE46KmqeKC4yy/acef29d86deb38cdf3d95d1b1b739e12/activity-feed-android-pusher-libraries.png)\n\nBut don't worry, this won't lock you into this specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## The Node server\n\nFirst, let's create a default `package.json` configuration file with:\n\n``` \nnpm init -y\n```\n\nWe'll need Express, Pusher, and other dependencies, let's add them with:\n\n``` \nnpm install --save express body-parser pusher\n```\n\nIn case a future version of a dependency breaks the code, here's the dependencies section on the `package.json` file:\n\n```\n{\n  ...\n    \"dependencies\": {\n    \"body-parser\": \"1.16.0\",\n    \"express\": \"4.14.1\",\n    \"pusher\": \"1.5.1\"\n  }\n}\n```\n\nNext, create a [server.js](https://github.com/eh3rrera/node-api-pusher/blob/16b75dcd39cde3bb0f454bfed808a7e80e8c8c93/server.js) file. First, let's require the modules we're going to need:\n\n```\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar crypto = require('crypto');\nvar Pusher = require('pusher');\n```\n\nThen, configure the Express object:\n\n```\nvar app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n\nNext, the Pusher object is created by passing the configuration object with the ID, key, and the secret for the app created in the [Pusher Dashboard](https://dashboard.pusher.com):\n\n```\nvar pusher = new Pusher({\n  appId      : process.env.PUSHER_APP_ID,\n  key        : process.env.PUSHER_APP_KEY,\n  secret     : process.env.PUSHER_APP_SECRET,\n  encrypted  : true,\n});\n```\n\nPusher will be used to publish any events that happen in our application. These events have a *channel*, which allows events to relate to a particular topic, an *event-name* used to identify the type of the event, and a *payload*, which you can attach any additional information to the message.\n\nWe are going to publish an event to a Pusher channel when an endpoint of our API is called to create/update/delete a record, and send the information as an attachment so we can show it in an activity feed.\n\nHere's the definition of our API's REST endpoints. Notice how an ID for the record is created using the first four characters of the `hex` string generated by `crypto.randomBytes(16)` (to avoid using an external library):\n\n```\napp.post('/api', function (req, res) {\n  var event = {\n    data: req.body.data,\n    id: crypto.randomBytes(16).toString('hex').substring(0, 4),\n  };\n\n  // Do something with the data...\n\n  // Publish event to the Pusher channel\n  pusher.trigger(channel, 'created', event);\n\n  res.status(200).json(event);\n});\n\napp.route('/api/:id')\n  // PUT  endpoint to update a record\n  .put(function (req, res) {\n    var event = {\n     data: req.body.data,\n     id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'updated', event);\n\n    res.status(200).json(event);\n  })\n\n  // DELETE  endpoint to delete a record\n  .delete(function (req, res) {\n    var event = {\n      id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'deleted', event);\n\n    res.status(200).json(event);\n  });\n```\n\nThis way, a POST request like this:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\"\n}\n```\n\nWill return something like the following:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\",\n  \"id\": \"d2t6\"\n}\n```\n\nWe start the server with:\n\n```\napp.listen(3000, function () {\n  console.log('Node server running on port 3000');\n});\n```\n\nAnd that's all. To run the server, execute the following command passing your Pusher credentials:\n\n``` \nPUSHER_APP_ID=XXXXXX PUSHER_APP_KEY=XXXXXX PUSHER_APP_SECRET=XXXXXX node server.js\n```\n\n## The android app\n\nOpen Android Studio and create a new project:\n\n![activity-feed-android-create-project](//images.contentful.com/1es3ne0caaid/1Kv2lAKIY4mwoY2Mywq0gI/8c26426d81ec3da7247246baff95fc9a/activity-feed-android-create-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![activity-feed-android-target-device](//images.contentful.com/1es3ne0caaid/27mSDfxqYowQs80KIOcQAM/96714408b4c7866569e31c57eaa54aa3/activity-feed-android-target-device.png)\n\nNext, create an initial empty activity:\n\n![activity-feed-android-add-activity](//images.contentful.com/1es3ne0caaid/5LmK2Ij7NemKwsmoe4Es84/47eb17b20b83969fd71ce839df85865c/activity-feed-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![activity-feed-android-customize-activity](//images.contentful.com/1es3ne0caaid/3q9QEPf3NmOKco6S2aiciM/121fdec6ed6f91779d08ddd69e0488b8/activity-feed-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.android.support:cardview-v7:25.1.1'\n    compile 'com.github.curioustechizen.android-ago:library:1.3.2'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\n\nAt the time of this writing, the latest SDK version is 25, so that's my target SDK version.\n\nWe're going to use the `RecyclerView` and `CardView` components from the [Support Library](https://developer.android.com/topic/libraries/support-library/features.html), so make sure you have it installed (in *Tools -\u003e Android -\u003e SDK Manager -\u003e SDK Tools tab* the *Android Support Repository* must be installed).\n\nSync the Gradle project so the modules can be installed and the project built.\n\nBefore we forget (I always do), let's add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.feed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\nIf you want to modify the style of the app, in the `res/values` folder, modify the [colors.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/colors.xml) file so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003cresources\u003e\n    \u003ccolor name=\"primary\"\u003e#03A9F4\u003c/color\u003e\n    \u003ccolor name=\"primary_dark\"\u003e#0288D1\u003c/color\u003e\n    \u003ccolor name=\"primary_light\"\u003e#B3E5FC\u003c/color\u003e\n    \u003ccolor name=\"accent\"\u003e#FF4081\u003c/color\u003e\n    \u003ccolor name=\"primary_text\"\u003e#212121\u003c/color\u003e\n    \u003ccolor name=\"secondary_text\"\u003e#757575\u003c/color\u003e\n    \u003ccolor name=\"icons\"\u003e#FFFFFF\u003c/color\u003e\n    \u003ccolor name=\"divider\"\u003e#BDBDBD\u003c/color\u003e\n\u003c/resources\u003e\n```\n\nAs well as the [styles.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/styles.xml) file to match these color definitions:\n\n```\n\u003cresources\u003e\n\n    \u003c!-- Base application theme. --\u003e\n    \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n        \u003c!-- Customize your theme here. --\u003e\n        \u003citem name=\"colorPrimary\"\u003e@color/primary\u003c/item\u003e\n        \u003citem name=\"colorPrimaryDark\"\u003e@color/primary_dark\u003c/item\u003e\n        \u003citem name=\"colorAccent\"\u003e@color/accent\u003c/item\u003e\n    \u003c/style\u003e\n\n\u003c/resources\u003e\n```\n\nNow, modify the layout file [activity_main.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/activity_main.xml) so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.pusher.feed.MainActivity\"\u003e\n\n    \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_alignParentLeft=\"true\"\n        android:layout_alignParentStart=\"true\"\n        android:id=\"@+id/recycler_view\"\n        android:scrollbars=\"vertical\" /\u003e\n\u003c/RelativeLayout\u003e\n```\n\nWe're going to use a [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html) to display the events, which we'll store in a list. Each item in this list is displayed in an identical manner, so let's define another layout file to inflate each item.\n\nCreate the file [event_row.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/event_row.xml) with the following content:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    card_view:cardCornerRadius=\"4dp\"\n    card_view:cardElevation=\"4dp\"\n    card_view:cardUseCompatPadding=\"true\"\n    card_view:contentPadding=\"8dp\"\u003e\n\n    \u003cRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceLarge\"\n            android:text=\"Event\"\n            android:id=\"@+id/event\"\n            android:layout_alignParentTop=\"true\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceMedium\"\n            android:text=\"ID\"\n            android:id=\"@+id/id\"\n            android:layout_below=\"@+id/event\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003ccom.github.curioustechizen.ago.RelativeTimeTextView\n            android:id=\"@+id/timestamp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceSmall\"\n            android:layout_below=\"@+id/id\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Data\"\n            android:id=\"@+id/data\"\n            android:layout_below=\"@+id/timestamp\"\n            android:textAlignment=\"center\"\n            android:layout_marginTop=\"8dp\" /\u003e\n    \u003c/RelativeLayout\u003e\n\n\u003c/android.support.v7.widget.CardView\u003e\n```\n\nHere we're using a [CardView](https://developer.android.com/reference/android/support/v7/widget/CardView.html) to show the information inside a card, with shadows and rounded corners. For each item, we're going to present:\n\n- A `TextView` for the name of the event (*created*, *updated*, or *deleted*).\n- A `TextView` for the ID of the record (for example, *c2d6*).\n- A [RelativeTimeTextView](https://github.com/curioustechizen/android-ago), a custom `TextView` that displays the relative time with respect to the reference point (the moment the event is received), automatically refreshing the text as needed.\n- A `TextView` for the data contained in the record (anything the user sends, for example, *Temperature: 80°F*).\n \nNow, to store the information of each event, let's create a class, [com.pusher.feed.Event](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/Event.java):\n\n```\npublic class Event  {\n    private String name;\n    private String id;\n    private String data;\n\n    public Event(String name, String eventId, String data) {\n        this.name = name;\n        this.id = eventId;\n        this.data = data;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getData() {\n        return data;\n   }\n}\n```\n\n`RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source (in this case a list of `Event` instances), and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item, so first create the class [com.pusher.feed.EventAdapter](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/EventAdapter.java) with the following code:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private List\u003cEvent\u003e items;\n\n    public EventAdapter(List\u003cEvent\u003e items) {\n        this.items = items;\n    }\n\n    public void addEvent(Event event) {\n        // Add the event at the beginning of the list\n        items.add(0, event);\n        // Notify the insertion so the view can be refreshed\n        notifyItemInserted(0);\n    }\n\n    @Override\n    public int getItemCount() {\n        return items.size();\n    }\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n\n    }\n}\n```\n\nWe initialize the class with a list of `Event`, provide a method to add `Event` instances at the beginning of the list (`addEvent(Event)`) and then notify the insertion so the view can be refreshed, and implement `getItemCount` so it returns the size of the list.\n\nThen, let's add the `ViewHolder` as an inner class, it references the `View` components for each item in the list:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private ArrayList\u003cEvent\u003e items;\n\n    public static class EventViewHolder extends RecyclerView.ViewHolder {\n        // Card fields\n        public TextView event;\n        public TextView id;\n        public RelativeTimeTextView timestamp;\n        public TextView data;\n\n        public EventViewHolder(View v) {\n            super(v);\n            event = (TextView) v.findViewById(R.id.event);\n            id = (TextView) v.findViewById(R.id.id);\n            timestamp = (RelativeTimeTextView) v.findViewById(R.id.timestamp);\n            data = (TextView) v.findViewById(R.id.data);\n        }\n    }\n\n    ...\n}\n```\n\nAnd implement the methods `onCreateViewHolder` and `onBindViewHolder`:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    ...\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.event_row, viewGroup, false);\n\n        return new EventViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n        Event event = items.get(i);\n\n        viewHolder.event.setText(event.getName());\n        viewHolder.id.setText(event.getId());\n        viewHolder.timestamp.setReferenceTime(System.currentTimeMillis());\n        viewHolder.data.setText(event.getData());\n    }\n}\n```\n\nIn the `onCreateViewHolder` method, we inflate the layout with the content of the `event_row.xml` file we created earlier, and in `onBindViewHolder`, we set the values of the views with the event in turn. Notice how we set the reference time on `RelativeTimeTextView` so it can display a text like *Just now* or *10 minutes ago*.\n\nIn the class [com.pusher.feed.MainActivity](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/MainActivity.java), let's start by defining the private fields we're going to need:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    private RecyclerView.LayoutManager lManager;\n    private EventAdapter adapter;\n    private Pusher pusher = new Pusher(\"ENTER_PUSHER_APP_KEY_HERE\");\n    private static final String CHANNEL_NAME = \"events_to_be_shown\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ....\n    }\n}\n```\n\n`RecyclerView` works with a [LayoutManager](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html) to handle the layout and scroll direction of the list. We declare the `EventAdapter`, the `Pusher` object and the identifier for the Pusher channel. Remember to replace your Pusher app key, if you still don't have one, this would be a good time to [sign up for a free account](https://pusher.com/signup) and [create you app](https://dashboard.pusher.com).\n\nInside the `onCreate` method, let's assign a [LinearLayoutManager](https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html) to the `RecyclerView` and create the `EventAdapter` with an empty list:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get the RecyclerView\n        RecyclerView recycler = (RecyclerView) findViewById(R.id.recycler_view);\n\n        // Use LinearLayout as the layout manager\n        lManager = new LinearLayoutManager(this);\n        recycler.setLayoutManager(lManager);\n\n        // Set the custom adapter\n        List\u003cEvent\u003e eventList = new ArrayList\u003c\u003e();\n        adapter = new EventAdapter(eventList);\n        recycler.setAdapter(adapter);\n    }\n}\n```\n\nFor the Pusher part, we first subscribe to the channel:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n}\n```\n\nThen, we create the listener that will be executed when an event arrives:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    ...\n    SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Event evt = gson.fromJson(data, Event.class);\n                        evt.setName(event + \":\");\n                        adapter.addEvent(evt);\n                        ((LinearLayoutManager)lManager).scrollToPositionWithOffset(0, 0);\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\nHere, the JSON string that we receive is converted to an `Event` object, the name of the event is set to the name of the event received, and the object is added to the adapter. Finally, we move to the top of the list.\n\nNext, bind the events to this listener and call the `connect` method on the Pusher object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        channel.bind(\"created\", eventListener);\n        channel.bind(\"updated\", eventListener);\n        channel.bind(\"deleted\", eventListener);\n\n        pusher.connect();\n    }\n}\n```\n\nThe `connect` method can take a listener that can be helpful to debug problems you might have:\n\n```\npusher.connect(new ConnectionEventListener() {\n    @Override\n    public void onConnectionStateChange(ConnectionStateChange change) {\n        System.out.println(\"State changed to \" + change.getCurrentState() +\n            \" from \" + change.getPreviousState());\n    }\n\n   @Override\n    public void onError(String message, String code, Exception e) {\n        System.out.println(\"There was a problem connecting!\");\n        e.printStackTrace();\n    }\n});\n```\n\nFinally, `MainActivity` also needs to implement the `onDestroy()` method so we can have the opportunity to unsubscribe from Pusher when the activity is destroyed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n}\n```\n\nAnd that's all the code on the Android part. Let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![activity-feed-android-deploy-app](//images.contentful.com/1es3ne0caaid/CFHd4HGgfYmmOc42MgO40/f530f27b6586deb77c4d711817697e80/activity-feed-android-deploy-app.png)\n\nYou'll be presented with an almost blank screen:\n\n![activity-feed-android-app](//images.contentful.com/1es3ne0caaid/63EKVtRYqcssUa6MmcwGY4/27d4d24fdb3dc81d4366dba37fc441f1/activity-feed-android-app.png)\n\nFor the back-end, you can use something to call the API endpoints with a JSON payload, like [cURL](https://curl.haxx.se/):\n\n``` \n# POST\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"data\":\"Temperature: 80°F\"}' http://localhost:3000/api\n# PUT\ncurl -H \"Content-Type: application/json\" -X PUT -d '{\"data\":\"Temperature: 85°F\"}' http://localhost:3000/api/aqw3\n# DELETE\ncurl -X DELETE http://localhost:3000/api/aqw3\n\n# In Windows, change single quotes to quotation marks and escape the ones inside curly brackets\ncurl -H \"Content-Type: application/json\" -X POST -d \"{\\\"data\\\":\\\"Temperature: 80°F\\\"}\" http://localhost:3000/api\n\n# Or use file, for example data.json\ncurl -H \"Content-Type: application/json\" -X POST --data @data.json http://localhost:3000/api\n```\n\nOr use a tool like [Postman](https://www.getpostman.com/):\n\n![activity-feed-android-postman](//images.contentful.com/1es3ne0caaid/3jUxsuEEgUM8c6mmEwiuGU/ab37f83253c98a637d66b8837a45baf9/activity-feed-android-postman.png)\n\nWhen a request is received on the API side, the event will show up in the app:\n\n![activity-feed-android-app-test](//images.contentful.com/1es3ne0caaid/4XKXil7es0EGkICAqgUA4S/cb52327f73792a6adb269b506bbd36fa/activity-feed-android-app-test.png)\n\nOr if you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![activity-feed-android-pusher-debug-console](//images.contentful.com/1es3ne0caaid/74tDZ8NMlyosmg6MU6kWIG/1cfe3514ad6666e8578c3e196a53431b/activity-feed-android-pusher-debug-console.png)\n\n## Conclusion\n\nHopefully, this tutorial has shown you in an easy way how to build an activity feed for Android apps with Pusher. You can improve the app by changing the design, showing more information, or saving it to a database.\n\n## Further reading\n\n- [Pusher Java client](https://github.com/pusher/pusher-websocket-java)\n- [Android-ago](https://github.com/curioustechizen/android-ago)\n- [Activity's lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle.html)\n- [Creating Lists and Cards](https://developer.android.com/training/material/lists-cards.html)","metaTitle":"Build an activity feed in Android ","metaDescription":"Build a live activity feed in Android using Java, Node.js and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5PGtao88o0iWAGs6kaocMc","type":"Entry","createdAt":"2018-02-28T12:35:03.059Z","updatedAt":"2018-02-28T12:35:03.059Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime payment dashboard with Stripe","url":"realtime-payment-dashboard-stripe","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-payment-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Build a live admin dashboard with Vue.js and Node.js, accepting payments through Stripe.","prerequisite":"A basic understanding of Vue.js and Node.js is needed to follow this tutorial.","content":"In this article, we are going to be looking at how to accept payments from a user using [Stripe](https://stripe.com) and displaying sales on an admin dashboard in realtime using*text in italic* [Pusher](https://pusher.com).\n\n## How it works\n\nStripe is used to handle user payments and Pusher adds realtime functionality to our application.\n\n![realtime-payment-dashboard-stripe-demo](//images.contentful.com/1es3ne0caaid/1LkoYsTPec4goWWyAGYaSu/fe6153d7fc28ccc4a5e74c6ffbc4ba33/realtime-payment-dashboard-stripe-demo.gif)\n\n## Dependencies\n\nBefore you begin, you need [Node](https://nodejs.org/) and Node Package Manager( [npm](https://npmjs.com) ) installed on your machine. To verify your installation, please run the following commands on your terminal\n\n```\n    npm -v\n    node -v\n```\n\nIf you get version numbers as your response, then it means that you already have them installed and you are good to go.\n\n## Setting up a Stripe account\n\n[Stripe](https://stripe.com) is a platform that helps process online payment. We will use this to process payments in our store.\n\nTo set up a Stripe account, head over [here](https://dashboard.stripe.com/register) and then fill out the form.\n\n![realtime-payment-dashboard-stripe-signup](//images.contentful.com/1es3ne0caaid/1fQGvRyQIYEsgY2WOMymy0/025045bdb5c077268f01e9226935c3e0/realtime-payment-dashboard-stripe-signup.png)\n\nOnce this step is completed, you will be redirected to your [dashboard](https://dashboard.stripe.com/test/dashboard):\n\n![realtime-payment-dashboard-stripe-dashboard](//images.contentful.com/1es3ne0caaid/3zxY5XAJJYgIYAksWKOkqA/a846796ec876519937068bd59d0c4dfb/realtime-payment-dashboard-stripe-dashboard.png)\n\n![realtime-payment-dashboard-stripe-api-keys](//images.contentful.com/1es3ne0caaid/2fY7XiOmeQYAAiEIEsmqY8/857b3b2dee3d73a20f9c41935bb00ed4/realtime-payment-dashboard-stripe-api-keys.png)\n\nNote your `STRIPE_PUBLISHABLE_KEY` and `STRIPE_SECRET_KEY`. We are going to use them later on as we build our application\n\n## Setting up a Pusher account\n\n[Pusher](https://pusher.com) allows you to incorporate realtime functionality into your applications. To get started with Pusher, head over [here](https://dashboard.pusher.com/accounts/sign_up).\n\nOnce you're signed in, you will be redirected to your dashboard. You then need to create a new app.\nAfter your new app is created, you need to note your `PUSHER_APP_ID`, `PUSHER_API_KEY`, `PUSHER_API_SECRET`, `PUSHER_API_CLUSTER` .\n\nOnce you have these details, you are ready to begin building your app.\n\n**Note** : All source code is available [here](https://github.com/oreHGA/realtime-payment-dashboard) \n\n## Setting up the backend server\n\nTo handle your API calls to Stripe and Pusher, we will use an Express server.\n\n### Install node modules\n\nWe need some node modules that are essential for our application to work:\n\n- cors - to enable cross origin resource sharing on our app\n- express - this is our web server\n- pusher - this package enables us and makes it easy to make calls to pushers api\n- body-parser - used in parsing the contents of a request in a json format\n- multipart - to enable multipart on our app\n- stripe - to allow us communicate seamlessly with our stripe api\n- ejs - this will be our view engine for the user facing side of the application\n\nMake a new directory and change directory into it:\n\n```\n    mkdir realtime-dashboard \u0026\u0026 cd realtime-dashboard\n```\n\nThen initialize a node project and install the node modules:\n\n```\n    # Initialze\n    npm init -y\n    # Install\n    npm install cors express ejs body-parser connect-multiparty pusher stripe --save\n```\n\nYou have now installed all the modules necessary for you to build the project.\n\n### Create our server.js file\n\nNow we need to create a file that will contain the instructions needed for our server to work\nIn your `realtime-dashboard` directory:\n\n```\n    touch server.js\n```\n\nThis is the start up file that will be referenced when your server is running\nIn your server.js file, you need to:\n\n#### Import the node modules\n\n```\n    const cors  = require('cors')\n    const Pusher = require('pusher')\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const multipart = require('connect-multiparty')\n    const stripe = require('stripe')('STRIPE_API_KEY')\n        [...]\n```\n\nOnce you have imported your node modules, you can then use them freely all through your script.\n\n#### Create your express app\n\nNow we create our express app by adding the following to the `server.js`:\n\n```\n    [...]\n    const app = express()\n    [...]\n```\n\n#### Load the middleware\n\nWe load the middleware in our `server.js` by adding the following:\n\n```\n    ...\n    app.use(cors());\n    app.set('view engine', 'ejs');\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false}));\n    const multipartMiddleware = multipart();\n    ...\n```\n\nHere, we set our app to use `cors` and set the view engine to `ejs`. We also instructed the app the parse the requests in JSON format.\n\n#### Create the Pusher client\n\nWe need to create our Pusher client to enable us to trigger events from our app to a specific channel. Our admin dashboard will also be listening for events on the same channel (more details on this as we progress). \nWe create the client by adding this to our file:\n\n```\n    [...]\n    const pusher = new Pusher({\n        appId: 'PUSHERE_APP_ID',\n        key: 'PUSHER_API_KEY',\n        secret: 'PUSHER_API_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    [...]\n```\n\nOnce this is done, we have successfully created our Pusher client.\n\n#### Create app routes\n\nWe need to decide what the user sees when visiting different parts of our app. Since this is a simple application, we only need two routes for the user facing side:\n\n- Route that loads the checkout page.\n- Route that handles the payment and communicated with the stripe API.\n\nEarlier on, we set our  `view engine` to `ejs` and we will use this here:\n\n```\n    [...]\n    app.get('/', function(req, res){\n        res.render('index');\n    });\n    \n    app.post('/gen-payment', multipartMiddleware, function(req, res){\n        let amount = 500;\n        stripe.customers.create({\n            email: req.body.stripeEmail,\n            source: req.body.stripeToken\n        })\n        .then(customer =\u003e\n            stripe.charges.create({\n                amount,\n                description: 'One camera bought from shop',\n                currency: \"usd\",\n                customer: customer.id\n            })\n        )\n        .then(charge =\u003e {\n            pusher.trigger('sales', 'payment-completed', {\n                \"time\" : new Date().toDateString(),\n                \"value\" : `\\$${charge.amount/100}`,\n                \"message\" : \"payment complete...duh!\",\n                \"description\" : charge.description\n            });\n            console.log( charge );\n            res.render(\"charge\");\n        });\n    });\n    [...]\n```\n\nLet's shed more light on the `gen-payment` route. We accept the `stripeEmail` and the `stripeToken` which would be passed as part of the body in the post request to the route. We then create a new `customer` using the `stripeEmail` and the `stripeToken`. The `create` function returns a `promise` and so once the customer is created, we initiate a new `charge` for the customer. If this charge is successful, i.e we are able to completely charge the customer, then we trigger a `payment-completed` event to the `sales` channel.\n\n#### Assign a port to your app\n\nYou need to choose a port you want your app to run on. You do this by adding this following to your `server.js` file:\n\n```\n    [...]\n    app.listen('3120')\n    [...]\n```\n\nAt this point the backend server is all set up. Now we need to go to the views to see how data is passed to the server.\n\n## Setting up the frontend\n\nCreate a `views` directory. In the views directory create your `index.ejs` and `charge.ejs`:\n\n```\n    mkdir views \u0026\u0026 cd views\n    touch index.ejs charge.ejs\n```\n\nIn our `index.ejs` we need to accept user payment. To make it more secure when handling card information, Stripe has an embedded payment form called [Checkout](https://stripe.com/docs/checkout/tutorial) which we will use to collect user's card data securely. The following is a truncated version of the form that sends data to our server. You can see the complete [code on github](https://github.com/christiannwamba/realtime-payment-dashboard/blob/master/views/index.ejs).\n\n```\n    \u003cform method=\"POST\" action=\"http://localhost:3120/gen-payment\" enctype=\"multipart/form-data\"/\u003e\n        \u003cscript\n            src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\n            data-key=\"PUSBLISHABLE_API_KEY\"\n            data-amount=\"500\"\n            data-name=\"Pay OG\"\n            data-description=\"Send money to OG\"\n            data-image=\"https://stripe.com/img/documentation/checkout/marketplace.png\"\n            data-locale=\"auto\"\u003e\n        \u003c/script\u003e\n    \u003c/form\u003e\n```\n\nWe submit the form to the `/gen-payment` route on our server. We include the `checkout.js` script and the following :\n\n- data-key: your publishable `API_KEY` gotten from your [dashboard](https://dashboard.stripe.com/account/apikeys)\n- data-amount: the amount you plan on charging\n- data-name: name of the store\n- data-description: description of your payment\n- data-image: store image\n\nOnce this is sent to the server and the request is completed successfully, we render the `charge.ejs` view to the user telling the use that their payment is complete:\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime Payment Dashboard\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e \n        \u003clink rel=\"stylesheet\" href=\"https://codepen.io/drehimself/pen/VvYLmV.css\"\u003e \n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cnav\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cul class=\"navbar-left\"\u003e\n                \u003cli\u003e\u003ca href=\"#\"\u003eHome\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#about\"\u003eAbout\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n            \n                \u003cul class=\"navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"#\" id=\"cart\"\u003e\u003ci class=\"fa fa-shopping-cart\"\u003e\u003c/i\u003e Cart \u003cspan class=\"badge\"\u003e0\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e \n        \u003c/nav\u003e\n                \n        \u003cscript\u003e\n            alert(\"Payment Complete\");\n        \u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\" integrity=\"sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n## Setting up the admin dashboard\n\nWe want our admin dashboard to show completed payments as they are made without having to refresh the page. To do this, we are going to make use of [Vue.js](https://vuejs.org) and [Pusher](https://pusher.com).\n\nBefore we begin, we need to install the `vue-cli` by running the following command:\n\n```\n    npm install -g vue-cli\n```\n\nThis will install it globally on our local machine. To confirm your installation of the `vue-cli` you can run:\n\n```\n    vue --version\n```\n\nIf you get the version number as a result then you're all set!\n\nTo create the `admin` server, run the following command in the `realtime-dashboard` directory:\n\n```\n    vue init webpack admin\n```\n\nThis will ask you a few questions on project name, description, author, etc. then it will create a new Vue project for us with some boilerplate already set up.\n\n## Installing the pusher-js module\n\nWe need to install `pusher-js` module that allows us to use pusher with our vue frontend. To do this, change directory into the admin directory and run the following command:\n\n```\n    npm install -S pusher-js\n```\n\n### Creating the dashboard component\n\nNow we want to create our `dashboard` component:\n\n```\n    cd admin/src/components\n    touch Dashboard.vue\n```\n\nIn the `Dashboard.vue`, we need to import the `pusher.js` module:\n\n```\n    \u003cscript\u003e\n    import Pusher from 'pusher-js'\n    [...]\n```\n\nWe then create some mock payments to populate the dashboard:\n\n```\n    [...]\n    const MOCK_PAYMENTS = [\n      {time : '12th Dec, 2017', description: \"Shoes\", value : \"$5\"},\n      {time : '12th Dec, 2017', description: \"Maga don pay\", value : \"$12\"}\n    ]\n    [...]\n```\n\nNow we describe our component itself:\n\n```\n    [...]\n    export default {\n      name: 'Dashboard',\n      data () {\n        return {\n          payments : MOCK_PAYMENTS\n        }\n      },\n      created () {\n        this.subscribe();\n      },\n      methods: {\n        subscribe () {\n          let pusher = new Pusher('PUSHER_API_KEY', {\n              cluster: 'PUSHER_CLUSTER',\n              encrypted: true\n          });\n          pusher.subscribe('sales');\n          pusher.bind('payment-completed', data =\u003e {\n            this.payments.unshift(data);\n          });\n        }\n      }\n    }\n    \u003c/script\u003e\n    [...]\n```\n\nIn the `subscribe` method above, we subscribe to the `sales` channel and then listen for the `payment-completed` event. When a new `payment-completed` event is broadcast from the backend server on the `sales`, our frontend server picks it up and the adds it to the `payments` array of the component.\n\nThe `Dashboard.vue` also has a template which looks like this:\n\n```\n    [...]\n    \u003ctemplate\u003e\n      \u003cdiv class=\"container-fluid\"\u003e\n        \u003ctable class=\"table table-striped\"\u003e\n          \u003cthead\u003e\n            \u003ctr\u003e\n              \u003ctd\u003eTime\u003c/td\u003e\n              \u003ctd\u003eValue\u003c/td\u003e\n              \u003ctd\u003eDescription\u003c/td\u003e\n            \u003c/tr\u003e\n          \u003c/thead\u003e\n    \n          \u003ctbody\u003e\n            \u003ctr v-for=\"payment in payments\"\u003e\n              \u003ctd\u003e{{ payment.time }}\u003c/td\u003e \n              \u003ctd\u003e{{ payment.value }}\u003c/td\u003e   \n              \u003ctd\u003e{{ payment.description }}\u003c/td\u003e   \n            \u003c/tr\u003e \n          \u003c/tbody\u003e\n        \u003c/table\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    [...]\n```\n\nAnd some scoped css styling: \n\n```\n    \u003cstyle scoped\u003e\n    h1, h2 {\n      font-weight: normal;\n    }\n    ul {\n      list-style-type: none;\n      padding: 0;\n    }\n    li {\n      display: inline-block;\n      margin: 0 10px;\n    }\n    a {\n      color: #42b983;\n    }\n    .table{\n      background-color : white;\n    }\n    \u003c/style\u003e\n```\n\n### Importing the dashboard component in our App.vue\n\nNow that our dashboard component is ready, we need to import it in our `App.vue` so that I would be picked up when the view is being compiled\n\n```\n    [...]\n    import Dashboard from './components/Dashboard'\n    export default {\n      name: 'app',\n      components: {\n        Dashboard\n      }\n    }\n    [...]\n```\n\nOnce this is done, you should be ready to run your frontend server. You can can do this using the command:\n\n```\n    npm run dev\n```\n\nNow you can run the `Dashboard` side-by-side with the `Store` and then see as purchases are being made in realtime:\n\n![realtime-payment-dashboard-stripe-demo](//images.contentful.com/1es3ne0caaid/1LkoYsTPec4goWWyAGYaSu/fe6153d7fc28ccc4a5e74c6ffbc4ba33/realtime-payment-dashboard-stripe-demo.gif)\n\n## Conclusion\n\nWe have seen how to build a realtime payment dashboard using Pusher, Stripe and some Vue.js. There are many more use cases where realtime functionality will give you an edge. A big advantage is that you get to obtain realtime insights as to how users interact with your application.","metaTitle":"Build a realtime payment dashboard with Stripe","metaDescription":"Learn how to build a live payment dashboard with Stripe, Vue.js and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6opHW5cgXmocGsG8OICKui","type":"Entry","createdAt":"2018-02-28T12:31:41.382Z","updatedAt":"2020-06-19T11:12:25.627Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geolocation sharing app with React Native","url":"geolocation-sharing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/locSharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-02-13","description":"Discover how to build a location sharing app with React Native, Google Maps and Facebook.","prerequisite":"A basic understanding of React is needed to follow this tutorial.","content":"In this tutorial we'll be building a location-sharing app with React Native and Pusher. By reading this tutorial, you will learn how to use the geolocation functionality in React Native, and broadcast the geolocation data with Pusher. You will also learn how to integrate Facebook login into the app.\n\n## Prerequisites\n\nYou will need the following in order to follow the tutorial:\n\n- **React Native development environment** - if you don’t have a machine setup for React Native development, be sure to check out the [official docs on how to get started](https://facebook.github.io/react-native/docs/getting-started.html). \n- **Genymotion Emulator** - this is used for testing the app later on. You can actually use your Android smartphone as well, but Genymotion really makes it easy to test geolocation using their GPS emulator.\n- **Pusher app** - you’ll need to create a [Pusher account](https://pusher.com/) in order to use Pusher’s services. A Pusher account is free to create and it even provides you with ample resources for testing the service. Once you have an account, create an app which will be used for connecting to Pusher.\n- **Facebook app** - this is required because we’ll be using Facebook login for the app.\n- **Google project** - this is required because Google Maps is used for the map display. \n\nIn the following sections, I’ll be showing you how to create the Pusher, Facebook, and Google project.\n\n## Creating the Pusher app\n\nOnce you’re logged in to your Pusher account, go to your Dashboard and look for the menu for creating a new app. Set the name of the app to “locSharer”, and select the cluster nearest to your location. Click on the **Create my app** button to create the app. Once the app is created, click on the **App Settings** tab and enable **Client Events**. We need this because we’ll be sending events directly from the app. After that, click on the **App Keys** tab and copy the credentials somewhere where you can easily access it later on. We’ll be needing it later once we start configuring the app.\n\n## Creating the Facebook app\n\nThe minimum requirement for creating a Facebook app is for you to have a [Facebook account](https://www.facebook.com/). Once you’re logged in to your account, go to the [Facebook developers website](https://developers.facebook.com/) and create a new app. Set the **Display Name** to “locSharer”. Once the app is created, add Android as a platform then set the following details:\n- **Google Play Package Name:** com.locsharer\n- **Class Name:** com.locsharer.MainActivity\n\nNext, generate a key hash to be used for development:\n\n```\n    keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64\n```\n\nThe command above generates a 28-character key hash. Paste the value under the **Key Hashes** field and save the changes. This step ensures the authenticity of the interactions between your app and Facebook, thus it’s a required step even for the development environment. You can find more information about this on the [Facebook login documentation for Android](https://developers.facebook.com/docs/facebook-login/android).\n\n## Creating the Google project\n\nJust like Facebook, you need to have a [Google account](https://accounts.google.com/) in order to create a Google project. Once you’re logged in to your Google account, go to the [Google Developer Console](https://console.developers.google.com) and create a project. Set the project name to “locSharer”. Once the project is created, click on **Enable APIs and Services** button. From there, look for **Google Maps Android API** and enable it. Next, click on the **Credentials** tab and create an API key. Once the key is created, it will ask you to restrict access. Set the key restriction to Android. Then you can use the same keystore you used for Facebook:\n\n```\n    keytool -list -v -keystore ~/.android/debug.keystore\n```\n\nThe command above allows you to get the sha1 hash. Look for it, copy the corresponding value and paste it under the **SHA-1 certificate fingerprint** field. Also enter the package name of the app (com.locsharer) then save the changes.\n\n## App overview\n\nAs mentioned earlier, we will be creating a location-sharing app. First the user has to login with their Facebook account:\n\n![geolocation-sharing-react-native-facebook-login](//images.contentful.com/1es3ne0caaid/5dif372kqQoCYuaecSuwOO/81102259c3abfad218e86f1c9f756b07/geolocation-sharing-react-native-facebook-login.png)\n\nOnce logged in, the user can enable location-sharing so that their friends can see their current location when they view them:\n\n![geolocation-sharing-react-native-share-location-request](//images.contentful.com/1es3ne0caaid/37GTp0ialyCyGEiA2WcsgW/6c662f6de2fefc07d62babf76cfdd636/geolocation-sharing-react-native-share-location-app.png)\n\nIf the user has friends who are also using the app, they will be listed below the user’s details. Tapping on a friend will display a map which gets updated based on their current location (but only if they have enabled location sharing). The current location is indicated by a marker: \n\n![geolocation-sharing-react-native-demo](//images.contentful.com/1es3ne0caaid/6C3kc9JER2UkwgkIueuiE4/db32f985e8a0c9125ddbbba360257c50/geolocation-sharing-react-native-demo.png)\n\n## Creating the server\n\nJust like every other Pusher app integration, this app needs a server component as well. The server’s job is to authenticate the requests coming from the app. This allows us to make sure that the request is indeed coming from the app and not anywhere else.\n\nStart by creating a new folder for the server-related files. Inside the folder, run `npm init` to initialize a new project. Simply press enter until it asks you to confirm the project details. Once you get to that, just respond with yes.\n\nNext, install the packages that we’ll be needing:\n\n```\n    npm install --save express body-parser pusher\n```\n\nOnce the packages are installed, create a `server.js` file. Start by including the packages we just installed:\n\n```\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\nNext, add the code for connecting to Pusher. The Pusher app credentials are being loaded as environment variables. As you have seen from the code below, we’re not really using a module for loading environment variables from a `.env` file. Later I’ll show you how the values are being supplied.\n\n```\n    var pusher = new Pusher({ \n      appId: process.env.APP_ID, \n      key: process.env.APP_KEY, \n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER, \n    });\n```\n\nAdd a route for verifying if the server is really working:\n\n```\n    app.get('/', function(req, res){ \n      res.send('server is running');\n    });\n```\n\nAdd the code for authenticating users that are connecting to your Pusher app. This contains the unique key that we will use later on to check whether the request has indeed come from the app.\n\n```\n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);  \n      var app_key = req.body.app_key;\n      if(app_key == process.env.UNIQUE_KEY){\n        var auth = pusher.authenticate(socketId, channel);\n        res.send(auth);\n      }\n      \n      res.send(auth);\n    });\n```\n\nInitiate the server on the port set in the environment variables. Normally this would be served on port 80:\n\n```\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Deploying the server\n\nThe server needs to be accessible via the internet. One service that allows us to do this for free is [Now](https://zeit.co/now)*.* **You can install Now **globally with the following command:\n\n```\n     npm install -g now\n```\n\nOnce installed, you can now add your Pusher app credentials as a secret. One caveat of Now is that all the files for the deployed projects are available publicly. This means that the values in the `.env` files are publicly available as well. Adding those values as a secret means that it won’t be accessible anywhere.\n\n```\n    now secret add locshare_app_id YOUR_PUSHER_APP_ID\n    now secret add locshare_app_key YOUR_PUSHER_APP_KEY\n    now secret add locshare_app_secret YOUR_PUSHER_APP_SECRET\n    now secret add locshare_app_cluster YOUR_PUSHER_APP_CLUSTER\n    now secret add locshare_unique_key YOUR_UNIQUE_KEY\n```\n\nDon’t forget to replace the values with your actual Pusher app credentials.\n\nOnce that’s done, you can deploy the server:\n\n```\n    now -e APP_ID=@locshare_app_id -e APP_KEY=@locshare_app_key -e APP_SECRET=@locshare_app_secret APP_CLUSTER=@locshare_app_cluster -e UNIQUE_KEY=@locshare_unique_key\n```\n\nWhat the command above does is deploy the server, as well as setting the environment variables using the `-e` option. The secret values that you’ve added earlier are accessed by using the `@` sign. When the process is completed, it should return a URL pointing to the server. Access that in the browser to check whether the server is running or not.\n\n## Creating the App\n\nIt’s now time to create the actual app. Start by generating a new React Native project:\n\n```\n    react-native init LocSharer\n```\n\n### Installing and configuring the dependencies\n\nNext install the dependencies of the app:\n\n```\n    npm install --save prop-types pusher-js react-native-facebook-login react-native-maps react-navigation\n```\n\nHere’s a brief overview of what each package does:\n- **prop-types** - for specifying the intended types of properties passed to components.\n- **pusher-js** - for interacting with Pusher.\n- **react-native-facebook-login** - for implementing Facebook login.\n- **react-native-maps** - for displaying Google Maps and markers.\n- **react-navigation** - for implementing Stack navigation within the app. \n\nAdditional steps are required in order for Facebook login and Google Maps to work. We’ll look at how to do that in the sections to follow.\n\n#### Configuring Facebook login\n\nThe following steps assumes that you have already created a Facebook app. So create one, if you haven’t done so already.\n\nOnce you’ve created a Facebook app, open the `android/settings.gradle` file and add the following to the bottom of the file:\n\n```\n    include ':react-native-facebook-login'\n    project(':react-native-facebook-login').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-facebook-login/android')\n```\n\nNext, open the  `android/app/build.gradle` file and add the following inside the `dependencies`:\n\n```\n    dependencies {\n      ...\n      compile project(':react-native-facebook-login')\n    }\n```\n\nNext, register the React package by opening the `android/app/src/main/java/com/{YOUR PACKAGE NAME}/MainApplication.java` file, and adding the following:\n\n```\n    // top of the file\n    import com.magus.fblogin.FacebookLoginPackage; // \u003c--- add this\n    \n    public class MainApplication extends Application implements ReactApplication {\n    \n      ...\n    \n      @Override\n      protected List\u003cReactPackage\u003e getPackages() {\n          return Arrays.\u003cReactPackage\u003easList(\n              new MainReactPackage(),\n              new FacebookLoginPackage() // \u003c--- add this\n          );\n      }\n    \n      ...\n    }\n```\n\nNext, open the `android/app/src/main/res/values/strings.xml` file and add the details of the Facebook app you created earlier:\n\n```\n    \u003cresources\u003e\n      \u003cstring name=\"app_name\"\u003e{YOUR FACEBOOK APP NAME}\u003c/string\u003e\n      \u003cstring name=\"fb_app_id\"\u003e{YOUR FACEBOOK APP ID}\u003c/string\u003e\n      \u003cstring name=\"fb_login_protocol_scheme\"\u003efb{YOUR FACEBOOK APP ID}\u003c/string\u003e\n    \u003c/resources\u003e\n```\n\nLastly, open the `android/app/src/main/AndroidManifest.xml`  file and add the following:\n\n```\n    \u003cmanifest \n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:tools=\"http://schemas.android.com/tools\" \u003c-- add this\n      package=\"com.your.app.namespace\"\u003e\n    \n      \u003capplication\n        ...\n        \n        \u003c!--add FacebookActivity--\u003e\n        \u003cactivity \n          tools:replace=\"android:theme\"\n          android:name=\"com.facebook.FacebookActivity\"\n          android:configChanges=\"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"\n          android:label=\"@string/app_name\"\n          android:theme=\"@android:style/Theme.Translucent.NoTitleBar\"/\u003e\n      \n        \u003c!--add CustomTabActivity--\u003e\n        \u003cactivity\n          android:name=\"com.facebook.CustomTabActivity\"\n          android:exported=\"true\"\u003e\n          \u003cintent-filter\u003e\n            \u003caction android:name=\"android.intent.action.VIEW\" /\u003e\n            \u003ccategory android:name=\"android.intent.category.DEFAULT\" /\u003e\n            \u003ccategory android:name=\"android.intent.category.BROWSABLE\" /\u003e\n            \u003cdata android:scheme=\"@string/fb_login_protocol_scheme\" /\u003e\n          \u003c/intent-filter\u003e\n        \u003c/activity\u003e\n        \n        \u003c!--add reference to Facebook App ID--\u003e\n        \u003cmeta-data\n          android:name=\"com.facebook.sdk.ApplicationId\"\n          android:value=\"@string/fb_app_id\"/\u003e\n      \n      \u003c/application\u003e\n    \u003c/manifest\u003e\n```\n\n### Configuring React Native maps\n\nThe following steps assumes that you have already created a Google project, and generated an API key.\n\nStart by linking the package resources to your app:\n\n```\n    react-native link react-native-maps\n```\n\nOpen the `android\\app\\src\\main\\AndroidManifest.xml` file and add a reference to your Google project’s API key:\n\n```\n    \u003capplication\u003e\n      ...\n      \u003cmeta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"YOUR GOOGLE PROJECT'S ANDROID API KEY\"/\u003e\n    \u003c/application\u003e\n```\n\nAlso add the following below the default permissions:\n\n```\n    \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n    \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e\n```\n\n### Coding the app\n\nNow we’re ready to actually code the app. Start by opening the `index.js` file and replace the default contents with the following:\n\n```\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    \n    AppRegistry.registerComponent('LocSharer', () =\u003e App);\n```\n\nThe entry-point of the app will be the `App` component. So create an `App.js` file and add the following:\n\n```\n    import React, { Component } from 'react';\n    import { StackNavigator } from 'react-navigation';\n    \n    import IndexPage from './src/components/index';\n    import MapPage from './src/components/map_page';\n    \n    const Page = StackNavigator({\n      Home: { screen: IndexPage },\n      MapPage: { screen: MapPage },\n    });\n    \n    export default class App extends Component\u003c{}\u003e {\n    \n      render() {\n        return \u003cPage /\u003e\n      }\n    }\n```\n\nThe code above uses the React Navigation library to create a StackNavigator. This allows the app to transition from one screen to another by placing the new screen on top of the stack. This allows us to easily implement the back functionality since all it has to do is to “pop” the current screen out of the stack in order to go back to the previous screen. To use the StackNavigator, pass in the components to be used as the individual pages. The first one is the initial screen of the app.\n\n### Index page\n\nNext, create a `src` directory and inside create an `index.js` file. This will serve as the initial page of the app. First, import the modules and components that we need:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Switch, // for toggling location sharing on and off\n      DeviceEventEmitter // for emitting/listening custom events\n    } from 'react-native';\n    \n    var { FBLogin } = require('react-native-facebook-login'); // for implementing Facebook login\n    \n    import Pusher from 'pusher-js/react-native'; // for interacting with Pusher\n    \n    import Profile from './profile'; // component for displaying the user's profile\n    import Friends from './friends'; // component for displaying the user's friends\n    \n    import { regionFrom } from '../helpers'; // helper function for constructing the data needed by React Native Maps\n```\n\nCreate the actual component:\n\n```\n    export default class Index extends Component\u003c{}\u003e {\n      // set the title of the screen\n      static navigationOptions = {\n        title: 'LocSharer',\n      };\n    }\n```\n\nIn the constructor, we bind the functions to be used throughout the class as well as setting the default state:\n\n```\n    constructor() {\n    \n      super();\n    \n      this.watchId = null; // unique ID for the geolocation watcher\n      this.pusher = null; // variable for storing the Pusher instance\n      this.user_channel = null; // the Pusher channel for the current user\n      \n      // bind the functions to the class\n      this.onLogin = this.onLogin.bind(this);\n      this.onLoginFound = this.onLoginFound.bind(this);\n      this.onLogout = this.onLogout.bind(this);\n      this.setUser = this.setUser.bind(this);\n      this.setFriends = this.setFriends.bind(this);\n      this.toggleLocationSharing = this.toggleLocationSharing.bind(this);\n      this.onViewLocation = this.onViewLocation.bind(this);\n    \n      this.state = {\n        is_loggedin: false, // whether the user is currently logged in or not\n        is_location_shared: false, // whether the user is currently sharing their location or not\n        user: null, // data for the currently logged in user\n        friends: null, // data for the user's friends\n        subscribed_to: null, // the Facbook user ID of the user's friend whose location is currently being viewed\n        subscribed_friends_count: 0 // number of friends currently subscribed to the user\n      };\n    \n    }\n```\n\nThe `onLogin()` function is executed when the user has logged in with Facebook. Some of the user’s data such as the ID, access token and name are passed in as an argument to this function. It is then used to set the user’s and friends’ data on the state using two functions: \n\n```\n    onLogin(login_data) {\n      this.setUser(login_data);\n      this.setFriends(login_data.credentials.token);\n    }\n```\n\nThe `onLoginFound()` function is executed if an existing Facebook session is already present. The arguments passed in to this function are limited so we have to make a separate API request to get the user’s name:\n\n```\n    onLoginFound(data) {\n    \n      let token = data.credentials.token;\n    \n      fetch(`https://graph.facebook.com/me?access_token=${token}`)\n        .then((response) =\u003e response.json())\n        .then((responseJson) =\u003e {\n        \n          let login_data = {\n            profile: {\n              id: responseJson.id,\n              name: responseJson.name\n            },\n            credentials: {\n              token: token\n            }\n          };\n      \n          this.setUser(login_data);\n        })\n        .catch((error) =\u003e {\n          console.log('something went wrong', error);\n        });\n    \n      this.setFriends(token);\n    \n    }\n```\n\nHere’s the function for setting the data for the current user. All it does is format the login data returned by the Facebook API and set it on the state:\n\n```\n    setUser(login_data) {\n    \n      let user_id = login_data.profile.id;\n      this.setState({\n        is_loggedin: true,\n        user: {\n          id: user_id,\n          access_token: login_data.credentials.token,\n          name: login_data.profile.name,\n          photo: `https://graph.facebook.com/${user_id}/picture?width=100` // the user's profile picture\n        }\n      });\n    \n    }\n```\n\nThe `setFriends()` function makes a request to the Facebook API to get the array of the user’s friends:\n\n```\n    setFriends(token) {\n      fetch(`https://graph.facebook.com/me/friends?access_token=${token}`)\n        .then((response) =\u003e response.json())\n        .then((responseJson) =\u003e {\n          this.setState({\n            friends: responseJson.data\n          });\n        })\n        .catch((error) =\u003e {\n          console.log('something went wrong', error);\n        });\n    }\n```\n\nOnce the user logs out, destroying the session data is already taken care of by the Facebook login package. So all we have to do is unset all the user data that we’ve set earlier:\n\n```\n    onLogout() {\n      this.setState({\n        is_loggedin: false,\n        user: null, \n        friends: null,\n        is_subscribed_to: null\n      });\n    }\n```\n\nNext, initialize Pusher. Be sure to replace the placeholder values with your Pusher app details. We’re also passing in an auth paramater. This is the request data that we were checking earlier in the server code. Simply pass in the same unique string that you’ve used earlier when you added the secret:\n\n```\n    componentWillMount() {\n      this.pusher = new Pusher('YOUR PUSHER APP ID', {\n        authEndpoint: 'YOUR AUTH SERVER AUTH ENDPOINT',\n        cluster: 'YOUR APP CLUSTER',\n        encrypted: true,\n        auth: {\n          params: {\n            app_key: 'YOUR UNIQUE KEY', // \u003c-- should be the same as the unique key you added as a secret using now\n          }\n        }\n      });\n      \n      // add code for listening for the unsubscribe event\n    \n    }\n```\n\nNext, we need a way to unsubscribe from a friend’s channel when the current user is no longer viewing their location on a map. That happens when the user goes back from the map page to the index page. The React Navigation library doesn’t really provide a way to listen for the event when the back button is tapped. That’s why we need a way to emulate that behavior. I’ll let you figure out your own solution. So feel free to skip the following paragraph if you want.\n\nThe solution I came up with is to use the `DeviceEventEmitter` module. Add a listener for the `unsubscribe` event, and once this is triggered, unsubscribe from the friend’s channel. The event is triggered from the map page when the user goes back to the index page:\n\n```\n    DeviceEventEmitter.addListener('unsubscribe', (e) =\u003e {\n      let friend_id = this.state.subscribed_to;\n      this.pusher.unsubscribe(`private-friend-${friend_id}`);\n    });\n```\n\nThe `toggleLocationSharing()` function is executed every time the user toggles the switch for sharing their location. If location sharing is enabled, we subscribe the user to their own channel. This allows them to listen for when one of their friends subscribes to their channel. When this happens, we begin watching the user’s current location and publish the data using Pusher. If the user decides to disable location sharing, we unsubscribe the user from their own channel and stop watching the location. This effectively stops the updating of location from their friends screens:\n\n```\n    toggleLocationSharing() {\n    \n      let is_location_shared = !this.state.is_location_shared;\n    \n      this.setState({\n        is_location_shared: is_location_shared\n      });\n      \n      let user_id = this.state.user.id;\n      if(!is_location_shared){\n        this.pusher.unsubscribe(`private-friend-${user_id}`); // disconnect from their own channel\n        if(this.watchId){\n          navigator.geolocation.clearWatch(this.watchId);\n        }\n      }else{\n        this.user_channel = this.pusher.subscribe(`private-friend-${user_id}`);\n        this.user_channel.bind('client-friend-subscribed', (friend_data) =\u003e {\n      \n          let friends_count = this.state.subscribed_friends_count + 1;\n          this.setState({\n            subscribed_friends_count: friends_count\n          });\n      \n          if(friends_count == 1){ // only begin monitoring the location when the first subscriber subscribes\n            this.watchId = navigator.geolocation.watchPosition(\n              (position) =\u003e {\n                var region = regionFrom(\n                  position.coords.latitude,\n                  position.coords.longitude,\n                  position.coords.accuracy\n                );\n                this.user_channel.trigger('client-location-changed', region); // push the data to subscribers\n              }\n            );\n          }\n        });  \n      \n      }\n    }\n```\n\nThe `onViewLocation()` function is executed when the user taps on any friend on their friend list. This is where we subscribe to the friend’s channel so we can get updates whenever their location changes:\n\n```\n    onViewLocation(friend) {\n    \n      this.friend_channel = this.pusher.subscribe(`private-friend-${friend.id}`);\n      this.friend_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        let username = this.state.user.name;\n        this.friend_channel.trigger('client-friend-subscribed', {\n          name: username\n        });\n      });\n    \n      this.setState({\n        subscribed_to: friend.id\n      });\n      \n      // add code for navigating to the map page\n    }\n```\n\nNext, add the code for navigating to the map page. Pass in the name of the friend and the reference to the friend’s channel as navigation props. This allows those values to be accessed from the map page later on:\n\n```\n    const { navigate } = this.props.navigation;\n    \n    navigate('MapPage', {\n      name: friend.name,\n      friend_channel: this.friend_channel // pass the reference to the friend's channel\n    });\n```\n\nRender the index page. This consists of the user’s profile, their friends list and the Facebook login or logout button:\n\n```\n    render() {\n    \n      return (\n        \u003cView style={styles.page_container}\u003e\n        {\n          this.state.is_loggedin \u0026\u0026\n          \u003cView style={styles.container}\u003e\n          {\n            this.state.user \u0026\u0026\n            \u003cView style={styles.profile_container}\u003e\n              \u003cProfile\n                profile_picture={this.state.user.photo}\n                profile_name={this.state.user.name}\n              /\u003e\n    \n              \u003cText\u003eShare Location\u003c/Text\u003e\n              \u003cSwitch\n                value={this.state.is_location_shared}\n                onValueChange={this.toggleLocationSharing} /\u003e\n            \u003c/View\u003e\n          }\n    \n          {\n            this.state.friends \u0026\u0026\n            \u003cFriends\n              friends={this.state.friends}\n              onViewLocation={this.onViewLocation} /\u003e\n          }\n          \u003c/View\u003e\n        }\n    \n          \u003cFBLogin\n            permissions={[\"email\", \"user_friends\"]}\n            onLogin={this.onLogin}\n            onLoginFound={this.onLoginFound}\n            onLogout={this.onLogout}\n            style={styles.button}\n          /\u003e\n        \u003c/View\u003e\n      );\n    \n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      page_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      },\n      container: {\n        flex: 1,\n        padding: 20\n      },\n      profile_container: {\n        flex: 1,\n        alignItems: 'center',\n        marginBottom: 50\n      },\n      button: {\n        paddingBottom: 30,\n        marginBottom: 20,\n        alignSelf: 'center'\n      }\n    });\n```\n\nThe code above is pretty self-explanatory so I won’t go into details what each line does.\n\n### Profile component\n\nThe Profile component is used for displaying the user’s profile picture and name:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Image\n    } from 'react-native';\n    \n    import PropTypes from 'prop-types';\n    \n    class Profile extends Component\u003c{}\u003e {\n    \n      render() {\n    \n        return (\n          \u003cView style={styles.profile_container}\u003e\n            \u003cImage\n              resizeMode={\"contain\"}\n              source={{uri: this.props.profile_picture}}\n              style={styles.profile_photo}\n            /\u003e\n            \u003cText style={styles.profile_name}\u003e{this.props.profile_name}\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n    \n      }\n    \n    }\n    \n    const styles = StyleSheet.create({\n      profile_container: {\n        alignItems: 'center'\n      },\n      profile_photo: {\n        height: 100,\n        width: 100\n      },\n      profile_name: {\n        fontWeight: 'bold',\n        fontSize: 18\n      }\n    });\n    \n    // specify the required props\n    Profile.propTypes = {\n      profile_picture: PropTypes.string.isRequired,\n      profile_name: PropTypes.string.isRequired\n    };\n    \n    export default Profile;\n```\n\n### Friends component\n\nThe Friends component is used for rendering the list of friends:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Image,\n      TouchableHighlight\n    } from 'react-native';\n    \n    import PropTypes from 'prop-types';\n    \n    class Friends extends Component\u003c{}\u003e {\n    \n      renderFriends() {\n        return this.props.friends.map((friend, index) =\u003e {\n        \n          let profile_picture = `https://graph.facebook.com/${friend.id}/picture?width=50`;\n          return (\n            \u003cTouchableHighlight\n              key={index}\n              onPress={this.props.onViewLocation.bind(this, friend)}\n              underlayColor={\"#CCC\"}\u003e\n    \n                \u003cView style={styles.friend_row}\u003e\n                  \u003cImage\n                    resizeMode={\"contain\"}\n                    source={{uri: profile_picture}}\n                    style={styles.profile_photo}\n                  /\u003e\n                  \u003cText style={styles.friend_name}\u003e{friend.name}\u003c/Text\u003e\n                \u003c/View\u003e\n    \n            \u003c/TouchableHighlight\u003e\n          );\n        });\n      }\n      \n      render() {\n      \n        return (\n          \u003cView style={styles.friends_container}\u003e\n            \u003cText style={styles.friends_header_text}\u003eView Friend Location\u003c/Text\u003e\n            {this.renderFriends.call(this)}\n          \u003c/View\u003e\n        );\n      \n      }\n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      friends_container: {\n        flex: 2\n      },\n      friends_header_text: {\n        fontSize: 18,\n        fontWeight: 'bold'\n      },\n      friend_row: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        padding: 10\n      },\n      profile_photo: {\n        width: 50,\n        height: 50,\n        marginRight: 20\n      },\n      friend_name: {\n        fontSize: 15\n      }\n    });\n    \n    // specify the required props\n    Friends.propTypes = {\n      friends: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired\n        })\n      ),\n      onViewLocation: PropTypes.func.isRequired\n    };\n    \n    export default Friends;\n```\n\n### Region helper\n\nEarlier, we’ve used a function called `regionFrom` but we haven’t really created it yet. So go ahead and create a `src/helpers.js` file and add the following:\n\n```\n    export function regionFrom(lat, lon, accuracy) {\n      const oneDegreeOfLongitudeInMeters = 111.32 * 1000;\n      const circumference = (40075 / 360) * 1000;\n    \n      const latDelta = accuracy * (1 / (Math.cos(lat) * circumference));\n      const lonDelta = (accuracy / oneDegreeOfLongitudeInMeters);\n    \n      return {\n        latitude: lat,\n        longitude: lon,\n        latitudeDelta: Math.max(0, latDelta),\n        longitudeDelta: Math.max(0, lonDelta)\n      };\n    } \n```\n\nThis function is used for getting the latitude and longitude delta values needed by the React Native Maps library to display a map.\n\n### Map page\n\nNow we move over to the map page. Create a `src/map_page.js` file and add the following:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      DeviceEventEmitter\n    } from 'react-native';\n    \n    import Map from './map';\n    \n    import { regionFrom } from '../helpers';\n    \n    // add code for creating the component\n```\n\nCreate the component, and set the page title based on the parameters passed from the index page:\n\n```\n    export default class MapPage extends Component\u003c{}\u003e {\n    \n      static navigationOptions = ({navigation}) =\u003e ({\n        title: `${navigation.state.params.name}'s Location`,\n      });\n     \n     // add constructor code \n    }\n```\n\nSet a default location in the constructor so that a map is still displayed even if the user is not sharing their location:\n\n```\n    constructor() {\n      super();\n    \n      // set default location\n      let region = {\n        \"latitude\": 35.4625901,\n        \"longitude\": 138.65437569999995,\n        \"latitudeDelta\": 0,\n        \"longitudeDelta\": 0\n      };\n    \n      this.state = {\n        region\n      }\n    }\n```\n\nWhen the user taps on the back button, `componentWillUnmount()` is triggered as the component goes out of view. So this is the perfect time to trigger the `unsubscribe` event to let the index page know that the user has stopped viewing their friends location.\n\n```\n    componentWillUnmount() {\n      DeviceEventEmitter.emit('unsubscribe',  {\n        unsubscribe: true\n      });\n    }\n```\n\nWhen the component is mounted, we want to start listening for when the location changes so we can update the map accordingly:\n\n```\n    componentDidMount() {\n    \n      const { state } = this.props.navigation;\n      state.params.friend_channel.bind('client-location-changed', (data) =\u003e {\n        this.setState({\n          region: data\n        });\n      });\n    \n    }\n```\n\nThe `render()` method simply outputs the Map component:\n\n```\n    render() {\n    \n      return (\n        \u003cView style={styles.map_container}\u003e\n        {\n          this.state.region \u0026\u0026\n          \u003cMap region={this.state.region} /\u003e\n        }\n        \u003c/View\u003e\n      );\n    \n    }\n```\n\nAdd the styles:\n\n```\n    const styles = StyleSheet.create({\n      map_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      }\n    });\n```\n\n### Map component\n\nLastly, there’s the Map component which is used to actually render the Google Map. This uses the React Native Maps package that we installed earlier. There are only two components that you need in order to make it work: `MapView` and `MapView.Marker`. `MapView` is used to render the map, and `MapView.Marker` is used to render the marker: \n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View\n    } from 'react-native';\n    \n    import MapView from 'react-native-maps';\n    import PropTypes from 'prop-types';\n    \n    class Map extends Component\u003c{}\u003e {\n    \n      render() {\n    \n        return (\n          \u003cView style={styles.map_container}\u003e\n            {\n            this.props.region \u0026\u0026\n              \u003cMapView\n                style={styles.map}\n                region={this.props.region}\n              \u003e\n                \u003cMapView.Marker\n                  coordinate={{\n                    latitude: this.props.region.latitude,\n                    longitude: this.props.region.longitude}}\n                /\u003e\n              \u003c/MapView\u003e\n            }\n          \u003c/View\u003e\n        );\n    \n      }\n    \n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      map_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      },\n      map: {\n        ...StyleSheet.absoluteFillObject,\n      },\n    });\n    \n    // specify the required props\n    Map.propTypes = {\n      region: PropTypes.shape({\n        latitude: PropTypes.number.isRequired,\n        longitude: PropTypes.number.isRequired,\n        latitudeDelta: PropTypes.number.isRequired,\n        longitudeDelta: PropTypes.number.isRequired\n      })\n    };\n    \n    export default Map;\n```\n\n## Running the app\n\nYou only need one device and one emulator in order to test the app. First, run the app on your device by executing `react-native run-android`. Once the app is running, disconnect the device and open a Genymotion virtual device. Execute the same command again to run the app on the virtual device. Don’t forget to add another Facebook user, aside from your own Facebook account as a tester or developer under the Facebook app settings. You can do that by clicking on the **Roles** tab and searching for the user in there. Only Facebook users that are added in the app settings can login. This is because the Facebook app is still unpublished. \n\nGenymotion has a built-in functionality for spoofing the GPS coordinates. This will trigger the geolocation functionality in the app everytime the location changes (either by pointing the marker on a different location on the map or searching for another place). That’s why it’s best to use Genymotion for testing the user who is broadcasting their location.\n\nIf you don’t have any device to test on, you can use Genymotion and the Pusher debug console to test the app. All you have to do is figure out the Facebook user ID’s of the two users you’re using for testing. You can do that by using [this tool](https://findmyfbid.in/). Login with your Facebook account on Genymotion then click on one of the other accounts. You can then emulate the location update by manually entering the coordinates on the debug console. You can access the debug console from your Pusher app’s dashboard:\n\n![geolocation-sharing-react-native-debug-console](//images.contentful.com/1es3ne0caaid/6kX3gefojuW4oIKWmgKyWs/72a71d7cf5c4e62e9e500b70e9754772/geolocation-sharing-react-native-debug-console.png)\n\nYou can use the following as initial values:\n- **channel name:** `private-friend-YOUR-ACCOUNTS-FB-ID`\n- **event:** `client-location-changed`\n- **data:** you can use the following data for testing:\n\n```\n    {\n      \"latitude\": 16.6105538,\n      \"longitude\": 120.31429539999999,\n      \"latitudeDelta\": 0,\n      \"longitudeDelta\": 0\n    }\n```\n\nSend the event once that’s done. Sending the event should update the map on the app. You can use a service such as [latlong.net](https://www.latlong.net/) to come up with the coordinates of different places.\n\n\n## Suggestions for improvement\n\nIf you want to improve the app, here are some ideas on what you can add:\n- The number of friends that are currently viewing the user’s location doesn’t actually get updated when someone disconnects from the user’s channel. You can add a listener for when someone disconnects, so that you can update the value as well. \n- The current user doesn’t actually know who are the people that are currently subscribed to their location. For this you can use an alert dialog everytime someone subscribes to the channel. The `client-friend-subscribed` event has already been laid out for this purpose. You can even take the idea further by making use of [Presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels). This comes with an additional feature that allows you to keep track of the people that are subscribed to a specific channel.\n- Add notifications to inform the subscribed users for when the user they’re subscribed to disables location sharing. \n\n\n## Conclusion\nThat’s it! In this tutorial you’ve learned how to create a location-sharing app which uses React Native’s built-in Geolocation library and Pusher to broadcast the data to the user’s friends.","metaTitle":"Build a geolocation sharing app with React Native","metaDescription":"In this tutorial, we will be building a location-sharing app using React Native and you will learn how to use the realtime geolocation functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3k2gChNFTackmekCUGAmWA","type":"Entry","createdAt":"2018-02-28T12:27:48.206Z","updatedAt":"2018-02-28T12:27:48.206Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Monitor APIs in realtime using Go","url":"monitor-api-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-api-monitor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-02-10","description":"In this article, you will learn how to realtime monitoring of a small API built using Go and jQuery.","prerequisite":"A basic understanding of Go and JavaScript is needed to follow this tutorial.","content":"REST is a popular architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other. It is mostly used by APIs to provide data to other systems requiring them.\n\nSometimes, the providers of APIs would like to monitor its use. Monitoring APIs helps provide useful information, such as which endpoints are called most frequently, or what regions are the largest audience using request IP Addresses. This information can then be used to optimize the API.\n\nIn this article, we will implement realtime monitoring of a small API built with GoLang, using Pusher. Here’s a preview of what it should look like at the end:\n\n![monitor-api-go-demo](//images.contentful.com/1es3ne0caaid/5neldRoqw86YwmkUAWOCK6/62eaee0a825b4e1bb511a3c22ed07133/monitor-api-go-demo.gif)\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n- An IDE of your choice e.g. [Visual Studio Code](https://code.visualstudio.com/).\n- [Go](https://golang.org/doc/install) installed on your computer.\n- Basic knowledge of GoLang.\n- Basic knowledge of JavaScript (ES6 syntax) and jQuery.\n- Basic knowledge of using a CLI tool or terminal.\n\nOnce you have all the above requirements, let’s proceed.\n\n\n## Setting up our codebase\n\nTo keep things simple, we’ll be using an already written GoLang CRUD API, which is available on [GitHub](https://github.com/neoighodaro/go-pusher-api-monitor/tree/master/api-goggles). We will fork the repository and set it up following the **README.md** guidelines on installation.\n\nNext, we will set up Pusher in the API project. Pusher is a service that provides a simple implementation of realtime functionality for our web and mobile applications. We will use it in this article, to provide realtime updates to our API monitor dashboard.\n\nLet’s head over to Pusher.com, you can [create a free account](https://pusher.com/signup?plan=sandbox) if you don’t already have one. On the [dashboard](https://dashboard.pusher.com/), create a new app and copy out the app credentials (App ID, Key, Secret, and Cluster). We will use these credentials in our API.\n\nNow that we have our Pusher app, we will install the Pusher Go library by running:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n## Monitoring our API\n\nWe have so far set up a functional CRUD API, and we will now implement monitoring calls to it. In this article, we will monitor:\n- The endpoints called with details like name, request type (GET, POST, etc) and URL.\n- For each call to an endpoint, we will also take note of:\n  - The requesting IP address remove,\n  - The response status code for the particular call.\n\nNow that we have defined what to monitor, we will begin by creating models to keep track of the data we acquire.\n\n### Creating models for monitoring\n\nBased on our specifications above, we will create two new model files `EndPoints.go` and `EndPointCalls.go`. As was used in the base API, we will use the [GORM](http://jinzhu.me/gorm/) (the GoLang ORM) for managing data storage.\n\n\u003e 💡 Our new model files will exist in the models directory and belong to the models package.\n\nIn `EndPoints.go`, we will define the `EndPoints` object and a method to save endpoints:\n\n```\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n    )\n    \n    // EndPoints - endpoint model\n    type EndPoints struct {\n        gorm.Model\n        Name, URL string\n        Type      string          `gorm:\"DEFAULT:'GET'\"`\n        Calls     []EndPointCalls `gorm:\"ForeignKey:EndPointID\"`\n    }\n    \n    // SaveOrCreate - save endpoint called\n    func (ep EndPoints) SaveOrCreate() EndPoints {\n        db.FirstOrCreate(\u0026ep, ep)\n        return ep\n    }\n```\n\nIn the code block above, our model did not re-initialize the GORM instance `db`, yet it was used. This is because the instance defined in the `Movies.go` file was global to all members of the package, and so it can be referenced and used by all members of `package models`.\n\n\n\u003e 💡 Our EndPoints model has an attribute `Calls` which is an array of `EndPointCalls` objects. This attribute signifies the [one to many](http://jinzhu.me/gorm/associations.html#has-many) relationship between `EndPoints` and `EndPointCalls`. For more information on model associations and relationships see the GORM [documentation](http://jinzhu.me/gorm/associations.html).\n\nNext, we’ll fill in the model definitions and methods for our `EndPointCalls` model in the `EndPointCalls.go` file:\n\n```\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n        \"github.com/kataras/iris\"\n    )\n    \n    // EndPointCalls - Object for storing endpoints call details\n    type EndPointCalls struct {\n        gorm.Model\n        EndPointID   uint `gorm:\"index;not null\"`\n        RequestIP    string\n        ResponseCode int\n    }\n    \n    // SaveCall - Save the call details of an endpoint\n    func (ep EndPoints) SaveCall(context iris.Context) EndPointCalls {\n        epCall := EndPointCalls{\n            EndPointID:   ep.ID,\n            RequestIP:    context.RemoteAddr(),\n            ResponseCode: context.GetStatusCode(),\n        }\n    \n        db.Create(\u0026epCall)\n        return epCall\n    }\n```\n\nAs shown above, our `EndPointCalls` model defines a `SaveCall` method, which stores the requesting IP address and the response code of an existing `EndPoint` object.\n\nFinally, we will update the model migration in the `index.go` file to include our new models:\n\n```\n    // index.go\n    // ...\n    \n    func main() {\n        // ...\n    \n        // Initialize ORM and auto migrate models\n        db, _ := gorm.Open(\"sqlite3\", \"./db/gorm.db\")\n        db.AutoMigrate(\u0026models.Movies{}, \u0026models.EndPoints{}, \u0026models.EndPointCalls{})\n    \n        // ...\n    }\n```\n\n### Saving endpoint data for monitoring\nUsing our newly created models, we will edit the `MoviesController.go` file to save relevant data when an endpoint is called.\n\nTo do this, we will add a private helper method to `MoviesController.go`, which will save endpoint data with our models. See how below:\n\n```\n    // MoviesController.go\n    // ...\n    \n    func (m MoviesController) saveEndpointCall(name string) {\n        endpoint := models.EndPoints{\n            Name: name,\n            URL:  m.Cntx.Path(),\n            Type: m.Cntx.Request().Method,\n        }\n    \n        endpoint = endpoint.SaveOrCreate()\n        endpointCall := endpoint.SaveCall(m.Cntx)\n    }\n```\n\nThe `saveEndpointCall` method takes the name of the endpoint as a parameter. Using the controller’s `iris.Context` instance, it reads and saves the endpoint path and request method.\n\nNow that this helper method is available, we will call it in each of the endpoint methods in the `MoviesController.go` file:\n\n```\n    // MoviesController.go\n    // ...\n    \n    // Get - get a list of all available movies\n    func (m MoviesController) Get() {\n        movie := models.Movies{}\n        movies := movie.Get()\n    \n        go m.saveEndpointCall(\"Movies List\")\n        m.Cntx.JSON(iris.Map{\"status\": \"success\", \"data\": movies})\n    }\n    \n    // GetByID - Get movie by ID\n    func (m MoviesController) GetByID(ID int64) {\n        movie := models.Movies{}\n        movie = movie.GetByID(ID)\n        if !movie.Validate() {\n            msg := fmt.Sprintf(\"Movie with ID: %v not found\", ID)\n            m.Cntx.StatusCode(iris.StatusNotFound)\n            m.Cntx.JSON(iris.Map{\"status\": \"error\", \"message\": msg})\n        } else {\n            m.Cntx.JSON(iris.Map{\"status\": \"success\", \"data\": movie})\n        }\n    \n        name := fmt.Sprintf(\"Single Movie with ID: %v Retrieval\", ID)\n        go m.saveEndpointCall(name)\n    }\n    \n    // ...\n```\n\nAs shown in the snippet above, the `saveEndpointCall` helper method will be called in each CRUD method.\n\n\u003e 💡 The `saveEndpointCall` method is called as a [Goroutine](https://golangbot.com/goroutines/). Calling it this way calls it concurrently with the execution of the endpoint’s method, and allows our monitoring code to not delay or inhibit the response of the API.\n\n\n## Creating the endpoint monitor dashboard\n\nNow that we have implemented monitoring our API’s calls, we will display the data we have accrued on a dashboard.\n\n### Registering our template engine\n\nThe GoLang framework, Iris, has the ability to implement a range of template engines, which we will take advantage of.\n\nIn this section, we will implement the **Handlebars** template engine, and in our `index.go` file, we will register it to the app instance:\n\n```\n    // index.go\n    package main\n    \n    import (\n        \"goggles/controllers\"\n        \"goggles/models\"\n        \"github.com/jinzhu/gorm\"\n        \"github.com/kataras/iris\"\n    )\n    \n    func main() {\n        app := iris.New()\n    \n        tmpl := iris.Handlebars(\"./templates\", \".html\")  \n        app.RegisterView(tmpl)\n    \n        // ...\n    \n        app.Run(iris.Addr(\"127.0.0.1:1234\"))\n    }\n```\n\n\u003e 💡 We have defined our template engine (Handlebars), to render `.html` files contained in the `templates` directory.\n\n### Creating the dashboard's route and controller\nNow that we have registered our template engine to the application, we will add a route in `index.go` to render our API monitor dashboard:\n\n```\n    // index.go\n    // ...\n    \n    func main() {\n        app := iris.New()\n    \n        // ...\n    \n        app.Get(\"/admin/endpoints\", func(ctx iris.Context) {\n            dashBoard := controllers.DashBoardController{Cntx: ctx}\n            dashBoard.ShowEndpoints()\n        })\n    \n        app.Run(iris.Addr(\"127.0.0.1:1234\"))\n    }\n```\n\nAbove, we have added definitions for the path `/admin/endpoints`, where we intend to render details of our API endpoints and its calls. We have also specified that the route should be handled by the `ShowEndpoints` method of `DashBoardController`.\n\nTo create `DashBoardController`, we will create a `DashBoardController.go` file in the controllers directory. And in our `DashBoardController.go` file, we will define the `DashBoardController` object and its `ShowEndpoints` method:\n\n```\n    // DashBoardController.go\n    package controllers\n    \n    import (\n        \"goggles/models\"\n        \"github.com/kataras/iris\"\n        \"github.com/kataras/iris/mvc\"\n    )\n    \n    // DashBoardController - Controller object for Endpoints dashboard\n    type DashBoardController struct {\n        mvc.BaseController\n        Cntx iris.Context\n    }\n    \n    // ShowEndpoints - show list of endpoints\n    func (d DashBoardController) ShowEndpoints() {\n        endpoints := (models.EndPoints{}).GetWithCallSummary()\n        d.Cntx.ViewData(\"endpoints\", endpoints)\n        d.Cntx.View(\"endpoints.html\")\n    }\n```\n\nIn `ShowEndpoints()`, we retrieve our endpoints and a summary of their calls for display. Then we pass this data to our view using `d.Cntx.ViewData(\"endpoints\", endpoints)`, and finally we render our view file `templates/endpoints.html` using `d.Cntx.View(\"endpoints.html\")`.\n\n### Retrieving endpoints and call summaries\nTo retrieve our list of endpoints and a summary of their calls, we will create a method in the `EndPoints.go` file called `GetWithCallSummary`.\n\nOur `GetWithCallSummary` method should return the endpoints and their call summaries ready for display. For this, we will define a collection object `EndPointWithCallSummary` with the attributes we need for our display in the `EndPoints.go` file:\n\n```\n    // EndPoints.go\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n    )\n    \n    // EndPoints - endpoint model\n    type EndPoints struct {\n        gorm.Model\n        Name, URL string\n        Type      string          `gorm:\"DEFAULT:'GET'\"`\n        Calls     []EndPointCalls `gorm:\"ForeignKey:EndPointID\"`\n    }\n    \n    // EndPointWithCallSummary - Endpoint with last call summary\n    type EndPointWithCallSummary struct {\n        ID            uint\n        Name, URL     string\n        Type          string\n        LastStatus    int\n        NumRequests   int\n        LastRequester string\n    }\n```\n\nAnd then define `GetWithCallSummary` method to use it as follows:\n\n```\n    // EndPoints.go\n    \n    // ...\n    \n    // GetWithCallSummary - get all endpoints with call summary details\n    func (ep EndPoints) GetWithCallSummary() []EndPointWithCallSummary {\n        var eps []EndPoints\n        var epsWithDets []EndPointWithCallSummary\n    \n        db.Preload(\"Calls\").Find(\u0026eps)\n    \n        for _, elem := range eps {\n            calls := elem.Calls\n            lastCall := calls[len(calls)-1:][0]\n            newElem := EndPointWithCallSummary{\n                elem.ID,\n                elem.Name,\n                elem.URL,\n                elem.Type,\n                lastCall.ResponseCode,\n                len(calls),\n                lastCall.RequestIP,\n            }\n            epsWithDets = append(epsWithDets, newElem)\n        }\n    \n        return epsWithDets\n    }\n    \n    // ...\n```\n\nAbove, the `GetWithCallSummary` method leverages the `Calls` attribute of `EndPoints`, which defines its relationship with `EndPointCalls`. When retrieving our list of endpoints from the database, we eager load its `EndPointCalls` data using `db.Preload(\"Calls\").Find(\u0026eps)`.\n\nFor more information on eager loading in GORM, see the [documentation](http://jinzhu.me/gorm/crud.html#preloading-eager-loading).\n\n`GetWithCallSummary` initializes an array of `EndPointWithCallSummary`, and loops through the `EndPoints` objects returned from our database to create `EndPointWithCallSummary` objects. \n\nThese `EndPointWithCallSummary` objects are appended to the initialized array and returned.\n\n\u003e 💡 The `EndPointWithCallSummary` is not a model. It is a collection object and does not need to have a table in our database. This is why it does not have its own file and is not passed to `index.go` for migration.\n\n### Implementing the dashboard and displaying data\n\nNow that we have the dashboard’s route, controller and data for display, we will implement the dashboard view to achieve a simple list display of endpoints and their summary data. \n\nLet’s update `templates/endpoints.html` to have the following code:\n\n```\n    \u003c!-- templates/endpoints.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eEndpoints Monitor Dashboard\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/css/bootstrap.min.css\" /\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv\u003e\n            \u003cnav class=\"navbar navbar-default navbar-static-top\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003cdiv class=\"navbar-header\"\u003e\n                        \u003ca class=\"navbar-brand\" href=\"http://127.0.0.1:1234/\"\u003e\n                            Goggles - A Real-Time API Monitor\n                        \u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/nav\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-xs-12 col-lg-12\"\u003e\n                        \u003cdiv class=\"endpoints list-group\"\u003e\n                            {{#each endpoints}}\n                                \u003ca id=\"endpoint-{{ID}}\" href=\"#\" class=\"list-group-item \n                                list-group-item-{{status_class LastStatus}}\"\u003e\n                                    \u003cstrong\u003e{{name}}\u003c/strong\u003e\n                                    \u003cspan class=\"stats\"\u003e\n                                        {{type}}: \u003cstrong\u003e{{url}}\u003c/strong\u003e |\n                                        Last Status: \u003cspan class=\"last_status\"\u003e\n                                        {{LastStatus}}\u003c/span\u003e |\n                                        Times Called: \u003cspan class=\"times_called\"\u003e\n                                        {{NumRequests}}\u003c/span\u003e |\n                                        Last Request IP: \u003cspan class=\"request_ip\"\u003e\n                                        {{LastRequester}}\u003c/span\u003e\n                                    \u003c/span\u003e\n                                \u003c/a\u003e\n                            {{/each}}\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove, we render our endpoints list using [Bootstrap](https://getbootstrap.com/) and our Handlebars template engine. We have also created and used a template function `status_class`, to colour code our list based on their last call status `LastStatus`.\n\nWe define the `status_class` template function in `index.go` after initialising our template engine:\n\n```\n    // index.go\n    \n    // ...\n    \n    func main() {\n        app := iris.New()\n    \n        tmpl := iris.Handlebars(\"./templates\", \".html\")\n    \n        tmpl.AddFunc(\"status_class\", func(status int) string {\n            if status \u003e= 200 \u0026\u0026 status \u003c 300 {\n                return \"success\"\n            } else if status \u003e= 300 \u0026\u0026 status \u003c 400 {\n                return \"warning\"\n            } else if status \u003e= 400 {\n                return \"danger\"\n            }\n            return \"success\"\n        })\n    \n        app.RegisterView(tmpl)\n    }\n```\n\nThen in our view file we call the function as:\n\n``` language-go\n    class=\"list-group-item list-group-item-{{status_class LastStatus}}\"\n```\n\u003e 💡 In the above **LastStatus** is the function’s parameter.\n\n\n## Adding realtime updates to our dashboard\n\nSo far in this article, we have monitored the calls to an API and displayed the data via a dashboard. We will now use [Pusher](http://pusher.com/) to provide realtime data updates to our dashboard.\n\n### Sending realtime data from the backend\nEarlier, we installed the [Pusher Go library](https://github.com/pusher/pusher-http-go), which we will use to trigger an event when an endpoint is called. In the `MoviesController.go` file, where the API requests are handled, we will initialize the Pusher client:\n\n```\n    // MoviesController.go\n    \n    package controllers\n    \n    import (\n        // ...\n        \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // MoviesController - controller object to serve movie data\n    type MoviesController struct {\n        mvc.BaseController\n        Cntx iris.Context\n    }\n    \n    var client = pusher.Client{\n        AppId:   \"app_id\",\n        Key:     \"app_key\",\n        Secret:  \"app_secret\",\n        Cluster: \"app_cluster\",\n    }\n    \n    // ...\n```\nHere, we have initialized the Pusher client using the credentials from our earlier created app.\n\n\u003e ⚠️ Replace `app_id, app_key, app_secret and app_cluster` with your app credentials.\n\nNext, we will use our Pusher client to trigger an event, which would include the endpoint’s data to be displayed in our view. We will do this in the `saveEndpointCall` method, which logs an endpoint and its call:\n\n```\n    // MoviesController.go\n    \n    // ...\n    \n    func (m MoviesController) saveEndpointCall(name string) {\n        endpoint := models.EndPoints{\n            Name: name,\n            URL:  m.Cntx.Path(),\n            Type: m.Cntx.Request().Method,\n        }\n        endpoint = endpoint.SaveOrCreate()\n        endpointCall := endpoint.SaveCall(m.Cntx)\n        endpointWithCallSummary := models.EndPointWithCallSummary{\n            ID:            endpoint.ID,\n            Name:          endpoint.Name,\n            URL:           endpoint.URL,\n            Type:          endpoint.Type,\n            LastStatus:    endpointCall.ResponseCode,\n            NumRequests:   1,\n            LastRequester: endpointCall.RequestIP,\n        }\n        \n        client.Trigger(\"goggles_channel\", \"new_endpoint_request\", endpointWithCallSummary)\n    }\n```\n\nAbove, we create an `EndPointWithCallSummary` object from `EndPoints` (the endpoint) and `EndPointCalls`. This `EndPointWithCallSummary` object has all the data required for display on the dashboard, so will be passed to Pusher for transmission.\n\n### Displaying data in realtime on the dashboard\n\nTo display the realtime updates of our endpoints, we will use the Pusher JavaScript client and jQuery libraries.\n\nIn our view file, `templates/endpoints.html`, we will first import and initialize a Pusher instance using our app’s credentials:\n\n```\n    \u003c!-- endpoints.html --\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n      const pusher = new Pusher('app_id', {cluster: \"app_cluster\"});\n    \u003c/script\u003e\n```\n\n\u003e ⚠️ Replace `app_id and app_cluster` with values from your app’s credentials.\n\nNext, we will define the following:\n- The template for adding new endpoints to our view.\n- The functions to append a new endpoint and get the status class of the endpoint.\n\nFinally, we will subscribe to the `goggles_channel` and listen to the `new_endpoint_request` event, where our endpoint updates will be transmitted:\n\n```\n    \u003c!-- endpoints.html --\u003e\n    \u003cscript\u003e\n    // ...\n    \n    const channel = pusher.subscribe(\"goggles_channel\");\n    \n    channel.bind('new_endpoint_request', function(data) {\n        let end_point_id = data.ID;\n        if ( $('#endpoint-' + end_point_id).length \u003e 0 ) {\n            let status_class = getItemStatusClass(data['LastStatus']),\n                endpoint     = $('#endpoint-' + end_point_id);\n            let calls = 1 * endpoint.find('span.times_called').text()\n            endpoint.find('span.last_status').text(data['LastStatus']);\n            endpoint.find('span.times_called').text( (calls + 1) )\n            endpoint.removeClass('list-group-item-success');\n            endpoint.removeClass('list-group-item-danger');\n            endpoint.removeClass('list-group-item-warning');\n            endpoint.addClass('list-group-item-' + status_class);\n        } else {\n            addNewEndPoint(data);\n        }\n    });\n    \n    // ...\n```\n\nIn the `new_endpoint_request` event handler, the endpoint data is categorized into either an update scenario (where the endpoint already exists on the dashboard) or a create scenario (where a new list item is created and appended).\n\nFinally, you can build your application and when you run it you should see something similar to what we have in the preview:\n\n![monitor-api-go-demo](//images.contentful.com/1es3ne0caaid/5neldRoqw86YwmkUAWOCK6/62eaee0a825b4e1bb511a3c22ed07133/monitor-api-go-demo.gif)\n\n## Conclusion\n\nIn this article, we were able to monitor the realtime requests to a REST API and demonstrate how Pusher works with GoLang applications.","metaTitle":"Monitor APIs in realtime using Go","metaDescription":"Discover how you can build your own realtime API monitor using Go and jQuery."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"BYMUj9H49E08Wi8GKWM0E","type":"Entry","createdAt":"2018-02-28T12:21:17.268Z","updatedAt":"2018-06-21T09:23:00.104Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a cryptocurrency tracker using Vue.js","url":"cryptocurrency-tracker-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/sample-vue-pwa-cryptocurrency-watcher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-09","description":"In this tutorial, learn how to build a live cryptocurrency tracking view with Progressive Web Apps, Vue.js and Node.js.","prerequisite":"A basic understanding of Vue.js, Node.js and PWA is needed to follow this tutorial.","content":"PWAs (Progressive Web Applications) has already been identified as the future of web applications and the reason is quite obvious. PWAs let you build web apps that are capable of delivering native app-like experiences to users.\n\nFrom sending push notifications, to caching data for offline retrieval, to background sync, Progressive web apps have got you completely covered. PWAs can also ensure that users are engaged and up to date with dynamic data even with very poor network connections.\n\n\u003e Progressive Web App (PWA) is a term used to denote web applications that use the latest web technologies. Progressive Web Apps, also known as Installable Web Apps or Hybrid Web Apps, are regular web pages or websites but can appear to the user like traditional applications or native mobile applications. The application type attempts to combine features offered by most modern browsers with the benefits of mobile experience. - [Wikipedia](https://en.wikipedia.org/wiki/Progressive_web_app)\n\nThis article demonstrates how to build a simple realtime PWA with Vue.js and Pusher.\nVue.js is a Progressive Web Framework for JavaScript, it’s easy to use, and requires relatively little code to produce awesome results.\n\nFor the realtime part of this application, we will be plugging in Pusher’s JavaScript library. Pusher is a realtime engine that makes it easy to add realtime functionalities to applications.\n\n## What we’ll be building\n\nIn this article, we will be building a cryptocurrency application called “KryptoWatcher”. Its function is to display the price updates of three cryptocurrencies (Bitcoin, Ethereum, and Litecoin) in realtime. The price updates will be obtained from the Cryptocompare API.\n\nKryptoWatcher will also be able to travel five days into the past and retrieve coin data for those days. Here’s a visual display of what the final application will look like:\n\n![cryptocurrency-tracker-vue-demo](//images.contentful.com/1es3ne0caaid/70YNXoNPl6cuAOAmS0SW8a/3b318c61b0a19378604ac5607a3201eb/cryptocurrency-tracker-vue-demo.gif)\n\nThe best part of it all is that, after this app runs once, it can run again and display coin data even without an internet connection. This is possible because we’ll build `KryptoWatcher` to cache the coin data on the first run.\n\nLet’s start putting the pieces together.\n\n## Requirements\n\nTo follow along in this tutorial, you will need to have the following:\n- Knowledge of [Vue.js](https://vuejs.org/).\n- [Vue CLI](https://vuejs.org/v2/guide/installation.html#CLI) installed on your machine.\n- [Node and NPM](https://docs.npmjs.com/getting-started/installing-node) installed on your machine.\n- Knowledge of Node.js and Express framework.\n- Knowledge of JavaScript.\n- A Pusher Application. [Create one here](https://pusher.com).\n\nOnce you have requirements we can move on to setting up our application.\n\n## Setting up your Pusher application\n\nCreate a [Pusher account](https://pusher.com/), if you have not already, and then set up your application as seen in the screenshot below.\n\n![cryptocurrency-tracker-vue-create-app](//images.contentful.com/1es3ne0caaid/4dQB7DXuQEyecCwE06AuSy/3d775f17a03b1895f67c6e8b80e65e2f/cryptocurrency-tracker-vue-create-app.png)\n\nWhen you have completed the set up, take note of your Pusher application keys as we will need them later on.\n\n## Setting up our Vue.js PWA application\n\nYou can think of the Vue CLI tool as a lightweight tool for scaffolding Vue.js projects. To start building our application we will use the Vue CLI tool to pull in the [Vue PWA template](https://github.com/vuejs-templates/pwa) that we will be working with. \n\nTo create our application run the following command on your terminal:\n\n```\n    $ vue init pwa krypto-watcher\n```\n\nYou’ll be presented with prompts and a few ‘Yes’ or ‘No’ questions. You can answer most as you see fit, however, for the “Y” or “N” prompts, since we do not require the additional functionalities and features, let’s respond with “N” to all the queries.\n\n\n![cryptocurrency-tracker-vue-project-details](//images.contentful.com/1es3ne0caaid/64HwW3fkUouk2OuuGMkmeC/d7b56613d14ecc9f66bb25b55b3e248a/cryptocurrency-tracker-vue-project-details.png)\n\n\nThe template gives us awesome PWA features out of the box. One such feature is the service worker. The service worker allows our application to work offline.\n\n\n\u003e 💡  A service worker is a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction.\n\nTo install the dependencies, go to your terminal window and run the following command:\n \n```\n    $ cd krypto-watcher \u0026\u0026 npm install\n```\n\nIf you take a look at your project directory, you will find that it contains a few subfolders: `build`, `config`, `src`, `static`, `test`. Let’s open the `build/webpack.prod.conf.js` file and take a quick peek at the `SWPrecacheWebpackPlugin` object:\n\n```\n    new SWPrecacheWebpackPlugin({\n        cacheId: 'krypto-watcher',\n        filename: 'service-worker.js',\n        staticFileGlobs: ['dist/**/*.{js,html,css}'],\n        minify: true,\n        stripPrefix: 'dist/'\n    })\n```\n\nWhat this does is generate a new service worker when the application is built (with the `npm run build` command).\n\nThe service worker will cache all the files that match the glob expression, for offline access, in `staticFileGlobs` which currently points to a non-existent `dist` folder. The `dist` directory will be created when we build our application.\n\nLet’s start building out our application component by component.\n\n### Vue.js components\n\nSimilar to other modern JavaScript libraries and frameworks like React, Vue allows us to create components when building applications. Components help us keep our application modular and ensure that apps can be separated into reusable modules.\n\nLet’s build `KryptoWatcher` by creating three reusable components:\n\n1. The `Intro` component which will hold the introductory markup and styles for the application.\n2. The `Current` component which will display coin prices in realtime.\n3. The `Previous` component which will display coins prices from ‘x days ago’.\n\nLet us start creating the components. We will be doing them manually however you can always use an NPM package like [this](https://www.npmjs.com/package/vue-generate-component) to make it easier to create components. Create a `src/components` directory and create the following files in the directory: `Intro.vue`, `Current.vue`, and `Previous.vue`.\n\n### The intro component\nThis component has no special functionalities as it just holds the intro markup and styles that will make the app presentable. The HTML goes between the `template` tags and the styles go in the `styles` tag.\n\nIn the `Intro.vue` file paste the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cheader class=\"hero\"\u003e\n        \u003cdiv class=\"bar logo\"\u003e\n          \u003ch3\u003eKryptoWatcher\u003c/h3\u003e\n          \u003cspan class=\"monitor\"\u003e\u003cspan class=\"monitorText\"\u003ereceive updates\u003c/span\u003e\u003c/span\u003e\n        \u003c/div\u003e\n        \u003ch1\u003eRealtime PWA that displays updates on cryptocurrencies\u003c/h1\u003e\n        \u003ch2\u003eBitcoin, Ethereum, Litecoin?\u003c/h2\u003e\n      \u003c/header\u003e\n    \u003c/template\u003e\n    \u003cscript\u003eexport default { name: 'app' }\u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    header {\n        background: linear-gradient(to bottom right, rgb(0, 193, 131),rgb(50, 72, 95));\n        padding: 1em;\n        margin-bottom: 1em;\n        text-align: center;\n        height: 300px;\n        color: #fff;\n    }\n    header h3 {\n        color: white;\n        font-weight: bold;\n        text-transform: uppercase;\n        float: left;\n    }\n    bar { padding: 20px; height: 48px; }\n    .monitor{\n        text-transform: uppercase;\n        float:right;\n        background-color: rgba(255, 255, 255, 0.2);\n        line-height: 23px;\n        border-radius: 25px;\n        width: 175px;\n        height: 48px;\n        margin: auto;\n    }\n    .monitor:hover, monitorText:hover { cursor:pointer; }\n    .monitorText{\n        width: 104px;\n        height: 23px;\n        font-weight: bold;\n        line-height: 50px;\n        font-size: 14px;\n    }\n    header h1 { padding-top: 80px; width: 80%; margin: auto; }\n    header h2{ padding-top:20px; }\n    \u003c/style\u003e\n```\n\nThat is all for the intro component.\n\n### The current component\nIn the `Current.vue` component, we’ll write some HTML that displays the prices in realtime as they are updated. Open the file and paste the following inside the file:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch2\u003eCurrent prices of coins\u003c/h2\u003e\n        \u003cdiv id=\"btc\" class=\"currency\"\u003e\n          \u003clabel\u003e1 BTC\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.BTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"eth\"class=\"currency\"\u003e\n          \u003clabel\u003e1 ETH\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.ETH}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"ltc\"class=\"currency\"\u003e\n          \u003clabel\u003e1 LTC\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nBelow the `template` tags, we will have the `script` tag. This will be where we will handle the scripting of the component. Below the `template` tag in the same file, paste the following code:\n\n```\n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      props: {\n        currentCurrency: { type: Object }\n      }, \n      data () {\n        return {}\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe script above specifies the `props` the `Current` component should expect. It will be getting it, `currentCurrency`, from the parent component `App.vue`.\n\nLastly, below the `script` tag, let’s include the `style` for the component. Paste the following code after the `script` tag:\n\n```\n    \u003cstyle scoped\u003e\n    .currency {\n      border: 1px solid #F5CE00;\n      border-radius: 15px;\n      padding: 2em 0em;\n      display: inline-block;\n      width: 30%;\n    }\n    div p { font-size: 2rem; }\n    h2 { font-size: 1.5em; }\n    \u003c/style\u003e\n```\n\nThat’s all for the `Current` component.\n\n### The previous component\nThis component should display the prices of coins in the past, five days at most. We’ll also display the dates of each of the days.\n\nInside the `Previous.vue` file paste the following code:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch2\u003ePrevious prices of coins\u003c/h2\u003e\n        \u003cdiv id=\"first\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.yesterday.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.yesterday.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.yesterday.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.yesterday.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"second\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.twoDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.twoDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.twoDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.twoDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"third\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.threeDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.threeDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.threeDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.threeDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"fourth\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.fourDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.fourDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.fourDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.fourDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"fifth\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.fiveDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.fiveDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.fiveDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.fiveDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nIn the `script` section, we’ll be receiving the `previousCurrency` object from the parent component, `App.vue`. In the same file paste the following code after the `template` tag:\n\n```\n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      props: {\n        previousCurrency: { type: Object }\n      },\n      data () {\n        return {}\n      }\n    }\n    \u003c/script\u003e\n```\n\nLastly, some styles to help things stay pretty:\n\n```\n    \u003cstyle scoped\u003e\n    #first, #second, #third, #fourth, #fifth {\n      border: 1px solid #F5CE00;\n      padding: 2em 0em;\n      max-width: 90%;\n      margin: 3px auto;\n    }\n    #first p, #second p, #third p, #fourth p, #fifth p {\n      display: inline-block;\n      padding: 0em 1.5em;\n      font-size: 1.5rem;\n    }\n    h2 { font-size: 1.5em; }\n    \u003c/style\u003e\n```\n\nThat’s pretty much all the business we have with the three components, they are pretty straightforward. Most of the complexity and app logic are buried in the root component, `App.vue`. Let’s explore that next.\n\n### Setting up the root component\n\nThe root component is included by default in every fresh Vue installation in the `src/App.vue` file, so we don’t need to create it. Unlike the other components we created earlier, the root component holds the logic and is more complex than them. \n\nWe’ll keep the `template` tag of the root component simple. We include the earlier components, `Intro.vue`, `Current.vue`, and `Previous.vue`, as custom tags and pass in the appropriate `props`.\n\nIn the `App.vue` file, replace the contents with the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003cintro\u003e\u003c/intro\u003e\n        \u003cdiv id=\"body\"\u003e\n          \u003cdiv id=\"current\"\u003e\n            \u003ccurrent v-bind:currentCurrency=\"currentCurrency\"\u003e\u003c/current\u003e\n          \u003c/div\u003e\n          \u003cdiv id=\"previous\"\u003e\n            \u003cprevious v-bind:previousCurrency=\"previousCurrency\"\u003e\u003c/previous\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nNext, let’s add some `script` and start adding logic in the `script` section. Paste the following below the `template` tag:\n\n```\n    \u003cscript\u003e\n    import Intro from './components/Intro.vue';\n    import Current from './components/Current.vue';\n    import Previous from './components/Previous.vue';\n    \n    export default {\n      name: 'app',\n      components: {Intro, Current, Previous},\n      data() {\n        return {\n          currentCurrency: {BTC: '', ETH: '', LTC: ''},\n          previousCurrency: {\n            yesterday: {}, twoDays: {}, threeDays: {}, fourDays: {}, fiveDays: {}\n          }\n        }\n      },\n      methods: {\n        // Stub\n      },\n      created() {\n        // Stub\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe script above does not do much but it sets the stage for our logic. We have set all the defaults for the `data` we will be using in the application and we have defined the `created` method that is called automatically during Vue’s component lifecycle. We also imported the components we will be using in the application.\n\nBefore we start adding script logic, let’s add some style for the root component. Below the `script` tag, paste the following code:\n\n```\n    \u003cstyle\u003e\n    @import url('https://fonts.googleapis.com/css?family=Lato');\n    * {\n      margin : 0px;\n      padding : 0px;\n      font-family: 'Lato', sans-serif;\n    }\n    body { height: 100vh; width: 100%; }\n    .row { display: flex; flex-wrap: wrap; }\n    h1 { font-size: 48px; }\n    a { color: #FFFFFF; text-decoration: none; }\n    a:hover { color: #FFFFFF; }\n    a:visited { color: #000000; }\n    .button {\n      margin: auto;\n      width: 200px;\n      height: 60px;\n      border: 2px solid #E36F55;\n      box-sizing: border-box;\n      border-radius: 30px;\n    }\n    #body {\n      max-width: 90%;\n      margin: 0 auto;\n      padding: 1.5em;\n      text-align: center;\n      color:rgb(0, 193, 131);\n    }\n    #current { padding: 2em 0em; }\n    #previous { padding: 2em 0em; }\n    \u003c/style\u003e\n```\n\n### Adding methods to our root component\n\nWe need to populate the `method` object with actual methods. We’ll start by defining the methods that will retrieve coin prices for previous days.\n\n### Pulling in dependencies\nSince we are getting data from a remote API, we need an HTTP client to pull in the data for us. In this article, we’ll be using the promise based HTTP client [axios](https://github.com/axios/axios) to make our HTTP requests. We also need [moment](https://momentjs.com/) to easily work with dates.\n\nTo add Axios and Moment.js to our project, run the following command in your terminal:\n\n```\n    npm install --save vue-axios axios vue-momentjs moment\n```\n\n\u003e 💡  `vue-axios` and `vue-momentjs` are Vue wrappers around the Axios and Moment.js packages.\n\nWhen the installation is complete, we will globally import the packages to our application. Open the `src/main.js` file and in there replace:\n\n```\n    import App from './App'\n```\n\nwith:\n\n```\n    import App from './App'\n    import moment from 'moment';\n    import VueMomentJS from 'vue-momentjs';\n    import axios from 'axios'\n    import VueAxios from 'vue-axios'\n     \n    Vue.use(VueAxios, axios)\n    Vue.use(VueMomentJS, moment);\n```\n\n### Building the methods logic\nNext, we want to go back to our root component and build out the `methods` object. In the `methods` object, let’s create the first method. Paste the following code inside the `methods` object in the `App.vue` file:\n\n```\n    _fetchDataFor: (key, daysAgo) =\u003e {\n      var date = this.$moment().subtract(daysAgo, 'days').unix()\n      let fetch = (curr, date) =\u003e this.axios.get(`https://min-api.cryptocompare.com/data/pricehistorical?fsym=${curr}\u0026tsyms=USD\u0026ts=${date}`)\n      \n      this.axios\n          .all([fetch('BTC', date), fetch('ETH', date), fetch('LTC', date)])\n          .then(this.axios.spread((BTC, ETH, LTC) =\u003e {\n              this.previousCurrency[key] = {\n                  BTC: BTC.data.BTC.USD,\n                  LTC: LTC.data.LTC.USD,\n                  ETH: ETH.data.ETH.USD,\n                  DATE: this.$moment.unix(date).format(\"MMMM Do YYYY\"),\n              }\n              \n              localStorage.setItem(`${key}Prices`, JSON.stringify(this.previousCurrency[key]));\n          }))\n    },\n```\n\nThe method above is a helper method for fetching the coin exchange rate within a specified period and saving the response in `localStorage` and the `this.previousCurrency` object. We will use this later in the code.\n\nNext, paste the following function inside the `methods`  object alongside the one we added above:\n\n```\n    _fetchDataForToday: () =\u003e {\n      let url = 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD'\n      \n      this.axios.get(url).then(res =\u003e {\n        localStorage.setItem('BTC', this.currentCurrency.BTC = res.data.BTC.USD),\n        localStorage.setItem('ETH', this.currentCurrency.ETH = res.data.ETH.USD),\n        localStorage.setItem('LTC', this.currentCurrency.LTC = res.data.LTC.USD)\n      })\n    },\n```\n\nThe method above simply fetches the coin data for the current date and saves the response to `localStorage` and the `this.currentCurrency` object.\n\nNext, inside the `created()` method of the root component, paste in the following code:\n\n```\n    if ( ! navigator.onLine) {\n      this.currentCurrency = {\n        BTC: localStorage.getItem('BTC'),\n        ETH: localStorage.getItem('ETH'),\n        LTC: localStorage.getItem('LTC'),\n      }\n      \n      this.previousCurrency = {\n        yesterday: JSON.parse(localStorage.getItem('yesterdayPrices')),\n        twoDays:   JSON.parse(localStorage.getItem('twoDaysPrices')),\n        threeDays: JSON.parse(localStorage.getItem('threeDaysPrices')),\n        fourDays:  JSON.parse(localStorage.getItem('fourDaysPrices')),\n        fiveDays:  JSON.parse(localStorage.getItem('fiveDaysPrices'))\n      }\n    } else {\n      this._fetchDataFor('yesterday', 1)\n      this._fetchDataFor('twoDays', 2)\n      this._fetchDataFor('threeDays', 3)\n      this._fetchDataFor('fourDays', 4)\n      this._fetchDataFor('fiveDays', 5)\n      this._fetchDataForToday()\n    }\n```\n\nIn the code above, we have defined the code to fetch the current currency from `localStorage` if the client is offline. If the client is online though, it fetches the data from the API.\n\nEverything should be working now except the realtime functionality.\n\n![cryptocurrency-tracker-vue-draft](//images.contentful.com/1es3ne0caaid/70EsAUqmNqSogEYYgwg640/c70439aeb26fd7963309b4cfb39dce7f/cryptocurrency-tracker-vue-draft.png)\n\n### Integrating realtime functionality using Pusher\n\nNow that we have a functional application, we would like to add some realtime functionality so we see updates as they happen. \n\nWe will be using Pusher to provide this functionality, if you haven’t, create your Pusher application from the Pusher dashboard as you will need the: `app_id`, `key`, `secret` and `cluster`.\n\n#### Building a Node.js backend for our application\nWe need a backend server to trigger events to Pusher, we will be using Node.js to build the backend for this article.\n\nTo get started, create a new file in the root directory of our application and call it `server.js`.\nIn this `server.js` file, we’ll be using `Express` as the web framework so we need to pull that in. We’ll also pull in `axios`, `Pusher` and `body-parser` since we’d be making references to them in our code.\n\nIn your terminal type in the following command:\n\n```\n    $ npm install --save express axios body-parser pusher\n```\n\nWhen the installation is complete, open the `server.js` file and in the file paste in the following code:\n\n```\n    const express = require('express');\n    const path = require('path');\n    const bodyParser = require('body-parser');\n    const app = express();\n    const Pusher = require('pusher');\n    const axios = require('axios');\n    \n    \n    // Initialise Pusher\n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // Body parser middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // CORS middleware\n    app.use((req, res, next) =\u003e {\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        next()\n    });\n    \n    // Routes\n    app.get('/', _ =\u003e res.send('Welcome'));\n    \n    // Simulated Cron\n    setInterval(_ =\u003e {\n      let url = 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD';\n      \n      axios.get(url).then(res =\u003e {\n        pusher.trigger('price-updates', 'coin-updates', {coin: res.data})\n      })\n    }, 5000)\n    \n    // Start app\n    app.listen(8000, () =\u003e console.log('App running on port 8000!'));\n```\n\n\u003e 💡  You need to replace `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, and `PUSHER_APP_CLUSTER` with the details from your Pusher application dashboard.\n\nIn the Express app above, we import our dependencies and then instantiate Pusher. We then register some middleware including the [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) middleware so we don’t get cross origin request errors.\n\nNext, we have a “Simulated Cron” that runs after 5 seconds. The job is to fetch the updates from the server and send the updates to Pusher. Our Vue application can then subscribe to the Pusher channel, pull the changes and display them.\n\nFinally, we tell the Node app to listen on port **8000**. To start the Node server, run the command below:\n\n```\n    $ node server.js \n```\n\nThis will start a Node server and the simulated cron will start running and sending events to Pusher.\n\n## Creating an API proxy\n\nTo access our API server from the Vue application, we can create a proxy in `config/index.js` and run the dev server and the API backend side-by-side. All requests to `/api` in our frontend code will be proxied to the backend server.\n\nOpen the `config/index.js` and make the following modifications:\n\n```\n    // config/index.js\n    module.exports = {\n      // ...\n      dev: {\n        // ...\n        proxyTable: {\n            '/api': {\n            target: 'http://localhost:8000',\n            changeOrigin: true,\n            pathRewrite: {\n              '^/api': ''\n            }\n          }\n        },\n        // ...\n      }\n    }\n```\n\nIn the `proxyTable` we attempt to proxy requests from `/api` to `localhost:8000`. \n\n### Using Pusher in our Vue.js application\nTo use `Pusher` on the client side of our application we need to pull in the `pusher-js`. Run the following command in your terminal:\n\n```\n    $ npm install --save pusher-js\n```\n\nWhen the installation is complete, we will import `pusher-js` to the root component. Within the `script` tag add the following at the top:\n\n```\n    import Pusher from 'pusher-js'\n```\n\nNext we will initialize Pusher with the app credentials from the Pusher dashboard and subscribe to a channel in the `created()` life cycle hook. Open the `App.vue` and add this to the bottom of the `created()` method in the `else` block:\n\n```\n    let pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    let channel = pusher.subscribe('price-updates');\n    \n    channel.bind('coin-updates', data =\u003e {\n      this.currentCurrency = {\n        BTC: data.coin.BTC.USD, \n        ETH: data.coin.ETH.USD, \n        LTC: data.coin.LTC.USD\n      }\n    });\n```\n\nIn the code above, we subscribe to receive updates on the `price-updates` channel. Then we bind to the `coin-updates` event on the channel. When the event is triggered, we get the data and update the `currentCurrency`.\n\nThat’s all now. You can build the application by running the command below:\n\n```\n    $ npm run dev\n```\n\nThis should start and open the Vue PWA on your browser. To make sure you receive updates, make sure your Node server is running. \n\n![cryptocurrency-watcher-vue-demo](//images.contentful.com/1es3ne0caaid/4beBtBCJjqiWK4GKa0Mw0i/13f64db1b24726b8b3e19ccb17aa92a6/cryptocurrency-watcher-vue-demo.gif)\n\n## Using service workers and offline capability\n\nAs it is, the application already functions but is not a PWA in true sense of the term. So let us work on making the application a PWA with offline storage. The build process already automatically generates the service worker when the application is built so let’s build the application. Run the following command to build the application:\n\n```\n    $ npm run build\n```\n\nThis command creates a `dist` folder in our working directory and also registers a new service worker. Let’s serve this `dist` directory and take a peek at the generated service worker in a Chrome web browser.\n\nWe’ll serve this application using an NPM package called [Serve](https://www.npmjs.com/package/serve). Run the following command to install it:\n\n```\n    $ npm i serve -g\n```\n\nWhen the installation is complete, we will use the package to serve the application. Run the following command to serve the application:\n\n```\n    $ serve dist\n```\n\nWe should get an output that looks like this:\n\n\n![cryptocurrency-tracker-vue-output](//images.contentful.com/1es3ne0caaid/5D35dFM7PGssemAeMO0IcS/2563dfc1d3b90732117be8babc5ae2d0/cryptocurrency-tracker-vue-output.png)\n\n\nIf we navigate to this address `http://localhost:5000` on our web browser, we’d see our application as it was the last time, no obvious changes except for the fact that the app is now a PWA.\n\nWe can inspect this feature by opening the browser’s dev tools and clicking on the “Application” tab. Here’s what we should see:\n\n\n![cryptocurrency-tracker-vue-service-workers](//images.contentful.com/1es3ne0caaid/1V3EsE6wwoicCOo6KQgiG0/35da6aa92c35a46419c58dacb08b7a3a/cryptocurrency-tracker-vue-service-workers.png)\n\n\nOur app registered a service worker that caches the app shell on the first run, thanks to the Vue PWA template.\n\n\n\u003e 💡  An application shell (or app shell) refers to the local resources that your web app needs to load the skeleton of your user interface (UI). Think of your app's shell like the bundle of code you would publish to a native app store when building a native app.\n\n\n## Conclusion\n\nIn this tutorial, we have seen how to write a simple realtime PWA with Vue.js, Pusher and Service Workers. We also saw how to cache dynamic values from a remote API using the Web Storage API’s storage object. There is a lot more you can do with PWAs and Vue, but this is a good introduction so far.","metaTitle":"Build a cryptocurrency tracker using Vue.js","metaDescription":"In this tutorial, learn how to build a realtime cryptocurrency tracker using Progressive Web Apps, Vue.js, Node.js and and Service Workers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1W0o3xrMZWMK4SuGQUAIo","type":"Entry","createdAt":"2018-02-28T11:57:19.883Z","updatedAt":"2018-02-28T11:57:19.883Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime map using Kotlin","url":"realtime-map-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-map-example-kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-09","description":"In this tutorial, you will learn how to build a realtime map using Kotlin, Node.js and Google Maps API.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"Just as the name implies, the aim of this article is to show the realtime movement of a marker on a map. This feature is common in location tracking applications. We see taxi apps and food ordering apps making use of features like this. Google provides an extremely easy map API, which we will take advantage of, while the realtime functionalities will be taken care of by Pusher. \n\n## What we will build\n\nWe will build an application that will receive coordinates from the server based on the initial coordinates we inject into it. When these coordinates are received, we update the map on our app.\n\n![realtime-map-kotlin-demo](//images.contentful.com/1es3ne0caaid/5u93CRuILe084MwgCgwym6/e3ad9d2c35219aa3f3c2820d3f8fae3d/realtime-map-kotlin-demo.gif)\n\n## Requirements\n\nFor this tutorial, we need the following:\n- [Android studio](https://developer.android.com/studio/archive.html) - version 3.0.1 or higher is recommended.\n- [Node JS](https://nodejs.org/) and npm installed on your machine.\n- A [Pusher](https://dashboard.pusher.com) application.\n- [Google Maps API key](https://developers.google.com/maps/documentation/android-api/signup).\n- An Android device with Google Play Services installed.\n\n## Building our server\n\nWe will build our server using Node JS. The server will generate random coordinates for us. To start with, create a new folder. Inside it, create a new file named `package.json` and paste this:\n\n```\n    {\n        \"main\": \"index.js\",\n        \"dependencies\": {\n            \"body-parser\": \"^1.16.0\",\n            \"express\": \"^4.14.1\",\n            \"pusher\": \"^1.5.1\"\n        }\n    }\n```\n\nNext, create file called `index.js` in the root directory and paste this:\n\n```\n    // Load the required libraries\n    let Pusher = require('pusher');\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    \n    // initialize express and pusher\n    let app = express();\n    let pusher = new Pusher(require('./config.js'));\n    \n    // Middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Generates 20 simulated GPS coords and sends to Pusher\n    app.post('/simulate', (req, res, next) =\u003e {\n      let loopCount = 0\n      let operator  = 0.001000  \n      let longitude = parseFloat(req.body.longitude)\n      let latitude  = parseFloat(req.body.latitude)\n    \n      let sendToPusher = setInterval(() =\u003e {\n        loopCount++;\n    \n        // Calculate new coordinates and round to 6 decimal places...\n        longitude = parseFloat((longitude + operator).toFixed(7))\n        latitude  = parseFloat((latitude - operator).toFixed(7))\n    \n        // Send to pusher\n        pusher.trigger('my-channel', 'new-values', {longitude, latitude})\n    \n        if (loopCount === 20) {\n          clearInterval(sendToPusher)\n        }\n      }, 2000);\n      \n      res.json({success: 200})\n    })\n    \n    // Index\n    app.get('/', (req, res) =\u003e res.json(\"It works!\"));\n    \n    // Serve app\n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'));\n```\n\nThe code above is an Express application. In the `/simulate` route, we are simulating longitude and latitude values and then sending them to Pusher. These will then be picked by our application. \n\n\u003e 💡 The longitude and latitude values will typically be obtained from the device being tracked in a real-life scenario.\n\nFinally, we will create the configuration file, named `config.js`. Paste this snippet there:\n\n```\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n    };\n```\n\nReplace the values there with the keys from your Pusher dashboard. Then install the modules needed by our server by running this command in the root directory:\n\n```\n    $ npm install\n```\n\nOur server should be up and running on port **4000**.\n\n\n## Building our realtime map in Android Studio\n\n### Create a new Android project\nOpen Android studio and create a new project. Enter your application details, include Kotlin support, choose a minimum SDK (this should not be less than API 14), choose an Empty Activity, and finish the process. Here is a quick GIF of the process:\n\n![realtime-map-kotlin-create-project](//images.contentful.com/1es3ne0caaid/1VNHmrSYbuOCuWUGMsQS4i/97fc57e24e9d9bfce38468218383b651/realtime-map-kotlin-create-project.gif)\n\n### Adding app dependencies\nThis demo has several dependencies. We need the Pusher dependency for realtime functionality, the Google Maps API for easy integration of maps into our app, and Retrofit to access our server with ease. \n\nOpen your app-module `build.gradle` file and paste the following dependencies:\n\n```\n    // Pusher dependency\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n    \n    // Google maps API\n    implementation 'com.google.android.gms:play-services-maps:11.8.0'\n    \n    // Retrofit dependencies\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nSync your Gradle files so that the libraries can be downloaded and made available.\n\n### Building our layout\nOpen the `activity_main.xml` and paste this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\u003e\n        \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:tools=\"http://schemas.android.com/tools\"\n            android:layout_marginTop=\"50dp\"\n            android:id=\"@+id/map\"\n            android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            tools:context=\"com.example.mapwithmarker.MapsMarkerActivity\" /\u003e\n        \u003cButton\n            android:id=\"@+id/simulateButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Simulate\" /\u003e\n    \n    \u003c/FrameLayout\u003e\n```\n\nIn the snippet above, we have a fragment which will hold our map and a button.\n\n### Setting up Google Maps API key\nIt is expected that at this point, you have obtained your API key. You can follow the steps [here](https://developers.google.com/maps/documentation/android-api/signup) to get it. We now want to configure the application with our key. Open your `strings.xml` file and paste it in. This is located at `name-of-project/app/src/main/res/values`:\n\n```\n    \u003cresources\u003e\n        \u003c!-- ... --\u003e\n        \u003cstring name=\"google_maps_key\"\u003eGOOGLE_MAPS_KEY\u003c/string\u003e\n    \u003c/resources\u003e\n```\n\n\u003e ⚠️  Replace the `GOOGLE_MAPS_KEY` placeholder with the actual key from Google.\n\nThis file contains all strings used during the development of the application. All raw strings within the app are kept here. It is required when there is a need to translate your app into multiple languages.\n\nNext, open the `AndroidManifest.xml` file and paste these under the `\u003capplication\u003e` tag:\n\n```\n    \u003cmeta-data\n        android:name=\"com.google.android.gms.version\"\n        android:value=\"@integer/google_play_services_version\" /\u003e\n    \u003cmeta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"@string/google_maps_key\" /\u003e\n```\n\nWith this, our app knows how and where to fetch our key.\n\n### Setting up Retrofit\nWe already have Retrofit available as a dependency, but we need two more things - an interface to show endpoints/routes to be accessed and our retrofit object. First create a new Kotlin file name `ApiInterface.kt` and paste this:\n\n```\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.POST\n    \n    interface ApiInterface {\n        @POST(\"/simulate\")\n        fun sendCoordinates(@Body coordinates: RequestBody): Call\u003cString\u003e\n    }\n```\n\nSince we will make just one request in this demo, we will limit the scope of our Retrofit object to the `MainActivity.kt` class. This means we will create a function within a class for it. Paste this function into the class:\n\n```\n    fun getRetrofitObject(): ApiInterface {\n        val httpClient = OkHttpClient.Builder()\n        val builder = Retrofit.Builder()\n                .baseUrl(\"http://10.0.3.2:4000/\")\n                .addConverterFactory(ScalarsConverterFactory.create())\n    \n        val retrofit = builder\n                .client(httpClient.build())\n                .build()\n        return retrofit.create(ApiInterface::class.java)\n    }\n```\n\nI used a Genymotion emulator and the recognized localhost address for it is `10.0.3.2`.\n\nAdd the internet permission to the `AndroidManifest.xml` file:\n\n```\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\n### Configuring our map and getting realtime updates\nFor us to initialize and use the map, our the `MainActivity.kt` class must implement the `OnMapReadyCallback` interface and override the `onMapReady` method. We also need to setup Pusher to listen to events and receive the simulated coordinates in realtime. Open your `MainActivity.kt` and paste this:\n\n```\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.util.Log\n    import com.google.android.gms.maps.*\n    import com.google.android.gms.maps.model.MarkerOptions\n    import com.google.android.gms.maps.model.LatLng\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import okhttp3.MediaType\n    import okhttp3.OkHttpClient\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    import okhttp3.RequestBody\n    import com.google.android.gms.maps.model.CameraPosition\n    import com.google.android.gms.maps.model.Marker\n    \n    class MainActivity : AppCompatActivity(), OnMapReadyCallback {\n        private lateinit var markerOptions:MarkerOptions\n        private lateinit var marker:Marker\n        private lateinit var cameraPosition:CameraPosition\n        var defaultLongitude = -122.088426\n        var defaultLatitude  = 37.388064\n        lateinit var googleMap:GoogleMap\n        lateinit var pusher:Pusher\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            markerOptions = MarkerOptions()\n            val latLng = LatLng(defaultLatitude,defaultLongitude)\n            markerOptions.position(latLng)\n            cameraPosition = CameraPosition.Builder()\n                    .target(latLng)\n                    .zoom(17f).build()\n    \n        }\n    \n        override fun onMapReady(googleMap: GoogleMap?) {\n            this.googleMap = googleMap!!\n            marker = googleMap.addMarker(markerOptions)\n            googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n        }\n    }\n```\n\nWe first created some class variables to hold our initial coordinates and other map utilities like the camera position and the marker position. We initialized them in the `onCreate` function. Next, we added a click listener to the simulate button. \n\nThe next thing to do is still in the `MainActivity.kt` class. In the `onCreate` method, paste this:\n\n```\n    simulateButton.setOnClickListener {\n        callServerToSimulate()\n    }\n```\n\nWhen the button is clicked, it calls the `callServerToSimulate` function. Create a function `callServerToSimulate` within the class like this:\n\n```\n    private fun callServerToSimulate() {\n        val jsonObject = JSONObject()\n        jsonObject.put(\"latitude\",defaultLatitude)\n        jsonObject.put(\"longitude\",defaultLongitude)\n    \n        val body = RequestBody.create(\n            MediaType.parse(\"application/json\"), \n            jsonObject.toString()\n        )\n    \n        getRetrofitObject().sendCoordinates(body).enqueue(object:Callback\u003cString\u003e{\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                Log.d(\"TAG\",response!!.body().toString())\n            }\n    \n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                Log.d(\"TAG\",t!!.message)\n            }\n        })\n    }\n```\n\nIn this function, we sent our initial coordinates to our server. The server then generates twenty coordinates similar to the initial ones sent and uses Pusher to send them to channel `my-channel`, firing the `new-values` event.\n\nNext, we create and initialize a `SupportMapFragment` object with the view ID of the map:\n\n```\n    val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\n    mapFragment.getMapAsync(this)\n    setupPusher()\n```\n                \nNext add the the `setupPusher` function to the class and it should looks like this:\n\n```\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(PUSHER_CLUSTER)\n        pusher = Pusher(PUSHER_API_KEY, options)\n    \n        val channel = pusher.subscribe(\"my-channel\")\n    \n        channel.bind(\"new-values\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val lat:Double = jsonObject.getString(\"latitude\").toDouble()\n            val lon:Double = jsonObject.getString(\"longitude\").toDouble()\n    \n            runOnUiThread {\n                val newLatLng = LatLng(lat, lon)\n                marker.position = newLatLng\n                cameraPosition = CameraPosition.Builder()\n                        .target(newLatLng)\n                        .zoom(17f).build()\n                googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n            }\n        }\n    }\n```\n\nWe initialized Pusher here and listened for coordinate updates. When we receive any update, we update our marker and move the camera view towards the new point. You are expected to replace the Pusher parameters with the keys and details found on your Pusher dashboard.\n\nWe then call the disconnect and connect functions in the `onPause` and `onResume` functions respectively in the class. These functions are inherited from the parent class `AppCompatActivity`:\n\n```\n    override fun onResume() {\n        super.onResume()\n        pusher.connect()\n    }\n    \n    override fun onPause() {\n        super.onPause()\n        pusher.disconnect()\n    }\n```\n\n## Conclusion\n\nWe have been able to leverage the power of Pusher, Kotlin and Google Maps API to create a realtime location tracking app. Hopefully you have picked up a thing or two from the tutorial and can use the knowledge to build beautiful realtime apps using Pusher and Kotlin.","metaTitle":"Build a realtime map using Kotlin","metaDescription":"The intersection of geolocation and technology has become a very important part of our live. This tutorial is going to help your on how you can create a live map with Kotlin and Node.js."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"40"}}},"page":"/tutorials","query":{"page":"40"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=40 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:01 GMT -->
</html>