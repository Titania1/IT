<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=23 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:39:13 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">224</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/anonymous-chat-javascript.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an anonymous chat app in JavaScript</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build an anonymous chat app using Vanilla JavaScript and Node.js, and Pusher for realtime features.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/anonymous-chat-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an anonymous chat app in React Native</h3><p class="css-k12xad e5jrto45">Creating a simple anonymous chat app for Android devices using React Native and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/graph-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Realtime Chart</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime graph using JavaScript</h3><p class="css-k12xad e5jrto45">Building realtime graph line chart to display live weather updates and temperature changes in London, UK. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/group-chat-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a group chat app in JavaScript</h3><p class="css-k12xad e5jrto45">The app will feature the number of users in the group, notifications when a new user joins the group and finally, displa...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/read-receipts-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build read receipts using Laravel</h3><p class="css-k12xad e5jrto45">Create a read receipts system that updates in realtime using Laravel and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Live Counter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using JavaScript</h3><p class="css-k12xad e5jrto45">Create a realtime vote counter for your website with Pusher and plain JavaScript. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-chart-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Realtime Chart</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime chart using Laravel</h3><p class="css-k12xad e5jrto45">Build a realtime bar chart which will show the current active users without reloading the page using Laravel and Vue.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-network-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a simple social network with JavaScript</h3><p class="css-k12xad e5jrto45">Build an app similar to a group chat room where you can see who&#x27;s online and their latest status update in realtime. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-note-app-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a collaborative note app using Laravel</h3><p class="css-k12xad e5jrto45">Build a simple but productive realtime note app using Laravel and Vue.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialse15a.html?product=Channels&amp;tag=JavaScript&amp;page=22" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials013b.html?product=Channels&amp;tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials17a7.html?product=Channels&amp;tag=JavaScript&amp;page=21" class="css-za1ua3 edg0byb1">21</a><a href="tutorialse15a.html?product=Channels&amp;tag=JavaScript&amp;page=22" class="css-za1ua3 edg0byb1">22</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials1e65.html?product=Channels&amp;tag=JavaScript&amp;page=23" class="css-2wakph edg0byb1">23</a><a href="tutorials52bd.html?product=Channels&amp;tag=JavaScript&amp;page=24" class="css-5s6711 edg0byb1">24</a><a href="tutorials959a.html?product=Channels&amp;tag=JavaScript&amp;page=25" class="css-5s6711 edg0byb1">25</a><a href="tutorials52bd.html?product=Channels&amp;tag=JavaScript&amp;page=24" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":224,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6wvXas2zNmiayye4GqWKEY","type":"Entry","createdAt":"2018-02-22T15:02:43.772Z","updatedAt":"2019-01-02T15:23:36.011Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an anonymous chat app in JavaScript","url":"anonymous-chat-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6AoCDqsg00U2ueqoaGSCWu","type":"Entry","createdAt":"2018-02-20T14:11:52.427Z","updatedAt":"2018-02-22T15:36:01.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Peter Mbanugo","url":"peter-mbanugo","email":"chuksgerrard@yahoo.com","twitter":"https://twitter.com/p_mbanugo","github":"https://github.com/pmbanugo","guestWriter":true}}],"projectRepo":"https://github.com/pmbanugo/Pusher-Anonymous-Chat-App","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-05-03","description":"Build an anonymous chat app using Vanilla JavaScript and Node.js, and Pusher for realtime features.","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"We're all familiar with instant messaging and using it to chat to people in realtime. Sometimes, though, we might want an app which allows us to send messages anonymously to friends, or to chat anonymously with strangers in close proximity. An example of such an app is [Truth](https://itunes.apple.com/us/app/truth-be-honest/id791407399), which lets you talk with people on your contact list without disclosing your identity.\n\nIn this tutorial, I'll be showing you how to build a public anonymous chat app in JavaScript (using Node.js and Express on the server, and VanillaJS on the client) and Pusher. Pusher allows us to build scalable and reliable realtime applications, and since we need realtime delivery of chat messages, this is a key component of the chat app. The image below depicts what we will be building:\n\n![anonymous-chat-javascript-demo](//images.contentful.com/1es3ne0caaid/3MsbNgKragMAwsu4AKeu2I/ff002e071de6db79244fd6c35e3ce9e6/anonymous-chat-javascript-demo.gif)\n\n## Getting Started\n\nLet's kick off by [signing up for a free Pusher account](https://pusher.com/signup) (or logging in if you already have one). Once you're logged in, create a new Pusher app from the [dashboard](https://dashboard.pusher.com/) and make a note of your App ID, Key and Secret, which are unique to an app.\n\nTo create a new Pusher app, click the **Your apps** side menu, then click the **Create a new app** button below the drawer. This brings up the setup wizard.\n\n1. Enter a name for the application. In this case I’ll call it “chat”.\n2. Select a cluster.\n3. Select the option “Create app for multiple environments” if you want to have different instances for development, staging and production.\n4. Select **Vanilla JS** as the frontend and **Node.js** as the backend.\n5. Complete the process by clicking `Create App` button to set up your app instance.\n\n![anonymous-chat-javascript-create-app](//images.contentful.com/1es3ne0caaid/8tIKRhFoCA68aY0i6OIoq/f8b12846e37b8064e60dbc65ee93ded2/anonymous-chat-javascript-create-app.png)\n\n## Code-up the server\n\nWe need a backend which will serve our static files and also accept messages from a client and then broadcast to other connected clients through Pusher. Our backend will be written in Node.js, so we need to set it up.\n\nWe need a `package.json` file, and I'll add it by running the command below. I'll use the defaults provided by hitting enter for every prompt.\n\n\u003e $ npm init\n\nWith the `package.json` file added, I'll install **Express**, **body-parser**, and **Pusher** npm packages. Run the following command\n\n\u003e $ npm install --save pusher express body-parser\n\nWith these packages installed, let's add a new file called `server,js` with the following content\n\n```\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar Pusher = require('pusher');\n\nvar app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\nvar pusher = new Pusher({ appId: \"APP_ID\", key: \"APP_KEY\", secret:  \"APP_SECRET\", cluster: \"APP_CLUSTER\" });\n\napp.post('/message', function(req, res) {\n  var message = req.body.message;\n  pusher.trigger( 'public-chat', 'message-added', { message });\n  res.sendStatus(200);\n});\n\napp.get('/',function(req,res){      \n     res.sendFile('/public/index.html', {root: __dirname });\n});\n\napp.use(express.static(__dirname + '/public'));\n\nvar port = process.env.PORT || 5000;\napp.listen(port, function () {\n  console.log(`app listening on port ${port}!`)\n});\n```\nWith the code above, we have defined an end-point `/message` which will be used by the client to send in the message it wants to send to another client through Pusher. The other routes are used to serve the static files which we will add later.\n\n\u003e Replace the placeholder strings App ID, Secret and Key with the values from your Pusher dashboard.\n\nAdd this statement `\"start\": \"node server.js\"` in the **script** property of our `package.json` file. This will allow us start the server when we run **npm start**\n\n## Building the frontend\n\nMoving on to the frontend, let's add a new folder called **public**. This folder will contain our page and JavaScript files. Add a new file called **style.css** with the content below, which will hold our style definition for the page.\n\n```\n@import url(\"http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css\");\n.chat\n{\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n.chat li\n{\n    margin-bottom: 10px;\n    padding-bottom: 5px;\n    border-bottom: 1px dotted #B3A9A9;\n}\n\n.chat li.left .chat-body\n{\n    margin-left: 60px;\n}\n\n.chat li.right .chat-body\n{\n    margin-right: 60px;\n}\n\n\n.chat li .chat-body p\n{\n    margin: 0;\n    color: #777777;\n}\n\n.panel .slidedown .glyphicon, .chat .glyphicon\n{\n    margin-right: 5px;\n}\n\n.body-panel\n{\n    overflow-y: scroll;\n    height: 250px;\n}\n\n::-webkit-scrollbar-track\n{\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n    background-color: #F5F5F5;\n}\n\n::-webkit-scrollbar\n{\n    width: 12px;\n    background-color: #F5F5F5;\n}\n\n::-webkit-scrollbar-thumb\n{\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n    background-color: #555;\n}\n```\nAdd another file called **index.html** with the markup below.\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n    \u003c!-- Latest compiled and minified CSS --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- Optional theme --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n\n    \u003cscript\n        src=\"https://code.jquery.com/jquery-2.2.4.min.js\"\n        integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\"\n        crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n\n    \u003c!-- Latest compiled and minified JavaScript --\u003e\n    \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n\n    \u003clink rel=\"stylesheet\" href=\"style.css\"\u003e\n    \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"index.js\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row form-group\"\u003e\n        \u003cdiv class=\"col-xs-12 col-md-offset-2 col-md-8 col-lg-8 col-lg-offset-2\"\u003e\n            \u003cdiv class=\"panel panel-primary\"\u003e\n                \u003cdiv class=\"panel-heading\"\u003e\n                    \u003cspan class=\"glyphicon glyphicon-comment\"\u003e\u003c/span\u003e Anonymous Chat\n                    \u003cdiv class=\"btn-group pull-right\"\u003e\n                        \u003cbutton type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\" data-toggle=\"dropdown\"\u003e\n                            \u003cspan class=\"glyphicon glyphicon-chevron-down\"\u003e\u003c/span\u003e\n                        \u003c/button\u003e\n                        \u003cul class=\"dropdown-menu slidedown\"\u003e\n                            \u003cli\u003e\u003ca href=\"http://www.jquery2dotnet.com\"\u003e\u003cspan class=\"glyphicon glyphicon-refresh\"\u003e\n                            \u003c/span\u003eRefresh\u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca href=\"http://www.jquery2dotnet.com\"\u003e\u003cspan class=\"glyphicon glyphicon-ok-sign\"\u003e\n                            \u003c/span\u003eAvailable\u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca href=\"http://www.jquery2dotnet.com\"\u003e\u003cspan class=\"glyphicon glyphicon-remove\"\u003e\n                            \u003c/span\u003eBusy\u003c/a\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca href=\"http://www.jquery2dotnet.com\"\u003e\u003cspan class=\"glyphicon glyphicon-time\"\u003e\u003c/span\u003e\n                                Away\u003c/a\u003e\u003c/li\u003e\n                            \u003cli class=\"divider\"\u003e\u003c/li\u003e\n                            \u003cli\u003e\u003ca href=\"http://www.jquery2dotnet.com\"\u003e\u003cspan class=\"glyphicon glyphicon-off\"\u003e\u003c/span\u003e\n                                Sign Out\u003c/a\u003e\u003c/li\u003e\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"panel-body body-panel\"\u003e\n                    \u003cul class=\"chat\"\u003e\n\n                    \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"panel-footer clearfix\"\u003e\n                    \u003ctextarea id=\"message\" class=\"form-control\" rows=\"3\"\u003e\u003c/textarea\u003e\n                    \u003cspan class=\"col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-xs-12\" style=\"margin-top: 10px\"\u003e\n                        \u003cbutton class=\"btn btn-warning btn-lg btn-block\" id=\"btn-chat\"\u003eSend\u003c/button\u003e\n                    \u003c/span\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cscript id=\"new-message-other\" type=\"text/template\"\u003e\n    \u003cli class=\"left clearfix\"\u003e\n        \u003cspan class=\"chat-img pull-left\"\u003e\n            \u003cimg src=\"http://placehold.it/50/55C1E7/fff\u0026text=U\" alt=\"User Avatar\" class=\"img-circle\" /\u003e\n        \u003c/span\u003e\n        \u003cdiv class=\"chat-body clearfix\"\u003e\n            \u003cp\u003e\n                {{body}}\n            \u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/li\u003e\n\u003c/script\u003e\n\n\u003cscript id=\"new-message\" type=\"text/template\"\u003e\n    \u003cli id=\"{{id}}\" class=\"right clearfix\"\u003e\n        \u003cdiv class=\"chat-body clearfix\"\u003e\n            \u003cp\u003e\n                {{body}}\n            \u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/li\u003e\n\u003c/script\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n```\nI'm using a template from [bootsnipp](http://bootsnipp.com/snippets/6eWd) which has been slightly modified to display just the name and message.\n\nAdd a new file called **index.js** with the content below. Remember to add the Pusher app details:\n\n```\n$(document).ready(function(){    \n    var pusher = new Pusher('APP_SECRET', {\n        cluster: 'APP_CLUSTER',\n        encrypted: false\n    });\n\n    let channel = pusher.subscribe('public-chat');\n    channel.bind('message-added', onMessageAdded);\n\n    $('#btn-chat').click(function(){\n        const message = $(\"#message\").val();\n        $(\"#message\").val(\"\");\n\n        $(\".chat\").append(template);\n\n        //send message\n        $.post( \"http://localhost:5000/message\", { message } );\n    });\n\n    function onMessageAdded(data) {\n        let template = $(\"#new-message\").html();\n        template = template.replace(\"{{body}}\", data.message);\n\n        $(\".chat\").append(template);\n    }\n});\n```\n\nWith the code in this file, we get the message to send from the page, and then call the server with the message. After that, we connect to Pusher by creating a new Pusher object with the App Secret and the Cluster that you set earlier.\n\nWe subscribe to a channel and an event named `message-added`. The channel is a public channel so it can be named any way you like. I've chosen to prefix mine with `public-` but that's just my own convention as there are no rules for a public channel. The difference between a public channel (which does not require client to be authenticated), and the other two, are that they're prefixed with `private-` and `presence-`.\n\nWe bind to the click event of the chat button on the page, then we retrieve the message from the textbox on the page, and then send it to the server with the username. With all we have setup, we can run start the app by running `npm start`. Here's a glimpse of how it works on my computer.\n\n![anonymous-chat-javascript-demo](//images.contentful.com/1es3ne0caaid/3MsbNgKragMAwsu4AKeu2I/ff002e071de6db79244fd6c35e3ce9e6/anonymous-chat-javascript-demo.gif)\n\n### Wrap Up\n\nThis is a  app to show how you can use Pusher to send messages in realtime. We built a public anonymous chat app that allows your website visitors to send anonymous messages to each other in realtime.","metaTitle":"Build an anonymous chat app in JavaScript","metaDescription":"In this tutorial you'll build a public anonymous chat app using Node.js and Express on the server, VanillaJS on the client, and Pusher for realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6pwPWIfFJYAI2oCosygqug","type":"Entry","createdAt":"2018-02-22T15:02:41.816Z","updatedAt":"2019-01-02T15:26:34.991Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an anonymous chat app in React Native","url":"anonymous-chat-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/android-pubchat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}}],"reviewDate":"2017-04-28","description":"Creating a simple anonymous chat app for Android devices using React Native and Node.js.","prerequisite":"A basic understanding of React and Node.js is needed to follow this tutorial.","content":"In this tutorial, we will be using React Native to build our Android application. React Native let's you build mobile apps using only JavaScript. It uses the same design as React, letting you compose a rich mobile UI from declarative components. To learn more about React Native, please visit [here](https://facebook.github.io/react-native/).\n\n## Setting up React Native\n\nFirst, we need to install the React Native CLI if we don't already have it. To install React Native, we run:\n\n```\nnpm install -g react-native-cli\n```\n\nAfter installing the CLI, it's time to create our project. Open up a terminal, and create a new project called `pubchat`using the following command:\n\n```\nreact-native init pubchat\n```\n\nWe wait until React Native does all its installations, then we can change directory into the new project and run the application using the following command:\n\n```\n//change directory to pubchat\ncd pubchat\n//run the application\nreact-native run-android\n```\n\n**Please note, that before running the `run-android` command, you should have an emulator running, or an android device connected via `adb`**.\n\nYou can read more on setting up React Native Android app from [https://facebook.github.io/react-native/docs/android-setup.html](https://facebook.github.io/react-native/docs/android-setup.html)\n\nAt this point, we should see this kind of screen:\n\n![anonymous-chat-react-native-welcome](//images.contentful.com/1es3ne0caaid/4bBnroB7qgq8owO6mEac0c/b79eba2c87d0349b72fb37620758e6b6/anonymous-chat-react-native-welcome.png)\n\nHowever, you may run into an error like this:\n\n![anonymous-chat-react-native-error](//images.contentful.com/1es3ne0caaid/6GVRCdGmFasewqAGa2uQ0O/de13d24b37a7518f894e28ba6aa4ae44/anonymous-chat-react-native-error.png)\n\nTo fix the error, all you need to do is to run this command:\n\n``` \nreact-native start\n```\n\n## Setting up Pusher\n\nAt this point, React Native is ready and set up. We need to setup Pusher, as well as grab our app credentials.\n\nWe need to sign up on [Pusher](https://pusher.com/signup) and create a new app, and also copy our secret, application key and application id.\n\n![anonymous-chat-react-native-create-app](//images.contentful.com/1es3ne0caaid/5whHk0r064QkiumMyAY0WK/9b9da5c2eab366dafdd953ad6ded88d0/anonymous-chat-react-native-create-app.png)\n\nWe then need to install the required libraries:\n\n```\nnpm install native-base pusher-js pusher express body-parser --save\n```\n\nIn the above bash command, we installed 4 packages. I will explain what the four packages do below:\n\n- native-base: An essential cross-platform UI components for React Native. This helps us to reduce time writing and styling UI components ourselves.\n- pusher-js: This is the official Pusher JavaScript client. We'll be using its React Native library to subscribe and listen to events in our application.\n- pusher: This is the official Pusher library for Node.js. We will be using Node.js for our API, so this library will come in handy.\n- express: This is a Node.js web framework which we'll use to create our API.\n- body-parser: This library is used by Express to parse body requests.\n \nAfter installing these packages, we need to link them with React Native, so we run the following command:\n\n``` \nreact-native link\n```\n**Please note that because we will be using Fetch to perform AJAX request, we would need to go to our android manifest located in `android/app/src/AndroidManifest.xml` and add the following permission: **\n\n```\n\u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /\u003e\n```\n\n## Creating our API\n\nFirst, let's create a new file called `server.js`, which serves as our API in our root folder and place in the following contents into it:\n\n```\n// server.js\n\n//require express\nvar express = require('express')\n//define app as in instance of express\nvar app = express()\n//require bosy-parser\nvar bodyParser = require('body-parser')\n//require pusher\nvar Pusher = require('pusher')\n//use bodyparser as a middle ware\napp.use(bodyParser.json())\n//instantiate pusher\nconst pusher = new Pusher({\n  appId: 'XXX_APP_ID',\n  key: 'XXX_APP_KEY',\n  secret: 'XXX_APP_SECRET',\n  cluster: 'XXX_APP_CLUSTER',\n  encrypted: true\n});\n//set cors middleware\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\n//handle route postfunction\napp.post('/', function (req, res) {\n    pusher.trigger(\"pubchat\", \"message_sent\", { message : req.body.message, name : \"Anonymous\" });\n    res.send({\n        message:'message_sent'\n    });\n})\n//listen on port and serve the app\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!')\n})\n```\nThe code block above is our Express server setup. At the beginning of the file, we had required Express, Body-parser and Pusher libraries for Node.js respectively. We had also initialized a new Pusher object, passing in our `appId`, `key`, `secret` to it, and we set the output of the object to a constant called `pusher`.\n\nNext, we set the CORS header to our request, using a middleware function.\n\nFinally, we create a post handler for the `\\` route, and we then make a `Pusher` trigger to a channel called `pubchat` with an event called `message_sent`.\n\nLet's take note of both the channel name and the event name used on this server. The channel name will be subscribed to, while we will listen for the event in our React Native app.\n\nThis is all we need at the server side for our API call to work.\n\nNext, we go to our command line and run:\n\n```\nnode server.js\n```\n## Crafting up the application\n\nNow let's replace our `index.android.js` with the following:\n\n``` language-javascript\n// index.android.js\n\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n * @flow\n */\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  ScrollView\n} from 'react-native';\n// import native base components\nimport { Container, Content, Footer, Button} from 'native-base';\n//import pusher\nimport Pusher from 'pusher-js/react-native'\n//react-native class\nexport default class pubchat extends Component {\n//load constructor\nconstructor(props){\n  super(props);\n  //declare an array of messages\n  var messages_array = [];\n  // declare initial states\n   this.state ={\n    messages_array,\n    text:'' \n   }\n\n  //instantiate pusher\n  var pusher = new Pusher('XXX_APP_KEY', {\n    cluster: 'XXX_APP_CLUSTER'\n  });\n  //subscribe to the public chat channel\n  var my_channel = pusher.subscribe('pubchat');\n  //bind and listen for chat events\n  my_channel.bind(\"message_sent\", (data)=\u003e {\n     this.state.messages_array.push(data);\n        this.setState({\n          text:''\n        })\n  });\n}\n\n  //function that sends messahe\n  send_message(){\n    //check that the text input isnt empty\n    if(this.state.text !=\"\"){\n      fetch('XXX_IP_TO_MY_ROUTE', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: this.state.text\n        })\n      })\n      .then((response) =\u003e response.json()) \n      .then((responseJson) =\u003e {}) \n      .catch((error) =\u003e { console.error(error); });\n    }\n  }\n\n\n  //function that loops over our messages and displays them\n  loop(){\n      var element = [];\n     for (var index = 0; index \u003c this.state.messages_array.length; index++) {\n\n            element.push(\u003cView key={\"container\"+index} \u003e\n                            \u003cText key = {\"author\"+index}\u003e\n                              {this.state.messages_array[index].name}\n                            \u003c/Text\u003e\n                            \u003cText key = {index} style={styles.bubble_you} \u003e\n                              {this.state.messages_array[index].message}\n                            \u003c/Text\u003e\n                        \u003c/View\u003e);\n        }\n         return element;\n  };\n\n  //render function that actually shows the page\n  render() {\n    //execute the loop function and store its response into a variable\n    myloop = this.loop();\n\n    return (\n      \u003cContainer\u003e\n      \u003cScrollView \u003e\n        \u003cView style={styles.container}\u003e\n          \u003cText style={styles.welcome}\u003e\n            Welcome to the public chat room!\n          \u003c/Text\u003e\n              {myloop}\n        \u003c/View\u003e\n        \u003c/ScrollView\u003e\n        \u003cFooter \u003e\n          \u003cTextInput\n            value ={this.state.text}\n            style={{width: '80%'}}\n            placeholder=\"Enter Your message!\"\n            onChangeText={(text) =\u003e this.setState({text})}\n          /\u003e\n          \u003cButton onPress={()=\u003e this.send_message()}\u003e\n            \u003cText\u003eSend\u003c/Text\u003e\n          \u003c/Button\u003e \n        \u003c/Footer\u003e\n      \u003c/Container\u003e\n    );\n  }\n}\n\n//stylesheet \nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  bubble_you: {\n    color: '#fff',\n    backgroundColor: '#00b0ff',\n  width: '50%',\n  borderRadius: 25,\n  padding: 7,\n  marginBottom: 2,\n  },\n});\n\nAppRegistry.registerComponent('pubchat', () =\u003e pubchat);\n```\nAbove, we have imported the Native Base component to help us with our UI styling instead of the default React Native components. Next, we imported Pusher for React Native, then we declare our React Native class.\n\nWe proceed by creating a constructor, and in our constructor, two states are declared namely: `messages_array` and `text`, which respectively represent our array of messages as well as the current text that is being typed.\n\nNext, we instantiate Pusher, passing in our `APP_KEY`. Then we subscribe to the channel which we are emitting to from the server called `pubchat` and also we listen to the `message_sent` event which we also trigger from our server.\n\nWhile listening to the `message_sent` event, we push the data that arrives at our `messages_array` state, and also set our `text` state to empty.\n\nNext, we create a function which sends our messages to the server, so it can be sent to Pusher. In this function, we first check if the state is empty, to avoid sending empty messages to the server.\n\nNext, we use the `fetch` API provided by React Native to send an AJAX request to our server which we created earlier.\n\n**Note: If you use IP address such as `127.0.0.1` or `localhost`, the request is most likely going to fail. This is because, in React Native, `localhost` or `127.0.0.1` refers to the internal application. Please use the network IP for your system instead.**\n\nNext, we define a `loop` function, which loops through all our messages and pushes them into an array which is being returned. This function would be used to display all messages on the UI.\n\nThe next function is our `render` function, which is a native React Native function. First, we declare a variable called `myloop` and set it to our `loop` function.\n\nIn our return statement, the `myloop` variable was rendered, so it can display its content. Also, take a look at the `footer` tag we have there. In the `footer` tag, we have a `text input` and a `button`.\n\nThe text input text is used to set the `text` state anytime the text changes using the `onChangeText` event of the button. Notice that our button also calls the `send_message` function anytime it is pressed by binding it to its `onPress` function.\n\nFinally, we defined some style sheets.\n\nAt this point if we reload our application, our app would look like the following:\n\n![anonymous-chat-react-native-design](//images.contentful.com/1es3ne0caaid/1QFi2XciR2y24IcASgKKqY/b18e636dfe3a00bdf7b8b4d4ccc33ec7/anonymous-chat-react-native-design.png)\n\nAt this point, once our server is up and running, we should go to the application, type in a message, then send.\n\nHere is a demo of what we have built:\n\n![anonymous-chat-react-native-demo](//images.contentful.com/1es3ne0caaid/3DnIzcqu4wUUmmu8U8awIo/8c610d936170bda7d684cb83a6764f07/anonymous-chat-react-native-demo.gif)\n\n## Conclusion\n\nIn this article, we have demonstrated how to make a public anonymous chat application in Android using React Native. We have secured the design choices which are important to begin with, and the cases above ought to help you fill in the holes and give an outline of a portion of the other design choices accessible to you.","metaTitle":"Build an anonymous chat app in React Native","metaDescription":"Discover how to make a public anonymous chat application in Android using React Native and Node.js"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5CdsxmFxtKyCumwcyW4a82","type":"Entry","createdAt":"2018-02-16T10:44:39.925Z","updatedAt":"2018-02-27T12:21:52.028Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime graph using JavaScript","url":"graph-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"wQhwNciAKWOW8SI2MSKww","type":"Entry","createdAt":"2018-02-13T10:47:12.980Z","updatedAt":"2018-02-14T10:09:05.816Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Rahat Khanna","url":"rahat-khanna","email":"rahat.khanna@yahoo.co.in","twitter":"https://twitter.com/mappmechanic","github":"https://github.com/mappmechanic","guestWriter":true}}],"projectRepo":"https://github.com/mappmechanic/realtime-analytics","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}}],"reviewDate":"2017-04-27","description":"Building realtime graph line chart to display live weather updates and temperature changes in London, UK. ","prerequisite":"A basic understanding of JavaScript and Node.js are needed to follow this tutorial.","content":"The world needs everything uber-fast now. There are plenty of data streams being generated by different systems everyday. Realtime monitoring and analysis has become very important for taking decisions in many industries today. For example: realtime monitoring of website traffic, server performance, weather updates, IOT sensors etc. It is important to analyse and interpret this burst of data, for which interactive Charts and Graphs are an excellent solution.\n\nIn this blog post, we will be building a Node.js Server to expose APIs to provide historic data for a metric (in this case, weather in London City) and also provide an API to ingest new data points. We will also be building a front end app with a Line Chart to display the temperature changes in London weather in realtime. The application we build will look something like this:\n\n![build-realtime-graph-app-javascript](//images.contentful.com/1es3ne0caaid/1H8PTKtHHqgwQccMomMQMA/855d20c75ea9eb176d69c996a6b55b8b/build-realtime-graph-app-javascript.gif)\n\n## Signup for Pusher\n\nThe first step to start this tutorial is to [Signup at Pusher](https://pusher.com/signup) or login with your existing credentials if you already have an account. After logging in, you will need to create a new app and select 'Vanilla JS' for the front end along with 'Node.js' for the backend. You will then be brought to a landing page containing the 'getting started' code for both front end and backend which we will use later on in the tutorial.\n\n## Node.js Server APIs for Monitoring \u0026 Analytics System\n\nThe most essential APIs for any analytics systems for any metric or entity are:\n\n1. Ingestion API - An API to ingest the new data points for any particular entity. In our server for this blog post, we will make an API to ingest new temperature data at a particular time for London city. This API can be called by any global weather system or any IOT sensor.\n2. Historical Data API - This API will return all the data within a range from this date in time. For our server, we will create a simple API which will return some static historical data with limited data points for London's temperature values for any day.\n \n### Node.js Express Server Skeleton\n\nWe will create a basic Express Server along with instantiating the Pusher library server instance. We will create a new folder for our project and create a new file **server.js**. Add the following code to this file:\n\n```\nvar express = require('express');\nvar path = require('path');\nvar bodyParser = require('body-parser');\n\nvar Pusher = require('pusher');\n\nvar pusher = new Pusher({\n  appId: '\u003cyour-app-id\u003e',\n  key: '\u003cyour-app-key\u003e',\n  secret: '\u003cyour-app-secret\u003e',\n  cluster: '\u003cyour-app-cluster\u003e',\n  encrypted: true\n});\n\nvar app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Error Handler for 404 Pages\napp.use(function(req, res, next) {\n    var error404 = new Error('Route Not Found');\n    error404.status = 404;\n    next(error404);\n});\n\nmodule.exports = app;\n\napp.listen(9000, function(){\n  console.log('Example app listening on port 9000!')\n});\n```\n\n#### API to get historical temperature data\n\nNow, we will add some static data regarding London's temperature at certain times during a day and store it in any JavaScript variable. We will also expose a route to return this data whenever someone invokes it using a GET HTTP call.\n\n```\n\nvar londonTempData = {\n    city: 'London',\n    unit: 'celsius',\n    dataPoints: [\n      {\n        time: 1130,\n        temperature: 12 \n      },\n      {\n        time: 1200,\n        temperature: 13 \n      },\n      {\n        time: 1230,\n        temperature: 15 \n      },\n      {\n        time: 1300,\n        temperature: 14 \n      },\n      {\n        time: 1330,\n        temperature: 15 \n      },\n      {\n        time: 1406,\n        temperature: 12 \n      },\n    ]\n  }\n\napp.get('/getTemperature', function(req,res){\n  res.send(londonTempData);\n});\n```\n\n#### API to ingest temperature data point\n\nNow we will add the code for exposing an API to ingest the temperature at a particular time. We will expose a GET HTTP API with temperature and time as query parameters. We will validate that they are not empty and store them by pushing in the **dataPoints** array of our static Javascript variable **londonTempData**. Please add the following code to the **server.js** file:\n\n```\napp.get('/addTemperature', function(req,res){\n  var temp = parseInt(req.query.temperature);\n  var time = parseInt(req.query.time);\n  if(temp \u0026\u0026 time \u0026\u0026 !isNaN(temp) \u0026\u0026 !isNaN(time)){\n    var newDataPoint = {\n      temperature: temp,\n      time: time\n    };\n    londonTempData.dataPoints.push(newDataPoint);\n    pusher.trigger('london-temp-chart', 'new-temperature', {\n      dataPoint: newDataPoint\n    });\n    res.send({success:true});\n  }else{\n    res.send({success:false, errorMessage: 'Invalid Query Paramaters, required - temperature \u0026 time.'});\n  }\n});\n```\nIn the above code, apart from storing in the data source, we will also trigger an event **'new-temperature'** on a new channel **'london-temp-chart'**. For every unique data source or a chart, you can create a new channel.\n\nThe event triggered by our server will be processed by the front end to update the chart/graph in realtime. The event can contain all the important data which the chart needs to display the data point correctly. In our case, we will be sending the temperature at the new time to our front end.\n\n## Building the Front End App using Vanilla JS \u0026 Chart.js\n\nNow, we will build the front end application to display a Line Chart representing the changes in temperature for London City at different times throughout the day. The key approach for displaying realtime graphs is\n\n1. We have to make an initial Ajax call to fetch historical data, and render the graph with the existing data.\n2. We will subscribe to any events for new data points being stored on a particular channel.\n \n### Basic HTML Template\n\nWe will create a new folder called **public** in our project root and then create a new file **index.html** in this folder. This file will contain the basic HTML code to render a simple header and a sub-header with the app name along with few icons. We will also import the **Pusher Javascript** library from its CDN URL.\n\n```\n\u003c!DOCTYPE\u003e\n\u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eRealtime Analytics\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://unpkg.com/purecss@0.6.2/build/pure-min.css\" integrity=\"sha384-UQiGfs9ICog+LwheBSRCt1o5cbyKIHbwjWscjemyBMT9YCUMZffs6UqUTd0hObXD\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway:200\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cdiv class=\"logo\"\u003e\n                \u003cimg src=\"./assets/pusher-logo.png\" /\u003e\n            \u003c/div\u003e\n            \u003cdiv id=\"logout\" class=\"logout\"\u003e\n               \u003ca href=\"/logout\"\u003eLogout\u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/header\u003e\n        \u003csection class=\"subheader\"\u003e\n            \u003cimg class=\"weather-icon\" src=\"./assets/weather.png\" /\u003e\n            \u003ch2\u003eRealtime Weather Updates for London !\u003c/h2\u003e\n            \u003cimg class=\"weather-icon\" src=\"./assets/london-icon.png\" height=\"70px\" /\u003e\n        \u003c/section\u003e\n        \u003csection\u003e\n           \u003cdiv id=\"loader\" class=\"loader\"\u003e\n           \u003c/div\u003e\n        \u003c/section\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n\u003c/html\u003e\n```\n### Adding Charts Library\n\nIn Javascript and HTML apps, we have to use either of the two technologies to build graphical components to represent mathematical graphs, SVG or Canvas. There are numerous open source libraries which can help you render different chart types, such as Bar Charts, Pie Charts, Line Charts and Scatter Charts. Here are links to a few of the popular libraries:\n\n- Highcharts - [http://www.highcharts.com/](http://www.highcharts.com/)\n- Chart.js - [http://www.chartjs.org/](http://www.chartjs.org/)\n- Google Charts - [https://developers.google.com/chart/](https://developers.google.com/chart/)\n- Flot - [http://www.flotcharts.org/](http://www.flotcharts.org/)\n- D3 JS - [http://d3js.org/](http://d3js.org/)\n \nFor our project, we will choose Chart.js as it has fairly simple API and renders robust charts using Canvas HTML tag. You can choose any charting library but keep in mind that the library should have a means to update the chart without completely re-rendering it. Chart.js provides a method on any instantiated chart to update it.\n\nAdd the following code to your index.html file at appropriate places\n\n```\n...\n\u003csection\u003e\n   \u003cdiv id=\"loader\" class=\"loader\"\u003e\n    Loading...\n   \u003c/div\u003e\n   \u003ccanvas id=\"weatherChart\"\u003e\n   \u003c/canvas\u003e\n\u003c/section\u003e\n\u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n...\n```\n### Adding JS File \u0026 Instantiating Pusher client side library\n\nNow we will create a new file **app.js** in our public folder and also add the following code to instantiate the Pusher client side library.\n\n```\n// Using IIFE for Implementing Module Pattern to keep the Local Space for the JS Variables\n(function() {\n    // Enable pusher logging - don't include this in production\n    Pusher.logToConsole = true;\n\n    var serverUrl = \"/\",\n        members = [],\n        pusher = new Pusher('\u003cyour-api-key\u003e', {\n          encrypted: true\n        }),\n        channel,weatherChartRef;\n\n    function showEle(elementId){\n      document.getElementById(elementId).style.display = 'flex';\n    }\n\n    function hideEle(elementId){\n      document.getElementById(elementId).style.display = 'none';\n    }\n\n    function ajax(url, method, payload, successCallback){\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url, true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState != 4 || xhr.status != 200) return;\n        successCallback(xhr.responseText);\n      };\n      xhr.send(JSON.stringify(payload));\n    }\n\n})();\n```\nIn the above code, we have also added few utility methods to make an Ajax call and also show or hide elements from the DOM API.\n\n### Adding Code to fetch Historical Data\n\nNow, we will add the code to fetch the historical temperature data to display the graph with the initial values. We will also instantiate a new Chart object with a specific config to render a Line Chart. You can read more about how to construct these configs at the [Chart.js documentation](http://www.chartjs.org/docs/).\n\nPlease add the following code to the app.js file:\n\n```\n   function renderWeatherChart(weatherData) {\n      var ctx = document.getElementById(\"weatherChart\").getContext(\"2d\");\n      var options = { };\n      weatherChartRef = new Chart(ctx, {\n        type: \"line\",\n        data: weatherData,\n        options: options\n      });\n   }\n\n   var chartConfig = {\n      labels: [],\n      datasets: [\n         {\n            label: \"London Weather\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(75,192,192,0.4)\",\n            borderColor: \"rgba(75,192,192,1)\",\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: \"rgba(75,192,192,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [],\n            spanGaps: false,\n         }\n      ]\n   };\n\n   ajax(\"/getTemperature\", \"GET\",{}, onFetchTempSuccess);\n\n   function onFetchTempSuccess(response){\n      hideEle(\"loader\");\n      var respData = JSON.parse(response);\n      chartConfig.labels = respData.dataPoints.map(dataPoint =\u003e dataPoint.time);\n      chartConfig.datasets[0].data = respData.dataPoints.map(dataPoint =\u003e dataPoint.temperature);\n      renderWeatherChart(chartConfig)\n  }\n```\nIn the above code, we have added a function named **renderWeatherChart** which will be used to render the chart using latest data which is embedded in the **chartConfig** variable under the key **datasets**. If we want to draw multiple line charts on same canvas, we can add more elements to this array.\n\nThe **data** key in each of the elements of the array will display the different points on the graph. We will make an ajax request to the **/getTemperature** api to fetch all the data points and put them into this key. We will call the rendering method to display the graph then. Now we can run the command `node server.js` and then go to the browser with the following URL to see the initial chart rendered using the data.\n\n``` \nhttp://localhost:9000/\n```\nIn order to style our app properly, please add the following CSS into a new style.css file inside the public folder. Add the following code to that file:\n\n```\nbody{\n    margin:0;\n    padding:0;\n    overflow: hidden;\n    font-family: Raleway;\n}\n\nheader{\n    background: #2b303b;\n    height: 50px;\n    width:100%;\n    display: flex;\n    color:#fff;\n}\n\n.logo img{\n  height: 45px;\n}\n\n.subheader{\n    display: flex;\n    align-items: center;\n    margin: 0px;\n}\n\n.logout{\n    flex:1;\n    justify-content: flex-end;\n    padding:15px;\n    display: none;\n}\n\n.logout a{\n    color:#fff;\n    text-decoration: none;\n}\n\n#weatherChart{\n    height: 80% !important;\n    width: 95% !important;\n    margin: 0 auto;\n}\n```\n### Code to Update Graph on new event received\n\nNow we want to subscribe to the unique channel on which our server will be sending update events for this graph. For our project the channel is named **london-temp-chart** and the event is named **new-temperature**. Please add the following code to process the event and then update the chart in realtime:\n\n```\nchannel = pusher.subscribe('london-temp-chart');\nchannel.bind('new-temperature', function(data) {\n    var newTempData = data.dataPoint;\n    if(weatherChartRef.data.labels.length \u003e 15){\n      weatherChartRef.data.labels.shift();  \n      weatherChartRef.data.datasets[0].data.shift();\n    }\n    weatherChartRef.data.labels.push(newTempData.time);\n    weatherChartRef.data.datasets[0].data.push(newTempData.temperature);\n    weatherChartRef.update();\n});\n```\nIn order to see this code in action, you have to refresh the browser and you will see the initial chart. Now we have to ingest a new data point, for which you would need to call the following API either by using some mock API calling tool or using the following URL with different values in the browser.\n\n``` \nhttp://localhost:9000/addTemperature?temperature=17\u0026time=1500\n```\nIn order to test your chart update code, you can use the following temporary code in your **app.js** Javascript file which will make dummy Ajax requests to the above URL after a specific time interval.\n\n```\n/* TEMP CODE FOR TESTING */\n  var dummyTime = 1500;\n  setInterval(function(){\n    dummyTime = dummyTime + 10;\n    ajax(\"/addTemperature?temperature=\"+ getRandomInt(10,20) +\"\u0026time=\"+dummyTime,\"GET\",{},() =\u003e {});\n  }, 1000);\n\n  function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n/* TEMP CODE ENDS */\n```\nThe Github repo for reference to complete code is [https://github.com/mappmechanic/realtime-analytics](https://github.com/mappmechanic/realtime-analytics)\n\n## Conclusion\n\nFinally our realtime analytics app is ready. We will see the weather temperature chart for London city updating in realtime.\n\n![build-realtime-graph-app-javascript](//images.contentful.com/1es3ne0caaid/1H8PTKtHHqgwQccMomMQMA/855d20c75ea9eb176d69c996a6b55b8b/build-realtime-graph-app-javascript.gif)\n\nWe can use the code from this blog post for any charts library and also to render any type of chart like Bar Chart, Scatter Chart or Pie Chart to update in realtime.\n\nThis code can also be used in multiple Enterprise Apps like Monitoring dashboards, analytics reports, sensor regulatory apps, financial apps etc. The Pusher library helps us to send realtime events to all connected client side apps which can consume the data to update the charts in realtime.","metaTitle":"Build a realtime graph using JavaScript","metaDescription":"Build a simple monitoring app using JavaScript and Pusher to display live weather updates and temperature changes in London, UK. Learn how to use a Node.js Server to expose APIs to provide historic data and also provide an API to ingest new data points. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5MpaupDY52WyaUaSiGK40G","type":"Entry","createdAt":"2018-02-22T15:02:46.065Z","updatedAt":"2019-01-02T15:29:11.793Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":8,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a group chat app in JavaScript","url":"group-chat-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/pusher-group-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-04-24","description":"The app will feature the number of users in the group, notifications when a new user joins the group and finally, display chat messages to all users in the group in realtime.","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"In this tutorial, we’re going to build a group chat app in JavaScript and Pusher. Though the app will be basic, it will have some of the features a typical group chat app would have, such as the number of users in the group, notifications when a new user joins the group and finally, display chat messages to all users in the group in real-time. We’ll be using Node.js (Express) as the application server, Vue.js on the front-end and Pusher for realtime communication between our server and frontend.\n\nThis tutorial assumes you already have **Node.js** and **NPM** installed on your computer.\n\nLet’s take a quick look at what we’ll be building:\n\n![group-chat-javascript-demo](//images.contentful.com/1es3ne0caaid/1cXBmS9rkgm2kICQoAkaAe/1ae48bc3db499a9426760e2c1c6a7038/group-chat-javascript-demo.gif)\n\nLet’s get started!\n\n## Create a Pusher app\n\nIf you don’t have one already, create a free Pusher account [here](https://pusher.com/signup) then log in to your dashboard and create an app. Take note of your app credentials as we’ll be using them shortly. You can find your app credentials under the **Keys** section on the **Overview** tab.\n\n## Create Node.js server\n\nHaving created our Pusher app and gotten our app credentials, we can move on to creating the Node.js server. As stated above, we’ll be using Express as our Node.js framework. Initialize a new Node.js project by using the following command:\n\n```\n    mkdir pusher-group-chat\n    cd pusher-group-chat\n    npm init -y\n```\n\nNext, we’ll install Express, Pusher’s Node.js package and some other dependencies that our app will need:\n\n```\n    npm install express body-parser express-session dotenv pusher --save\n```\n\nYou will noticed we installed the `dotenv` package which will allow us to pull details from an environment variable from a `.env` file.\n\nThe rest of this tutorial assumes you’re already `cd` to the `pusher-group-chat` directory as subsequent commands will be run from within that directory.\n\nNow let’s start fleshing the server, run command to create a new file name `server.js`:\n\n```\n    touch server.js\n```\n\nOpen the newly created file and paste the code below into it:\n\n```\n    // server.js\n    require('dotenv').config();\n    const express    = require('express');\n    const path       = require('path');\n    const bodyParser = require('body-parser');\n    const session    = require('express-session');\n    const Pusher     = require('pusher');\n    \n    const app = express();\n    \n    // Session middleware\n    app.use(session({\n        secret: 'somesuperdupersecret',\n        resave: true,\n        saveUninitialized: true\n    }))\n    \n    // Body parser middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Serving static files\n    app.use(express.static(path.join(__dirname, 'public')));\n    \n    // Create an instance of Pusher\n    const pusher = new Pusher({\n        appId:     process.env.PUSHER_APP_ID,\n        key:       process.env.PUSHER_APP_KEY,\n        secret:    process.env.PUSHER_APP_SECRET,\n        cluster:   process.env.PUSHER_APP_CLUSTER,\n        encrypted: true\n    });\n    \n    app.listen(3000, () =\u003e {\n        console.log('Server is up on 3000')\n    });\n```\n\nFirst, we create a basic Express server and enable some middleware that the server will use. The `session` middleware will allow us to save a user’s details in session for later use. The `body-parser` middleware will allow us get form data. Then we serve static files from `public` directory.\n\nNext, we create an instance of Pusher. As you can see, we’re loading our Pusher app credentials from environment variables from a `.env` (which we’re yet to create) file. Lastly, we start the server on port `3000`.\n\nBefore we move to the other part of the server, let’s create the `.env` file we talked above:\n\n```\n    touch .env\n```\n\nAnd paste the lines below into it:\n\n```\n    // .env\n    PUSHER_APP_ID=xxxxxx\n    PUSHER_APP_KEY=xxxxxxxxxxxxxxxxxxxx\n    PUSHER_APP_SECRET=xxxxxxxxxxxxxxxxxxxx\n    PUSHER_APP_CLUSTER=xxxx\n```\n\nRemember to replace the **x**s with your Pusher app credentials.\n\n\n## Adding Routes\n\nNow let’s add the necessary routes our server will need. Open `server.js` and add the following code to it just after where we created an instance of Pusher:\n\n```\n    // server.js\n    \n    ...\n    \n    app.get('/', (req, res) =\u003e {\n        res.sendFile('index.html');\n    });\n    \n    app.post('/join-chat', (req, res) =\u003e {\n        // store username in session\n        req.session.username = req.body.username;\n        res.json('Joined');\n    });\n    \n    app.post('/pusher/auth', (req, res) =\u003e {\n        const socketId = req.body.socket_id;\n        const channel = req.body.channel_name;\n        // Retrieve username from session and use as presence channel user_id\n        const presenceData = {\n            user_id: req.session.username\n        };\n        const auth = pusher.authenticate(socketId, channel, presenceData);\n        res.send(auth);\n    });\n    \n    app.post('/send-message', (req, res) =\u003e {\n        pusher.trigger('presence-groupChat', 'message_sent', {\n            username: req.body.username,\n            message:  req.body.message\n        });\n        res.send('Message sent');\n    });\n    \n    ...\n```\n\nIn the snippet above, the first route will render the `index.html` which is the main entry point of our app when we hit the `/` endpoint. Next, we define the `/join-chat` endpoint which will be called when a user fills the input field to join the chat. We get the username entered by the user and save it in the session. Because we’ll be using a presence channel for our group chat app, we need to implement an auth API which will authenticate the user request on the server side. So the `/pusher/auth` endpoint will be called automatically when a user subscribes to our chat. We pass along the user’s username retrieved from the session to Pusher’s `authenticate` method so it will be available on the client side when a user has subscribed to the channel. Lastly, we create the `/send-message` route that uses Pusher to broadcast a `message_sent` event to the channel `presence-groupChat`. Typically, within the `/send-message` route is where you will persist the message into a database, but for the purpose of this tutorial and to keep things simple, we won’t be persisting messages to database.\n\nThat’s all on the server side.\n\n## Setup chat app frontend\n\nLet’s move on to building our app front-end. We talked about `index.html` which will be the main entry point of our app and recall that we set up our server to render static files from within the `public` directory. Now we’ll create the directory and the file.\n\n```\n    mkdir public\n    cd public\n    touch index.html\n```\n\nAnd paste the following code into it:\n\n```\n    \u003c!-- public/index.html --\u003e\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003ctitle\u003eGroup Chat App with Vue.js and Pusher\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\"\u003e\n        \u003cstyle\u003e\n          body {\n            padding-top: 100px;\n          }\n          .chat {\n                list-style: none;\n                margin: 0;\n                padding: 0;\n            }\n            .chat li {\n                margin-bottom: 10px;\n                padding-bottom: 5px;\n                border-bottom: 1px dotted #B3A9A9;\n            }\n            .chat li .chat-body p {\n                margin: 0;\n                color: #777777;\n            }\n            .panel-body {\n                overflow-y: scroll;\n                height: 350px;\n            }\n            ::-webkit-scrollbar-track {\n                -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n                background-color: #F5F5F5;\n            }\n            ::-webkit-scrollbar {\n                width: 12px;\n                background-color: #F5F5F5;\n            }\n            ::-webkit-scrollbar-thumb {\n                -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n                background-color: #555;\n            }\n        \u003c/style\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cdiv class=\"container\" id=\"app\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-6 col-md-offset-3\"\u003e\n              \u003cdiv class=\"panel panel-info\"\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://unpkg.com/vue\"\u003e\u003c/script\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"./app.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nBasic Bootstrap webpage with some few stylings. As started in the introductory section of this tutorial, we’ll be using Vue.js. So we pull in Vue, Axios (will be used to make AJAX request to our server) and of course the Pusher JavaScript library. We also reference our own JavaScript file which will contain all our Vue.js specific code.\n\nNow let’s add the main section of the chat app. Open `index.html` and add the following code immediately after the **div** with class `panel panel-info`:\n\n```\n    \u003c!-- public/index.html --\u003e\n    \n    \u003cdiv class=\"panel-heading\"\u003e\n      Group Chats \u003cspan class=\"badge\"\u003e{{ members.count }}\u003c/span\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"panel-body\"\u003e\n      \u003cdiv v-if=\"joined\"\u003e\n        \u003cem\u003e\u003cspan v-text=\"status\"\u003e\u003c/span\u003e\u003c/em\u003e\n        \u003cul class=\"chat\"\u003e\n          \u003cli class=\"left clearfix\" v-for=\"message in messages\"\u003e\n            \u003cdiv class=\"chat-body clearfix\"\u003e\n              \u003cdiv class=\"header\"\u003e\n                \u003cstrong class=\"primary-font\"\u003e\n                  {{ message.username }}\n                \u003c/strong\u003e\n              \u003c/div\u003e\n              \u003cp\u003e\n                {{ message.message }}\n              \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n        \u003cdiv class=\"panel-footer\"\u003e\n          \u003cdiv class=\"input-group\"\u003e\n            \u003cinput id=\"btn-input\" type=\"text\" name=\"message\" class=\"form-control input-sm\" placeholder=\"Type your message here...\" v-model=\"newMessage\" @keyup.enter=\"sendMessage\"\u003e\n            \u003cspan class=\"input-group-btn\"\u003e\n              \u003cbutton class=\"btn btn-primary btn-sm\" id=\"btn-chat\" @click=\"sendMessage\"\u003eSend\u003c/button\u003e\n            \u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv v-else\u003e\n        \u003cdiv class=\"form-group\"\u003e\n          \u003cinput type=\"text\" class=\"form-control\" placeholder=\"enter your username to join chat\" v-model=\"username\" @keyup.enter=\"joinChat\"\u003e\n        \u003c/div\u003e\n        \u003cbutton class=\"btn btn-primary\" @click=\"joinChat\"\u003eJOIN\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nWe have added Vue.js to the webpage, so we can start using it. We are displaying the number of users that have joined the group chat next to the **Group Chat** heading. Using Vue.js conditional rendering, we will only show the chat form when the user has joined (that is, entered his/her username) the group chat, else the user will be shown a form to enter a username to join chat. When the user clicks the **JOIN** button or presses **ENTER** while within the username input field, the `joinChat` method will be triggered. We also bind the username input field with the `username` data so we can easily pass whatever the user entered to Vue.js.\n\nOnce a user has joined the chat, we loop through (using `v-for`) the messages (if there are any) and display them, then show the user an input field to type their chat message. When the user clicks the **Send** button or presses **ENTER** while within the message input field, the `sendMessage` method will be triggered. We also bind the message input field with the `newMessage` data so we can easily pass whatever the user entered to Vue.js.\n\nWhen a user has not joined the chat:\n\n![group-chat-javascript-join](//images.contentful.com/1es3ne0caaid/4ZDgyoMKfKco8EmUGS4S4Q/55adf5f97c7fccf360f300c41dc22701/group-chat-javascript-join.png)\n\nWhen the user has joined the chat:\n\n![group-chat-javascript-message-box](//images.contentful.com/1es3ne0caaid/6vNYpoC61agEYEQEiYMK2G/26b40f9bb65ace68e5282e49a98c2a01/group-chat-javascript-message-box.png)\n\n## Create App.js\n\nNow let’s create the file that will contain all our Vue.js specific code. Use the command below to do just that:\n\n```\n    cd public\n    touch app.js\n```\nAnd paste the following code into it:\n\n```\n    // public/app.js\n    \n    const pusher = new Pusher('xxxxxxxxxxxxxxxxxxxx', {\n        cluster: 'APP_CLUSTER',\n        encrypted: true,\n        authEndpoint: 'pusher/auth'\n    });\n    const app = new Vue({\n        el: '#app',\n        data: {\n            joined: false,\n            username: '',\n            members: '',\n            newMessage: '',\n            messages: [],\n            status: ''\n        },\n        methods: {\n            joinChat() {\n                axios.post('join-chat', {username: this.username})\n                    .then(response =\u003e {\n                        // User has joined the chat\n                        this.joined = true;\n                        const channel = pusher.subscribe('presence-groupChat');\n                        channel.bind('pusher:subscription_succeeded', (members) =\u003e {\n                            this.members = channel.members;\n                        });\n                        // User joins chat\n                        channel.bind('pusher:member_added', (member) =\u003e {\n                            this.status = `${member.id} joined the chat`;\n                        });\n                        // Listen for chat messages\n                        this.listen();\n                    });\n            },\n            sendMessage() {\n                let message = {\n                    username: this.username,\n                    message: this.newMessage\n                }\n                // Clear input field\n                this.newMessage = '';\n                axios.post('/send-message', message);\n            },\n            listen() {\n                const channel = pusher.subscribe('presence-groupChat');\n                channel.bind('message_sent', (data) =\u003e {\n                    this.messages.push({\n                        username: data.username,\n                        message: data.message\n                    });\n                });\n            }\n        }\n    });\n```\n\nRemember to replace the xs with your Pusher app key and also specify your app cluster.\n\nFirst, we create an instance of Pusher, passing to it our app key and other options. We pass in the auth endpoint `/pusher/auth` we set up in our Express server. Next we create an instance of Vue.js. Then we specify the element (`#app`) we want to mount Vue.js on. We define some data that will be used by our app. The `joined` data which is `false` by default indicates whether a user has joined the chat or not. The `username` will be the username a user enters from the join chat form. The `members` will hold the number of users in the group chat. The `newMessage` will be the message a user enters from the chat form. The `messages` will hold an array of chat messages. The `status` will simply display notification of newly joined users.\n\nWhen a user enters a username to join chat, the `joinChat` method is called which in turn make an HTTP POST request to the `/join-chat` endpoint on our server passing along the username. Once the request is successful, we set `joined` to `true` and subscribe the user to the `presence-groupChat` channel. Because we’re using a presence channel, Pusher provides us with additional functionality like getting the members in the channel. With that, we can listen for when the subscription is successful and get all the users subscribed to the channel and assign it to our `members` data. We also listen for when a new user joins the chat using the `pusher:member_added` event and notify other users that a new user has joined the chat. Lastly, we call a `listen` method (which we’ll create shortly) which listens for new chat messages and broadcast to users.\n\nThe `sendMessage` method is pretty simple, it makes an HTTP POST request to the `/send-message` endpoint on our server passing along the chat message. We also clear the input field of the previous message so the user can start typing new messages without having to manually clear the input field first.\n\nLastly, the `listen` method which we called from within the `joinChat` method will listen for `message_sent` event that was triggered from our server and add the new message to the messages array and finally broadcast it to users.\n\n**Note:** By default, Pusher will try to use `/pusher/auth` as `authEndpoint`. If you setup yours different from that, you’ll have to specify while instantiating the Pusher JavaScript library.\n\n**Note:** Pusher presence channels are to be prefixed with `presence-`.\n\n## Testing The App\n\nSo we’re done with building our group chat app. It’s time test out what we’ve built. To test the app, we need to start up our Express server by executing the command below:\n\n```\n    node server.js\n```\n\nThe app should be running now and can be access through http://localhost:3000. Go on and try the app out. You should get something similar as the demo below:\n\n![group-chat-javascript-demo](//images.contentful.com/1es3ne0caaid/1cXBmS9rkgm2kICQoAkaAe/1ae48bc3db499a9426760e2c1c6a7038/group-chat-javascript-demo.gif)\n\n## Conclusion\n\nSo that’s it for this tutorial. In this tutorial we saw how to build a group chat app with JavaScript and Pusher. Using [Pusher’s presence](https://pusher.com/docs/client_api_guide/client_presence_channels) channel, we saw how easy it is to get all the members subscribed to a channel.","metaTitle":"Build a group chat app in JavaScript","metaDescription":"Build a group chat app using Vanilla JavaScript, Node.js and create realtime features such chat groups, user numbers and notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5hfm3a7rsImqcwCwsikAcI","type":"Entry","createdAt":"2018-02-27T14:32:26.374Z","updatedAt":"2018-02-27T14:32:26.374Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build read receipts using Laravel","url":"read-receipts-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55LOucxD5Ycm4oGSGa0A2O","type":"Entry","createdAt":"2018-02-15T15:02:22.618Z","updatedAt":"2018-02-15T15:02:22.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Viraj Khatavkar","url":"viraj-khatavkar","email":"viraj@virajkhatavkar.com","twitter":"https://twitter.com/virajkhatavkar","github":"https://github.com/viraj-khatavkar","guestWriter":true}}],"projectRepo":"https://github.com/viraj-khatavkar/message-delivery-status-laravel-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-04-21","description":"Create a read receipts system that updates in realtime using Laravel and Pusher.","prerequisite":"A basic understanding of Laravel and Vue.js is needed to follow this tutorial.","content":"Read receipts with realtime updates allow users to track the message without reloading the page. This paves a way to have better collaboration and conversation between friends and collaborators. It brings a dynamic feel to the application interface and improves usability.\n\nToday, we will create a read receipts system that updates in realtime using [Laravel](https://laravel.com/) and [Pusher](https://pusher.com/). With the release of [Echo](https://laravel.com/docs/5.4/broadcasting), Laravel has provided an out of the box solution for implementing realtime data synchronisation using event broadcasting. It is simple and we can get started in a matter of minutes.\n\n## Setup an app on Pusher\n\nWe need to [sign up on Pusher](https://pusher.com/signup) (it's free) and create a new app.\n\n![read-receipts-laravel-create-app](//images.contentful.com/1es3ne0caaid/4x4juvu41qme6WEegO404M/88d3b701e70f931e6807bdd6f6947124/read-receipts-laravel-create-app.png)\n\n## Install Laravel, Pusher SDK and Echo\n\nFirst, we will grab a fresh copy of Laravel:\n\n```\nlaravel new message-delivery-status-laravel-pusher\n```\n\nThis will install the latest version of the Laravel framework and download the necessary dependencies. Next, we will install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php) using [Composer](https://getcomposer.org/download/):\n\n```\ncomposer require pusher/pusher-php-server\n```\n\nNext, we will install the JavaScript dependencies:\n\n```\nnpm install\n```\n\nNow, we need to install two Javascript libraries necessary for realtime event broadcasting: Laravel Echo and Pusher JS\n\n```\nnpm install --save laravel-echo pusher-js\n```\n\nWe require some form of user authentication mechanism to demonstrate the functionality. Let us use the default authentication scaffolding provided by Laravel:\n\n```\nphp artisan make:auth\n```\n\n## Configuration\n\nFirst, we need to set the `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` in the environment file. We can get these details in our Pusher [app dashboard](https://dashboard.pusher.com/):\n\n``` \n# .env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_APP_KEY=your-pusher-app-key\nPUSHER_APP_SECRET=your-pusher-app-secret\nPUSHER_APP_CLUSTER=your-pusher-app-cluster\n```\nNext, we need to create a fresh Echo instance in our applications's JavaScript. We can do so at the bottom of our `resources/assets/js/bootstrap.js` file:\n\n```\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-app-key',\n    cluster: 'ap2',\n    encrypted: true\n});\n```\n\n## Our application\n\nWe will create read receipts in a chat box, similar to what Facebook does. The core feature is the realtime update of status for the messages. We will not cover anything relating to writing CRUD functionality using Laravel. We will concentrate on the code necessary for implementing the live commenting feature. The code is available on a [Github repository](https://github.com/viraj-khatavkar/message-delivery-status-laravel-pusher) for cloning and understanding purposes.\n\n## Migrations\n\nNext, we need a `conversations` table where we can store all the messages for the conversation.\n\n```\nphp artisan make:model Conversation -m\n```\n\nThe `conversations` table will require the following fields:\n\n1. A field to store the message\n2. A field to link the message to the user that created it\n3. A field to store the status of the message\n \nBelow is the migration for our `conversations` table:\n\n```\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateConversationsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('conversations', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003etext('message');\n            $table-\u003estring('status');\n            $table-\u003eunsignedInteger('user_id');\n            $table-\u003etimestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('conversations');\n    }\n}\n\n```\n\n## Broadcasting new messages\n\nWhenever a new message is created, we need to fire an event which will be broadcast over Pusher to a specific private channel. For broadcasting an event, it should implement the `ShouldBroadcast` interface. Let us first create the `NewMessage` event:\n\n```\nphp artisan make:event NewMessage\n```\n\n### broadcastWith method\n\nThe event should implement a `broadcastWith` method. This method should return the array of data which the event should broadcast.\n\n```\nnamespace App\\Events;\n\nuse App\\Conversation;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass NewMessage implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    private $conversation;\n\n    /**\n     * Create a new event instance.\n     *\n     * @return void\n     */\n    public function __construct(Conversation $conversation)\n    {\n        $this-\u003econversation = $conversation;\n    }\n\n    public function broadcastWith()\n    {\n        return [\n            'id' =\u003e $this-\u003econversation-\u003eid,\n            'message' =\u003e $this-\u003econversation-\u003emessage,\n            'status' =\u003e $this-\u003econversation-\u003estatus,\n            'user' =\u003e [\n                'name' =\u003e $this-\u003econversation-\u003euser-\u003ename,\n                'id' =\u003e $this-\u003econversation-\u003euser-\u003eid,\n            ],\n        ];\n    }\n\n    /**\n     * Get the channels the event should broadcast on.\n     *\n     * @return Channel|array\n     */\n    public function broadcastOn()\n    {\n        return new PrivateChannel('chat');\n    }\n}\n```\nNext, we need to start our queue to actually listen for jobs and broadcast any events that are recorded. We can use the database queue listener on our local environment:\n\n```\nphp artisan queue:listen\n```\n\n### Broadcast the event\n\nWhenever a new message is created, we will broadcast the `NewMessage` event using the `broadcast` helper:\n\n```\npublic function store()\n{\n    $conversation = Conversation::create([\n        'message' =\u003e request('message'),\n        'status' =\u003e 'Sent',\n        'user_id' =\u003e auth()-\u003euser()-\u003eid\n    ]);\n\n    broadcast(new NewMessage($conversation))-\u003etoOthers();\n\n    return $conversation-\u003eload('user');\n}\n```\n\nIf we do not use the `toOthers` method, then the event would also be broadcasted to the user who has created it. This would create a list of duplicate messages.\n\n`toOthers` allows you to exclude the current user from the broadcast's recipients.\n\n## Listening for new messages on the private channel\n\nInstallation and configuration of Laravel Echo is a must before we can start listening to new messages. We have covered the process in detail in the above section of this article. Please go through it if you might have skipped it.\n\n```\nEcho.private('chat')\n    .listen('NewMessage', (e) =\u003e {\n        this.conversations.push(e);\n    })\n```\n\n## Broadcasting status updates\n\nWhenever a new message is delivered to other users, we need to fire an event which will notify the sender that the message was delivered successfully. First, we will update the status of the message as delivered. Let us modify the above code in the Vue component to update the status, once the message is received.\n\n```\nEcho.private('chat')\n    .listen('NewMessage', (e) =\u003e {\n        this.conversations.push(e);\n        axios.post('/conversations/'+ e.id +'/delivered');\n    })\n```\nNow, let us update the status in the database and broadcast the **MessageDelivered** event:\n\n```\nclass MessageDeliveredController extends Controller\n{\n    public function __invoke(Conversation $conversation)\n    {\n        $conversation-\u003estatus = 'Delivered';\n        $conversation-\u003esave();\n\n        broadcast(new MessageDelivered($conversation));\n    }\n}\n```\nFollowing is the the event which is responsible for broadcasting the updated status data:\n\n```\nnamespace App\\Events;\n\nuse App\\Conversation;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass MessageDelivered implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    private $conversation;\n\n    /**\n     * Create a new event instance.\n     *\n     * @return void\n     */\n    public function __construct(Conversation $conversation)\n    {\n        $this-\u003econversation = $conversation;\n    }\n\n    public function broadcastWith()\n    {\n        return [\n            'id' =\u003e $this-\u003econversation-\u003eid,\n            'message' =\u003e $this-\u003econversation-\u003emessage,\n            'status' =\u003e $this-\u003econversation-\u003estatus,\n            'user' =\u003e [\n                'name' =\u003e $this-\u003econversation-\u003euser-\u003ename,\n                'id' =\u003e $this-\u003econversation-\u003euser-\u003eid,\n            ],\n        ];\n    }\n\n    /**\n     * Get the channels the event should broadcast on.\n     *\n     * @return Channel|array\n     */\n    public function broadcastOn()\n    {\n        return new PrivateChannel('chat');\n    }\n}\n\n```\n\n## Listening for updates on the private channel\n\nNext we find and update the conversation object on Vue side to update the status:\n\n```\nEcho.private('chat')\n    .listen('MessageDelivered', (e) =\u003e {\n        _.find(this.conversations, { 'id': e.id }).status = e.status;\n    });\n```\n\n### Authorization\n\nEvery private channel needs to be authenticated. Laravel Echo will automatically call the specified authentication route but we still need to write the authentication logic which will actually authorize the user to listen to a particular channel.\n\nAuthorization logic is written in the `routes/channels.php`. We will return `true` but you are free to write your own authorization code here:\n\n```\nBroadcast::channel('chat', function ($user) {\n    return true;\n});\n```\n\n## Vue.js component\n\nThat's it! Now, whenever a new message is delivered, it will be broadcast and we can listen using our private channel to update the status in realtime.\n\nBelow is our Example component written using `Vue.js`\n\n```\n\u003cscript\u003e\n    export default {\n        props: ['user'],\n        data() {\n            return {\n                'message': '',\n                'conversations': []\n            }\n        },\n        mounted() {\n            this.getConversations();\n            this.listen();\n        },\n        methods: {\n            sendMessage() {\n                axios.post('/conversations', {message: this.message})\n                    .then(response =\u003e this.conversations.push(response.data));\n            },\n            getConversations() {\n                axios.get('/conversations').then((response) =\u003e this.conversations = response.data);  \n            },\n            listen() {\n                Echo.private('chat')\n                    .listen('NewMessage', (e) =\u003e {\n                        this.conversations.push(e);\n                        axios.post('/conversations/'+ e.id +'/delivered');\n                    })\n                    .listen('MessageDelivered', (e) =\u003e {\n                        _.find(this.conversations, { 'id': e.id }).status = e.status;\n                    });\n            }\n        }\n    }\n\u003c/script\u003e\n\n```\nBelow is the image demonstrating the workflow of our system:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2017/04/how-to-build-a-message-delivery-status-in-laravel-pusher-demo.gif\" alt=\"\" width=\"600\" height=\"375\" class=\"alignnone size-full wp-image-2769\" /\u003e\n\n## Conclusion\n\nIn this article, we have covered how to create a read receipts feature in realtime using Laravel and Pusher. We have covered the configuration options necessary to get started, and the example above should help you fill in the gaps and give an overview of some of the other configuration options available to you.","metaTitle":"Build read receipts using Laravel","metaDescription":"Create read receipts that updates in realtime in a chat box similar to Facebook Messenger with Laravel and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6FLLf45Q1USoaYMicaOQIm","type":"Entry","createdAt":"2018-02-27T10:43:19.163Z","updatedAt":"2020-06-19T10:40:53.888Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using JavaScript","url":"counter-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/pusher-realtime-js-counter","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2017-04-20","description":"Create a realtime vote counter for your website with Pusher and plain JavaScript. ","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"Dashboards are a common feature of modern day applications. Users like to see an overview of their performance, on a single page, and a really great way to improve that experience is to make the information shown to them be dynamic, or realtime!\n\nCounters are one of the prominent components of user dashboards, and in this tutorial, I will be showing you how to create a realtime counter, using the broadcasting prowess of [Pusher](https://pusher.com/) and the simplicity of plain JavaScript. We will build a simple vote counter to count the number of votes an item gets, in real time.\n\nFirst, we will set up Pusher, then create our [Node.js](https://nodejs.org/en/) Application, and finally we will create our view and listen for changes to the number of votes for an item.\n\n## Setting up Pusher\n\nPusher's APIs make it very easy to add realtime functionality to your applications. You should [signup](https://pusher.com/signup) to a free account (if you haven't already done so), create an app, and copy out the app credentials (App ID, Key and Secret) from the “App Keys” section, as we will be needing these for our app interaction with Pusher.\n\n## Creating Our App\n\nWe will be building our backend on [Node.js](https://nodejs.org/en/), make sure you have it installed, then you can initialise the new app with:\n\n``` \nnpm init -y\n```\n\n\u003e **Tip**: The `-y` or `--yes` flag helps to create a `package.json` file with default values.\n\nNext, we will install [Express](https://expressjs.com/) and [Pusher](https://github.com/pusher/pusher-http-node) and save as dependencies in our `package.json` file, via npm:\n\n``` \nnpm install -S express pusher\n```\nNow, we can create the files needed for our application:\n\n``` \n./server.js\n./index.html\n```\n\nThe `server.js` file will contain our server-side code, and `index.html` will contain our view and event listener script.\n\n### Building the Backend\n\nIn our `server.js` file, first we will initialise Express, require the `path` [module](https://nodejs.org/api/path.html) and require Pusher:\n\n```\nconst express = require('express');\nconst path = require('path');\nconst app = express();\napp.use(express.static(path.join(__dirname)));\nconst Pusher = require('pusher');\n```\n\nNext, we will Initialise Pusher with our app credentials, gotten from the Pusher dashboard:\n\n```\nconst pusher = new Pusher({\n  appId: 'YOUR_APP_ID',\n  key: 'YOUR_APP_KEY',\n  secret: 'YOUR_APP_SECRET',\n  cluster: 'eu',\n  encrypted: true\n});\n```\n\n\u003e **Note:** If you created your app in a different cluster to the default `us-east-1`, you must configure the cluster option. It is optional if you chose the default option. `encrypted` is also optional.\n\nNow we can start defining our app's routes and responses.\n\nWhen a user visits the homepage, we want to serve our `index.html` file, so we define a route for `/`:\n\n```\napp.get('/', (req,res) =\u003e {  \n  res.sendFile('index.html', {root: __dirname});\n});\n```\n\n\u003e **Tip**: [res.sendFile](https://expressjs.com/en/api.html#res.sendFile) is used to deliver files in Express applications.\n\nNext, we will define a route to handle votes. When a request with an `item_id` is sent to this route, we want to increase the number of votes on that item, and broadcast the change to all our users.\n\n```\napp.get('/vote', (req, res) =\u003e {\n  let item = req.query.item_id;\n  pusher.trigger('counter', 'vote', {item: item});\n  res.status(200).send();\n});\n```\n\nIn the code above, when a request is made to the `/vote` route, it gets the value of the item from the `item_id` key in the query string, then triggers a `vote` [event](https://pusher.com/docs/client_api_guide/client_events) on the `counter` channel, sending the `item` information as data to be broadcasted.\n\nThe `trigger` method has this syntax: `pusher.trigger( channels, event, data, socketId, callback );`. You can read more in it [here](https://pusher.com/docs/server_api_guide/interact_rest_api#publishing_events).\n\nWe are broadcasting on a [public channel](https://pusher.com/docs/client_api_guide/client_public_channels) as we want the data to be accessible to everyone. Pusher also allows broadcasting on [private](https://pusher.com/docs/client_api_guide/client_private_channels) and [presence](https://pusher.com/docs/client_api_guide/client_presence_channels) channels, which provide functionalities that require authentication. Their channel names are prefixed by `private-` and `presence-` respectively, unlike public channels that require no prefix.\n\nTypically, we should also save the new value of the number of votes to a database of some sort, so the data is persisted, but that is a bit out of the scope of this tutorial. You can implement this on your version!\n\nNow we can start the server and listen on port `5000` for connections:\n\n```\nconst port = 5000;\napp.listen(port, () =\u003e { console.log(`App listening on port ${port}!`)});\n```\n\nThe final `server.js` file will look like this:\n\n``` javascript\n/*\n * Initialise Express\n */\nconst express = require('express');\nconst path = require('path');\nconst Pusher = require('pusher');\nconst app = express();\napp.use(express.static(path.join(__dirname)));\n\n/*\n * Initialise Pusher\n */\nconst pusher = new Pusher({\n  appId: 'YOUR_APP_ID',\n  key: 'YOUR_APP_KEY',\n  secret: 'YOUR_APP_SECRET',\n  cluster: 'eu',\n  encrypted: true\n});\n\n/*\n * Define app routes and reponses\n */\napp.get('/', (req,res) =\u003e {  \n  res.sendFile('index.html', {root: __dirname});\n});\n\napp.get('/vote', (req, res) =\u003e {\n  let item = req.query.item_id;\n  pusher.trigger('counter', 'vote', {item: item});\n  res.status(200).send();\n});\n\n/*\n * Run app\n */\nconst port = 5000;\napp.listen(port, () =\u003e { console.log(`App listening on port ${port}!`)});\n```\n\n### Creating the App View\n\nNow, we can fill `index.html` with some markup. I also included [Foundation](http://foundation.zurb.com/) to take advantage of some preset styles:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/6.3.1/css/foundation.min.css\"\u003e\n  \u003ctitle\u003eJavaScript Decides\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003cdiv class=\"container text-center\"\u003e\n    \u003ch3 class=\"title\"\u003e\n      Pusher Real-time Vote Counter.\n      \u003ch5 class=\"subheader\"\u003eJavaScript Decides\u003c/h5\u003e\n    \u003c/h3\u003e\n\n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-1\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"1\"\u003eVote for me\u003c/button\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-2\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"2\"\u003eNah, Vote for me\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003chr\u003e\n  \u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\n### Listening for events from Pusher and updating the vote count\n\nTo work with Pusher on the client side, we need to include its JavaScript library. We'll do so at the bottom of `index.html`:\n\n```\n\u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\nThen, initialising Pusher with our app credentials:\n\n```\nconst pusher = new Pusher('YOUR_APP_KEY', {\n  cluster: 'eu',\n  encrypted: true\n});\n```\n\n\u003e **Note**: Don't forget to replace 'YOUR_APP_KEY' with its actual value\n\nNext, we will subscribe to the `counter` public channel, which is the same channel we publish to on our server-side, and listen for `vote` events:\n\n```\nconst channel = pusher.subscribe('counter');\n\nchannel.bind('vote', data =\u003e {\n  let elem = document.querySelector(`#vote-${data.item}`),\n      votes = parseInt(elem.innerText);\n  elem.innerText = votes + 1;\n});\n```\n\n\u003e **Tip**: You can also do `Pusher.logToConsole = true;` to debug locally\n\nIn the above code, we also defined a callback function, which accepts the data broadcast through Pusher as its parameter. We used this data to update the DOM with the new values of the vote counts.\n\nFinally, we define an event listener for `click` events on our `vote` buttons. We also define a `voteItem()` function which will be fired whenever the buttons are clicked.\n\n```\nconst voteButtons = document.getElementsByClassName(\"vote-button\");\n\nfunction voteItem() { \n  let vote_id = this.getAttribute(\"data-vote\");\n\n  // Make Ajax call with JavaScript Fetch API\n  fetch(`/vote?item_id=${vote_id}`)\n      .catch( e =\u003e { console.log(e); });\n}\n\n// IIFE - Executes on page load\n(function() {\n  for (var i = 0; i \u003c voteButtons.length; i++) {\n    voteButtons[i].addEventListener('click', voteItem);\n  }\n})();\n```\n\n\u003e **Note**: We make use of the JavaScript [Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) for making an Ajax request. It is promise-based, and more powerful than the regular XMLHttpRequest, although a Polyfill might be needed for older browsers.\n\nThe final `index.html` file will look like this:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/6.3.1/css/foundation.min.css\"\u003e\n  \u003ctitle\u003eJavaScript Decides\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003cdiv class=\"container text-center\"\u003e\n    \u003ch3 class=\"title\"\u003e\n      Pusher Real-time Vote Counter.\n      \u003ch5 class=\"subheader\"\u003eJavaScript Decides\u003c/h5\u003e\n    \u003c/h3\u003e\n\n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-1\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"1\"\u003eVote for me\u003c/button\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"columns medium-6\"\u003e\n        \u003cdiv class=\"stat\" id=\"vote-2\"\u003e0\u003c/div\u003e\n        \u003cp class=\"subheader\"\u003e\u003csmall\u003enumber of votes\u003c/small\u003e\u003c/p\u003e\n        \u003cbutton class=\"button vote-button\" data-vote=\"2\"\u003eNah, Vote for me\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003chr\u003e\n  \u003c/div\u003e\n\n  \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n  \u003cscript\u003e\n    const pusher = new Pusher('YOUR_APP_KEY', {\n      cluster: 'eu',\n      encrypted: true\n    });\n\n    const channel = pusher.subscribe('counter');\n\n    channel.bind('vote', data =\u003e {\n      let elem = document.querySelector(`#vote-${data.item}`),\n          votes = parseInt(elem.innerText);\n      elem.innerText = votes + 1;\n    });\n\n    const voteButtons = document.getElementsByClassName(\"vote-button\");\n\n    function voteItem() { \n      let vote_id = this.getAttribute(\"data-vote\");\n\n      // Make Ajax call with JavaScript Fetch API\n      fetch(`/vote?item_id=${vote_id}`)\n          .catch( e =\u003e { console.log(e); });\n    }\n\n    // IIFE - Executes on page load\n    (function() {\n      for (var i = 0; i \u003c voteButtons.length; i++) {\n        voteButtons[i].addEventListener('click', voteItem);\n      }\n    })();\n  \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```\n\nAnd that's it, we have a functional realtime vote counter!\n\nTo run the app:\n\n```\nnode server.js\n```\n\nYou can also get [nodemon](https://github.com/remy/nodemon), so you can have automatic reloads on changes to your file. So instead, you could do: `nodemon server.js`.\n\n## Demo\n\nHere is what the final app looks like:\n\n![counter-javascript-demo](//images.contentful.com/1es3ne0caaid/6X4UP3L99mWEAogys46OYG/72ad23b0bab190026ab3b6839db45ba1/counter-javascript-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to start a basic JavaScript project, and give it realtime functionality using Pusher. We have also learned about Public channels, and how we can trigger events on these channels on the server-side, and listen for them on the client-side.\n\nThere are a lot of possibilities, with Pusher providing realtime functionality for our applications, especially in the creation of dashboard components. In the same way as a counter was created, we can also create [tables](https://blog.pusher.com/build-a-realtime-table-using-laravel-and-pusher/), [charts](https://blog.pusher.com/build-realtime-chart-using-laravel-pusher/), and so on.\n\nPusher's presence channels can also be used to implement a view counter, whenever a user visits your app.","metaTitle":"Build a realtime counter using JavaScript","metaDescription":"Start a basic JavaScript project creating a website vore counter with realtime functionality using Pusher. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3MZF3BUhVSO84KeKM2I80i","type":"Entry","createdAt":"2018-02-22T15:02:42.079Z","updatedAt":"2018-02-28T14:51:52.953Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime chart using Laravel","url":"realtime-chart-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55LOucxD5Ycm4oGSGa0A2O","type":"Entry","createdAt":"2018-02-15T15:02:22.618Z","updatedAt":"2018-02-15T15:02:22.618Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Viraj Khatavkar","url":"viraj-khatavkar","email":"viraj@virajkhatavkar.com","twitter":"https://twitter.com/virajkhatavkar","github":"https://github.com/viraj-khatavkar","guestWriter":true}}],"projectRepo":"https://github.com/viraj-khatavkar/realtime-chart-laravel-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-04-12","description":"Build a realtime bar chart which will show the current active users without reloading the page using Laravel and Vue.js.","prerequisite":"A basic understanding of Laravel and Vue.js is needed to follow this tutorial.","content":"In this tutorial, we will build a realtime chart which will show the current active users, represented by a bar chart, without reloading the page. This is just a demo example to showcase the functionality of creating dynamic charts in realtime. You can extend this to create numerous reports in realtime for your application.\n\nToday, we will create a realtime chart system using [Laravel](https://laravel.com/) and [Pusher](https://pusher.com/). With the release of [Echo](https://laravel.com/docs/5.4/broadcasting), Laravel has provided an out of the box solution for implementing realtime data synchronisation using event broadcasting. It is simple and we can get started in a matter of minutes.\n\nA basic understanding of Laravel and Vue is needed to follow this tutorial.\n\n## Setup an app on Pusher\n\nWe need to [sign up on Pusher](https://pusher.com/signup) and create a new app:\n\n![realtime-chart-laravel-create-app](//images.contentful.com/1es3ne0caaid/2UyNbclA2s2e6w2keyCayi/c7839912a74d99c62d3fe835cf571477/realtime-chart-laravel-create-app.png)\n\n## Install Laravel, Pusher SDK and Echo\n\nFirst, we will grab a fresh copy of Laravel:\n\n```\nlaravel new realtime-chart-laravel-pusher\n```\n\nThis will install the latest version of the Laravel framework and download the necessary dependencies. Next, we will install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php) using [Composer](https://getcomposer.org/download/):\n\n```\ncomposer require pusher/pusher-php-server\n```\n\nNext, we will install the JavaScript dependencies:\n\n```\nnpm install\n```\n\nNow, we need to install the Javascript libraries necessary for realtime event broadcasting and displaying charts: Laravel Echo, chart.js and Pusher JS\n\n```\nnpm install --save laravel-echo pusher-js chart.js\n```\n\nWe will require some form of user authentication mechanism to demonstrate the functionality. Let us use the default authentication scaffolding provided by Laravel:\n\n```\nphp artisan make:auth\n```\n\n## Configuration\n\nFirst, we need to set the `APP_ID`, `APP_KEY`, `APP_SECRET` and `APP_CLUSTER` in the environment file. We can get these details in our Pusher [app dashboard](https://dashboard.pusher.com/):\n\n``` \n## .env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_APP_KEY=your-pusher-app-key\nPUSHER_APP_SECRET=your-pusher-app-secret\nPUSHER_APP_CLUSTER=your-pusher-app-cluster\n```\n\nNext, we need to create a fresh Echo instance in our applications's JavaScript. We can do so at the bottom of our `resources/assets/js/bootstrap.js` file:\n\n```\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: 'your-pusher-app-key',\n    cluster: 'ap2',\n    encrypted: true\n});\n```\n\n## Our application\n\nThe core feature of our app is the number of active users shown as a realtime bar chart. Whenever a user joins or leaves this page, the graph for online users will be automatically updated.\n\n## Creating a chart\n\nWe will create a bar chart with hard coded default values. Later, we will retrieve these values in realtime and update the chart accordingly.\n\nTo create a chart, we need to first instantiate the `Chart` class. Let us first grab the element or context and then create a chart instance with the default datasets:\n\n```\n\u003ccanvas id=\"myChart\" height=\"100\"\u003e\u003c/canvas\u003e\n```\n\n```\nlet ctx = document.getElementById(\"myChart\");\n\nlet myChart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n        labels: ['Online'],\n        datasets: [{\n            label: '# of Users',\n            data: [3],\n            borderWidth: 1\n        }]\n    }\n});\n```\nBelow is the screenshot for how the graph would look like:\n\n![realtime-chart-laravel-example](//images.contentful.com/1es3ne0caaid/2OK9M7MAfSES6wCGo0ouWI/ee3dbec18666285ced5ad37783dcca65/realtime-chart-laravel-example.png)\n\n## Mapping realtime values for online users\n\nAs you can see in the above code sample, we are populating the values through `data` property in the `datasets` array. For the sake of demonstration we have hard coded the values. Let us now map it to the realtime values.\n\nFirst we will create a property in our component to reflect the count of registered and online users. Initially, we will set it to the default values:\n\n```\ndata() {\n    return {\n        count: 0\n    }\n},\n```\nLet us now create a method to draw our chart using the values specified above.\n\n```\ndrawChart() {\n    let ctx = document.getElementById(\"myChart\");\n    let myChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: ['Online'],\n            datasets: [{\n                label: '# of Users',\n                data: [this.count],\n                borderWidth: 1\n            }]\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero:true\n                    }\n                }]\n            }\n        }\n    });\n}\n```\n\nNext, we need to update the above count in realtime whenever a new user joins the page or some user leaves the page.\n\nWe'll implement that with Echo and it is super simple. Let us go and fill out our `update` method in the `Example` Vue component.\n\n```\nupdate() {\n    Echo.join('chart')\n        .here((users) =\u003e {\n            this.count = users.length;\n            this.drawChart();\n        })\n        .joining((user) =\u003e {\n            this.count++;\n            this.drawChart();\n        })\n        .leaving((user) =\u003e {\n            this.count--;\n            this.drawChart();\n        });\n}\n```\n\n`join` is used when we want to join a presence channel and that is used to tell us who else is on the page. Presence channels are automatically private channels. We do need to authenticate them.\n\n`here` gives us a list of users that are also present on the same page.\n\n`joining` will be executed whenever a new user joins the channel or page in the above scenario.\n\n`leaving` will be executed whenever a user leaves the channel.\n\n### Authorization\n\nEvery presence channel is a private channel. Laravel Echo will automatically call the specified authentication route. However, we still need to write the authentication logic which will actually authorize the user to listen to a particular channel.\n\nAuthorization logic is written in the `routes/channels.php`. The authorization logic for our `chart` channel is:\n\n```\nBroadcast::channel('chart', function ($user) {\n    return [\n        'name' =\u003e $user-\u003ename\n    ];\n});\n```\nWe are not going to return `true` or `false`. If the user is authenticated to listen on this presence channel we are going to return an array of data that we want returned to that callback in the `update` method.\n\nYou can write the authentication logic as required for your application in the above callback and return null if authorization fails.\n\n## Vue Component\n\nThat's it! Now, whenever a user joins or leaves the page, it will be updated in the chart in realtime.\n\nBelow is our Example component written using `Vue.js`\n\n```\n\u003ctemplate\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-8 col-md-offset-2\"\u003e\n                \u003cdiv class=\"panel panel-default\"\u003e\n                    \u003cdiv class=\"panel-heading\"\u003eExample Component\u003c/div\u003e\n\n                    \u003cdiv class=\"panel-body\"\u003e\n                        \u003ccanvas id=\"myChart\" height=\"100\"\u003e\u003c/canvas\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n    import Chart from 'chart.js'\n\n    export default {\n        data() {\n            return {\n                count: 0,\n                labels: ['Online']\n            }\n        },\n        mounted() {\n            this.update();\n            this.drawChart();\n        },\n        methods: {\n            drawChart() {\n                let ctx = document.getElementById(\"myChart\");\n                let myChart = new Chart(ctx, {\n                    type: 'bar',\n                    data: {\n                        labels: this.labels,\n                        datasets: [{\n                            label: '# of Users',\n                            data: [this.count],\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero:true\n                                }\n                            }]\n                        }\n                    }\n                });\n            },\n            update() {\n                Echo.join('chart')\n                    .here((users) =\u003e {\n                        this.count = users.length;\n                        this.drawChart();\n                    })\n                    .joining((user) =\u003e {\n                        this.count++;\n                        this.drawChart();\n                    })\n                    .leaving((user) =\u003e {\n                        this.count--;\n                        this.drawChart();\n                    });\n            }\n        }\n    }\n\u003c/script\u003e\n```\nBelow is the quick demonstration of our application:\n\n![realtime-chart-laravel-demo](//images.contentful.com/1es3ne0caaid/47Njn2hz1uYmEK06sUcIiK/8ca2cfe072c2aa3f99c10d7b3061af1d/realtime-chart-laravel-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a realtime chart using Laravel and Pusher. We have covered the configuration options necessary to get started, and the example above should help you fill in the gaps and give an overview of some of the other configuration options available to you.","metaTitle":"Build a realtime chart using Laravel","metaDescription":"In this tutorial, learn how you can build a live bar chart using Laravel and Vue.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2aVpvhP8UwiCiEUK8WcuuI","type":"Entry","createdAt":"2018-02-22T15:02:46.282Z","updatedAt":"2018-02-28T14:17:36.772Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a simple social network with JavaScript","url":"social-network-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"wQhwNciAKWOW8SI2MSKww","type":"Entry","createdAt":"2018-02-13T10:47:12.980Z","updatedAt":"2018-02-14T10:09:05.816Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Rahat Khanna","url":"rahat-khanna","email":"rahat.khanna@yahoo.co.in","twitter":"https://twitter.com/mappmechanic","github":"https://github.com/mappmechanic","guestWriter":true}}],"projectRepo":"https://github.com/mappmechanic/whats-up-realtime-status-update","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2017-04-10","description":"Build an app similar to a group chat room where you can see who's online and their latest status update in realtime. ","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"In this blog post, we will build a simple social network with realtime features and a list of all members who are online.\n\nWe will be using Node.js as the application server, Vanilla JavaScript in the front end and Pusher for realtime communication between our server and front end.\n\nWe will build an app which will be like your friends list or a common chat room where you can see who's online and their latest status update in realtime. In the blog post, we will learn about Pusher's presence channel and how to know about the online members to this channel.\n\n![social-network-javascript-demo](//images.contentful.com/1es3ne0caaid/4ZLuC0dzk44Cw8Q04a60Ya/bf8e90962701acda5f785ee00663cefd/social-network-javascript-demo.gif)\n\nWe will be building the following components during this blog post:\n\n- Node.js server using ExpressJS framework:\n    - `/register` API - In order to register/login a new user to our channel and server by creating their session and saving their info\n    - `/isLoggedIn` API - To check if a user is already logged in or not in case of refreshing the browser\n    - `/usersystem/auth` API - Auth validation done by Pusher after registering it with our app and on subscribing to a presence or private channel\n    - `/logout` API - To logout the user and remove the session\n \n- Frontend app using Vanilla JavaScript:\n    - Register/Login Form - To register/login a new user by filling in their username and initial status\n    - Members List - To see everyone who is online and their updated status\n    - Update Status - To click on the existing status and update it on blur of the status text edit control\n \n## Signing up with Pusher\n\nYou can create a free account in Pusher [here](http://pusher.com/signup). After you signup and login for the first time, you will be asked to create a new app as seen in the picture below. You will have to fill in some information about your project and also the front end library or backend language you will be building your app with.\n\n![social-network-javascript-create-app](//images.contentful.com/1es3ne0caaid/qtV3h9hXlmiwOccWKekOw/bf8e90962701acda5f785ee00663cefd/social-network-javascript-create-app.png)\n\nFor this particular blog post, we will be selecting Vanilla JavaScript for the frontend and Node.js for the backend as seen in the picture above. This will just show you a set of starter sample codes for these selections, but you can use any integration kit later on with this app.\n\n![social-network-javascript-dashboard](//images.contentful.com/1es3ne0caaid/3N1u1ermzSuOiGWcECeseq/bf8e90962701acda5f785ee00663cefd/social-network-javascript-dashboard.png)\n\n\n## Node.js Server\n\nNode.js should be installed in the system as a prerequisite to this. Now let us begin building the Node.js server and all the required APIs using Express. Initialise a new node project by the following command\n\n```\nnpm init\n```\n\n### Installing dependencies\n\nWe will be installing the required dependencies like Express, express-session, Pusher, body-parser, cookie-parser by the following command:\n\n```\nnpm install express express-session body-parser cookie-parser --save\n```\n\n### Foundation server\n\nWe will now create the basic foundation for Node Server and also enable sessions in that using express-session module.\n\n```\nvar express = require('express');\nvar path = require('path');\nvar bodyParser = require('body-parser');\nvar expressSession = require('express-session');\nvar cookieParser = require('cookie-parser');\n\nvar app = express();\n\n// must use cookieParser before expressSession\napp.use(cookieParser());\n\napp.use(expressSession({\n  secret:'\u003csome-secret-token-here\u003e',\n  resave: true, \n  saveUninitialized: true\n}));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Error Handler for 404 Pages\napp.use(function(req, res, next) {\n    var error404 = new Error('Route Not Found');\n    error404.status = 404;\n    next(error404);\n});\n\nmodule.exports = app;\n\napp.listen(9000, function(){\n  console.log('Example app listening on port 9000!')\n});\n```\nIn the above code, we have created a basic Express server and using the method `.use` we have enabled cookie-parser, body-parser and a static file serving from `public` folder. We have also enabled sessions using `express-session` module. This will enable us to save user information in the appropriate request session for the user.\n\n### Adding Pusher\n\nPusher has an open source NPM module for Node.js integrations which we will be using. It provides a set of utility methods to integrate with Pusher APIs using a unique appId, key and a secret. We will first install the Pusher `npm` module using the following command:\n\n```\nnpm install pusher --save\n```\nNow, we can use 'require' to get the Pusher module and to create a new instance passing an options object with important keys to initialise our integration. For this blog post, I have put random keys; you will have to obtain it for your app from the Pusher dashboard.\n\n```\nvar Pusher = require('pusher');\n\nvar pusher = new Pusher({\n  appId: '30XXX64',\n  key: '82XXXXXXXXXXXXXXXXXb5',\n  secret: '7bXXXXXXXXXXXXXXXX9e',\n  encrypted: true\n});\n\nvar app = express();\n...\n```\n\nYou will have to replace the `appId`, `key` and a `secret` with values specific to your own app. After this, we will write code for a new API which will be used to create a new comment.\n\n### Register/Login API\n\nNow, we will develop the first API route of our application through which a new user can register/login itself and make itself available on our app.\n\n```\napp.post('/register', function(req, res){\n  console.log(req.body);\n  if(req.body.username \u0026\u0026 req.body.status){\n    var newMember = {\n      username: req.body.username,\n      status: req.body.status\n    }\n    req.session.user = newMember;\n    res.json({  \n      success: true,\n      error: false\n    });\n  }else{\n    res.json({  \n      success: false,\n      error: true,\n      message: 'Incomplete information: username and status are required'\n    });\n  }\n});\n```\n\nIn the above code, we have exposed a POST API call on the route `/register` which would expect username and status parameters to be passed in the request body. We will be saving this user info in the request session.\n\n### User system auth API\n\nIn order to enable any client subscribing to Pusher Private and Presence channels, we need to implement an auth API which would authenticate the user request by calling Pusher.authenticate method at the server side. Add the following code in the server in order to fulfil this condition:\n\n```\napp.post('/usersystem/auth', function(req, res) {\n  var socketId = req.body.socket_id;\n  var channel = req.body.channel_name;\n  var currentMember = req.session.user;\n  var presenceData = {\n    user_id: currentMember.username,\n    user_info: {\n      status: currentMember.status,\n    }\n  };\n  var auth = pusher.authenticate(socketId, channel, presenceData);\n  res.send(auth);\n});\n```\n\nWe need to provide the specific route in the initialisation of Pusher Client side library which we will see later in this blog post. The Pusher client library will automatically call this route and pass in the channel_name and socket_id properties. We will simultaneously get the user information from the user session object and pass it as presenceData to the Pusher.authenticate method call.\n\n### IsLoggedIn and Logout API\n\nIf the user refreshes the browser, the client side app should detect if the user is already registered or not. We will implement an **isLoggedIn** API route for this. Also, we need a **logout** route to enable any user to logout from the app.\n\n```\napp.get('/isLoggedIn', function(req,res){\n  if(req.session.user){\n    res.send({ \n      authenticated: true \n    });\n  }else{\n    res.send({ authenticated: false });\n  }\n});\n\napp.get('/logout', function(req,res){\n  if(req.session.user){\n    req.session.user = null;\n  }\n  res.redirect('/');\n});\n```\n## Frontend app using Vanilla JavaScript\n\nWe will be developing the front end app now to register a new user with an initial status, see the members who are online and their statuses. We will also build the feature for the logged in user to update their users and all other users will see the updated status in realtime.\n\n### Step 1: Create a folder named public and create an index.html\n\nWe have already written code in our `server.js` to serve static content from `public` folder, so we will write all our front end code in this folder.\n\nPlease create a new folder `public` and also create an empty `index.html` for now.\n\n### Step 2: Add boilerplate code to our index.html\n\nWe will be adding some basic boilerplate code to set up the base structure for our web app like Header, Sections where registration form and the members list can be placed.\n\n```\n\u003c!DOCTYPE\u003e\n\u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eWhats Up ! Know what other's are up to in Realtime !\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://unpkg.com/purecss@0.6.2/build/pure-min.css\" integrity=\"sha384-UQiGfs9ICog+LwheBSRCt1o5cbyKIHbwjWscjemyBMT9YCUMZffs6UqUTd0hObXD\" crossorigin=\"anonymous\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway:200\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cheader\u003e\n            \u003cdiv class=\"logo\"\u003e\n                \u003cimg src=\"./assets/pusher-logo.png\" /\u003e\n            \u003c/div\u003e\n            \u003cdiv id=\"logout\" class=\"logout\"\u003e\n               \u003ca href=\"/logout\"\u003eLogout\u003c/a\u003e\n            \u003c/div\u003e\n        \u003c/header\u003e\n        \u003csection class=\"subheader\"\u003e\n            \u003cimg class=\"whatsup-logo\" src=\"./assets/whatsup.png\" /\u003e\n            \u003ch2\u003eWhats Up ! Know what other's are up to in Realtime !\u003c/h2\u003e\n        \u003c/section\u003e\n        \u003csection\u003e\n           \u003cdiv id=\"loader\" class=\"loader\"\u003e\n           \u003c/div\u003e\n           \u003cscript id=\"member-template\" type=\"text/x-template\"\u003e\n            \u003c/script\u003e\n           \u003cdiv id=\"me\" class=\"me\"\u003e\n           \u003c/div\u003e\n           \u003cdiv id=\"membersList\" class=\"members-list\"\u003e\n           \u003c/div\u003e\n           \u003cdiv id=\"signup-form\" class=\"tab-content\"\u003e\n                \u003cdiv class=\"header\"\u003e\n                    \u003cdiv\u003e\u003cimg src=\"./assets/comments.png\"\u003e\u003c/div\u003e\n                    \u003cdiv class=\"text\"\u003eFirst Time Sign Up !\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cform class=\"pure-form\" id=\"user-form\"\u003e\n                    \u003cdiv class=\"signup-form\"\u003e\n                        \u003cdiv class=\"left-side\"\u003e\n                            \u003cdiv class=\"row\"\u003e\n                                \u003cinput type=\"text\" required placeholder=\"enter a username or displayname\" id=\"display_name\"\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"row\"\u003e\n                                \u003ctextarea placeholder=\"enter initial status text\" required id=\"initial_status\" rows=\"3\"\u003e\u003c/textarea\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"right-side\"\u003e\n                            \u003cbutton \n                                type=\"submit\" \n                                class=\"button-secondary pure-button\"\u003eSignup/Login\u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"./app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n\u003c/html\u003e\n```\nIn the above boilerplate code, we have referenced our main Javascript file `app.js` and the Pusher client side JS library. We also have a script tag where we will place the template for a member row in the member list. Also, we have two empty div tags with ids me and membersList to contain the logged in member name and info, as well as the list of all other members with their statuses.\n\n### Step 3: Style.css\n\nImportant to note that we will be showing the signup form for the first time and the MembersList and Logout button will be hidden by default initially. Please create a new file called `style.css` and add the following css to it:\n\n```\nbody{\n    margin:0;\n    padding:0;\n    overflow: hidden;\n    font-family: Raleway;\n}\n\nheader{\n    background: #2b303b;\n    height: 50px;\n    width:100%;\n    display: flex;\n    color:#fff;\n}\n\n\n.loader,\n.loader:after {\n  border-radius: 50%;\n  width: 10em;\n  height: 10em;\n}\n.loader {\n  margin: 60px auto;\n  font-size: 10px;\n  position: relative;\n  text-indent: -9999em;\n  border-top: 1.1em solid rgba(82,0,115, 0.2);\n  border-right: 1.1em solid rgba(82,0,115, 0.2);\n  border-bottom: 1.1em solid rgba(82,0,115, 0.2);\n  border-left: 1.1em solid #520073;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation: load8 1.1s infinite linear;\n  animation: load8 1.1s infinite linear;\n}\n@-webkit-keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n@keyframes load8 {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n\n.subheader{\n    display: flex;\n    align-items: center;\n    margin: 0px;\n}\n\n.whatsup-logo{\n    height:60px;\n    border-radius: 8px;\n    flex:0 60px;\n    margin-right: 15px;\n}\n\n.logout{\n    flex:1;\n    justify-content: flex-end;\n    padding:15px;\n    display: none;\n}\n\n.logout a{\n    color:#fff;\n    text-decoration: none;\n}\n\n#signup-form{\n    display: none;\n}\n\ninput, textarea{\n  width:100%;\n}\n\n\nsection{\n    padding: 0px 15px;\n}\n\n.logo img{\n    height: 35px;\n    padding: 6px;\n    margin-left: 20px;\n}\n\n#updateStatus{\n    display: none;\n}\n\n.members-list{\n    display: none;\n    flex-direction: column;\n}\n\n.me {\n  display: none;\n}\n\n```\nPlease try to open the URL `http://localhost:9000` in your browser and the application will load with the basic register or login form with username and status. The output will look like the screenshot below:\n\n![social-network-javascript-signup](//images.contentful.com/1es3ne0caaid/59rMGXGhbWcYiKOUyoECk2/bf8e90962701acda5f785ee00663cefd/social-network-javascript-signup.png)\n\n### Step 4: Add app.js basic code\n\nNow we will add our Javascript code to have basic utility elements inside a self invoking function to create a private scope for our app variables. We do not want to pollute JS global scope.\n\n```\n// Using IIFE for Implementing Module Pattern to keep the Local Space for the JS Variables\n(function() {\n    // Enable pusher logging - don't include this in production\n    Pusher.logToConsole = true;\n\n    var serverUrl = \"/\",\n        members = [],\n        pusher = new Pusher('73xxxxxxxxxxxxxxxdb', {\n          authEndpoint: '/usersystem/auth',\n          encrypted: true\n        }),\n        channel,\n        userForm = document.getElementById(\"user-form\"),\n        memberTemplateStr = document.getElementById('member-template').innerHTML;\n\n    function showEle(elementId){\n      document.getElementById(elementId).style.display = 'flex';\n    }\n\n    function hideEle(elementId){\n      document.getElementById(elementId).style.display = 'none';\n    }\n\n    function ajax(url, method, payload, successCallback){\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url, true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState != 4 || xhr.status != 200) return;\n        successCallback(xhr.responseText);\n      };\n      xhr.send(JSON.stringify(payload));\n    }\n\n    ajax(serverUrl+\"isLoggedIn\",\"GET\",{},isLoginChecked);\n\n    function isLoginChecked(response){\n      var responseObj = JSON.parse(response);\n      if(responseObj.authenticated){\n        channel = pusher.subscribe('presence-whatsup-members');\n        bindChannelEvents(channel);\n      }\n      updateUserViewState(responseObj.authenticated);\n    }\n\n    function updateUserViewState(isLoggedIn){\n      document.getElementById(\"loader\").style.display = \"none\";\n      if(isLoggedIn){\n        document.getElementById(\"logout\").style.display = \"flex\";\n        document.getElementById(\"signup-form\").style.display = \"none\";\n      }else{\n        document.getElementById(\"logout\").style.display = \"none\";\n        document.getElementById(\"signup-form\").style.display = \"block\";\n      }\n    }\n\n    function showLoader(){\n        document.getElementById(\"loader\").style.display = \"block\";\n        document.getElementById(\"logout\").style.display = \"none\";\n        document.getElementById(\"signup-form\").style.display = \"none\";\n    }\n\n    // Adding a new Member Form Submit Event\n    userForm.addEventListener(\"submit\", addNewMember);\n\n\n    function addNewMember(event){\n      event.preventDefault();\n      var newMember = {\n        \"username\": document.getElementById('display_name').value,\n        \"status\": document.getElementById('initial_status').value\n      }\n      showLoader();\n      ajax(serverUrl+\"register\",\"POST\",newMember, onMemberAddSuccess);\n    }\n\n    function onMemberAddSuccess(response){\n        // On Success of registering a new member\n        console.log(\"Success: \" + response);\n        userForm.reset();\n        updateUserViewState(true);\n        // Subscribing to the 'presence-members' Channel\n        channel = pusher.subscribe('presence-whatsup-members');\n        bindChannelEvents(channel);\n    }\n})();\n```\nIn the above code, we have referenced all the important variables we will be requiring. We will also initialise the Pusher library using new Pusher and passing the api key as the first argument. The second argument contains an optional config object in which we will add the key `authEndpoint` with the custom node api route `/usersystem/auth` and also add the key `encrypted` setting it to value true.\n\nWe will create a couple of generic functions to show or hide an element passing its unique id. We have also added a common method named ajax to make ajax requests using XMLHttp object in Vanilla JavaScript.\n\nAt the load of the page we make an ajax request to check if the user is logged in or not. If the user is logged in, we will directly use the Pusher instance to subscribe the user to a presence channel named `presence-whatsup-members` , you can have this as the unique chat room or app location where you want to report/track the online members.\n\nWe have also written a method above to `addNewMember` using an ajax request to the `register` api route we have built in Node.js. We will be passing the name and initial status entered into the form.\n\nWe also have a method to update the user view state based on the logged in status. This method does nothing but updates the visibility of members list, logout button and signup form. We have used a `bindChannelEvents` method when the user is logged in which we will be implementing later in the blog post.\n\nPlease add the following css in `style.css` file to display the `me` element appropriately with the username and the status of the logged in user.\n\n```\n\n.me {\n    border:1px solid #aeaeae;\n    padding:10px;\n    margin:10px;\n    border-radius: 10px;\n}\n\n.me img{\n    height: 40px;\n    width: 40px;\n}\n\n.me .status{\n    padding:5px;\n    flex:1;\n}\n\n.me .status .username{\n    font-size:13px;\n    color: #aeaeae;\n    margin-bottom:5px;\n}\n\n.me .status .text{\n    font-size: 15px;\n    width:100%;\n    -webkit-transition: all 1s ease-in 5ms;\n    -moz-transition: all 1s ease-in 5ms;\n    transition: all 1s ease-in 5ms;\n}\n```\n### Step 5: Add code to render the members list and bindChannelEvents\n\nNow, after subscribing to the channel, we need to bind certain events so that we can know whenever a new member is added to the channel or removed from it. We will also bind to a custom event to know whenever someone updates their status.\n\nAdd the following code to the `app.js` file:\n\n``` language-javascript\n// Binding to Pusher Events on our 'presence-whatsup-members' Channel\n\n  function bindChannelEvents(channel){\n      channel.bind('client-status-update',statusUpdated);\n      var reRenderMembers = function(member){\n        renderMembers(channel.members);\n      }\n      channel.bind('pusher:subscription_succeeded', reRenderMembers);\n      channel.bind('pusher:member_added', reRenderMembers);\n      channel.bind('pusher:member_removed', reRenderMembers);\n    }\n\n\n```\nIn the above `bindChannelEvents` method, we use the `channel.bind` method to bind event handlers for 3 internal events - `pusher:subscription_succeeded`, `pusher:member_added`, `pusher:member_removed` and 1 custom event - `client-status-update`.\n\nNow we will add the JavaScript code to render the list of members. It is important to know that the object which i returned from the `.subscribe` method has a property called `members` which can be used to know the information about the logged in user referred by the key `me` and other members by key `members`. Add the following code to `app.js` file\n\n```\n\n// Render the list of members with updated data and also render the logged in user component\n\n    function renderMembers(channelMembers){\n      var members = channelMembers.members;\n      var membersListNode = document.createElement('div');\n      showEle('membersList');\n\n      Object.keys(members).map(function(currentMember){\n        if(currentMember !== channelMembers.me.id){\n          var currentMemberHtml = memberTemplateStr;\n          currentMemberHtml = currentMemberHtml.replace('{{username}}',currentMember);\n          currentMemberHtml = currentMemberHtml.replace('{{status}}',members[currentMember].status);\n          currentMemberHtml = currentMemberHtml.replace('{{time}}','');\n          var newMemberNode = document.createElement('div');\n          newMemberNode.classList.add('member');\n          newMemberNode.setAttribute(\"id\",\"user-\"+currentMember);\n          newMemberNode.innerHTML = currentMemberHtml;\n          membersListNode.appendChild(newMemberNode);\n        }\n      });\n      renderMe(channelMembers.me);\n      document.getElementById(\"membersList\").innerHTML = membersListNode.innerHTML;\n    }\n\n\n    function renderMe(myObj){\n      document.getElementById('myusername').innerHTML = myObj.id;\n      document.getElementById('mystatus').innerHTML = myObj.info.status;\n    }\n```\nWe have added the event handler for new member add/remove event to re-render the members list so that it remains updated with the online members only. In order to show the members list we need to add the following style into our file `style.css`.\n\n```\n\n.member{\n    display: flex;\n    border-bottom: 1px solid #aeaeae;\n    margin-bottom: 10px;\n    padding: 10px;\n}\n\n.member .user-icon{\n    flex:0 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.member .user-icon img{\n    width:50px;\n    height:50px;\n}\n\n.member .user-info{\n    padding:5px;\n    margin-left:10px;\n}\n\n.member .user-info .name{\n    font-weight: bold;\n    font-size: 16px;\n    padding-bottom:5px;\n}\n\n.member .user-info .status{\n    font-weight: normal;\n    font-size:13px;\n}\n\n.member .user-info .time{\n    font-weight: normal;\n    font-size:10px;\n    color:#aeaeae;\n}\n```\nNow we will write the code, to trigger a client event on our channel to notify all users about the status change of the logged in user. Add the following code to your `app.js` file.\n\n```\n // On Blur of editting my status update the status by sending Pusher event\n    document.getElementById('mystatus').addEventListener('blur',sendStatusUpdateReq);\n\n    function sendStatusUpdateReq(event){\n      var newStatus = document.getElementById('mystatus').innerHTML;\n      var username = document.getElementById('myusername').innerText;\n      channel.trigger(\"client-status-update\", {\n        username: username,\n        status: newStatus\n      });\n    }\n\n    // New Update Event Handler\n    // We will take the Comment Template, replace placeholders and append to commentsList\n    function statusUpdated(data){\n      var updatedMemberHtml = memberTemplateStr;\n          updatedMemberHtml = updatedMemberHtml.replace('{{username}}',data.username);\n          updatedMemberHtml = updatedMemberHtml.replace('{{status}}',data.status);\n          updatedMemberHtml = updatedMemberHtml.replace('{{time}}','just now');\n      document.getElementById(\"user-\"+data.username).style.color = '#1B8D98';    \n      document.getElementById(\"user-\"+data.username).innerHTML=updatedMemberHtml;\n      setTimeout(function(){\n        document.getElementById(\"user-\"+data.username).style.color = '#000';\n      },500);\n    }\n```\n***IMPORTANT***: When we run this code in our browsers, update the status and blur out of the status control, we will get an error in the JavaScript console for the Pusher library. To fix this, go to the console at Pusher.com website, go to settings and enable sending events from clients directly.\n\nWe can only send events from client sdirectly for Presence or Private channels - more information [here](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\n```\nPusher : Error : {\n  \"type\":\"WebSocketError\",\n  \"error\":{\n    \"type\":\"PusherError\",\n    \"data\":\n      {\n        \"code\":null,\n        \"message\":\"To send client events, you must enable this feature in the Settings page of your dashboard.\"\n      }\n   }\n}\n```\n\n## Conclusion\n\nWe have built an application which will display all the online members for a particular presence channel and their updates. If any of the online user updates their status, every user will be notified about the updated status.\n\nThis component or code can be used for developing a social networking section in most of the web apps these days. It is an important use case where the user needs to know about other available participants. For example: an online classroom app can see the other participants and the status can correspond to any question any participant wants to ask the presenter.\n\n![social-network-javascript-demo](//images.contentful.com/1es3ne0caaid/4ZLuC0dzk44Cw8Q04a60Ya/bf8e90962701acda5f785ee00663cefd/social-network-javascript-demo.gif)\n\nWe have just used Node.js and Vanilla JavaScript to implement the above functionality. You can use the JavaScript for frontend code with any popular framework like React or Angular.js and for the backend can also be Java or Ruby. Please refer to the Pusher docs for more information on this.","metaTitle":"Build a simple social network with JavaScript","metaDescription":"Build an app similar to a group chat room where you can see who's online and their latest status update in realtime using Vanilla JavaScript and Node.js"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6zUmONOPOoWsYw4iYUmo0M","type":"Entry","createdAt":"2018-02-22T15:02:43.786Z","updatedAt":"2018-02-28T14:53:17.774Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a collaborative note app using Laravel","url":"collaborative-note-app-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/laravel-notes","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-04-05","description":"Build a simple but productive realtime note app using Laravel and Vue.js.","prerequisite":"A basic understanding of Laravel and Vue.js is needed to follow this tutorial.","content":"In this tutorial, we'll build an online collaborative note app using Laravel and Pusher. We'll be using Vue.js as our JavaScript framework. The app is going to be basic but will demonstrate the necessary features of a collaborative application since that's the focus of this tutorial.\n\n## What we'll be building\n\nBefore we get our hands busy, let's go over what we'll be building. The app will be a simple note taking app that is accessible only to authenticated users. With the app, a user can create new note, edit the note and/or share the link to the note to other users for editing. In the case of editing a note, the app will be able to keep track of the users editing a particular note, show other users realtime edits that are being made on the note and lastly notify the other users when a user saves the note.\n\n![collaborative-note-app-laravel-demo](//images.contentful.com/1es3ne0caaid/3KYMVCUWzCgQsUsgcCQCaG/317dba49b93b6cc3296c4b5e1df4bda0/collaborative-note-app-laravel-demo.gif)\n\nLet's get started!\n\n## Setting up Laravel\n\nCreate a new Laravel project by opening your terminal and run the code below:\n\n```\nlaravel new laravel-notes\n```\n\nNext, we need to setup our new Laravel project. First, we need to register the `App\\Providers\\BroadcastServiceProvider`. Open `config/app.php` and uncomment `App\\Providers\\BroadcastServiceProvider` in the providers array.\n\nWe then need to tell Laravel that we are using the Pusher driver in the `.env` file:\n\n``` \n// .env\n\nBROADCAST_DRIVER=pusher\n```\n\nSince we specified we want to use Pusher as our broadcasting driver, we need to install the Pusher PHP SDK:\n\n```\ncomposer require pusher/pusher-php-server Setting Up Pusher\n```\n\n## Setting up Pusher\n\nIf you don’t have one already, create a free Pusher account [here](https://pusher.com/signup) then log in to your dashboard and create an app. Take note of your app credentials as we’ll be using them shortly. For the purpose of this tutorial, we'll be triggering some client events in our online collaborative note app.\n\nBy default, when you create a Pusher app, client events are not enabled. We have to enable this for our app. To enable client events in your Pusher app, select the app then click on the **App Settings** tab, then check the box next to **Enable client events**.\n\n![collaborative-note-app-laravel-enable-clients-events](//images.contentful.com/1es3ne0caaid/2mtofRWL0A0yiQiIMsQMmO/c943ac88c9b2eb36253bf341ed0373a3/collaborative-note-app-laravel-enable-clients-events.png)\n\nNow, let’s fill in our Pusher app credentials. Update the `.env` file to contain our Pusher app credentials:\n\n``` \n// .env\n\nPUSHER_APP_ID=xxxxxx\nPUSHER_APP_KEY=xxxxxxxxxxxxxxxxxxxx\nPUSHER_APP_SECRET=xxxxxxxxxxxxxxxxxxxx\n```\n\nRemember to replace the **xs** with your Pusher app credentials. You can find your app credentials under the Keys section on the overview tab in the Pusher Dashboard.\n\nAlso, remember to fill in the cluster of your Pusher app and other additional options.\n\n## Installing frontend dependencies\n\nFor this tutorial, we’ll be using Bootstrap, Vue and Axios, which have been setup for us by Laravel, though we still need to install each of the dependencies. To compile our CSS and JavaScript, we need to install Laravel Mix, which is a wrapper around Webpack. We can install these dependencies through NPM:\n\n```\nnpm install\n```\n\nWe also need to install Laravel Echo, which is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by Laravel and of course the Pusher JavaScript library:\n\n```\nnpm install --save laravel-echo pusher-js\n```\n\nOnce installed, we need to tell Laravel Echo to use Pusher. At the bottom of the `resources/assets/js/bootstrap.js` file, uncomment the Laravel Echo section and update the details with:\n\n```\n// resources/assets/js/bootstrap.js\n\nimport Echo from \"laravel-echo\"\n\nwindow.Echo = new Echo({\n    broadcaster: 'pusher',\n    key: xxxxxxxxxxxxxxxxxxxx,\n});\n```\n\nRemember to replace the **xs** with your Pusher app key.\n\n## Authenticating users\n\nAs mentioned earlier, our collaborative note app will be only accessible to authenticated users. So, we need an authentication system:\n\n```\nphp artisan make:auth\n```\n\nThis will create the necessary routes, views and controllers needed for an authentication system.\n\nBefore we go on to create users, we need to run the `users` migration that comes with a fresh installation of Laravel. But to do this, we first need to set up our database. Open the `.env` file and enter your database details:\n\n``` \n// .env\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel-notes\nDB_USERNAME=root\nDB_PASSWORD=\n```\n\nUpdate with your own database details. Now, we can run our migration:\n\n```\nphp artisan migrate\n```\n\n**NOTE:** There’s a bug in Laravel 5.4 if you’re running a version of MySQL older than 5.7.7 or MariaDB older than 10.2.2. This can be fixed by replacing the `boot()` of `app/Providers/AppServiceProvider.php` with:\n\n```\n// app/Providers/AppServiceProvider.php\n\n// remember to use\nIlluminate\\Support\\Facades\\Schema;\n\n/**\n * Bootstrap any application services.\n *\n * @return void\n */\npublic function boot()\n{\n  Schema::defaultStringLength(191);\n}\n```\n\n## Note model and migration\n\nCreate a `Note` model along with the migration file by running the command:\n\n```\nphp artisan make:model Note -m\n```\n\nOpen the `Note` model and add the code below to it:\n\n```\n/**\n * Fields that can not be mass assigned\n * \n * @var array\n */\nprotected $guarded = ['id'];\n\n/**\n * Get the route key for the model.\n *\n * @return string\n */\npublic function getRouteKeyName()\n{\n  return 'slug';\n}\n```\n\nInstead of manually specifying each field that can be mass assigned in the `$fillable` array, we simply use `$guarded` and add the `id` column as the field that can not be mass assigned, meaning every other field can be mass assigned. Laravel route model bind will by default use the `id` column on the model, but in this tutorial, we want to use the `slug` column instead, hence the `getRouteKeyName` method which will simply return the column we want to use for route model binding.\n\nWithin the `databases/migrations` directory, open the `notes` table migration that was created when we ran the command above and update the `up` method with:\n\n```\nSchema::create('notes', function (Blueprint $table) {\n  $table-\u003eincrements('id');\n  $table-\u003eunsignedInteger('user_id');\n  $table-\u003estring('title');\n  $table-\u003estring('slug')-\u003eunique();\n  $table-\u003etext('body');\n  $table-\u003etimestamps();\n});\n```\nRun the migration:\n\n```\nphp artisan migrate\n```\n\n## Defining app routes\n\nOpen `routes/web.php` and replace the routes with the code below:\n\n```\nAuth::routes();\n\nRoute::get('/', 'NotesController@index');\nRoute::get('create', 'NotesController@create');\nRoute::post('create', 'NotesController@store');\nRoute::get('edit/{note}', 'NotesController@edit');\nRoute::patch('edit/{note}', 'NotesController@update');\n```\n\nThe routes are straightforward: routes that will handle authentication, a homepage route to list all notes created a user, routes for creating a new note and lastly routes to update a specified note.\n\n**NOTE:** Since we have removed the `/home` route, you might want to update the `redirectTo` property of both `app/Http/Controllers/Auth/LoginController.php` and `app/Http/Controllers/Auth/RegisterController.php` to:\n\n```\nprotected $redirectTo = '/';\n```\n\n## NotesController\n\nLet’s create the controller which will handle the logic of our chat app. Create a `NotesController` with the command below:\n\n```\nphp artisan make:controller NotesController\n```\n\nOpen the new create `app/Http/Controllers/NotesController.php` file and add the following code to it:\n\n```\n// app/Http/Controllers/NotesController.php\n\nuse App\\Note;\n\npublic function __construct()\n{\n  $this-\u003emiddleware('auth');\n}\n\n/**\n * Display a listing of all notes.\n *\n * @return \\Illuminate\\Http\\Response\n */\npublic function index()\n{\n  $notes = Note::where('user_id', auth()-\u003euser()-\u003eid)\n                  -\u003eorderBy('updated_at', 'DESC')\n                  -\u003eget();\n\n  return view('notes.index', compact('notes'));\n}\n\n/**\n * Show the form for creating a new note.\n *\n * @return \\Illuminate\\Http\\Response\n */\npublic function create()\n{\n  return view('notes.create');\n}\n\n/**\n * Store a newly created note in database.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */\npublic function store(Request $request)\n{\n  $this-\u003evalidate($request, [\n    'title' =\u003e 'required',\n    'body'  =\u003e 'required'\n  ]);\n\n  $note = Note::create([\n    'user_id' =\u003e $request-\u003euser()-\u003eid,\n    'title'   =\u003e $request-\u003etitle,\n    'slug'    =\u003e str_slug($request-\u003etitle) . str_random(10),\n    'body'    =\u003e $request-\u003ebody\n  ]);\n\n  return redirect('/');\n}\n\n/**\n * Show the form for editing the specified note.\n *\n * @param  \\App\\Note  $note\n * @return \\Illuminate\\Http\\Response\n */\npublic function edit(Note $note)\n{\n  return view('notes.edit', compact('note'));\n}\n\n/**\n * Update the specified note.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @param  \\App\\Note  $note\n * @return \\Illuminate\\Http\\Response\n */\npublic function update(Request $request, Note $note)\n{\n  $note-\u003etitle = $request-\u003etitle;\n  $note-\u003ebody = $request-\u003ebody;\n\n  $note-\u003esave();\n\n  return 'Saved!';\n}\n```\n\nUsing the auth middleware in `NotesController`‘s `__contruct()` indicates that all the methods with the controller will only be accessible to authenticated users. The `index` method will fetch the notes created by the currently authenticated user and render a view with notes. The `create` method will display a form to create new note. The `store` method will do the actual persisting of the note to the database. Notice we're appending a random string to the slug so as to make it unique for each note. The `edit` method shows the form for editing a specified note. Lastly, the `update` method handles the actual update and persist to database.\n\n## Creating Our Note App Views\n\nWhen we ran `make:auth`, Laravel created a master layout called `app.blade.php` which we are going to leverage with some slight additions. So open `resources/view/layouts/app.blade.php` and update the left side of the navbar with:\n\n```\n\u003c!-- resources/view/layouts/app.blade.php --\u003e\n\n\u003c!-- Left Side Of Navbar --\u003e\n\u003cul class=\"nav navbar-nav\"\u003e\n  \u003cli\u003e\u003ca href=\"{{ url('create') }}\"\u003eCreate Note\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n```\n\nAll we did is add a link to create new note on the navbar.\n\n### Create new note view\n\nNow, let's create the view for creating a new note. Create a new directory named `notes` within the `views` directory. Within the newly created `notes` directory, create a new file named `create.blade.php` and paste the code below to it:\n\n```\n\u003c!-- resources/views/notes/create.blade.php --\u003e\n@extends('layouts.app')\n\n@section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-8 col-md-offset-2\"\u003e\n                \u003cdiv class=\"panel panel-default\"\u003e\n                    \u003cdiv class=\"panel-heading\"\u003eCreate new note\u003c/div\u003e\n                    \u003cdiv class=\"panel-body\"\u003e\n                        \u003cform action=\"{{ url('create') }}\" method=\"POST\" class=\"form\" role=\"form\"\u003e\n                            {{ csrf_field() }}\n\n                            \u003cdiv class=\"form-group{{ $errors-\u003ehas('title') ? ' has-error' : '' }}\"\u003e\n                                \u003cinput type=\"text\" class=\"form-control\" name=\"title\" value=\"{{ old('title') }}\" placeholder=\"Give your note a title\" required autofocus\u003e\n\n                                @if ($errors-\u003ehas('title'))\n                                    \u003cspan class=\"help-block\"\u003e\n                                        \u003cstrong\u003e{{ $errors-\u003efirst('title') }}\u003c/strong\u003e\n                                    \u003c/span\u003e\n                                @endif\n                            \u003c/div\u003e\n\n                            \u003cdiv class=\"form-group{{ $errors-\u003ehas('body') ? ' has-error' : '' }}\"\u003e\n                                \u003ctextarea class=\"form-control\" name=\"body\" rows=\"15\" placeholder=\"...and here goes your note body\" required\u003e{{ old('body') }}\u003c/textarea\u003e\n\n                                @if ($errors-\u003ehas('body'))\n                                    \u003cspan class=\"help-block\"\u003e\n                                        \u003cstrong\u003e{{ $errors-\u003efirst('body') }}\u003c/strong\u003e\n                                    \u003c/span\u003e\n                                @endif\n                            \u003c/div\u003e\n\n                            \u003cbutton class=\"btn btn-primary pull-right\"\u003eSave\u003c/button\u003e\n                        \u003c/form\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n@endsection\n```\n\nThis creates a form with two input fields (for title and body of the note respectively) and a save button.\n\n### List all notes view\n\nLet's give our users a way to see all the notes they have created. Within the `notes` directory, create a new file named `index.blade.php` and paste the code below into it:\n\n```\n\u003c!-- resources/views/notes/index.blade.php --\u003e\n\n@extends('layouts.app')\n\n@section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-8 col-md-offset-2\"\u003e\n                \u003cdiv class=\"panel panel-default\"\u003e\n                    \u003cdiv class=\"panel-heading\"\u003eMy notes\u003c/div\u003e\n                    \u003cdiv class=\"panel-body\"\u003e\n                        @if($notes-\u003eisEmpty())\n                            \u003cp\u003e\n                                You have not created any notes! \u003ca href=\"{{ url('create') }}\"\u003eCreate one\u003c/a\u003e now.\n                            \u003c/p\u003e\n                        @else\n                        \u003cul class=\"list-group\"\u003e\n                            @foreach($notes as $note)\n                                \u003cli class=\"list-group-item\"\u003e\n                                    \u003ca href=\"{{ url('edit', [$note-\u003eslug]) }}\"\u003e\n                                        {{ $note-\u003etitle }}\n                                    \u003c/a\u003e\n                                    \u003cspan class=\"pull-right\"\u003e{{ $note-\u003eupdated_at-\u003ediffForHumans() }}\u003c/span\u003e\n                                \u003c/li\u003e\n                            @endforeach\n                        \u003c/ul\u003e\n                        @endif\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n@endsection\n```\n\nThe simply displays a message if the user has not created any notes and a link to create a new note. Otherwise it will display all the notes created by the user in a list.\n\n### Edit note view\n\nLet's create the edit view which will allow users to edit a note. Within the `notes` directory, create a new file named `edit.blade.php` and paste the code below into it:\n\n```\n\u003c!-- resources/views/notes/edit.blade.php --\u003e\n\n@extends('layouts.app')\n\n@section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-8 col-md-offset-2\"\u003e\n                \u003cedit-note :note=\"{{ $note }}\"\u003e\u003c/edit-note\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n@endsection\n```\n\nYou will notice we're using a custom tag with the edit view, this is our view component which we'll create shortly.\n\nNow let's create a Vue component. Create a new file named `EditNote.vue` within `resources/assets/js/components` directory and paste the code below to it:\n\n```\n// resources/assets/js/components/EditNote.vue\n\n\u003ctemplate\u003e\n    \u003cdiv class=\"panel panel-default\"\u003e\n        \u003cdiv class=\"panel-heading\"\u003eEdit note\u003c/div\u003e\n        \u003cdiv class=\"panel-body\"\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003cinput type=\"text\" class=\"form-control\" v-model=\"title\" @keydown=\"editingNote\"\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"form-group\"\u003e\n                \u003ctextarea class=\"form-control\" rows=\"15\" v-model=\"body\" @keydown=\"editingNote\"\u003e\u003c/textarea\u003e\n            \u003c/div\u003e\n\n            \u003cbutton class=\"btn btn-primary pull-right\" @click=\"updateNote\"\u003eSave\u003c/button\u003e\n\n            \u003cp\u003e\n                Users editing this note:  \u003cspan class=\"badge\"\u003e{{ usersEditing.length }}\u003c/span\u003e\n                \u003cspan class=\"label label-success\" v-text=\"status\"\u003e\u003c/span\u003e\n            \u003c/p\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n    export default {\n        props: [\n            'note',\n        ],\n\n        data() {\n            return {\n                title: this.note.title,\n                body: this.note.body,\n                usersEditing: [],\n                status: ''\n            }\n        },\n\n        mounted() {\n            Echo.join(`note.${this.note.slug}`)\n                .here(users =\u003e {\n                    this.usersEditing = users;\n                })\n                .joining(user =\u003e {\n                    this.usersEditing.push(user);\n                })\n                .leaving(user =\u003e {\n                    this.usersEditing = this.usersEditing.filter(u =\u003e u != user);\n                })\n                .listenForWhisper('editing', (e) =\u003e {\n                    this.title = e.title;\n                    this.body = e.body;\n                })\n                .listenForWhisper('saved', (e) =\u003e {\n                    this.status = e.status;\n\n                    // clear is status after 1s\n                    setTimeout(() =\u003e {\n                        this.status = '';\n                    }, 1000);\n                });\n        },\n\n        methods: {\n            editingNote() {\n                let channel = Echo.join(`note.${this.note.slug}`);\n\n                // show changes after 1s\n                setTimeout(() =\u003e {\n                    channel.whisper('editing', {\n                        title: this.title,\n                        body: this.body\n                    });\n                }, 1000);\n            },\n\n            updateNote() {\n                let note = {\n                    title: this.title, \n                    body:  this.body\n                };\n\n                // persist to database\n                axios.patch(`/edit/${this.note.slug}`, note)\n                    .then(response =\u003e {\n                        // show saved status\n                        this.status = response.data;\n\n                        // clear is status after 1s\n                        setTimeout(() =\u003e {\n                            this.status = '';\n                        }, 1000);\n\n                        // show saved status to others\n                        Echo.join(`note.${this.note.slug}`)\n                            .whisper('saved', {\n                                status: response.data\n                            });\n                    });\n            }\n        }\n    }\n\u003c/script\u003e\n```\n\nLet's explain each piece of the code. Just like we have in the 'create new note' form, the template section has two input fields: title and body. Each field is bound to data (title and body respectively). Once a user starts typing (that is, a keydown event) in any of the input fields, the `editingNote` method will be triggered. Also, when the save button is clicked, the `updateNote` method will be triggered. (We'll take a close look at these methods soon) Lastly on the template section, we display the number of users who are currently editing the specified note and also display a status message once the save button is clicked.\n\nMoving to the script section of the component, first we define a property for the component called `note`. This `note` property will be the note that is currently being edited. Recall from the edit view where we used the `EditNote` component, you will notice we passed the whole note object as the component's `note` property. Next we define some data, the `title` and the `body` data are bound to respective input fields, the `usersEditing` will be an array of users editing the note and `status` will serve as an indicator for when a note's edits have been persisted to the database. The `mount` method will be triggered immediately the component is mounted, so it's a nice place to subscribe and listen to a channel. In our case, because we to be able to keep track of users editing a note, we'll make use of Pusher's presence channel.\n\nUsing Laravel Echo, we can subscribe to a presence channel using `Echo.join('channel-name')`. As you can see our channel name is `note.note-slug`. Once we subscribe to a presence channel, we can get all the users that are subscribed to the channel with the `here` method where we simply assign the subscribed users to the `usersEditing` array. When a user joins the channel, we simply add that user to the `usersEditing` array. Similarly, when a user leaves the channel, we remove that user from the `usersEditing` array. To display edits in realtime to other users, we listen for client events that are triggered as a user types using `listenForWhisper` and update the form data accordingly. In the same vein, we listen for when edits are saved and display the \"Saved!\" status to other users, then after a second we clear the status message.\n\nNext, we define the methods we talked about earlier. The `editingNote` method simply triggers a client event to all users currently subscribed to the channel after a specified time (1 second). The `updateNote` method on the other hand sends a `PATCH` request with the edits made to persist the edits to the database. Once the request is successful, we display the message saved status to the user that made the save and clear the status message after 1 second. Lastly, we trigger a client event so other users can also see the message saved status.\n\nSince we created a presence channel, only authenticated users will be able to subscribe and listen on the note channel. So, we need a way to authorize that the currently authenticated user can actually subscribe and listen on the channel. This can be done in the `routes/channels.php` file:\n\n```\n// routes/channels.php\n\nBroadcast::channel('note.{slug}', function ($user, $slug) {\n    return [\n        'id'   =\u003e $user-\u003eid,\n        'name' =\u003e $user-\u003ename\n    ];\n});\n```\n\nWe pass to the `channel()`, the name of our channel and a callback function that will return the details of the user if the current user is authenticated.\n\nNow let's register our new created component with our Vue instance, open `resources/assets/js/app.js` and add the line below just before Vue instantiation:\n\n```\n// resources/assets/js/app.js\n\nVue.component('edit-note', require('./components/EditNote.vue'));\n```\n\nBefore testing out our online collaborative note app, we need to compile the JavaScript files using Laravel Mix using:\n\n```\nnpm run dev\n```\nNow we can start our note app by running:\n\n```\nphp artisan serve\n```\n\n## Conclusion\n\nWe have seen how to build a simple online collaborative note app using Laravel and Pusher. Sure there are other ways of accomplishing what we did in this tutorial, but we have seen how to build a collaborative app with Pusher's realtime features. Also you will notice our note app doesn’t account for cases like concurrent editing of notes; to achieve that you'd want to look into [Operational Transformation](http://operational-transformation.github.io/).","metaTitle":"Build a collaborative note app using Laravel","metaDescription":"Discover how you can build a basic online collaborative note app using Laravel and Pusher."}}],"defaultValue":"Channels \u0026 JavaScript","queryType":"tag","pages":25,"route":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"23"}}},"page":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"23"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=23 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:39:14 GMT -->
</html>